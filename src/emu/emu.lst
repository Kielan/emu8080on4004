 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/04/15 23:22:03


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/04/14
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/04/15 23:22:03


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     ;;;----------------------------------------------------------------------------
(1)   79/       0 :                     ;;; LD_REG4P7_ACC
(1)   80/       0 :                     ;;; REG4(P7)=ACC
(1)   81/       0 :                     ;;;----------------------------------------------------------------------------
(1)   82/       0 :                     LD_REG4P7_ACC macro
(1)   83/       0 :                     	SRC P7
(1)   84/       0 :                     	WRM
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     ;;;----------------------------------------------------------------------------
(1)   88/       0 :                     ;;; LD_ACC_REG4P7
(1)   89/       0 :                     ;;; REG4(P7)=ACC
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     LD_ACC_REG4P7 macro
(1)   92/       0 :                     	SRC P7
(1)   93/       0 :                     	RDM
(1)   94/       0 :                     	endm
(1)   95/       0 :                     
(1)   96/       0 :                     ;;;----------------------------------------------------------------------------
(1)   97/       0 :                     ;;; Register Pair Operations
(1)   98/       0 :                     ;;;----------------------------------------------------------------------------
(1)   99/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)  100/       0 :                     		LD P1_HI
(1)  101/       0 :                     		XCH P0_HI
(1)  102/       0 :                     		LD P1_LO
(1)  103/       0 :                     		XCH P0_LO
(1)  104/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/04/15 23:22:03


(1)  105/       0 :                     ;;;----------------------------------------------------------------------------
(1)  106/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  107/       0 :                     		LD P3_HI
(1)  108/       0 :                     		XCH P0_HI
(1)  109/       0 :                     		LD P3_LO
(1)  110/       0 :                     		XCH P0_LO
(1)  111/       0 :                     		endm
(1)  112/       0 :                     ;;;----------------------------------------------------------------------------
(1)  113/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  114/       0 :                     		LD P0_HI
(1)  115/       0 :                     		XCH P1_HI
(1)  116/       0 :                     		LD P0_LO
(1)  117/       0 :                     		XCH P1_LO
(1)  118/       0 :                     		endm
(1)  119/       0 :                     ;;;----------------------------------------------------------------------------
(1)  120/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  121/       0 :                     		LD P2_HI
(1)  122/       0 :                     		XCH P1_HI
(1)  123/       0 :                     		LD P2_LO
(1)  124/       0 :                     		XCH P1_LO
(1)  125/       0 :                     		endm
(1)  126/       0 :                     ;;;----------------------------------------------------------------------------
(1)  127/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  128/       0 :                     		LD P3_HI
(1)  129/       0 :                     		XCH P1_HI
(1)  130/       0 :                     		LD P3_LO
(1)  131/       0 :                     		XCH P1_LO
(1)  132/       0 :                     		endm
(1)  133/       0 :                     ;;;----------------------------------------------------------------------------
(1)  134/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  135/       0 :                     		LD P1_HI
(1)  136/       0 :                     		XCH P2_HI
(1)  137/       0 :                     		LD P1_LO
(1)  138/       0 :                     		XCH P2_LO
(1)  139/       0 :                     		endm
(1)  140/       0 :                     ;;;----------------------------------------------------------------------------
(1)  141/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  142/       0 :                     		LD P3_HI
(1)  143/       0 :                     		XCH P2_HI
(1)  144/       0 :                     		LD P3_LO
(1)  145/       0 :                     		XCH P2_LO
(1)  146/       0 :                     		endm
(1)  147/       0 :                     ;;;----------------------------------------------------------------------------
(1)  148/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  149/       0 :                     		LD P0_HI
(1)  150/       0 :                     		XCH P3_HI
(1)  151/       0 :                     		LD P0_LO
(1)  152/       0 :                     		XCH P3_LO
(1)  153/       0 :                     		endm
(1)  154/       0 :                     ;;;----------------------------------------------------------------------------
(1)  155/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  156/       0 :                     		LD P1_HI
(1)  157/       0 :                     		XCH P3_HI
(1)  158/       0 :                     		LD P1_LO
(1)  159/       0 :                     		XCH P3_LO
(1)  160/       0 :                     		endm
(1)  161/       0 :                     ;;;----------------------------------------------------------------------------
(1)  162/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  163/       0 :                     		LD P2_HI
(1)  164/       0 :                     		XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/04/15 23:22:03


(1)  165/       0 :                     		LD P2_LO
(1)  166/       0 :                     		XCH P3_LO
(1)  167/       0 :                     		endm
(1)  168/       0 :                     ;;;----------------------------------------------------------------------------
(1)  169/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  170/       0 :                     		LD P0_HI
(1)  171/       0 :                     		XCH P6_HI
(1)  172/       0 :                     		LD P0_LO
(1)  173/       0 :                     		XCH P6_LO
(1)  174/       0 :                     		endm
(1)  175/       0 :                     ;;;----------------------------------------------------------------------------
(1)  176/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  177/       0 :                     		LD P1_HI
(1)  178/       0 :                     		XCH P6_HI
(1)  179/       0 :                     		LD P1_LO
(1)  180/       0 :                     		XCH P6_LO
(1)  181/       0 :                     		endm
(1)  182/       0 :                     ;;;----------------------------------------------------------------------------
(1)  183/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  184/       0 :                     		LD SP_HI
(1)  185/       0 :                     		XCH P6_HI
(1)  186/       0 :                     		LD SP_LO
(1)  187/       0 :                     		XCH P6_LO
(1)  188/       0 :                     		endm
(1)  189/       0 :                     ;;;----------------------------------------------------------------------------
(1)  190/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  191/       0 :                     		LD P0_HI
(1)  192/       0 :                     		XCH P7_HI
(1)  193/       0 :                     		LD P0_LO
(1)  194/       0 :                     		XCH P7_LO
(1)  195/       0 :                     		endm
(1)  196/       0 :                     ;;;----------------------------------------------------------------------------
(1)  197/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  198/       0 :                     		LD P1_HI
(1)  199/       0 :                     		XCH P7_HI
(1)  200/       0 :                     		LD P1_LO
(1)  201/       0 :                     		XCH P7_LO
(1)  202/       0 :                     		endm
(1)  203/       0 :                     ;;;----------------------------------------------------------------------------
(1)  204/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  205/       0 :                     		LD P2_HI
(1)  206/       0 :                     		XCH P7_HI
(1)  207/       0 :                     		LD P2_LO
(1)  208/       0 :                     		XCH P7_LO
(1)  209/       0 :                     		endm
(1)  210/       0 :                     ;;;----------------------------------------------------------------------------
(1)  211/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  212/       0 :                     		LD P3_HI
(1)  213/       0 :                     		XCH P7_HI
(1)  214/       0 :                     		LD P3_LO
(1)  215/       0 :                     		XCH P7_LO
(1)  216/       0 :                     		endm
(1)  217/       0 :                     ;;;----------------------------------------------------------------------------
(1)  218/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  219/       0 :                     		LD P1_HI
(1)  220/       0 :                     		XCH CNT_HI
(1)  221/       0 :                     		LD P1_LO
(1)  222/       0 :                     		XCH CNT_LO
(1)  223/       0 :                     		endm
(1)  224/       0 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/04/15 23:22:03


(1)  225/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  226/       0 :                     		LD CNT_HI
(1)  227/       0 :                     		XCH P1_HI
(1)  228/       0 :                     		LD CNT_LO
(1)  229/       0 :                     		XCH P1_LO
(1)  230/       0 :                     		endm
(1)  231/       0 :                     ;;;----------------------------------------------------------------------------
(1)  232/       0 :                     
(1)  233/       0 :                     ;;;----------------------------------------------------------------------------
(1)  234/       0 :                     ;;; For debug
(1)  235/       0 :                     ;;;----------------------------------------------------------------------------
(1)  236/       0 :                     ;;;----------------------------------------------------------------------------
(1)  237/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)  238/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)  239/       0 :                     ;;;----------------------------------------------------------------------------
(1)  240/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)  241/       0 :                     	JMS PUSH_P1
(1)  242/       0 :                     	FIM P1, ch
(1)  243/       0 :                     	JMS PUTCHAR_P1
(1)  244/       0 :                     	JMS POP_P1
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 : =0H                  USE_MON_CMD_DP = 0		; dump physical memory command 'DP'
      23/       0 : =0H                  USE_MON_CMD_T = 0		; memory test command 'T'
      24/       0 :                     
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 :                     ;;; Emulator compile configuration
      27/       0 :                     ;;;---------------------------------------------------------------------------
      28/       0 :                     ;; FLAG_P is not implemented because it takes much cost
      29/       0 : =1H                  USE_EMU_FLAG_P = 1	; use P FLAG
      30/       0 :                     
      31/       0 :                     ;;;---------------------------------------------------------------------------
      32/       0 :                     ;;; Emulator port configuration
      33/       0 :                     ;;;---------------------------------------------------------------------------
      34/       0 :                     ;;; EMU_UARTRC	equ	00H	; for tinybasic-1.0
      35/       0 :                     ;;; EMU_UARTRD	equ	01H	; for tynybasic-1.0
      36/       0 :                     ;;; EMU_IN_UARTRC_VALUE	equ 22H	 ; for tynybasic-1.0
      37/       0 :                     
      38/       0 : =1H                  EMU_UARTRC	equ	01H	; for SBC8080 compatibility
      39/       0 : =0H                  EMU_UARTRD	equ	00H	; for SBC8080 compatibility
      40/       0 : =0FFH                EMU_IN_UARTRC_VALUE	equ 0FFH	;
      41/       0 : =3H                  EMU_IN_STOPCODE	equ 03H			; ctrl-C
      42/       0 :                     	
      43/       0 :                     ;;;---------------------------------------------------------------------------
      44/       0 :                     ;;; Hardware Configuration
      45/       0 :                     ;;;---------------------------------------------------------------------------
      46/       0 :                     
      47/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      48/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      49/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      50/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      51/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      52/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      53/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      54/       0 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/04/15 23:22:03


      55/       0 :                     ;;; Chip type of RAM2 and RAM3
      56/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      57/       0 :                     
      58/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      59/       0 : =0H                  BANK_RAM0	equ 0
      60/       0 : =0H                  CHIP_RAM0	equ 00H
      61/       0 : =0H                  BANK_RAM1	equ 0
      62/       0 : =40H                 CHIP_RAM1	equ 40H
      63/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      64/       0 : =0H                  BANK_RAM2	equ 0
      65/       0 : =80H                 CHIP_RAM2	equ 80H
      66/       0 : =0H                  BANK_RAM3	equ 0
      67/       0 : =0C0H                CHIP_RAM3	equ 0C0H
      68/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      69/       0 :                     BANK_RAM2	equ 1
      70/       0 :                     CHIP_RAM2	equ 00H
      71/       0 :                     BANK_RAM3	equ 1
      72/       0 :                     CHIP_RAM3	equ 40H
      73/       0 : [63]                 	endif
      74/       0 :                     
      75/       0 :                     ;;; Default Bank
      76/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      77/       0 :                     ;;; to omit DCL as much as possible.
      78/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      79/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      80/       0 :                     		
      81/       0 :                     ;;; Output port for serial interface
      82/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      83/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      84/       0 :                     
      85/       0 :                     ;;; Output port for program memory bank selection
      86/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      87/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      88/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      89/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      90/       0 :                     
      91/       0 :                     	
      92/       0 :                     ;;; Program Memory RAM area
      93/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
      94/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
      95/       0 :                     				; "FIN P1 and BBL 0"
      96/       0 :                     	
      97/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
      98/       0 : =0H                  PM16_MEMSTART	equ 0000H
      99/       0 : =0FD00H              PM16_LINEBUF	equ 0FD00H
     100/       0 :                     
     101/       0 :                     ;;; for 256 x 16 x16 PM space
     102/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
     103/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
     104/       0 :                     
     105/       0 :                     ;;;---------------------------------------------------------------------------
     106/       0 :                     ;;; Data RAM Register Configuration
     107/       0 :                     ;;;---------------------------------------------------------------------------
     108/       0 :                     ;;; RAM0
     109/       0 :                     ;;; 
     110/       0 :                     ;;; 8080 register code DDD or SSS
     111/       0 :                     ;;; 0 1 2 3 4 5 6 7
     112/       0 :                     ;;; B C D E H L M A
     113/       0 :                     ;;; 
     114/       0 :                     ;;;  ADDRESS=~(xxx)<<1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/04/15 23:22:03


     115/       0 :                     	
     116/       0 : =0H                  REG8_A		equ 00H	;
     117/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     118/       0 : =4H                  REG8_L		equ 04H	;
     119/       0 : =6H                  REG8_H		equ 06H	;
     120/       0 : =8H                  REG8_E		equ 08H	;
     121/       0 : =0AH                 REG8_D		equ 0AH	;
     122/       0 : =0CH                 REG8_C		equ 0CH	;
     123/       0 : =0EH                 REG8_B		equ 0EH	;
     124/       0 :                     
     125/       0 : =10H                 REG8_FLAG	equ 10H ;
     126/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     127/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
     128/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     129/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     130/       0 :                     
     131/       0 :                     		;; lower byte is the first
     132/       0 : =0CH                 REG16_BC	equ REG8_C
     133/       0 : =8H                  REG16_DE	equ REG8_E
     134/       0 : =4H                  REG16_HL	equ REG8_L
     135/       0 :                     
     136/       0 : =14H                 REG8_PCL	equ REG16_PC
     137/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     138/       0 : =18H                 REG8_SPL	equ REG16_SP
     139/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     140/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     141/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     142/       0 :                     	
     143/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     144/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     145/       0 :                     
     146/       0 : =20H                 REG8_EMU_KEYBUF equ 20H ; virtual buffer for input STOP key
     147/       0 : =24H                 REG4_EMU_MODE	equ 24H	; Execution mode (0:continuous, 1:viewPC, 2:step)
     148/       0 :                     	
     149/       0 : =28H                 REG16_MON_INDEX	equ 28H	;
     150/       0 : =2CH                 REG16_MON_ADDR	equ 2CH	;
     151/       0 : =30H                 REG16_MON_TMP	equ 30H	;
     152/       0 : =30H                 REG8_MON_TMP	equ 30H	;
     153/       0 : =32H                 REG8_MON_TMP2	equ 32H	;
     154/       0 : =34H                 REG16_MON_PMBANK	equ 34H	; not used (?)
     155/       0 : =38H                 REG8_MON_MEMSPACE	equ 38H	; 'D', 'P', 'L' = (Data, Physical, Logical)
     156/       0 : =3AH                 REG8_MON_RESERVED	equ 3AH	; (reserved)
     157/       0 :                     	
     158/       0 :                     
     159/       0 :                     ;;; RAM1
     160/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     161/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     162/       0 :                     
     163/       0 : =80H                 STACK_INIT	equ 80H
     164/       0 :                     
     165/       0 :                     ;;; RAM2
     166/       0 :                     ;;; RAM3
     167/       0 :                     	
     168/       0 :                     ;;;---------------------------------------------------------------------------
     169/       0 :                     ;;; Program Start
     170/       0 :                     ;;;---------------------------------------------------------------------------
     171/       0 :                     	org 0000H		; beginning of Program Memory
     172/       0 :                     
     173/       0 :                     ;;;---------------------------------------------------------------------------
     174/       0 :                     ;;; Mail Loop for Monitor Program
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/04/15 23:22:03


     175/       0 :                     ;;; 
     176/       0 :                     ;;; Command:
     177/       0 :                     ;;; H : Select memory space
     178/       0 :                     ;;;   HD : Data RAM (4002)
     179/       0 :                     ;;;   HP : Physical Program Memory
     180/       0 :                     ;;;   HL : Logical Program Memory
     181/       0 :                     ;;; D : Dump memory
     182/       0 :                     ;;; L : Load Intel hex to logical program memory
     183/       0 :                     ;;; C : Clear Program Memory
     184/       0 :                     ;;; G : Go to PM_RAM_START (0F00H)
     185/       0 :                     ;;; E : 8080 Emulator
     186/       0 :                     ;;;   ES : 8080 Emulator (step mode)
     187/       0 :                     ;;; 
     188/       0 :                     ;;;---------------------------------------------------------------------------
     189/       0 :                     MAIN:
     190/       0 : 00                  	NOP
     191/       1 : F0                  	CLB
     192/       2 :                     
     193/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     194/       2 :                     	LDM BANK_DEFAULT
     195/       2 : [193]                	endif
     196/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     197/       2 :                     	;; except when in use for another banks.
     198/       2 : FD                  	DCL
     199/       3 :                     
     200/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     201/       5 : 5C 7F               	JMS INIT_SERIAL		; Initialize Serial Port
     202/       7 :                     
     203/       7 :                     
     204/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     205/       7 : D0                  	LDM loop(16)
     206/       8 : B2                  	XCH P1_HI
     207/       9 :                     PM_INIT_HLOOP:
     208/       9 : D0                  	LDM loop(16)
     209/       A : B3                  	XCH P1_LO
     210/       B :                     PM_INIT_LLOOP:
     211/       B : 5B B9               	JMS PM_SELECTPMB_P1
     212/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     213/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     214/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     215/      13 :                     
     216/      13 : 22 00               	FIM P1, 00H
     217/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     218/      17 :                     	
     219/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     220/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     221/      19 : 5E 00               	JMS PRINTSTR_P0
     222/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     223/      1D : 5E 00               	JMS PRINTSTR_P0
     224/      1F :                     
     225/      1F : 20 38               	FIM P0, REG8_MON_MEMSPACE
     226/      21 : 22 44               	FIM P1, 'D'
     227/      23 : 57 EA               	JMS LD_REG8P0_P1	; set memspace 'D'
     228/      25 :                     	
     229/      25 :                     	;; init emulator PC
     230/      25 : 20 14               	FIM P0, REG16_PC
     231/      27 : 24 00               	FIM P2, 00H
     232/      29 : 26 00               	FIM P3, 00H
     233/      2B : 57 8F               	JMS LD_REG16P0_P2P3	; PC=0000H
     234/      2D :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/04/15 23:22:03


     235/      2D :                     CMD_LOOP:
     236/      2D : 22 5D               	FIM P1, ']'		; prompt
     237/      2F : 5C 5F               	JMS PUTCHAR_P1
     238/      31 :                     
     239/      31 : 20 28               	FIM P0, REG16_MON_INDEX
     240/      33 : 24 FD               	FIM P2, up(PM16_LINEBUF)
     241/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     242/      37 : 57 8F               	JMS LD_REG16P0_P2P3
     243/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
     244/      3B :                     
     245/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     246/      3D : 5D 49               	JMS TOUPPER_P1
     247/      3F :                     L0:
     248/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     249/      41 : 5D 25               	JMS CMP_P1P7
     250/      43 : 1C 47               	JCN ZN, L1
     251/      45 : 40 E9               	JUN COMMAND_H
     252/      47 :                     L1:
     253/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     254/      49 : 5D 25               	JMS CMP_P1P7
     255/      4B : 1C 4F               	JCN ZN, L2
     256/      4D : 40 92               	JUN COMMAND_D
     257/      4F :                     L2:
     258/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     259/      4F :                     ;;;	JMS CMP_P1P7
     260/      4F :                     ;;;	JCN ZN, L3
     261/      4F :                     ;;;	JUN COMMAND_S
     262/      4F :                     L3:
     263/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     264/      51 : 5D 25               	JMS CMP_P1P7
     265/      53 : 1C 57               	JCN ZN, L4
     266/      55 : 41 09               	JUN COMMAND_L
     267/      57 :                     L4:
     268/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     269/      59 : 5D 25               	JMS CMP_P1P7
     270/      5B : 1C 5F               	JCN ZN, L5
     271/      5D : 41 7B               	JUN COMMAND_C
     272/      5F :                     L5:
     273/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     274/      61 : 5D 25               	JMS CMP_P1P7
     275/      63 : 1C 67               	JCN ZN, L6
     276/      65 : 40 E7               	JUN COMMAND_G
     277/      67 :                     L6:
     278/      67 : 2E 45               	FIM P7, 'E'		; jump to 8080 Emulator
     279/      69 : 5D 25               	JMS CMP_P1P7 		;
     280/      6B : 1C 8C               	JCN ZN, L7		;
     281/      6D :                     
     282/      6D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; check next letter
     283/      6F : 5D 49               	JMS TOUPPER_P1		; 'E' continuous mode
     284/      71 : 2E 53               	FIM P7, 'S'		; 'EV' view register mode
     285/      73 : 5D 25               	JMS CMP_P1P7 		; 'ES' step mode
     286/      75 : 1C 7A               	JCN ZN, L6_VIEWREG	;
     287/      77 : D2                  	LDM 2			; step mode
     288/      78 : 40 86               	JUN L6_SETMODE
     289/      7A :                     L6_VIEWREG:
     290/      7A : 2E 56               	FIM P7, 'V'		;
     291/      7C : 5D 25               	JMS CMP_P1P7 		; 
     292/      7E : 1C 83               	JCN ZN, L6_CONTINUOUS	;
     293/      80 : D1                  	LDM 1			; view PC mode
     294/      81 : 40 86               	JUN L6_SETMODE
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/04/15 23:22:03


     295/      83 :                     L6_CONTINUOUS:
     296/      83 : 58 64               	JMS DEC_REG16P0
     297/      85 : D0                  	LDM 0			; continuous mode
     298/      86 :                     L6_SETMODE:
     299/      86 : 2E 24               	FIM P7, REG4_EMU_MODE
     300/      88 : (MACRO)              	LD_REG4P7_ACC
     300/      88 : 2F                          SRC P7
     300/      89 : E0                          WRM
     301/      8A : 41 95               	JUN COMMAND_E
     302/      8C :                     
     303/      8C :                     L7:
     304/      8C : =>FALSE              	if USE_MON_CMD_T
     305/      8C :                     	FIM P7, 'T'		; Test program memory
     306/      8C :                     	JMS CMP_P1P7
     307/      8C :                     	JCN ZN, L10
     308/      8C :                     	JUN COMMAND_T
     309/      8C : [304]                	endif
     310/      8C :                     L10:
     311/      8C : 20 47               	FIM P0, lo(STR_CMDERR)
     312/      8E : 5E 00               	JMS PRINTSTR_P0
     313/      90 :                     
     314/      90 : 40 2D               	JUN CMD_LOOP
     315/      92 :                     
     316/      92 :                     
     317/      92 :                     ;;;---------------------------------------------------------------------------
     318/      92 :                     ;;; COMMAND_D
     319/      92 :                     ;;; Dump Memory
     320/      92 :                     ;;;---------------------------------------------------------------------------
     321/      92 :                     COMMAND_D:
     322/      92 : 22 2C               	FIM P1, REG16_MON_ADDR
     323/      94 : 58 C2               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     324/      96 :                     	
     325/      96 : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     326/      98 : 58 02               	JMS LD_P1_REG8P7
     327/      9A :                     	
     328/      9A : 2E 44               	FIM P7, 'D'
     329/      9C : 5D 25               	JMS CMP_P1P7
     330/      9E : 1C A2               	JCN ZN, CMDD_L1
     331/      A0 : 40 CE               	JUN COMMAND_DD
     332/      A2 :                     CMDD_L1:
     333/      A2 : =>FALSE              	if USE_MON_CMD_DP
     334/      A2 :                     	FIM P7, 'P'
     335/      A2 :                     	JMS CMP_P1P7
     336/      A2 :                     	JCN ZN, CMDD_L2
     337/      A2 :                     	JUN COMMAND_DP
     338/      A2 : [333]                	endif 			;  USE_MON_CMD_DP
     339/      A2 :                     CMDD_L2:
     340/      A2 : 2E 4C               	FIM P7, 'L'
     341/      A4 : 5D 25               	JMS CMP_P1P7
     342/      A6 : 1C AA               	JCN ZN, CMDD_L3
     343/      A8 : 40 B0               	JUN COMMAND_DL
     344/      AA :                     CMDD_L3:
     345/      AA : 20 4B               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     346/      AC : 5E 00               	JMS PRINTSTR_P0
     347/      AE : 40 2D               	JUN CMD_LOOP
     348/      B0 :                     
     349/      B0 : =>FALSE              	if  USE_MON_CMD_DP
     350/      B0 :                     ;;;---------------------------------------------------------------------------
     351/      B0 :                     ;;; COMMAND_DP
     352/      B0 :                     ;;; Dump Physical Memory
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/04/15 23:22:03


     353/      B0 :                     ;;;	BANK=ADDR.FEDCBA98
     354/      B0 :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     355/      B0 :                     ;;;---------------------------------------------------------------------------
     356/      B0 :                     COMMAND_DP:
     357/      B0 :                     	FIM P1, REG16_MON_ADDR
     358/      B0 :                     	JMS LD_P2P3_REG16P1
     359/      B0 :                     
     360/      B0 :                     	LD_P1_P2
     361/      B0 :                     	JMS PM_SELECTPMB_P1
     362/      B0 :                     	
     363/      B0 :                     	LDM loop(8)
     364/      B0 :                     	XCH CNT_I
     365/      B0 :                     CMDDP_L0:
     366/      B0 :                     	LD_P1_P2
     367/      B0 :                     	JMS PRINTHEX_P1
     368/      B0 :                     	FIM P1, ':'
     369/      B0 :                     	JMS PUTCHAR_P1
     370/      B0 :                     	FIM P1, 'F'
     371/      B0 :                     	JMS PUTCHAR_P1
     372/      B0 :                     	LD_P1_P3
     373/      B0 :                     	JMS PRINTHEX_P1
     374/      B0 :                     	FIM P1, ':'
     375/      B0 :                     	JMS PUTCHAR_P1
     376/      B0 :                     
     377/      B0 :                     CMDDP_L1:	
     378/      B0 :                     	LD_P0_P3
     379/      B0 :                     	JMS PM_READ_P0_P1	; Read program memory
     380/      B0 :                     	JMS PRINTHEX_P1
     381/      B0 :                     
     382/      B0 :                     	ISZ P3_LO, CMDDP_L1
     383/      B0 :                     	JMS PRINT_CRLF
     384/      B0 :                     	INC P3_HI
     385/      B0 :                     	LD P3_HI
     386/      B0 :                     	JCN Z, CMDDP_EXIT
     387/      B0 :                     	ISZ CNT_I, CMDDP_L0
     388/      B0 :                     CMDDP_EXIT:	
     389/      B0 :                     	FIM P0, REG16_MON_ADDR
     390/      B0 :                     	JMS LD_REG16P0_P2P3
     391/      B0 :                     
     392/      B0 :                     	JUN CMD_LOOP		; return to command loop
     393/      B0 :                     
     394/      B0 : [349]                	endif  			; USE_MON_CMD_DP
     395/      B0 :                     
     396/      B0 :                     ;;;---------------------------------------------------------------------------
     397/      B0 :                     ;;; COMMAND_DL
     398/      B0 :                     ;;; Dump Logical Memory
     399/      B0 :                     ;;;---------------------------------------------------------------------------
     400/      B0 :                     COMMAND_DL:
     401/      B0 : 20 2C               	FIM P0, REG16_MON_ADDR
     402/      B2 : 58 0A               	JMS LD_P1_REG8P0
     403/      B4 : (MACRO)              	LD_CNT_P1
     403/      B4 : A2                                  LD P1_HI
     403/      B5 : BA                                  XCH CNT_HI
     403/      B6 : A3                                  LD P1_LO
     403/      B7 : BB                                  XCH CNT_LO
     404/      B8 : D8                  	LDM loop(8)
     405/      B9 : BA                  	XCH CNT_I
     406/      BA :                     CMDDL_L0:
     407/      BA : 22 2C               	FIM P1, REG16_MON_ADDR
     408/      BC : 58 22               	JMS PRINTHEX_REG16P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/04/15 23:22:03


     409/      BE : 22 3A               	FIM P1, ':'
     410/      C0 : 5C 5F               	JMS PUTCHAR_P1
     411/      C2 :                     CMDDL_L1:	
     412/      C2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     413/      C4 : 5C 85               	JMS PRINTHEX_P1
     414/      C6 :                     
     415/      C6 : 7B C2               	ISZ CNT_J, CMDDL_L1
     416/      C8 : 5C A0               	JMS PRINT_CRLF
     417/      CA : 7A BA               	ISZ CNT_I, CMDDL_L0
     418/      CC :                     CMDDL_NEXT:
     419/      CC : 40 2D               	JUN CMD_LOOP		; return to command loop
     420/      CE :                     
     421/      CE :                     ;;;---------------------------------------------------------------------------
     422/      CE :                     ;;; COMMAND_DD
     423/      CE :                     ;;; Dump Data RAM
     424/      CE :                     ;;; input:
     425/      CE :                     ;;; REG16_MON_ADDR
     426/      CE :                     ;;; RAM0=00H-3FH
     427/      CE :                     ;;; RAM1=40H-7FH
     428/      CE :                     ;;; RAM2=80H-BFH
     429/      CE :                     ;;; RAM3=C0H-FFH
     430/      CE :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     431/      CE :                     ;;;---------------------------------------------------------------------------
     432/      CE :                     COMMAND_DD:
     433/      CE : 2E 2C               	FIM P7, REG16_MON_ADDR
     434/      D0 : 58 02               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     435/      D2 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     435/      D2 : A2                                  LD P1_HI
     435/      D3 : B0                                  XCH P0_HI
     435/      D4 : A3                                  LD P1_LO
     435/      D5 : B1                                  XCH P0_LO
     436/      D6 :                     
     437/      D6 :                     	;; PRINT 4 registers
     438/      D6 : DC                  	LDM loop(4)		; PRINT 4 regs
     439/      D7 : BA                  	XCH CNT_I		; I=loop(4)
     440/      D8 :                     	;; PRINT 16 characters
     441/      D8 :                     CMDDD_L1:
     442/      D8 : 5D 55               	JMS PRINT_DATARAM_P0
     443/      DA : 60                  	INC P0_HI
     444/      DB : 7A D8               	ISZ CNT_I, CMDDD_L1
     445/      DD :                     
     446/      DD : (MACRO)              	LD_P1_P0
     446/      DD : A0                                  LD P0_HI
     446/      DE : B2                                  XCH P1_HI
     446/      DF : A1                                  LD P0_LO
     446/      E0 : B3                                  XCH P1_LO
     447/      E1 : 20 2C               	FIM P0, REG16_MON_ADDR
     448/      E3 : 57 EA               	JMS LD_REG8P0_P1
     449/      E5 :                     
     450/      E5 : 40 2D               	JUN CMD_LOOP		; return to command loop
     451/      E7 :                     	
     452/      E7 :                     ;;;---------------------------------------------------------------------------
     453/      E7 :                     ;;; COMMAND_G
     454/      E7 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     455/      E7 :                     ;;;---------------------------------------------------------------------------
     456/      E7 :                     COMMAND_G:
     457/      E7 : 4F 00               	JUN PM_RAM_START
     458/      E9 :                     
     459/      E9 :                     ;;;---------------------------------------------------------------------------
     460/      E9 :                     ;;; COMMAND_H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/04/15 23:22:03


     461/      E9 :                     ;;; Select Memory Space and address
     462/      E9 :                     ;;; 'D' = Data Memory
     463/      E9 :                     ;;; 'P' = Physical Program Memory
     464/      E9 :                     ;;; 'L' = Logical Program Memory
     465/      E9 :                     ;;;---------------------------------------------------------------------------
     466/      E9 :                     COMMAND_H:
     467/      E9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     468/      EB : 5D 32               	JMS ISZEROORNOT_P1
     469/      ED : 1C F1               	JCN ZN, CMDH_SET
     470/      EF : 40 FB               	JUN CMDH_EXIT
     471/      F1 :                     CMDH_SET:
     472/      F1 : 5D 49               	JMS TOUPPER_P1
     473/      F3 : 24 38               	FIM P2, REG8_MON_MEMSPACE
     474/      F5 : 57 F6               	JMS LD_REG8P2_P1
     475/      F7 : 22 2C               	FIM P1, REG16_MON_ADDR
     476/      F9 : 58 C2               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     477/      FB :                     CMDH_EXIT:
     478/      FB : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     479/      FD : 58 02               	JMS LD_P1_REG8P7
     480/      FF : 5C 5F               	JMS PUTCHAR_P1
     481/     101 : 22 2C               	FIM P1, REG16_MON_ADDR
     482/     103 : 58 22               	JMS PRINTHEX_REG16P1
     483/     105 : 5C A0               	JMS PRINT_CRLF
     484/     107 : 40 2D               	JUN CMD_LOOP
     485/     109 :                     
     486/     109 :                     ;;;---------------------------------------------------------------------------
     487/     109 :                     ;;; COMMAND_L
     488/     109 :                     ;;; Load to Logical Memory
     489/     109 :                     ;;; Intel Hex format, no checksum check
     490/     109 :                     ;;; data lengh must be 0to10H/line
     491/     109 :                     ;;;---------------------------------------------------------------------------
     492/     109 :                     COMMAND_L:
     493/     109 :                     CMDL_START:
     494/     109 : 20 28               	FIM P0, REG16_MON_INDEX
     495/     10B : 24 FD               	FIM P2, up(PM16_LINEBUF)
     496/     10D : 26 00               	FIM P3, lo(PM16_LINEBUF)
     497/     10F : 57 8F               	JMS LD_REG16P0_P2P3
     498/     111 : 5B C4               	JMS GETLINE_PM16REG16P0
     499/     113 :                     
     500/     113 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     501/     115 : 5D 32               	JMS ISZEROORNOT_P1
     502/     117 : 1C 1B               	JCN ZN, CMDL_L0
     503/     119 : 41 73               	JUN CMDL_EXIT
     504/     11B :                     CMDL_L0:
     505/     11B : 2E 3A               	FIM P7, ':'
     506/     11D : 5D 25               	JMS CMP_P1P7
     507/     11F : 14 23               	JCN Z, CMDL_L1
     508/     121 : 41 49               	JUN CMDL_ERROR
     509/     123 :                     CMDL_L1:
     510/     123 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     511/     125 : (MACRO)              	LD_CNT_P1				; count
     511/     125 : A2                                  LD P1_HI
     511/     126 : BA                                  XCH CNT_HI
     511/     127 : A3                                  LD P1_LO
     511/     128 : BB                                  XCH CNT_LO
     512/     129 :                     
     513/     129 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     514/     12B : (MACRO)              	LD_P2_P1
     514/     12B : A2                                  LD P1_HI
     514/     12C : B4                                  XCH P2_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/04/15 23:22:03


     514/     12D : A3                                  LD P1_LO
     514/     12E : B5                                  XCH P2_LO
     515/     12F : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     516/     131 : (MACRO)              	LD_P3_P1
     516/     131 : A2                                  LD P1_HI
     516/     132 : B6                                  XCH P3_HI
     516/     133 : A3                                  LD P1_LO
     516/     134 : B7                                  XCH P3_LO
     517/     135 : 22 2C               	FIM P1, REG16_MON_ADDR
     518/     137 : 57 89               	JMS LD_REG16P1_P2P3
     519/     139 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     520/     13B : 5D 32               	JMS ISZEROORNOT_P1
     521/     13D : 1C 41               	JCN ZN, CMDL_L2
     522/     13F : 41 53               	JUN CMDL_READLOOP
     523/     141 :                     CMDL_L2:
     524/     141 : 2E 01               	FIM P7, 01H
     525/     143 : 5D 25               	JMS CMP_P1P7
     526/     145 : 1C 49               	JCN ZN, CMDL_ERROR
     527/     147 : 41 73               	JUN CMDL_EXIT
     528/     149 :                     CMDL_ERROR:
     529/     149 : 58 64               	JMS DEC_REG16P0
     530/     14B : 5C 0A               	JMS PRINTSTR_PM16REG16P0
     531/     14D : 20 57               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     532/     14F : 5E 00               	JMS PRINTSTR_P0
     533/     151 : 40 2D               	JUN CMD_LOOP
     534/     153 :                     CMDL_READLOOP:
     535/     153 : AB                  	LD CNT_LO
     536/     154 : 1C 5B               	JCN ZN, CMDL_CONTINUE
     537/     156 : AA                  	LD CNT_HI
     538/     157 : 1C 5B               	JCN ZN, CMDL_CONTINUE
     539/     159 : 41 09               	JUN  CMDL_START		; continue to read next line
     540/     15B :                     CMDL_CONTINUE:
     541/     15B : 20 28               	FIM P0, REG16_MON_INDEX
     542/     15D : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     543/     15F : 14 63               	JCN Z, CMDL_L3
     544/     161 : 41 09               	JUN CMDL_START		; continue to read next line
     545/     163 :                     CMDL_L3:
     546/     163 : 20 2C               	FIM P0, REG16_MON_ADDR
     547/     165 : 5B 81               	JMS LD_PM16REG16P0_P1
     548/     167 : 58 54               	JMS INC_REG16P0
     549/     169 : AB                  	LD CNT_LO
     550/     16A : F8                  	DAC
     551/     16B : BB                  	XCH CNT_LO
     552/     16C : 12 71               	JCN C, CMDL_L5		; no borrow then skip
     553/     16E : AA                  	LD CNT_HI
     554/     16F : F8                  	DAC
     555/     170 : BA                  	XCH CNT_HI
     556/     171 :                     CMDL_L5:
     557/     171 : 41 53               	JUN CMDL_READLOOP
     558/     173 :                     CMDL_EXIT:
     559/     173 :                     	;; set memory space to logical
     560/     173 : 20 38               	FIM P0, REG8_MON_MEMSPACE
     561/     175 : 22 4C               	FIM P1, 'L'
     562/     177 : 57 EA               	JMS LD_REG8P0_P1
     563/     179 : 40 2D               	JUN CMD_LOOP
     564/     17B :                     	
     565/     17B :                     ;;;---------------------------------------------------------------------------
     566/     17B :                     ;;; COMMAND_C
     567/     17B :                     ;;; Clear Program Memory
     568/     17B :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/04/15 23:22:03


     569/     17B :                     COMMAND_C:
     570/     17B :                     ;;; 	FIM CNT, loops(1, 16)
     571/     17B : 2A 00               	FIM CNT, loops(16, 16)
     572/     17D :                     CMDPMC_BANKLOOP:
     573/     17D : (MACRO)              	LD_P1_CNT
     573/     17D : AA                                  LD CNT_HI
     573/     17E : B2                                  XCH P1_HI
     573/     17F : AB                                  LD CNT_LO
     573/     180 : B3                                  XCH P1_LO
     574/     181 : 5B B9               	JMS PM_SELECTPMB_P1
     575/     183 : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     576/     185 : 22 00               	FIM P1, 00H		; data to fill
     577/     187 :                     CMDPMC_L1:
     578/     187 : 5B A1               	JMS PM_WRITE_P0_P1
     579/     189 : 71 87               	ISZ R1, CMDPMC_L1
     580/     18B : 70 87               	ISZ R0, CMDPMC_L1
     581/     18D :                     
     582/     18D : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     583/     18F : 7B 7D               	ISZ CNT_J, CMDPMC_BANKLOOP
     584/     191 : 7A 7D               	ISZ CNT_I, CMDPMC_BANKLOOP
     585/     193 :                     
     586/     193 :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     587/     193 :                     	
     588/     193 : 40 2D               	JUN CMD_LOOP		; return to command loop
     589/     195 :                     
     590/     195 :                     ;;;  	org 0200H
     591/     195 :                     ;;;---------------------------------------------------------------------------
     592/     195 :                     ;;; 8080 emulator
     593/     195 :                     ;;;---------------------------------------------------------------------------
     594/     195 :                     COMMAND_E:
     595/     195 : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     596/     197 : 58 C2               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     597/     199 :                     EMU_START:
     598/     199 : 20 65               	FIM P0, lo(STR_EMU_MESSAGE)
     599/     19B : 5E 00               	JMS PRINTSTR_P0
     600/     19D :                     
     601/     19D : 2E 24               	FIM P7, REG4_EMU_MODE
     602/     19F : (MACRO)              	LD_ACC_REG4P7
     602/     19F : 2F                          SRC P7
     602/     1A0 : E9                          RDM
     603/     1A1 : 14 A5               	JCN Z, EMU_LOOP	      	; continuous mode
     604/     1A3 : 41 BB               	JUN EMU_DEBUG 		; not continuous mode (view reg or step)
     605/     1A5 :                     
     606/     1A5 :                     ;;;---------------------------------------------------------------------------
     607/     1A5 :                     ;;; Continuous loop
     608/     1A5 :                     ;;;---------------------------------------------------------------------------
     609/     1A5 :                     EMU_LOOP:	        ; loop for continuous mode
     610/     1A5 : 51 E6               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     611/     1A7 :                     			; but it can return here by BBL from various routines
     612/     1A7 :                     			; in contrast JUN consumes 2 bytes
     613/     1A7 : 11 AB               	JCN T, EMU_EXIT	; exit by TEST button
     614/     1A9 : 41 A5               	JUN EMU_LOOP
     615/     1AB :                     	
     616/     1AB :                     EMU_EXIT:
     617/     1AB : 2A 00               	FIM CNT, loops(16, 16)
     618/     1AD :                     EMU_EXIT_LOOP:			 ; check button keep on for a while
     619/     1AD : 19 A5               	JCN TN, EMU_LOOP
     620/     1AF : 7B AD               	ISZ CNT_J, EMU_EXIT_LOOP
     621/     1B1 : 7A AD               	ISZ CNT_I, EMU_EXIT_LOOP
     622/     1B3 :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/04/15 23:22:03


     623/     1B3 : 11 B3               	JCN T, $		  ; wait for TEST button released
     624/     1B5 : 20 C2               	FIM P0, lo(STR_EMU_STOP)
     625/     1B7 : 5E 00               	JMS PRINTSTR_P0
     626/     1B9 : 42 6B               	JUN EMU_PRINTREG_AND_EXIT ; jump to HLT
     627/     1BB :                     	
     628/     1BB :                     ;;;---------------------------------------------------------------------------
     629/     1BB :                     ;;; Loop for Debug (view resistor or step)
     630/     1BB :                     ;;;---------------------------------------------------------------------------
     631/     1BB :                     EMU_DEBUG:
     632/     1BB : F8                  	DAC
     633/     1BC : 14 C0               	JCN Z, EMU_VIEWREG
     634/     1BE : 41 D4               	JUN EMU_STEP
     635/     1C0 :                     ;;;---------------------------------------------------------------------------
     636/     1C0 :                     ;;; Loop with Viewing Resister
     637/     1C0 :                     ;;;---------------------------------------------------------------------------
     638/     1C0 :                     EMU_VIEWREG:			; MODE=1 (viw register)
     639/     1C0 : 20 87               	FIM P0, lo(STR_EMU_REGHEADER)
     640/     1C2 : 5E 00               	JMS PRINTSTR_P0
     641/     1C4 :                     EMU_VIEWREG_LOOP:			; MODE=1 (viw register)
     642/     1C4 : 5C AC                	JMS PRINT_CR
     643/     1C6 : 58 E7                	JMS EMU_PRINT_REGISTERS_NO_HEADER
     644/     1C8 : 11 CE               	JCN T, EMU_VIEWREG_EXIT	  ; exit by TEST button
     645/     1CA : 51 E6               	JMS EXEC_CODE
     646/     1CC : 41 C4               	JUN EMU_VIEWREG_LOOP
     647/     1CE :                     EMU_VIEWREG_EXIT:
     648/     1CE : 11 CE               	JCN T, $		  ; wait for TEST button released
     649/     1D0 : 5C A0                	JMS PRINT_CRLF
     650/     1D2 : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     651/     1D4 :                     
     652/     1D4 :                     ;;;---------------------------------------------------------------------------
     653/     1D4 :                     ;;; Step Execution Loop
     654/     1D4 :                     ;;;---------------------------------------------------------------------------
     655/     1D4 :                     EMU_STEP
     656/     1D4 :                     EMU_STEP_LOOP:			; MODE=2 (step)
     657/     1D4 : 58 E3               	JMS EMU_PRINT_REGISTERS
     658/     1D6 : 5C A0               	JMS PRINT_CRLF
     659/     1D8 : 5C 37               	JMS GETCHAR_P1
     660/     1DA : 2E 2E               	FIM P7, '.'
     661/     1DC : 5D 25               	JMS CMP_P1P7
     662/     1DE : 14 E4               	JCN Z, EMU_STEP_EXIT
     663/     1E0 :                     
     664/     1E0 : 51 E6               	JMS EXEC_CODE
     665/     1E2 : 41 D4               	JUN EMU_STEP_LOOP
     666/     1E4 :                     
     667/     1E4 :                     EMU_STEP_EXIT:
     668/     1E4 : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     669/     1E6 :                     
     670/     1E6 :                     
     671/     1E6 :                     ;;;---------------------------------------------------------------------------
     672/     1E6 :                     ;;; EXEC_CODE
     673/     1E6 :                     ;;;---------------------------------------------------------------------------
     674/     1E6 :                     EXEC_CODE:
     675/     1E6 : 20 14               	FIM P0, REG16_PC
     676/     1E8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     677/     1EA :                     
     678/     1EA : A2                  	LD P1_HI		;
     679/     1EB : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     680/     1EC : 1A F0               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     681/     1EE : 42 06               	JUN CODE_80FF		; 80H<=CODE<=FFH
     682/     1F0 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/04/15 23:22:03


     683/     1F0 :                     ;;;---------------------------------------------------------------------------
     684/     1F0 :                     CODE_007F:			; 00H<=CODE<=7FH
     685/     1F0 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     686/     1F1 : 1A F5               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     687/     1F3 : 42 0B               	JUN CODE_407F		; 40H<=CODE<=7FH
     688/     1F5 :                     ;;;---------------------------------------------------------------------------
     689/     1F5 :                     CODE_003F:			; 00H<=CODE<=3FH
     690/     1F5 : A3                  	LD P1_LO
     691/     1F6 : 1C FD               	JCN NZ,CODE_NOT_NOP
     692/     1F8 : A2                  	LD P1_HI
     693/     1F9 : 1C FD               	JCN NZ,CODE_NOT_NOP
     694/     1FB : 42 71               	JUN CODE_00H		; NOP
     695/     1FD :                     CODE_NOT_NOP:
     696/     1FD :                     CODE_C0FF:
     697/     1FD :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     698/     1FD :                     	; prepare for jump table
     699/     1FD :                     	; P1=P1<<1 and jump to dispatch table
     700/     1FD : A3                  	LD P1_LO
     701/     1FE : F1                  	CLC
     702/     1FF : F5                  	RAL
     703/     200 : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     704/     201 : A2                  	LD P1_HI
     705/     202 : F5                  	RAL
     706/     203 : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     707/     204 : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     708/     206 :                     ;;;---------------------------------------------------------------------------
     709/     206 :                     CODE_80FF:			; 80H<=P1<=FFH
     710/     206 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     711/     207 : 1A 0B               	JCN CN, CODE_80BF
     712/     209 : 41 FD               	JUN CODE_C0FF		; C0H<=P1<=FFH
     713/     20B :                     
     714/     20B :                     ;;;---------------------------------------------------------------------------
     715/     20B :                     CODE_407F:			; 40H<=P1<=7FH
     716/     20B :                     CODE_80BF:			; 80H<=P1<=BFH
     717/     20B :                     ;;;---------------------------------------------------------------------------
     718/     20B :                     ;;; Common procedure for 40H<=CODE<=BFH
     719/     20B :                     ;;; save source value to REG(SRC)
     720/     20B :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     721/     20B :                     ;;; 8080 register code SSS
     722/     20B :                     ;;; 0 1 2 3 4 5 6 7
     723/     20B :                     ;;; B C D E H L M A
     724/     20B :                     ;;; ADDRESS=~(xxx)<<1
     725/     20B :                     ;;;---------------------------------------------------------------------------
     726/     20B : 5B 12               	JMS PUSH_P1
     727/     20D :                     	;; set source register address to P1
     728/     20D : F0                  	CLB
     729/     20E : B2                  	XCH P1_HI		; P1_HI=0000
     730/     20F : A3                  	LD P1_LO
     731/     210 : F4                  	CMA
     732/     211 : F1                  	CLC
     733/     212 : F5                  	RAL
     734/     213 : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     735/     214 :                     
     736/     214 : A3                  	LD P1_LO
     737/     215 :                     
     738/     215 : D2                   	LDM REG8_M		; check if SRCREG==M or not
     739/     216 : F1                  	CLC
     740/     217 : 93                  	SUB P1_LO
     741/     218 : 14 1E               	JCN Z, GETSRC_LOAD_M
     742/     21A :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/04/15 23:22:03


     743/     21A : 58 10               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     744/     21C : 42 24                       JUN GETSRC_SAVE_SRCVALUE
     745/     21E :                     
     746/     21E :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     747/     21E : 20 04               	FIM P0, REG16_HL
     748/     220 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     749/     222 : 58 64               	JMS DEC_REG16P0
     750/     224 :                     
     751/     224 :                     GETSRC_SAVE_SRCVALUE:
     752/     224 :                     	;; set source register value to P1
     753/     224 : 20 12               	FIM P0, REG8_SRC
     754/     226 : 57 EA               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     755/     228 :                     
     756/     228 : 5B 43               	JMS POP_P1
     757/     22A : A2                  	LD P1_HI
     758/     22B : F5                  	RAL
     759/     22C : 1A 30               	JCN CN, CODE_407F_MOV	; execute MOV
     760/     22E : 42 58               	JUN CODE_80BF_ARITH_LOGIC
     761/     230 :                     
     762/     230 :                     ;;;---------------------------------------------------------------------------
     763/     230 :                     ;;; Execute MOV code
     764/     230 :                     ;;; source value is already stored to REG8(SRC)
     765/     230 :                     ;;;---------------------------------------------------------------------------
     766/     230 :                     CODE_407F_MOV:
     767/     230 : 2E 76               	FIM P7, 76H		; check HLT
     768/     232 : 5D 25               	JMS CMP_P1P7
     769/     234 : 1C 38               	JCN ZN, CODE_MOV_L1
     770/     236 : 42 67               	JUN CODE_76H		; HLT
     771/     238 :                     
     772/     238 :                     CODE_MOV_L1:
     773/     238 :                     	;; set destination REGISTER address to P2
     774/     238 : 24 00               	FIM P2, 00H
     775/     23A : A2                  	LD P1_HI
     776/     23B : F5                  	RAL
     777/     23C : F5                  	RAL
     778/     23D : F1                  	CLC
     779/     23E : F6                  	RAR
     780/     23F : F6                  	RAR
     781/     240 : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     782/     241 : A3                  	LD P1_LO
     783/     242 : F5                  	RAL			; CY=bit(3)
     784/     243 : A5                  	LD P2_LO
     785/     244 : F5                  	RAL
     786/     245 : F4                  	CMA
     787/     246 : F5                  	RAL
     788/     247 : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     789/     248 :                     
     790/     248 : 22 12               	FIM P1, REG8_SRC
     791/     24A : 58 10               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     792/     24C :                     
     793/     24C :                     				; write SRC value to DST
     794/     24C : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     795/     24D : F1                  	CLC
     796/     24E : 95                  	SUB P2_LO		; check DST(P2) is M or not
     797/     24F : 14 54               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     798/     251 :                     
     799/     251 : 57 F6               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     800/     253 : C0                  	BBL 0
     801/     254 :                     
     802/     254 :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/04/15 23:22:03


     803/     254 : 20 04               	FIM P0, REG16_HL
     804/     256 : 4B 81               	JUN LD_PM16REG16P0_P1
     805/     258 :                     ;;; 	BBL 0
     806/     258 :                     
     807/     258 :                     
     808/     258 :                     ;;;---------------------------------------------------------------------------
     809/     258 :                     CODE_80BF_ARITH_LOGIC:
     810/     258 :                     	; prepare P2 for jump table
     811/     258 :                     	; P2=0F0H + CODE.bit(543)0
     812/     258 : 24 F0               	FIM P2, 0F0H		; P2=0F0H
     813/     25A : A3                  	LD P1_LO		; ACC=CODE(3210)
     814/     25B : F5                  	RAL			; CY=CODE.bit(3)
     815/     25C : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     816/     25D : F5                  	RAL			; ACC=CODE.bit(6543)
     817/     25E : F1                  	CLC			; CY=0
     818/     25F : F5                  	RAL			; ACC=CODE.bit(543).0
     819/     260 : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     820/     261 :                     
     821/     261 : 2E 12               	FIM P7, REG8_SRC
     822/     263 : 58 02               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     823/     265 :                     
     824/     265 : 49 EF               	JUN JIN_P2_CODE_80BF
     825/     267 :                     
     826/     267 :                     ;;;---------------------------------------------------------------------------
     827/     267 :                     ;;; Emulate individual codes
     828/     267 :                     ;;;---------------------------------------------------------------------------
     829/     267 :                     CODE_76H:			; HLT
     830/     267 : 20 CB               	FIM P0, lo(STR_EMU_HLT)
     831/     269 : 5E 00               	JMS PRINTSTR_P0
     832/     26B :                     EMU_PRINTREG_AND_EXIT:
     833/     26B : 58 E3               	JMS EMU_PRINT_REGISTERS
     834/     26D : 5C A0               	JMS PRINT_CRLF
     835/     26F : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     836/     271 :                     
     837/     271 :                     CODE_00H:			; NOP
     838/     271 : C0                  	BBL 0
     839/     272 :                     
     840/     272 :                     CODE_01H:			; LXI B,B3B2
     841/     272 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     842/     274 : 24 0C               	FIM P2, REG8_C
     843/     276 : 57 F6               	JMS LD_REG8P2_P1
     844/     278 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     845/     27A : 24 0E               	FIM P2, REG8_B
     846/     27C : 47 F6               	JUN LD_REG8P2_P1
     847/     27E :                     
     848/     27E :                     CODE_02H:			; STAX B
     849/     27E : 2E 00               	FIM P7, REG8_A
     850/     280 : 58 02               	JMS LD_P1_REG8P7
     851/     282 : 20 0C               	FIM P0, REG16_BC
     852/     284 : 4B 81               	JUN LD_PM16REG16P0_P1
     853/     286 :                     
     854/     286 :                     CODE_03H:			; INX B
     855/     286 : 20 0C               	FIM P0, REG16_BC
     856/     288 : 48 54               	JUN INC_REG16P0
     857/     28A :                     
     858/     28A :                     CODE_04H:			; INR B
     859/     28A : 22 0E               	FIM P1, REG8_B
     860/     28C : 44 30               	JUN CODE_INR
     861/     28E :                     	
     862/     28E :                     CODE_05H:			; DCR B
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/04/15 23:22:03


     863/     28E : 22 0E               	FIM P1, REG8_B
     864/     290 : 44 36               	JUN CODE_DCR
     865/     292 :                     
     866/     292 :                     CODE_06H:			; MVI B,B2
     867/     292 : 24 0E               	FIM P2, REG8_B
     868/     294 : 44 3C               	JUN CODE_MVI
     869/     296 :                     ;;; 	BBL 0
     870/     296 :                     
     871/     296 :                     CODE_07H:			; RLC
     872/     296 : 20 00               	FIM P0, REG8_A
     873/     298 : 58 0A               	JMS LD_P1_REG8P0
     874/     29A : A2                  	LD P1_HI
     875/     29B : F5                  	RAL			; CY=bit(7)
     876/     29C : A3                  	LD P1_LO
     877/     29D : F5                  	RAL
     878/     29E : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     879/     29F : A2                  	LD P1_HI
     880/     2A0 : F5                  	RAL
     881/     2A1 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     882/     2A2 : 56 85               	JMS SETFLAG_C_CY
     883/     2A4 : 47 EA               	JUN LD_REG8P0_P1
     884/     2A6 :                     ;;;	BBL 0
     885/     2A6 :                     
     886/     2A6 :                     CODE_08H:			; ...
     887/     2A6 : C0                  	BBL 0
     888/     2A7 :                     	
     889/     2A7 :                     CODE_09H:			; DAD B
     890/     2A7 : 20 04               	FIM P0, REG16_HL
     891/     2A9 : 22 0C               	FIM P1, REG16_BC
     892/     2AB : 58 99               	JMS ADD_REG16P0_REG16P1
     893/     2AD : 46 85               	JUN SETFLAG_C_CY
     894/     2AF :                     ;;; 	BBL 0
     895/     2AF :                     
     896/     2AF :                     CODE_0AH:			; LDAX B
     897/     2AF : 20 0C               	FIM P0, REG16_BC
     898/     2B1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     899/     2B3 : 58 64               	JMS DEC_REG16P0
     900/     2B5 :                     	
     901/     2B5 : 24 00               	FIM P2, REG8_A
     902/     2B7 : 47 F6               	JUN LD_REG8P2_P1
     903/     2B9 :                     ;;; 	BBL 0
     904/     2B9 :                     
     905/     2B9 :                     CODE_0BH:			; DCX B
     906/     2B9 : 20 0C               	FIM P0, REG16_BC
     907/     2BB : 48 64               	JUN DEC_REG16P0
     908/     2BD :                     ;;; 	BBL 0
     909/     2BD :                     	
     910/     2BD :                     CODE_0CH:			; INR C
     911/     2BD : 22 0C               	FIM P1, REG8_C
     912/     2BF : 44 30               	JUN CODE_INR
     913/     2C1 :                     ;;; 	BBL 0
     914/     2C1 :                     
     915/     2C1 :                     CODE_0DH:			; DCR C
     916/     2C1 : 22 0C               	FIM P1, REG8_C
     917/     2C3 : 44 36               	JUN CODE_DCR
     918/     2C5 :                     ;;; 	BBL 0
     919/     2C5 :                     
     920/     2C5 :                     CODE_0EH:			; MVI C,B2
     921/     2C5 : 24 0C               	FIM P2, REG8_C
     922/     2C7 : 44 3C               	JUN CODE_MVI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/04/15 23:22:03


     923/     2C9 :                     ;;; 	BBL 0
     924/     2C9 :                     
     925/     2C9 :                     CODE_0FH:			; RRC
     926/     2C9 : 20 00               	FIM P0, REG8_A
     927/     2CB : 58 0A               	JMS LD_P1_REG8P0
     928/     2CD : A3                  	LD P1_LO
     929/     2CE : F6                  	RAR			; CY=bit(0)
     930/     2CF : A2                  	LD P1_HI
     931/     2D0 : F6                  	RAR
     932/     2D1 : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     933/     2D2 : A3                  	LD P1_LO
     934/     2D3 : F6                  	RAR
     935/     2D4 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     936/     2D5 : 56 85               	JMS SETFLAG_C_CY
     937/     2D7 : 47 EA               	JUN LD_REG8P0_P1
     938/     2D9 :                     ;;; 	BBL 0
     939/     2D9 :                     
     940/     2D9 :                     CODE_10H:			; ...
     941/     2D9 : C0                  	BBL 0
     942/     2DA :                     
     943/     2DA :                     CODE_11H:			; LXI D,B3B2
     944/     2DA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     945/     2DC : 24 08               	FIM P2, REG8_E
     946/     2DE : 57 F6               	JMS LD_REG8P2_P1
     947/     2E0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     948/     2E2 : 24 0A               	FIM P2, REG8_D
     949/     2E4 : 47 F6               	JUN LD_REG8P2_P1
     950/     2E6 :                     
     951/     2E6 :                     CODE_12H:			; STAX D
     952/     2E6 : 2E 00               	FIM P7, REG8_A
     953/     2E8 : 58 02               	JMS LD_P1_REG8P7
     954/     2EA : 20 08               	FIM P0, REG16_DE
     955/     2EC : 4B 81               	JUN LD_PM16REG16P0_P1
     956/     2EE :                     	
     957/     2EE :                     CODE_13H:			; INX D
     958/     2EE : 20 08               	FIM P0, REG16_DE
     959/     2F0 : 48 54               	JUN INC_REG16P0
     960/     2F2 :                     
     961/     2F2 :                     CODE_14H:			; INR D
     962/     2F2 : 22 0A               	FIM P1, REG8_D
     963/     2F4 : 44 30               	JUN CODE_INR
     964/     2F6 :                     
     965/     2F6 :                     CODE_15H:			; DCR D
     966/     2F6 : 22 0A               	FIM P1, REG8_D
     967/     2F8 : 44 36               	JUN CODE_DCR
     968/     2FA :                     ;;; 	BBL 0
     969/     2FA :                     
     970/     2FA :                     CODE_16H:			; MVI D,B2
     971/     2FA : 24 0A               	FIM P2, REG8_D
     972/     2FC : 44 3C               	JUN CODE_MVI
     973/     2FE :                     ;;; 	BBL 0
     974/     2FE :                     
     975/     2FE :                     CODE_17H:			; RAL
     976/     2FE : 20 00               	FIM P0, REG8_A
     977/     300 : 58 0A               	JMS LD_P1_REG8P0	; P1=ACC
     978/     302 : 56 39               	JMS GETFLAG_C		; CY=FLAG_C
     979/     304 :                     ;;; 	RAR			; can be omitted because CY is already C
     980/     304 : A3                  	LD P1_LO
     981/     305 : F5                  	RAL
     982/     306 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/04/15 23:22:03


     983/     307 : A2                  	LD P1_HI
     984/     308 : F5                  	RAL
     985/     309 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     986/     30A : 56 85               	JMS SETFLAG_C_CY
     987/     30C : 47 EA               	JUN LD_REG8P0_P1
     988/     30E :                     ;;;	BBL 0
     989/     30E :                     	
     990/     30E :                     CODE_18H:			; ...
     991/     30E : C0                  	BBL 0
     992/     30F :                     
     993/     30F :                     CODE_19H:			; DAD D
     994/     30F : 20 04               	FIM P0, REG16_HL
     995/     311 : 22 08               	FIM P1, REG16_DE
     996/     313 : 58 99               	JMS ADD_REG16P0_REG16P1
     997/     315 : 46 85               	JUN SETFLAG_C_CY
     998/     317 :                     ;;;	BBL 0
     999/     317 :                     	
    1000/     317 :                     CODE_1AH:			; LDAX D
    1001/     317 : 20 08               	FIM P0, REG16_DE
    1002/     319 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1003/     31B : 58 64               	JMS DEC_REG16P0
    1004/     31D :                     	
    1005/     31D : 24 00               	FIM P2, REG8_A
    1006/     31F : 47 F6               	JUN LD_REG8P2_P1
    1007/     321 :                     ;;;	BBL 0
    1008/     321 :                     
    1009/     321 :                     CODE_1BH:			; DCX D
    1010/     321 : 20 08               	FIM P0, REG16_DE
    1011/     323 : 48 64               	JUN DEC_REG16P0
    1012/     325 :                     ;;;	BBL 0
    1013/     325 :                     
    1014/     325 :                     CODE_1CH:			; INR E
    1015/     325 : 22 08               	FIM P1, REG8_E
    1016/     327 : 44 30               	JUN CODE_INR
    1017/     329 :                     ;;;	BBL 0
    1018/     329 :                     
    1019/     329 :                     CODE_1DH:			; DCR E
    1020/     329 : 22 08               	FIM P1, REG8_E
    1021/     32B : 44 36               	JUN CODE_DCR
    1022/     32D :                     ;;;	BBL 0
    1023/     32D :                     
    1024/     32D :                     CODE_1EH:			; MVI E,B2
    1025/     32D : 24 08               	FIM P2, REG8_E
    1026/     32F : 44 3C               	JUN CODE_MVI
    1027/     331 :                     ;;;	BBL 0
    1028/     331 :                     
    1029/     331 :                     CODE_1FH:			; RAR
    1030/     331 : 20 00               	FIM P0, REG8_A
    1031/     333 : 58 0A               	JMS LD_P1_REG8P0	; P1=ACC
    1032/     335 : 56 39               	JMS GETFLAG_C		; CY=FLAG_C
    1033/     337 :                     ;;; 	RAR			; can be omitted because CY is already C
    1034/     337 : A2                  	LD P1_HI
    1035/     338 : F6                  	RAR
    1036/     339 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
    1037/     33A : A3                  	LD P1_LO
    1038/     33B : F6                  	RAR
    1039/     33C : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
    1040/     33D : 56 85               	JMS SETFLAG_C_CY
    1041/     33F : 47 EA               	JUN LD_REG8P0_P1
    1042/     341 :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/04/15 23:22:03


    1043/     341 :                     
    1044/     341 :                     CODE_20H:			; ...
    1045/     341 : C0                  	BBL 0
    1046/     342 :                     
    1047/     342 :                     CODE_21H:			; LXI H,B3B2
    1048/     342 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1049/     344 : 24 04               	FIM P2, REG8_L
    1050/     346 : 57 F6               	JMS LD_REG8P2_P1
    1051/     348 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1052/     34A : 24 06               	FIM P2, REG8_H
    1053/     34C : 47 F6               	JUN LD_REG8P2_P1
    1054/     34E :                     ;;;	BBL 0
    1055/     34E :                     
    1056/     34E :                     CODE_22H:			; SHLD,B3B2
    1057/     34E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1058/     350 : 24 1C               	FIM P2, REG8_ADDRL
    1059/     352 : 57 F6               	JMS LD_REG8P2_P1
    1060/     354 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1061/     356 : 24 1E               	FIM P2, REG8_ADDRH
    1062/     358 : 57 F6               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1063/     35A :                     
    1064/     35A : 2E 04               	FIM P7, REG8_L
    1065/     35C : 58 02               	JMS LD_P1_REG8P7
    1066/     35E : 20 1C               	FIM P0, REG16_ADDR
    1067/     360 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
    1068/     362 : 58 54               	JMS INC_REG16P0		; REG(ADDR)++
    1069/     364 :                     	
    1070/     364 : 2E 06               	FIM P7, REG8_H
    1071/     366 : 58 02               	JMS LD_P1_REG8P7
    1072/     368 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
    1073/     36A : 48 54               	JUN INC_REG16P0		; REG(ADDR)++ and return
    1074/     36C :                     ;;;	BBL 0
    1075/     36C :                     
    1076/     36C :                     	
    1077/     36C :                     CODE_23H:			; INX H
    1078/     36C : 20 04               	FIM P0, REG16_HL
    1079/     36E : 48 54               	JUN INC_REG16P0
    1080/     370 :                     ;;;	BBL 0
    1081/     370 :                     
    1082/     370 :                     CODE_24H:			; INR H
    1083/     370 : 22 06               	FIM P1, REG8_H
    1084/     372 : 44 30               	JUN CODE_INR
    1085/     374 :                     ;;;	BBL 0
    1086/     374 :                     
    1087/     374 :                     CODE_25H:			; DCR H
    1088/     374 : 22 06               	FIM P1, REG8_H
    1089/     376 : 44 36               	JUN CODE_DCR
    1090/     378 :                     ;;;	BBL 0
    1091/     378 :                     
    1092/     378 :                     CODE_26H:			; MVI H,B2
    1093/     378 : 24 06               	FIM P2, REG8_H
    1094/     37A : 44 3C               	JUN CODE_MVI
    1095/     37C :                     ;;;	BBL 0
    1096/     37C :                     
    1097/     37C :                     CODE_27H:			; DAA
    1098/     37C :                     				; This is not properly implemeted
    1099/     37C :                     				; due to the lack of AC(CY4) flag
    1100/     37C : 20 00               	FIM P0, REG8_A
    1101/     37E : 58 0A               	JMS LD_P1_REG8P0
    1102/     380 : A3                  	LD P1_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/04/15 23:22:03


    1103/     381 : FB                  	DAA
    1104/     382 : B3                  	XCH P1_LO		; P1_LO=DAA(P1_LO), CY=0 or 1
    1105/     383 : D0                  	LDM 0
    1106/     384 : 82                  	ADD P1_HI		; ACC=P1_HI+CY
    1107/     385 : FB                  	DAA
    1108/     386 : B2                  	XCH P1_HI
    1109/     387 :                     	
    1110/     387 : 47 EA               	JUN LD_REG8P0_P1
    1111/     389 :                     ;;;	BBL 0
    1112/     389 :                     
    1113/     389 :                     CODE_28H:			; ...
    1114/     389 : C0                  	BBL 0
    1115/     38A :                     
    1116/     38A :                     CODE_29H:			; DAD H
    1117/     38A : 20 04               	FIM P0, REG16_HL
    1118/     38C : 22 04               	FIM P1, REG16_HL
    1119/     38E : 58 99               	JMS ADD_REG16P0_REG16P1
    1120/     390 : 46 85               	JUN SETFLAG_C_CY
    1121/     392 :                     ;;;	BBL 0
    1122/     392 :                     
    1123/     392 :                     CODE_2AH:			; LHLD,B3B2
    1124/     392 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1125/     394 : 24 1C               	FIM P2, REG8_ADDRL
    1126/     396 : 57 F6               	JMS LD_REG8P2_P1
    1127/     398 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1128/     39A : 24 1E               	FIM P2, REG8_ADDRH
    1129/     39C : 57 F6               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1130/     39E :                     
    1131/     39E : 20 1C               	FIM P0, REG16_ADDR
    1132/     3A0 : 24 04               	FIM P2, REG8_L
    1133/     3A2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1134/     3A4 : 57 F6               	JMS LD_REG8P2_P1
    1135/     3A6 :                     
    1136/     3A6 : 24 06               	FIM P2, REG8_H
    1137/     3A8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1138/     3AA : 47 F6               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1139/     3AC :                     ;;;	BBL 0
    1140/     3AC :                     
    1141/     3AC :                     CODE_2BH:			; DCX H
    1142/     3AC : 20 04               	FIM P0, REG16_HL
    1143/     3AE : 48 64               	JUN DEC_REG16P0
    1144/     3B0 :                     ;;;	BBL 0
    1145/     3B0 :                     
    1146/     3B0 :                     CODE_2CH:			; INR L
    1147/     3B0 : 22 04               	FIM P1, REG8_L
    1148/     3B2 : 44 30               	JUN CODE_INR
    1149/     3B4 :                     ;;;	BBL 0
    1150/     3B4 :                     
    1151/     3B4 :                     CODE_2DH:			; DCR L
    1152/     3B4 : 22 04               	FIM P1, REG8_L
    1153/     3B6 : 44 36               	JUN CODE_DCR
    1154/     3B8 :                     ;;;	BBL 0
    1155/     3B8 :                     
    1156/     3B8 :                     CODE_2EH:			; MVI L,B2
    1157/     3B8 : 24 04               	FIM P2, REG8_L
    1158/     3BA : 44 3C               	JUN CODE_MVI
    1159/     3BC :                     ;;;	BBL 0
    1160/     3BC :                     
    1161/     3BC :                     CODE_2FH:			; CMA
    1162/     3BC : 20 00               	FIM P0, REG8_A		; A=~A
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/04/15 23:22:03


    1163/     3BE : 58 0A               	JMS LD_P1_REG8P0
    1164/     3C0 : A3                  	LD P1_LO
    1165/     3C1 : F4                  	CMA
    1166/     3C2 : B3                  	XCH P1_LO
    1167/     3C3 :                     
    1168/     3C3 : A2                  	LD P1_HI
    1169/     3C4 : F4                  	CMA
    1170/     3C5 : B2                  	XCH P1_HI
    1171/     3C6 : 47 EA               	JUN LD_REG8P0_P1
    1172/     3C8 :                     ;;;	BBL 0
    1173/     3C8 :                     	
    1174/     3C8 :                     CODE_30H:			; ...
    1175/     3C8 : C0                  	BBL 0
    1176/     3C9 :                     
    1177/     3C9 :                     CODE_31H:			; LXI SP, B3B2
    1178/     3C9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1179/     3CB : 24 18               	FIM P2, REG8_SPL
    1180/     3CD : 57 F6               	JMS LD_REG8P2_P1
    1181/     3CF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1182/     3D1 : 24 1A               	FIM P2, REG8_SPH
    1183/     3D3 : 47 F6               	JUN LD_REG8P2_P1
    1184/     3D5 :                     ;;;	BBL 0
    1185/     3D5 :                     
    1186/     3D5 :                     CODE_32H:			; STA B3B2
    1187/     3D5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1188/     3D7 : 24 1C               	FIM P2, REG8_ADDRL
    1189/     3D9 : 57 F6               	JMS LD_REG8P2_P1
    1190/     3DB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1191/     3DD : 24 1E               	FIM P2, REG8_ADDRH
    1192/     3DF : 57 F6               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1193/     3E1 :                     
    1194/     3E1 : 2E 00               	FIM P7, REG8_A
    1195/     3E3 : 58 02               	JMS LD_P1_REG8P7	; P1=A
    1196/     3E5 : 20 1C               	FIM P0, REG16_ADDR
    1197/     3E7 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1198/     3E9 :                     ;;;	BBL 0
    1199/     3E9 :                     	
    1200/     3E9 :                     CODE_33H:			; INX SP
    1201/     3E9 : 20 18               	FIM P0, REG16_SP
    1202/     3EB : 48 54               	JUN INC_REG16P0
    1203/     3ED :                     ;;;	BBL 0
    1204/     3ED :                     
    1205/     3ED :                     CODE_34H:			; INR M
    1206/     3ED : 20 04               	FIM P0, REG16_HL
    1207/     3EF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1208/     3F1 : 58 64               	JMS DEC_REG16P0
    1209/     3F3 :                     	
    1210/     3F3 : 5C BF               	JMS INC_P1
    1211/     3F5 : 5B 81               	JMS LD_PM16REG16P0_P1
    1212/     3F7 :                     
    1213/     3F7 : 46 9F               	JUN SETFLAG_ZSP_P1
    1214/     3F9 :                     ;;;	BBL 0
    1215/     3F9 :                     
    1216/     3F9 :                     CODE_35H:			; DCR M
    1217/     3F9 : 20 04               	FIM P0, REG16_HL
    1218/     3FB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1219/     3FD : 58 64               	JMS DEC_REG16P0
    1220/     3FF :                     	
    1221/     3FF : 5C C5               	JMS DEC_P1
    1222/     401 : 5B 81               	JMS LD_PM16REG16P0_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/04/15 23:22:03


    1223/     403 :                     
    1224/     403 : 46 9F               	JUN SETFLAG_ZSP_P1
    1225/     405 :                     ;;;	BBL 0
    1226/     405 :                     	
    1227/     405 :                     CODE_36H:			; MVI M, B2
    1228/     405 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1229/     407 : 20 04               	FIM P0, REG16_HL
    1230/     409 : 4B 81               	JUN LD_PM16REG16P0_P1
    1231/     40B :                     ;;;	BBL 0
    1232/     40B :                     	
    1233/     40B :                     CODE_37H:			; STC
    1234/     40B : 46 90               	JUN SETFLAG_C_1
    1235/     40D :                     ;;;	BBL 0
    1236/     40D :                     
    1237/     40D :                     CODE_38H:			; ...
    1238/     40D : C0                  	BBL 0
    1239/     40E :                     
    1240/     40E :                     CODE_39H:			; DAD SP
    1241/     40E : 20 04               	FIM P0, REG16_HL
    1242/     410 : 22 18               	FIM P1, REG16_SP
    1243/     412 : 58 99               	JMS ADD_REG16P0_REG16P1
    1244/     414 : 46 85               	JUN SETFLAG_C_CY
    1245/     416 :                     ;;;	BBL 0
    1246/     416 :                     
    1247/     416 :                     CODE_3AH:			; LDA B2B3
    1248/     416 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1249/     418 : 24 1C               	FIM P2, REG8_ADDRL
    1250/     41A : 57 F6               	JMS LD_REG8P2_P1
    1251/     41C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1252/     41E : 24 1E               	FIM P2, REG8_ADDRH
    1253/     420 : 57 F6               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1254/     422 :                     
    1255/     422 : 20 1C               	FIM P0, REG16_ADDR
    1256/     424 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1257/     426 : 24 00               	FIM P2, REG8_A
    1258/     428 : 47 F6               	JUN LD_REG8P2_P1	; P1=A and return
    1259/     42A :                     ;;;	BBL 0
    1260/     42A :                     
    1261/     42A :                     CODE_3BH:			; DCX SP
    1262/     42A : 20 18               	FIM P0, REG16_SP
    1263/     42C : 48 64               	JUN DEC_REG16P0
    1264/     42E :                     ;;;	BBL 0
    1265/     42E :                     
    1266/     42E :                     CODE_3CH:			; INR A
    1267/     42E : 22 00               	FIM P1, REG8_A
    1268/     430 :                     CODE_INR:
    1269/     430 : 57 A6               	JMS INC_REG8P1
    1270/     432 : 46 9D               	JUN SETFLAG_ZSP_REG8P1
    1271/     434 :                     ;;;	BBL 0
    1272/     434 :                     
    1273/     434 :                     CODE_3DH:			; DCR A
    1274/     434 : 22 00               	FIM P1, REG8_A
    1275/     436 :                     CODE_DCR:
    1276/     436 : 57 C7               	JMS DEC_REG8P1
    1277/     438 : 46 9D               	JUN SETFLAG_ZSP_REG8P1
    1278/     43A :                     ;;;	BBL 0
    1279/     43A :                     
    1280/     43A :                     CODE_3EH:			; MVI A,B2
    1281/     43A : 24 00               	FIM P2, REG8_A
    1282/     43C :                     CODE_MVI:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/04/15 23:22:03


    1283/     43C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1284/     43E : 47 F6               	JUN LD_REG8P2_P1
    1285/     440 :                     ;;;	BBL 0
    1286/     440 :                     
    1287/     440 :                     CODE_3FH:			; CMC
    1288/     440 : 56 39               	JMS GETFLAG_C
    1289/     442 :                     ;;; 	RAR			; can be omitted because CY is already C
    1290/     442 : F3                  	CMC
    1291/     443 : 46 85               	JUN SETFLAG_C_CY
    1292/     445 :                     ;;;	BBL 0
    1293/     445 :                     
    1294/     445 :                     CODE_C0H:			; RNZ
    1295/     445 : 56 26               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1296/     447 : 44 8C               	JUN RET_IF0		; return if Z flag == 0
    1297/     449 :                     	;;;	BBL 0
    1298/     449 :                     
    1299/     449 :                     CODE_C1H:			; POP B
    1300/     449 : 24 0E               	FIM P2, REG8_B
    1301/     44B : 26 0C               	FIM P3, REG8_C
    1302/     44D : 45 BF               	JUN CODE_POP_REG8P2P3
    1303/     44F :                     ;;;	BBL 0
    1304/     44F :                     
    1305/     44F :                     CODE_C2H:			; JNZ
    1306/     44F : 56 26               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1307/     451 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1308/     451 :                     ;;; this jump can be omitted
    1309/     451 :                     JMP_IF0:
    1310/     451 : 14 5F               	JCN Z, CODE_JMP
    1311/     453 : 58 54               	JMS INC_REG16P0		; PC+=2
    1312/     455 : 58 54               	JMS INC_REG16P0
    1313/     457 : C0                  	BBL 0
    1314/     458 :                     JMP_IF1:
    1315/     458 : 1C 5F               	JCN ZN, CODE_JMP
    1316/     45A : 58 54               	JMS INC_REG16P0		; PC+=2
    1317/     45C : 58 54               	JMS INC_REG16P0
    1318/     45E : C0                  	BBL 0
    1319/     45F :                     
    1320/     45F :                     CODE_C3H:			; JMP B3B2
    1321/     45F :                     CODE_JMP:
    1322/     45F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1323/     461 : (MACRO)              	LD_P3_P1
    1323/     461 : A2                                  LD P1_HI
    1323/     462 : B6                                  XCH P3_HI
    1323/     463 : A3                                  LD P1_LO
    1323/     464 : B7                                  XCH P3_LO
    1324/     465 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1325/     467 : (MACRO)              	LD_P2_P1
    1325/     467 : A2                                  LD P1_HI
    1325/     468 : B4                                  XCH P2_HI
    1325/     469 : A3                                  LD P1_LO
    1325/     46A : B5                                  XCH P2_LO
    1326/     46B :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1327/     46B : 47 8F               	JUN LD_REG16P0_P2P3
    1328/     46D :                     ;;;	BBL 0
    1329/     46D :                     
    1330/     46D :                     CODE_C4H:			; CNZ
    1331/     46D : 56 26               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1332/     46F : 44 A3               	JUN CALL_IF0		; call if Z==0
    1333/     471 :                     ;;;	BBL 0
    1334/     471 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/04/15 23:22:03


    1335/     471 :                     CODE_C5H:			; PUSH B
    1336/     471 : 24 0E               	FIM P2, REG8_B
    1337/     473 : 26 0C               	FIM P3, REG8_C
    1338/     475 : 45 D6               	JUN CODE_PUSH_REG8P2P3
    1339/     477 :                     ;;;	BBL 0
    1340/     477 :                     
    1341/     477 :                     CODE_C6H:			; ADI B2
    1342/     477 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1343/     479 :                     ADI_P1:
    1344/     479 : 20 00               	FIM P0, REG8_A
    1345/     47B : 57 95               	JMS ADD_REG8P0_P1
    1346/     47D : 56 85               	JMS SETFLAG_C_CY
    1347/     47F : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1348/     481 :                     ;;;	BBL 0
    1349/     481 :                     	
    1350/     481 :                     CODE_C7H:			; RST 0
    1351/     481 : 24 00               	FIM P2, up(0<<3)
    1352/     483 : 26 00               	FIM P3, lo(0<<3)
    1353/     485 : 44 B6               	JUN CALL_P2P3
    1354/     487 :                     ;;;	BBL 0
    1355/     487 :                     	
    1356/     487 :                     CODE_C8H:			; RZ
    1357/     487 : 56 26               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1358/     489 :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1359/     489 :                     ;;; this jump can be omitted
    1360/     489 :                     RET_IF1:
    1361/     489 : 1C 8F               	JCN ZN, CODE_RET
    1362/     48B : C0                  	BBL 0
    1363/     48C :                     RET_IF0:
    1364/     48C : 14 8F               	JCN Z, CODE_RET
    1365/     48E : C0                  	BBL 0
    1366/     48F :                     CODE_C9H:			; RET
    1367/     48F :                     CODE_RET:	
    1368/     48F : 24 16               	FIM P2, REG8_PCH
    1369/     491 : 26 14               	FIM P3, REG8_PCL
    1370/     493 : 45 BF               	JUN CODE_POP_REG8P2P3
    1371/     495 :                     ;;;	BBL 0
    1372/     495 :                     	
    1373/     495 :                     CODE_CAH:			; JZ
    1374/     495 : 56 26               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1375/     497 : 44 58               	JUN JMP_IF1		; jump if Z==1
    1376/     499 :                     ;;;	BBL 0
    1377/     499 :                     
    1378/     499 :                     CODE_CBH:			; ...
    1379/     499 : C0                  	BBL 0
    1380/     49A :                     
    1381/     49A :                     CODE_CCH:			; CZ
    1382/     49A : 56 26               	JMS GETFLAG_Z
    1383/     49C :                     CALL_IF1:
    1384/     49C : 1C AA               	JCN ZN, CODE_CALL
    1385/     49E : 58 54               	JMS INC_REG16P0		; PC+=2
    1386/     4A0 : 58 54               	JMS INC_REG16P0
    1387/     4A2 : C0                  	BBL 0
    1388/     4A3 :                     CALL_IF0:	
    1389/     4A3 : 14 AA               	JCN Z, CODE_CALL
    1390/     4A5 : 58 54               	JMS INC_REG16P0		; PC+=2
    1391/     4A7 : 58 54               	JMS INC_REG16P0
    1392/     4A9 : C0                  	BBL 0
    1393/     4AA :                     
    1394/     4AA :                     CODE_CDH:			; CALL B3B2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/04/15 23:22:03


    1395/     4AA :                     CODE_CALL:
    1396/     4AA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1397/     4AC : (MACRO)              	LD_P3_P1
    1397/     4AC : A2                                  LD P1_HI
    1397/     4AD : B6                                  XCH P3_HI
    1397/     4AE : A3                                  LD P1_LO
    1397/     4AF : B7                                  XCH P3_LO
    1398/     4B0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1399/     4B2 : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1399/     4B2 : A2                                  LD P1_HI
    1399/     4B3 : B4                                  XCH P2_HI
    1399/     4B4 : A3                                  LD P1_LO
    1399/     4B5 : B5                                  XCH P2_LO
    1400/     4B6 :                     
    1401/     4B6 :                     CALL_P2P3:
    1402/     4B6 : 22 1C               	FIM P1, REG16_ADDR
    1403/     4B8 : 57 6F               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
    1404/     4BA :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1405/     4BA : 57 8F               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1406/     4BC :                     	
    1407/     4BC :                     	;; PUSH PC
    1408/     4BC : 24 1E               	FIM P2, REG8_ADDRH
    1409/     4BE : 26 1C               	FIM P3, REG8_ADDRL
    1410/     4C0 : 45 D6               	JUN CODE_PUSH_REG8P2P3
    1411/     4C2 :                     ;;; 	BBL 0
    1412/     4C2 :                     
    1413/     4C2 :                     CODE_CEH:			; ACI B2
    1414/     4C2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1415/     4C4 :                     ACI_P1:
    1416/     4C4 : 56 39               	JMS GETFLAG_C
    1417/     4C6 : 14 CA               	JCN Z, ACI_P1_NOCARRY
    1418/     4C8 : 5C BF               	JMS INC_P1
    1419/     4CA :                     ACI_P1_NOCARRY:	
    1420/     4CA : 20 00               	FIM P0, REG8_A
    1421/     4CC : 57 95               	JMS ADD_REG8P0_P1
    1422/     4CE : 56 85               	JMS SETFLAG_C_CY
    1423/     4D0 : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1424/     4D2 :                     ;;;	BBL 0
    1425/     4D2 :                     	
    1426/     4D2 :                     CODE_CFH:			; RST 1
    1427/     4D2 : 24 00               	FIM P2, up(1<<3)
    1428/     4D4 : 26 08               	FIM P3, lo(1<<3)
    1429/     4D6 : 44 B6               	JUN CALL_P2P3
    1430/     4D8 :                     	
    1431/     4D8 :                     CODE_D0H:			; RNC
    1432/     4D8 : 56 39               	JMS GETFLAG_C		;
    1433/     4DA : 44 8C               	JUN RET_IF0		;
    1434/     4DC :                     ;;;	BBL 0
    1435/     4DC :                     
    1436/     4DC :                     CODE_D1H:			; POP D
    1437/     4DC : 24 0A               	FIM P2, REG8_D
    1438/     4DE : 26 08               	FIM P3, REG8_E
    1439/     4E0 : 45 BF               	JUN CODE_POP_REG8P2P3
    1440/     4E2 :                     ;;;	BBL 0
    1441/     4E2 :                     
    1442/     4E2 :                     CODE_D2H:			; JNC
    1443/     4E2 : 56 39               	JMS GETFLAG_C
    1444/     4E4 : 44 51               	JUN JMP_IF0
    1445/     4E6 :                     ;;;	BBL 0
    1446/     4E6 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/04/15 23:22:03


    1447/     4E6 :                     CODE_D3H:			; OUT B2
    1448/     4E6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1449/     4E8 : 49 62               	JUN EMULATE_OUT_P1
    1450/     4EA :                     ;;;	BBL 0
    1451/     4EA :                     	
    1452/     4EA :                     CODE_D4H:			; CNC
    1453/     4EA : 56 39               	JMS GETFLAG_C
    1454/     4EC : 44 A3               	JUN CALL_IF0
    1455/     4EE :                     ;;;	BBL 0
    1456/     4EE :                     
    1457/     4EE :                     CODE_D5H:			; PUSH D
    1458/     4EE : 24 0A               	FIM P2, REG8_D
    1459/     4F0 : 26 08               	FIM P3, REG8_E
    1460/     4F2 : 45 D6               	JUN CODE_PUSH_REG8P2P3
    1461/     4F4 :                     ;;;	BBL 0
    1462/     4F4 :                     
    1463/     4F4 :                     CODE_D6H:			; SUI B2
    1464/     4F4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1465/     4F6 :                     SUI_P1:
    1466/     4F6 : 20 00               	FIM P0, REG8_A
    1467/     4F8 : 57 B6               	JMS SUB_REG8P0_P1
    1468/     4FA : 56 85               	JMS SETFLAG_C_CY
    1469/     4FC : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1470/     4FE :                     ;;;	BBL 0
    1471/     4FE :                     	
    1472/     4FE :                     CODE_D7H:			; RST 2
    1473/     4FE : 24 00               	FIM P2, up(2<<3)
    1474/     500 : 26 10               	FIM P3, lo(2<<3)
    1475/     502 : 44 B6               	JUN CALL_P2P3
    1476/     504 :                     ;;;	BBL 0
    1477/     504 :                     	
    1478/     504 :                     CODE_D8H:			; RC
    1479/     504 : 56 39               	JMS GETFLAG_C
    1480/     506 : 44 89               	JUN RET_IF1
    1481/     508 :                     ;;;	BBL 0
    1482/     508 :                     
    1483/     508 :                     CODE_D9H:			; ...
    1484/     508 : C0                  	BBL 0
    1485/     509 :                     
    1486/     509 :                     CODE_DAH:			; JC
    1487/     509 : 56 39               	JMS GETFLAG_C
    1488/     50B : 44 58               	JUN JMP_IF1
    1489/     50D :                     ;;;	BBL 0
    1490/     50D :                     
    1491/     50D :                     CODE_DBH:			; IN
    1492/     50D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1493/     50F : 49 7A               	JUN EMULATE_IN_P1
    1494/     511 :                     ;;;	BBL 0
    1495/     511 :                     
    1496/     511 :                     CODE_DCH:			; CC
    1497/     511 : 56 39               	JMS GETFLAG_C
    1498/     513 : 44 9C               	JUN CALL_IF1
    1499/     515 :                     
    1500/     515 :                     CODE_DDH:			; ...
    1501/     515 : C0                  	BBL 0
    1502/     516 :                     CODE_DEH:			; SBI B2
    1503/     516 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1504/     518 :                     SBI_P1:
    1505/     518 : 56 39               	JMS GETFLAG_C
    1506/     51A : 14 1E               	JCN Z, SBI_P1_NOCARRY
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/04/15 23:22:03


    1507/     51C : 5C BF               	JMS INC_P1
    1508/     51E :                     SBI_P1_NOCARRY:
    1509/     51E : 20 00               	FIM P0, REG8_A
    1510/     520 : 57 B6               	JMS SUB_REG8P0_P1
    1511/     522 : 56 85               	JMS SETFLAG_C_CY
    1512/     524 : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1513/     526 :                     ;;; 	BBL 0
    1514/     526 :                     
    1515/     526 :                     CODE_DFH:			; RST 3
    1516/     526 : 24 00               	FIM P2, up(3<<3)
    1517/     528 : 26 18               	FIM P3, lo(3<<3)
    1518/     52A : 44 B6               	JUN CALL_P2P3
    1519/     52C :                     
    1520/     52C :                     CODE_E0H:			; RPO
    1521/     52C : 56 75               	JMS GETFLAG_P
    1522/     52E : 44 8C               	JUN RET_IF0
    1523/     530 :                     	
    1524/     530 :                     CODE_E1H:			; POP H
    1525/     530 : 24 06               	FIM P2, REG8_H
    1526/     532 : 26 04               	FIM P3, REG8_L
    1527/     534 : 45 BF               	JUN CODE_POP_REG8P2P3
    1528/     536 :                     
    1529/     536 :                     CODE_E2H:			; JPO
    1530/     536 : 56 75               	JMS GETFLAG_P
    1531/     538 : 44 51               	JUN JMP_IF0
    1532/     53A :                     
    1533/     53A :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1534/     53A :                     	;; POP to ADDR
    1535/     53A : 24 1E               	FIM P2, REG8_ADDRH
    1536/     53C : 26 1C               	FIM P3, REG8_ADDRL
    1537/     53E : 20 18               	FIM P0, REG16_SP
    1538/     540 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1539/     542 : 57 F0               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1540/     544 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1541/     546 : 57 F6               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1542/     548 :                     
    1543/     548 :                     	;; PUSH HL
    1544/     548 : 24 06               	FIM P2, REG8_H
    1545/     54A : 26 04               	FIM P3, REG8_L
    1546/     54C : 58 16               	JMS LD_P1_REG8P2	; P1=REG(H)
    1547/     54E : 58 64               	JMS DEC_REG16P0		; REG(SP)--
    1548/     550 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1549/     552 :                     
    1550/     552 : 58 1C               	JMS LD_P1_REG8P3	; P1=REG(L)
    1551/     554 : 58 64               	JMS DEC_REG16P0		; REG(SP)--
    1552/     556 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1553/     558 :                     
    1554/     558 :                     	;; HL = ADDR
    1555/     558 : 2C 04               	FIM P6, REG16_HL
    1556/     55A : 2E 1C               	FIM P7, REG16_ADDR
    1557/     55C : 48 49               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1558/     55E :                     	
    1559/     55E :                     CODE_E4H:			; CPO
    1560/     55E : 56 75               	JMS GETFLAG_P
    1561/     560 : 44 A3               	JUN CALL_IF0
    1562/     562 :                     
    1563/     562 :                     CODE_E5H:			; PUSH H
    1564/     562 : 24 06               	FIM P2, REG8_H
    1565/     564 : 26 04               	FIM P3, REG8_L
    1566/     566 : 45 D6               	JUN CODE_PUSH_REG8P2P3
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/04/15 23:22:03


    1567/     568 :                     
    1568/     568 :                     CODE_E6H:			; ANI B2
    1569/     568 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1570/     56A :                     ANI_P1:
    1571/     56A : (MACRO)              	LD_P2_P1		; P2=B2
    1571/     56A : A2                                  LD P1_HI
    1571/     56B : B4                                  XCH P2_HI
    1571/     56C : A3                                  LD P1_LO
    1571/     56D : B5                                  XCH P2_LO
    1572/     56E : 20 00               	FIM P0, REG8_A
    1573/     570 : 58 0A               	JMS LD_P1_REG8P0	; P1=A
    1574/     572 : 56 DA               	JMS AND_P1_P2		; P1=A&P2
    1575/     574 : 57 EA               	JMS LD_REG8P0_P1	; A= P1
    1576/     576 : 56 87               	JMS SETFLAG_C_0
    1577/     578 : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1578/     57A :                     	
    1579/     57A :                     CODE_E7H:			; RST 4
    1580/     57A : 24 00               	FIM P2, up(4<<3)
    1581/     57C : 26 20               	FIM P3, lo(4<<3)
    1582/     57E : 44 B6               	JUN CALL_P2P3
    1583/     580 :                     
    1584/     580 :                     CODE_E8H:			; RPE
    1585/     580 : 56 75               	JMS GETFLAG_P
    1586/     582 : 44 89               	JUN RET_IF1
    1587/     584 :                     
    1588/     584 :                     CODE_E9H:			; PCHL
    1589/     584 : 22 04               	FIM P1, REG16_HL
    1590/     586 : 47 65               	JUN LD_REG16P0_REG16P1
    1591/     588 :                     	
    1592/     588 :                     CODE_EAH:			; JPE
    1593/     588 : 56 75               	JMS GETFLAG_P
    1594/     58A : 44 58               	JUN JMP_IF1
    1595/     58C :                     
    1596/     58C :                     CODE_EBH:			; XCHG
    1597/     58C : 20 1C               	FIM P0, REG16_ADDR
    1598/     58E : 22 04               	FIM P1, REG16_HL
    1599/     590 : 57 65               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1600/     592 : 20 08               	FIM P0, REG16_DE
    1601/     594 : 57 6F               	JMS LD_REG16P1_REG16P0	; HL=DE
    1602/     596 : 22 1C               	FIM P1, REG16_ADDR
    1603/     598 : 47 65               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1604/     59A :                     	
    1605/     59A :                     CODE_ECH:			; CPE
    1606/     59A : 56 75               	JMS GETFLAG_P
    1607/     59C : 44 9C               	JUN CALL_IF1
    1608/     59E :                     
    1609/     59E :                     CODE_EDH:			; ...
    1610/     59E : C0                  	BBL 0
    1611/     59F :                     
    1612/     59F :                     CODE_EEH:			; XRI B2
    1613/     59F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1614/     5A1 :                     XRI_P1:
    1615/     5A1 : (MACRO)              	LD_P2_P1		; P2=B2
    1615/     5A1 : A2                                  LD P1_HI
    1615/     5A2 : B4                                  XCH P2_HI
    1615/     5A3 : A3                                  LD P1_LO
    1615/     5A4 : B5                                  XCH P2_LO
    1616/     5A5 : 20 00               	FIM P0, REG8_A
    1617/     5A7 : 58 0A               	JMS LD_P1_REG8P0	; P1=A
    1618/     5A9 : 56 EB               	JMS XOR_P1_P2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/04/15 23:22:03


    1619/     5AB : 57 EA               	JMS LD_REG8P0_P1	; A= A ^ P2
    1620/     5AD : 56 87               	JMS SETFLAG_C_0
    1621/     5AF : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1622/     5B1 :                     	
    1623/     5B1 :                     CODE_EFH:			; RST 5
    1624/     5B1 : 24 00               	FIM P2, up(5<<3)
    1625/     5B3 : 26 28               	FIM P3, lo(5<<3)
    1626/     5B5 : 44 B6               	JUN CALL_P2P3
    1627/     5B7 :                     
    1628/     5B7 :                     CODE_F0H:			; RP
    1629/     5B7 : 56 30               	JMS GETFLAG_S
    1630/     5B9 : 44 8C               	JUN RET_IF0
    1631/     5BB :                     	
    1632/     5BB :                     CODE_F1H:			; POP PSW
    1633/     5BB : 24 00               	FIM P2, REG8_A
    1634/     5BD : 26 10               	FIM P3, REG8_FLAG
    1635/     5BF :                     CODE_POP_REG8P2P3:
    1636/     5BF : 20 18               	FIM P0, REG16_SP
    1637/     5C1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1638/     5C3 : 57 F0               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1639/     5C5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1640/     5C7 : 47 F6               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1641/     5C9 :                     	
    1642/     5C9 :                     CODE_F2H:			; JP
    1643/     5C9 : 56 30               	JMS GETFLAG_S
    1644/     5CB : 44 51               	JUN JMP_IF0
    1645/     5CD :                     
    1646/     5CD :                     CODE_F3H:			; DI
    1647/     5CD :                     				; Interrupt is not implemented
    1648/     5CD : C0                  	BBL 0
    1649/     5CE :                     
    1650/     5CE :                     CODE_F4H:			; CP
    1651/     5CE : 56 30               	JMS GETFLAG_S
    1652/     5D0 : 44 A3               	JUN CALL_IF0
    1653/     5D2 :                     
    1654/     5D2 :                     CODE_F5H:			; PUSH PSW
    1655/     5D2 : 24 00               	FIM P2, REG8_A
    1656/     5D4 : 26 10               	FIM P3, REG8_FLAG
    1657/     5D6 :                     CODE_PUSH_REG8P2P3:
    1658/     5D6 : 20 18               	FIM P0, REG16_SP
    1659/     5D8 :                     				; higher byte is the first
    1660/     5D8 : 58 16               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1661/     5DA : 58 64               	JMS DEC_REG16P0		; REG(SP)--
    1662/     5DC : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1663/     5DE :                     
    1664/     5DE : 58 1C               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1665/     5E0 : 58 64               	JMS DEC_REG16P0		; REG(SP)--
    1666/     5E2 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1667/     5E4 :                     
    1668/     5E4 :                     CODE_F6H:			; ORI
    1669/     5E4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1670/     5E6 :                     ORI_P1:
    1671/     5E6 : (MACRO)              	LD_P2_P1		; P2=B2
    1671/     5E6 : A2                                  LD P1_HI
    1671/     5E7 : B4                                  XCH P2_HI
    1671/     5E8 : A3                                  LD P1_LO
    1671/     5E9 : B5                                  XCH P2_LO
    1672/     5EA : 20 00               	FIM P0, REG8_A
    1673/     5EC : 58 0A               	JMS LD_P1_REG8P0	; P1=A
    1674/     5EE : 56 FC               	JMS OR_P1_P2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/04/15 23:22:03


    1675/     5F0 : 57 EA               	JMS LD_REG8P0_P1	; P1= A | P2
    1676/     5F2 : 56 87               	JMS SETFLAG_C_0
    1677/     5F4 : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1678/     5F6 :                     	
    1679/     5F6 :                     CODE_F7H:			; RST 6
    1680/     5F6 : 24 00               	FIM P2, up(6<<3)
    1681/     5F8 : 26 30               	FIM P3, lo(6<<3)
    1682/     5FA : 44 B6               	JUN CALL_P2P3
    1683/     5FC :                     
    1684/     5FC :                     CODE_F8H:			; RM
    1685/     5FC : 56 30               	JMS GETFLAG_S
    1686/     5FE : 44 89               	JUN RET_IF1
    1687/     600 :                     
    1688/     600 :                     CODE_F9H:			; SPHL
    1689/     600 : 2C 18               	FIM P6, REG16_SP
    1690/     602 : 2E 04               	FIM P7, REG16_HL
    1691/     604 : 48 49               	JUN LD_REG16P6_REG16P7
    1692/     606 :                     
    1693/     606 :                     CODE_FAH:			; JM
    1694/     606 : 56 30               	JMS GETFLAG_S
    1695/     608 : 44 58               	JUN JMP_IF1
    1696/     60A :                     
    1697/     60A :                     CODE_FBH:			; EI
    1698/     60A :                     				; Interrupt is not implemented
    1699/     60A : C0                  	BBL 0
    1700/     60B :                     
    1701/     60B :                     CODE_FCH:			; CM
    1702/     60B : 56 30               	JMS GETFLAG_S
    1703/     60D : 44 9C               	JUN CALL_IF1
    1704/     60F :                     
    1705/     60F :                     CODE_FDH:			; ...
    1706/     60F : C0                  	BBL 0
    1707/     610 :                     
    1708/     610 :                     CODE_FEH:			; CPI
    1709/     610 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1710/     612 :                     CPI_P1:
    1711/     612 : 2C 12               	FIM P6, REG8_SRC
    1712/     614 : 2E 00               	FIM P7, REG8_A
    1713/     616 : 57 DF               	JMS LD_REG8P6_REG8P7
    1714/     618 : 20 12               	FIM P0, REG8_SRC
    1715/     61A : 57 B6               	JMS SUB_REG8P0_P1
    1716/     61C : 56 85               	JMS SETFLAG_C_CY
    1717/     61E : 46 99               	JUN SETFLAG_ZSP_REG8P0
    1718/     620 :                     ;;; 	BBL 0
    1719/     620 :                     CODE_FFH:			; RST 7
    1720/     620 : 24 00               	FIM P2, up(7<<3)
    1721/     622 : 26 38               	FIM P3, lo(7<<3)
    1722/     624 : 44 B6               	JUN CALL_P2P3
    1723/     626 :                     
    1724/     626 :                     ;;;---------------------------------------------------------------------------
    1725/     626 :                     ;;; FLAG routines
    1726/     626 :                     ;;;---------------------------------------------------------------------------
    1727/     626 :                     
    1728/     626 :                     ;;;---------------------------------------------------------------------------
    1729/     626 :                     ;;; GETFLAG_Z
    1730/     626 :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1731/     626 :                     ;;;---------------------------------------------------------------------------
    1732/     626 :                     GETFLAG_Z:
    1733/     626 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1734/     628 : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/04/15 23:22:03


    1735/     629 : E9                  	RDM
    1736/     62A : F5                  	RAL
    1737/     62B : F5                  	RAL
    1738/     62C : 12 2F               	JCN C, GETFLAG_Z_EXIT1
    1739/     62E : C0                  	BBL 0
    1740/     62F :                     GETFLAG_Z_EXIT1:
    1741/     62F : C1                  	BBL 1
    1742/     630 :                     
    1743/     630 :                     ;;;---------------------------------------------------------------------------
    1744/     630 :                     ;;; GETFLAG_S
    1745/     630 :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1746/     630 :                     ;;;---------------------------------------------------------------------------
    1747/     630 :                     GETFLAG_S:
    1748/     630 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1749/     632 : 2F                  	SRC P7
    1750/     633 : E9                  	RDM
    1751/     634 : F5                  	RAL
    1752/     635 : 12 38               	JCN C, GETFLAG_S_EXIT1
    1753/     637 : C0                  	BBL 0
    1754/     638 :                     GETFLAG_S_EXIT1:
    1755/     638 : C1                  	BBL 1
    1756/     639 :                     
    1757/     639 :                     ;;;---------------------------------------------------------------------------
    1758/     639 :                     ;;; GETFLAG_C
    1759/     639 :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1760/     639 :                     ;;;---------------------------------------------------------------------------
    1761/     639 :                     GETFLAG_C:
    1762/     639 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1763/     63B : 2F                  	SRC P7
    1764/     63C : E9                  	RDM
    1765/     63D : F6                  	RAR
    1766/     63E : 12 41               	JCN C, GETFLAG_C_1
    1767/     640 : C0                  	BBL 0
    1768/     641 :                     GETFLAG_C_1:	
    1769/     641 : C1                  	BBL 1
    1770/     642 :                     
    1771/     642 :                     ;;;---------------------------------------------------------------------------
    1772/     642 :                     ;;; SETFLAG_P_P1
    1773/     642 :                     ;;;---------------------------------------------------------------------------
    1774/     642 : =>TRUE               	if USE_EMU_FLAG_P
    1775/     642 :                     SETFLAG_P_P1:
    1776/     642 : F0                  	CLB
    1777/     643 : BA                  	XCH CNT_I		; I=0
    1778/     644 : A2                  	LD P1_HI
    1779/     645 : F5                  	RAL
    1780/     646 : 1A 49               	JCN CN,PFLAG_CNT1
    1781/     648 : 6A                  	INC CNT_I
    1782/     649 :                     PFLAG_CNT1:
    1783/     649 : F5                  	RAL
    1784/     64A : 1A 4D               	JCN CN,PFLAG_CNT2
    1785/     64C : 6A                  	INC CNT_I
    1786/     64D :                     PFLAG_CNT2:
    1787/     64D : F5                  	RAL
    1788/     64E : 1A 51               	JCN CN,PFLAG_CNT3
    1789/     650 : 6A                  	INC CNT_I
    1790/     651 :                     PFLAG_CNT3:
    1791/     651 : F5                  	RAL
    1792/     652 : 1A 55               	JCN CN,PFLAG_CNT4
    1793/     654 : 6A                  	INC CNT_I
    1794/     655 :                     PFLAG_CNT4:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/04/15 23:22:03


    1795/     655 : A3                  	LD P1_LO
    1796/     656 : F5                  	RAL
    1797/     657 : 1A 5A               	JCN CN,PFLAG_CNT5
    1798/     659 : 6A                  	INC CNT_I
    1799/     65A :                     PFLAG_CNT5:
    1800/     65A : F5                  	RAL
    1801/     65B : 1A 5E               	JCN CN,PFLAG_CNT6
    1802/     65D : 6A                  	INC CNT_I
    1803/     65E :                     PFLAG_CNT6:
    1804/     65E : F5                  	RAL
    1805/     65F : 1A 62               	JCN CN,PFLAG_CNT7
    1806/     661 : 6A                  	INC CNT_I
    1807/     662 :                     PFLAG_CNT7:
    1808/     662 : F5                  	RAL
    1809/     663 : 1A 66               	JCN CN,PFLAG_CNT8
    1810/     665 : 6A                  	INC CNT_I
    1811/     666 :                     PFLAG_CNT8:
    1812/     666 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1813/     668 : 2F                  	SRC P7
    1814/     669 : E9                  	RDM
    1815/     66A : F5                  	RAL
    1816/     66B : F5                  	RAL
    1817/     66C : E0                  	WRM			; FLAG=xCxx (CY=P)
    1818/     66D :                     
    1819/     66D : AA                  	LD CNT_I
    1820/     66E : F6                  	RAR
    1821/     66F : F3                  	CMC			; CY=~(LSB of I) (P=1 when EVEN )
    1822/     670 :                     
    1823/     670 : E9                  	RDM
    1824/     671 : F6                  	RAR
    1825/     672 : F6                  	RAR
    1826/     673 : E0                  	WRM			; FLAG=xPxC
    1827/     674 :                     	
    1828/     674 : C0                  	BBL 0
    1829/     675 : [1774]               	endif 			; USE_EMU_FLAG_P
    1830/     675 :                     
    1831/     675 :                     ;;;---------------------------------------------------------------------------
    1832/     675 :                     ;;; GETFLAG_P
    1833/     675 :                     ;;; Flag P is loded to ACC
    1834/     675 :                     ;;; ACC=FLAG_P
    1835/     675 :                     ;;; This routine is compiled if USE_EMU_FLAG_P, 
    1836/     675 :                     ;;; otherwise FLAG_P is always 0.
    1837/     675 :                     ;;; 
    1838/     675 :                     ;;; This routine is not properly implemented,
    1839/     675 :                     ;;; because the frag is set on demand
    1840/     675 :                     ;;;---------------------------------------------------------------------------
    1841/     675 :                     GETFLAG_P:
    1842/     675 : =>TRUE               	if USE_EMU_FLAG_P
    1843/     675 :                     
    1844/     675 : 22 00               	FIM P1, REG8_A
    1845/     677 : 58 10               	JMS LD_P1_REG8P1
    1846/     679 : 56 42               	JMS SETFLAG_P_P1
    1847/     67B :                     
    1848/     67B : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1849/     67D : 2F                  	SRC P7
    1850/     67E : E9                  	RDM
    1851/     67F : F5                  	RAL
    1852/     680 : F5                  	RAL
    1853/     681 : 1A 84               	JCN CN, GETFLAG_P_0
    1854/     683 : C1                  	BBL 1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/04/15 23:22:03


    1855/     684 :                     GETFLAG_P_0:
    1856/     684 : [1842]               	endif 			; USE_EMU_FLAG_P
    1857/     684 : C0                  	BBL 0
    1858/     685 :                     	
    1859/     685 :                     ;;;---------------------------------------------------------------------------
    1860/     685 :                     ;;; SETFLAG_C_{CY, 0, 1}
    1861/     685 :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1862/     685 :                     ;;;---------------------------------------------------------------------------
    1863/     685 :                     SETFLAG_C_CY:
    1864/     685 : 12 90               	JCN C, SETFLAG_C_1
    1865/     687 :                     SETFLAG_C_0:
    1866/     687 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1867/     689 : 2F                  	SRC P7
    1868/     68A : E9                  	RDM
    1869/     68B : F6                  	RAR
    1870/     68C : F1                  	CLC
    1871/     68D : F5                  	RAL
    1872/     68E : E0                  	WRM
    1873/     68F : C0                  	BBL 0
    1874/     690 :                     SETFLAG_C_1:
    1875/     690 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1876/     692 : 2F                  	SRC P7
    1877/     693 : E9                  	RDM
    1878/     694 : F6                  	RAR
    1879/     695 : FA                  	STC
    1880/     696 : F5                  	RAL
    1881/     697 : E0                  	WRM
    1882/     698 : C0                  	BBL 0
    1883/     699 :                     
    1884/     699 :                     ;;;---------------------------------------------------------------------------
    1885/     699 :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1886/     699 :                     ;;; 
    1887/     699 :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1888/     699 :                     ;;; 
    1889/     699 :                     ;;; P flag is compiled if USE_EMU_FLAG_P, but not implemented properly yet.
    1890/     699 :                     ;;; It is evaluated on demand (in the GETFLAG_P routine)
    1891/     699 :                     ;;;---------------------------------------------------------------------------
    1892/     699 :                     SETFLAG_ZSP_REG8P0:
    1893/     699 : 58 0A               	JMS LD_P1_REG8P0
    1894/     69B : 46 9F               	JUN SETFLAG_ZSP_P1
    1895/     69D :                     
    1896/     69D :                     SETFLAG_ZSP_REG8P1:
    1897/     69D : 58 10               	JMS LD_P1_REG8P1
    1898/     69F :                     
    1899/     69F :                     SETFLAG_ZSP_P1:
    1900/     69F : A2                  	LD P1_HI		; ACC=Sxxx
    1901/     6A0 : F5                  	RAL			; CY=S
    1902/     6A1 : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1903/     6A2 :                     	
    1904/     6A2 : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
    1905/     6A3 :                     
    1906/     6A3 :                     	;; set Z FLAG
    1907/     6A3 : 5D 32               	JMS ISZEROORNOT_P1
    1908/     6A5 : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1909/     6A6 : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1910/     6A7 : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1911/     6A8 : F6                  	RAR			; ACC=ZBHx (CY=S)
    1912/     6A9 : F6                  	RAR			; ACC=SZBH (BH=00)
    1913/     6AA :                     
    1914/     6AA : 2E 11               	FIM P7, REG4_FLAG_SZBH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/04/15 23:22:03


    1915/     6AC : 2F                  	SRC P7
    1916/     6AD : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1917/     6AE :                     
    1918/     6AE :                     ;;;---------------------------------------------------------------------------
    1919/     6AE :                     ;;; Logical operators
    1920/     6AE :                     ;;; and, or, xor
    1921/     6AE :                     ;;; destroy: P3(R6, R7)
    1922/     6AE :                     ;;;---------------------------------------------------------------------------
    1923/     6AE :                     
    1924/     6AE :                     ;;;---------------------------------------------------------------------------
    1925/     6AE :                     ;;; AND_R6_R7
    1926/     6AE :                     ;;; R6 = R6 & R7
    1927/     6AE :                     ;;;---------------------------------------------------------------------------
    1928/     6AE :                     AND_R6_R7:
    1929/     6AE : F0                  	CLB
    1930/     6AF : A7                  	LD R7
    1931/     6B0 : F6                  	RAR
    1932/     6B1 : 12 B8               	JCN C, AND67_L1	; jump if R7.bit0==1
    1933/     6B3 : A6                  	LD R6
    1934/     6B4 : F6                  	RAR
    1935/     6B5 : F1                  	CLC
    1936/     6B6 : F5                  	RAL
    1937/     6B7 : B6                  	XCH R6		; R6.bit0=0
    1938/     6B8 :                     AND67_L1:
    1939/     6B8 : A7                  	LD R7
    1940/     6B9 : F6                  	RAR
    1941/     6BA : F6                  	RAR
    1942/     6BB : 12 C4               	JCN C, AND67_L2	; jump if R7.bit1==1
    1943/     6BD : A6                  	LD R6
    1944/     6BE : F6                  	RAR
    1945/     6BF : F6                  	RAR
    1946/     6C0 : F1                  	CLC
    1947/     6C1 : F5                  	RAL
    1948/     6C2 : F5                  	RAL
    1949/     6C3 : B6                  	XCH R6		; R6.bit1=0
    1950/     6C4 :                     AND67_L2:
    1951/     6C4 : A7                  	LD R7
    1952/     6C5 : F5                  	RAL
    1953/     6C6 : F5                  	RAL
    1954/     6C7 : 12 D0               	JCN C, AND67_L3	; jump if R7.bit2==1
    1955/     6C9 : A6                  	LD R6
    1956/     6CA : F5                  	RAL
    1957/     6CB : F5                  	RAL
    1958/     6CC : F1                  	CLC
    1959/     6CD : F6                  	RAR
    1960/     6CE : F6                  	RAR
    1961/     6CF : B6                  	XCH R6		; R6.bit2=0
    1962/     6D0 :                     AND67_L3:
    1963/     6D0 : A7                  	LD R7
    1964/     6D1 : F5                  	RAL
    1965/     6D2 : 12 D9               	JCN C, AND67_L4	; jump if R7.bit3==1
    1966/     6D4 : A6                  	LD R6
    1967/     6D5 : F5                  	RAL
    1968/     6D6 : F1                  	CLC
    1969/     6D7 : F6                  	RAR
    1970/     6D8 : B6                  	XCH R6		; R6.bit3=0
    1971/     6D9 :                     AND67_L4:
    1972/     6D9 :                     	
    1973/     6D9 : C0                  	BBL 0
    1974/     6DA :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/04/15 23:22:03


    1975/     6DA :                     ;;;---------------------------------------------------------------------------
    1976/     6DA :                     ;;; AND_P1_P2
    1977/     6DA :                     ;;; P1 = P1 & P2
    1978/     6DA :                     ;;;---------------------------------------------------------------------------
    1979/     6DA :                     AND_P1_P2:
    1980/     6DA : A3                  	LD P1_LO
    1981/     6DB : B6                  	XCH R6
    1982/     6DC : A5                  	LD P2_LO
    1983/     6DD : B7                  	XCH R7
    1984/     6DE : 56 AE               	JMS AND_R6_R7
    1985/     6E0 : A6                  	LD R6
    1986/     6E1 : B3                  	XCH P1_LO
    1987/     6E2 :                     	
    1988/     6E2 : A2                  	LD P1_HI
    1989/     6E3 : B6                  	XCH R6
    1990/     6E4 : A4                  	LD P2_HI
    1991/     6E5 : B7                  	XCH R7
    1992/     6E6 : 56 AE               	JMS AND_R6_R7
    1993/     6E8 : A6                  	LD R6
    1994/     6E9 : B2                  	XCH P1_HI
    1995/     6EA : C0                  	BBL 0
    1996/     6EB :                     
    1997/     6EB :                     ;;;---------------------------------------------------------------------------
    1998/     6EB :                     ;;; XOR_P1_P2
    1999/     6EB :                     ;;; P1 = P1 ^ P2
    2000/     6EB :                     ;;;---------------------------------------------------------------------------
    2001/     6EB :                     XOR_P1_P2:
    2002/     6EB : A3                  	LD P1_LO
    2003/     6EC : B6                  	XCH R6
    2004/     6ED : A5                  	LD P2_LO
    2005/     6EE : B7                  	XCH R7
    2006/     6EF : 57 0D               	JMS XOR_R6_R7
    2007/     6F1 : A6                  	LD R6
    2008/     6F2 : B3                  	XCH P1_LO
    2009/     6F3 :                     	
    2010/     6F3 : A2                  	LD P1_HI
    2011/     6F4 : B6                  	XCH R6
    2012/     6F5 : A4                  	LD P2_HI
    2013/     6F6 : B7                  	XCH R7
    2014/     6F7 : 57 0D               	JMS XOR_R6_R7
    2015/     6F9 : A6                  	LD R6
    2016/     6FA : B2                  	XCH P1_HI
    2017/     6FB : C0                  	BBL 0
    2018/     6FC :                     
    2019/     6FC :                     ;;;---------------------------------------------------------------------------
    2020/     6FC :                     ;;; OR_P1_P2
    2021/     6FC :                     ;;; P1 = P1 | P2
    2022/     6FC :                     ;;;---------------------------------------------------------------------------
    2023/     6FC :                     OR_P1_P2:
    2024/     6FC : A3                  	LD P1_LO
    2025/     6FD : B6                  	XCH R6
    2026/     6FE : A5                  	LD P2_LO
    2027/     6FF : B7                  	XCH R7
    2028/     700 : 57 39               	JMS OR_R6_R7
    2029/     702 : A6                  	LD R6
    2030/     703 : B3                  	XCH P1_LO
    2031/     704 :                     	
    2032/     704 : A2                  	LD P1_HI
    2033/     705 : B6                  	XCH R6
    2034/     706 : A4                  	LD P2_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/04/15 23:22:03


    2035/     707 : B7                  	XCH R7
    2036/     708 : 57 39               	JMS OR_R6_R7
    2037/     70A : A6                  	LD R6
    2038/     70B : B2                  	XCH P1_HI
    2039/     70C : C0                  	BBL 0
    2040/     70D :                     
    2041/     70D :                     ;;;---------------------------------------------------------------------------
    2042/     70D :                     ;;; XOR_R6_R7
    2043/     70D :                     ;;; R6 = R6 ^ R7
    2044/     70D :                     ;;;---------------------------------------------------------------------------
    2045/     70D :                     XOR_R6_R7:
    2046/     70D : F0                  	CLB
    2047/     70E : A7                  	LD R7
    2048/     70F : F6                  	RAR
    2049/     710 : 1A 17               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    2050/     712 : A6                  	LD R6
    2051/     713 : F6                  	RAR
    2052/     714 : F3                  	CMC
    2053/     715 : F5                  	RAL
    2054/     716 : B6                  	XCH R6			; cmp R6.bit0
    2055/     717 :                     XOR67_L1:
    2056/     717 : A7                  	LD R7
    2057/     718 : F6                  	RAR
    2058/     719 : F6                  	RAR
    2059/     71A : 1A 23               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    2060/     71C : A6                  	LD R6
    2061/     71D : F6                  	RAR
    2062/     71E : F6                  	RAR
    2063/     71F : F3                  	CMC
    2064/     720 : F5                  	RAL
    2065/     721 : F5                  	RAL
    2066/     722 : B6                  	XCH R6			; cmp R6.bit1
    2067/     723 :                     XOR67_L2:
    2068/     723 : A7                  	LD R7
    2069/     724 : F5                  	RAL
    2070/     725 : F5                  	RAL
    2071/     726 : 1A 2F               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    2072/     728 : A6                  	LD R6
    2073/     729 : F5                  	RAL
    2074/     72A : F5                  	RAL
    2075/     72B : F3                  	CMC
    2076/     72C : F6                  	RAR
    2077/     72D : F6                  	RAR
    2078/     72E : B6                  	XCH R6			; cmp R6.bit2
    2079/     72F :                     XOR67_L3:
    2080/     72F : A7                  	LD R7
    2081/     730 : F5                  	RAL
    2082/     731 : 1A 38               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    2083/     733 : A6                  	LD R6
    2084/     734 : F5                  	RAL
    2085/     735 : F3                  	CMC
    2086/     736 : F6                  	RAR
    2087/     737 : B6                  	XCH R6			; cmp R6.bit3
    2088/     738 :                     XOR67_L4:
    2089/     738 : C0                  	BBL 0
    2090/     739 :                     
    2091/     739 :                     ;;;---------------------------------------------------------------------------
    2092/     739 :                     ;;; OR_R6_R7
    2093/     739 :                     ;;; R6 = R6 | R7
    2094/     739 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/04/15 23:22:03


    2095/     739 :                     OR_R6_R7:
    2096/     739 : F0                  	CLB
    2097/     73A : A7                  	LD R7
    2098/     73B : F6                  	RAR
    2099/     73C : 1A 43               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2100/     73E : A6                  	LD R6
    2101/     73F : F6                  	RAR
    2102/     740 : FA                  	STC
    2103/     741 : F5                  	RAL
    2104/     742 : B6                  	XCH R6			; cmp R6.bit0
    2105/     743 :                     OR67_L1:
    2106/     743 : A7                  	LD R7
    2107/     744 : F6                  	RAR
    2108/     745 : F6                  	RAR
    2109/     746 : 1A 4F               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2110/     748 : A6                  	LD R6
    2111/     749 : F6                  	RAR
    2112/     74A : F6                  	RAR
    2113/     74B : FA                  	STC
    2114/     74C : F5                  	RAL
    2115/     74D : F5                  	RAL
    2116/     74E : B6                  	XCH R6			; cmp R6.bit1
    2117/     74F :                     OR67_L2:
    2118/     74F : A7                  	LD R7
    2119/     750 : F5                  	RAL
    2120/     751 : F5                  	RAL
    2121/     752 : 1A 5B               	JCN CN, OR67_L3	; jump if R7.bit2==0
    2122/     754 : A6                  	LD R6
    2123/     755 : F5                  	RAL
    2124/     756 : F5                  	RAL
    2125/     757 : FA                  	STC
    2126/     758 : F6                  	RAR
    2127/     759 : F6                  	RAR
    2128/     75A : B6                  	XCH R6			; cmp R6.bit2
    2129/     75B :                     OR67_L3:
    2130/     75B : A7                  	LD R7
    2131/     75C : F5                  	RAL
    2132/     75D : 1A 64               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2133/     75F : A6                  	LD R6
    2134/     760 : F5                  	RAL
    2135/     761 : FA                  	STC
    2136/     762 : F6                  	RAR
    2137/     763 : B6                  	XCH R6			; cmp R6.bit3
    2138/     764 :                     OR67_L4:
    2139/     764 : C0                  	BBL 0
    2140/     765 :                     
    2141/     765 :                     
    2142/     765 :                     ;;;	org 0900H
    2143/     765 :                     ;;;----------------------------------------------------------------------------
    2144/     765 :                     ;;; Subroutines for REG16 (16bit registars)
    2145/     765 :                     ;;;----------------------------------------------------------------------------
    2146/     765 :                     	
    2147/     765 :                     	
    2148/     765 :                     ;;;----------------------------------------------------------------------------
    2149/     765 :                     ;;; LD_REG16P0_REG16P1
    2150/     765 :                     ;;; REG16(P0) = REG16(P1)
    2151/     765 :                     ;;; destroy: P6, P7
    2152/     765 :                     ;;;----------------------------------------------------------------------------
    2153/     765 :                     LD_REG16P0_REG16P1:
    2154/     765 : (MACRO)              	LD_P6_P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/04/15 23:22:03


    2154/     765 : A0                                  LD P0_HI
    2154/     766 : BC                                  XCH P6_HI
    2154/     767 : A1                                  LD P0_LO
    2154/     768 : BD                                  XCH P6_LO
    2155/     769 : (MACRO)              	LD_P7_P1
    2155/     769 : A2                                  LD P1_HI
    2155/     76A : BE                                  XCH P7_HI
    2155/     76B : A3                                  LD P1_LO
    2155/     76C : BF                                  XCH P7_LO
    2156/     76D : 48 49               	JUN LD_REG16P6_REG16P7
    2157/     76F :                     
    2158/     76F :                     ;;;----------------------------------------------------------------------------
    2159/     76F :                     ;;; LD_REG16P1_REG16P0
    2160/     76F :                     ;;; REG16(P1) = REG16(P0)
    2161/     76F :                     ;;; destroy: P6, P7
    2162/     76F :                     ;;;----------------------------------------------------------------------------
    2163/     76F :                     LD_REG16P1_REG16P0:
    2164/     76F : (MACRO)              	LD_P6_P1
    2164/     76F : A2                                  LD P1_HI
    2164/     770 : BC                                  XCH P6_HI
    2164/     771 : A3                                  LD P1_LO
    2164/     772 : BD                                  XCH P6_LO
    2165/     773 : (MACRO)              	LD_P7_P0
    2165/     773 : A0                                  LD P0_HI
    2165/     774 : BE                                  XCH P7_HI
    2165/     775 : A1                                  LD P0_LO
    2165/     776 : BF                                  XCH P7_LO
    2166/     777 : 48 49               	JUN LD_REG16P6_REG16P7
    2167/     779 :                     
    2168/     779 :                     ;;;----------------------------------------------------------------------------
    2169/     779 :                     ;;; LD_REG16P7_P2P3
    2170/     779 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2171/     779 :                     ;;; destroy P7
    2172/     779 :                     ;;;----------------------------------------------------------------------------
    2173/     779 :                     LD_REG16P7_P2P3:
    2174/     779 : 2F                  	SRC P7
    2175/     77A : A7                  	LD P3_LO
    2176/     77B : E0                  	WRM
    2177/     77C :                     
    2178/     77C : 6F                  	INC P7_LO
    2179/     77D : 2F                  	SRC P7
    2180/     77E : A6                  	LD P3_HI
    2181/     77F : E0                  	WRM
    2182/     780 :                     
    2183/     780 : 6F                  	INC P7_LO
    2184/     781 : 2F                  	SRC P7
    2185/     782 : A5                  	LD P2_LO
    2186/     783 : E0                  	WRM
    2187/     784 :                     
    2188/     784 : 6F                  	INC P7_LO
    2189/     785 : 2F                  	SRC P7
    2190/     786 : A4                  	LD P2_HI
    2191/     787 : E0                  	WRM
    2192/     788 :                     
    2193/     788 : C0                  	BBL 0
    2194/     789 :                     
    2195/     789 :                     ;;;----------------------------------------------------------------------------
    2196/     789 :                     ;;; LD_REG16P1_P2P3
    2197/     789 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2198/     789 :                     ;;; destroy P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/04/15 23:22:03


    2199/     789 :                     ;;;----------------------------------------------------------------------------
    2200/     789 :                     LD_REG16P1_P2P3:
    2201/     789 : (MACRO)              	LD_P7_P1
    2201/     789 : A2                                  LD P1_HI
    2201/     78A : BE                                  XCH P7_HI
    2201/     78B : A3                                  LD P1_LO
    2201/     78C : BF                                  XCH P7_LO
    2202/     78D : 47 79               	JUN LD_REG16P7_P2P3
    2203/     78F :                     
    2204/     78F :                     ;;;----------------------------------------------------------------------------
    2205/     78F :                     ;;; LD_REG16P0_P2P3
    2206/     78F :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2207/     78F :                     ;;; destroy P7
    2208/     78F :                     ;;;----------------------------------------------------------------------------
    2209/     78F :                     LD_REG16P0_P2P3:
    2210/     78F : (MACRO)              	LD_P7_P0
    2210/     78F : A0                                  LD P0_HI
    2210/     790 : BE                                  XCH P7_HI
    2210/     791 : A1                                  LD P0_LO
    2210/     792 : BF                                  XCH P7_LO
    2211/     793 : 47 79               	JUN LD_REG16P7_P2P3
    2212/     795 :                     
    2213/     795 :                     ;;;----------------------------------------------------------------------------
    2214/     795 :                     ;;; ADD_REG8P0_P1
    2215/     795 :                     ;;; REG8(P0) = REG16(P0)+P1
    2216/     795 :                     ;;; destroy: P7(R14, R15)
    2217/     795 :                     ;;;----------------------------------------------------------------------------
    2218/     795 :                     ADD_REG8P0_P1:
    2219/     795 : (MACRO)              	LD_P7_P0
    2219/     795 : A0                                  LD P0_HI
    2219/     796 : BE                                  XCH P7_HI
    2219/     797 : A1                                  LD P0_LO
    2219/     798 : BF                                  XCH P7_LO
    2220/     799 : 2F                  	SRC P7
    2221/     79A : E9                  	RDM
    2222/     79B : A3                  	LD P1_LO
    2223/     79C : F1                  	CLC
    2224/     79D : EB                  	ADM
    2225/     79E : E0                  	WRM
    2226/     79F : 6F                  	INC P7_LO
    2227/     7A0 : 2F                  	SRC P7
    2228/     7A1 : E9                  	RDM
    2229/     7A2 : A2                  	LD P1_HI
    2230/     7A3 : EB                  	ADM
    2231/     7A4 : E0                  	WRM
    2232/     7A5 : C0                  	BBL 0
    2233/     7A6 :                     
    2234/     7A6 :                     ;;;----------------------------------------------------------------------------
    2235/     7A6 :                     ;;; INC_REG8P1
    2236/     7A6 :                     ;;; REG8(P1) = REG16(P1)+1
    2237/     7A6 :                     ;;; CY is set if overflow
    2238/     7A6 :                     ;;; destroy: P7(R14, R15)
    2239/     7A6 :                     ;;;----------------------------------------------------------------------------
    2240/     7A6 :                     INC_REG8P1:
    2241/     7A6 : (MACRO)              	LD_P7_P1
    2241/     7A6 : A2                                  LD P1_HI
    2241/     7A7 : BE                                  XCH P7_HI
    2241/     7A8 : A3                                  LD P1_LO
    2241/     7A9 : BF                                  XCH P7_LO
    2242/     7AA :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/04/15 23:22:03


    2243/     7AA : 2F                  	SRC P7
    2244/     7AB : E9                  	RDM
    2245/     7AC : F2                  	IAC 
    2246/     7AD : E0                  	WRM			; REG(P0).lower++
    2247/     7AE : 1C B5               	JCN NZ, REG8_INC_EXIT
    2248/     7B0 : 6F                  	INC P7_LO
    2249/     7B1 : 2F                  	SRC P7
    2250/     7B2 : E9                  	RDM
    2251/     7B3 : F2                  	IAC 
    2252/     7B4 : E0                  	WRM			; REG(P0).higher++
    2253/     7B5 :                     REG8_INC_EXIT:
    2254/     7B5 : C0                  	BBL 0
    2255/     7B6 :                     
    2256/     7B6 :                     ;;;----------------------------------------------------------------------------
    2257/     7B6 :                     ;;; SUB_REG8P0_P1
    2258/     7B6 :                     ;;; REG8(P0) = REG8(P0)-P1
    2259/     7B6 :                     ;;; destroy: P7(R14, R15)
    2260/     7B6 :                     ;;;----------------------------------------------------------------------------
    2261/     7B6 :                     SUB_REG8P0_P1:
    2262/     7B6 : (MACRO)              	LD_P7_P0
    2262/     7B6 : A0                                  LD P0_HI
    2262/     7B7 : BE                                  XCH P7_HI
    2262/     7B8 : A1                                  LD P0_LO
    2262/     7B9 : BF                                  XCH P7_LO
    2263/     7BA : 2F                  	SRC P7
    2264/     7BB : E9                  	RDM
    2265/     7BC : F1                  	CLC
    2266/     7BD : 93                  	SUB P1_LO
    2267/     7BE : E0                  	WRM
    2268/     7BF : F3                  	CMC
    2269/     7C0 :                     
    2270/     7C0 : 6F                  	INC P7_LO
    2271/     7C1 : 2F                  	SRC P7
    2272/     7C2 : E9                  	RDM
    2273/     7C3 : 92                  	SUB P1_HI
    2274/     7C4 : E0                  	WRM
    2275/     7C5 : F3                  	CMC
    2276/     7C6 :                     
    2277/     7C6 : C0                  	BBL 0	
    2278/     7C7 :                     
    2279/     7C7 :                     ;;;----------------------------------------------------------------------------
    2280/     7C7 :                     ;;; DEC_REG8P1
    2281/     7C7 :                     ;;; REG8(P1) = REG16(P1)+1
    2282/     7C7 :                     ;;; destroy: P7(R14, R15)
    2283/     7C7 :                     ;;;----------------------------------------------------------------------------
    2284/     7C7 :                     DEC_REG8P1:
    2285/     7C7 : (MACRO)              	LD_P7_P1
    2285/     7C7 : A2                                  LD P1_HI
    2285/     7C8 : BE                                  XCH P7_HI
    2285/     7C9 : A3                                  LD P1_LO
    2285/     7CA : BF                                  XCH P7_LO
    2286/     7CB :                     	
    2287/     7CB : 2F                  	SRC P7
    2288/     7CC : E9                  	RDM
    2289/     7CD : F8                  	DAC 
    2290/     7CE : E0                  	WRM			; REG(P0).lower--
    2291/     7CF : 12 D6               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2292/     7D1 : 6F                  	INC P7_LO
    2293/     7D2 : 2F                  	SRC P7
    2294/     7D3 : E9                  	RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/04/15 23:22:03


    2295/     7D4 : F8                  	DAC 
    2296/     7D5 : E0                  	WRM			; REG(P0).higher--
    2297/     7D6 :                     REG8_DEC_EXIT:
    2298/     7D6 : C0                  	BBL 0
    2299/     7D7 :                     
    2300/     7D7 :                     ;;;----------------------------------------------------------------------------
    2301/     7D7 :                     ;;; LD_REG8P0_REG8P1
    2302/     7D7 :                     ;;; REG8(P0)=REG8(P1)
    2303/     7D7 :                     ;;; destroy: P6, P7
    2304/     7D7 :                     ;;;----------------------------------------------------------------------------
    2305/     7D7 :                     LD_REG8P0_REG8P1:
    2306/     7D7 : (MACRO)              	LD_P6_P0
    2306/     7D7 : A0                                  LD P0_HI
    2306/     7D8 : BC                                  XCH P6_HI
    2306/     7D9 : A1                                  LD P0_LO
    2306/     7DA : BD                                  XCH P6_LO
    2307/     7DB : (MACRO)              	LD_P7_P1
    2307/     7DB : A2                                  LD P1_HI
    2307/     7DC : BE                                  XCH P7_HI
    2307/     7DD : A3                                  LD P1_LO
    2307/     7DE : BF                                  XCH P7_LO
    2308/     7DF :                     LD_REG8P6_REG8P7:
    2309/     7DF : 2F                  	SRC P7
    2310/     7E0 : E9                  	RDM
    2311/     7E1 : 2D                  	SRC P6
    2312/     7E2 : E0                  	WRM
    2313/     7E3 : 6F                  	INC P7_LO
    2314/     7E4 : 6D                  	INC P6_LO
    2315/     7E5 : 2F                  	SRC P7
    2316/     7E6 : E9                  	RDM
    2317/     7E7 : 2D                  	SRC P6
    2318/     7E8 : E0                  	WRM
    2319/     7E9 :                     
    2320/     7E9 : C0                  	BBL 0
    2321/     7EA :                     
    2322/     7EA :                     ;;;----------------------------------------------------------------------------
    2323/     7EA :                     ;;; LD_REG8P0_P1
    2324/     7EA :                     ;;; REG8(P0)=P1
    2325/     7EA :                     ;;;----------------------------------------------------------------------------
    2326/     7EA :                     LD_REG8P0_P1:
    2327/     7EA : (MACRO)              	LD_P7_P0
    2327/     7EA : A0                                  LD P0_HI
    2327/     7EB : BE                                  XCH P7_HI
    2327/     7EC : A1                                  LD P0_LO
    2327/     7ED : BF                                  XCH P7_LO
    2328/     7EE : 47 FA                	JUN LD_REG8P7_P1
    2329/     7F0 :                     
    2330/     7F0 :                     ;;;----------------------------------------------------------------------------
    2331/     7F0 :                     ;;; LD_REG8P3_P1
    2332/     7F0 :                     ;;; REG8(P3)=P1
    2333/     7F0 :                     ;;;----------------------------------------------------------------------------
    2334/     7F0 :                     LD_REG8P3_P1:
    2335/     7F0 : (MACRO)              	LD_P7_P3
    2335/     7F0 : A6                                  LD P3_HI
    2335/     7F1 : BE                                  XCH P7_HI
    2335/     7F2 : A7                                  LD P3_LO
    2335/     7F3 : BF                                  XCH P7_LO
    2336/     7F4 : 47 FA                	JUN LD_REG8P7_P1
    2337/     7F6 :                     
    2338/     7F6 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/04/15 23:22:03


    2339/     7F6 :                     ;;; LD_REG8P2_P1
    2340/     7F6 :                     ;;; REG8(P2) = P1
    2341/     7F6 :                     ;;;----------------------------------------------------------------------------
    2342/     7F6 :                     LD_REG8P2_P1:
    2343/     7F6 : (MACRO)              	LD_P7_P2
    2343/     7F6 : A4                                  LD P2_HI
    2343/     7F7 : BE                                  XCH P7_HI
    2343/     7F8 : A5                                  LD P2_LO
    2343/     7F9 : BF                                  XCH P7_LO
    2344/     7FA :                     ;;; 	JUN LD_REG8P7_P1
    2345/     7FA :                     ;;;----------------------------------------------------------------------------
    2346/     7FA :                     ;;; LD_REG8P7_P1
    2347/     7FA :                     ;;; REG8(P7)=P1
    2348/     7FA :                     ;;; destroy: P7
    2349/     7FA :                     ;;;----------------------------------------------------------------------------
    2350/     7FA :                     LD_REG8P7_P1:
    2351/     7FA : 2F                  	SRC P7
    2352/     7FB : A3                  	LD P1_LO
    2353/     7FC : E0                  	WRM
    2354/     7FD :                     
    2355/     7FD : 6F                  	INC P7_LO
    2356/     7FE : 2F                  	SRC P7
    2357/     7FF : A2                  	LD P1_HI
    2358/     800 : E0                  	WRM
    2359/     801 :                     
    2360/     801 : C0                  	BBL 0
    2361/     802 :                     	
    2362/     802 :                     ;;;----------------------------------------------------------------------------
    2363/     802 :                     ;;; LD_P1_REG8P7
    2364/     802 :                     ;;; P1 = REG8(P7)
    2365/     802 :                     ;;;----------------------------------------------------------------------------
    2366/     802 :                     LD_P1_REG8P7:
    2367/     802 : 2F                  	SRC P7
    2368/     803 : E9                  	RDM
    2369/     804 : B3                  	XCH P1_LO
    2370/     805 :                     
    2371/     805 : 6F                  	INC P7_LO		; P7_LO++
    2372/     806 : 2F                  	SRC P7
    2373/     807 : E9                  	RDM
    2374/     808 : B2                  	XCH P1_HI
    2375/     809 : C0                  	BBL 0
    2376/     80A :                     
    2377/     80A :                     ;;;----------------------------------------------------------------------------
    2378/     80A :                     ;;; LD_P1_REG8P0
    2379/     80A :                     ;;; P1 = REG8(P0)
    2380/     80A :                     ;;;----------------------------------------------------------------------------
    2381/     80A :                     LD_P1_REG8P0:
    2382/     80A : (MACRO)              	LD_P7_P0
    2382/     80A : A0                                  LD P0_HI
    2382/     80B : BE                                  XCH P7_HI
    2382/     80C : A1                                  LD P0_LO
    2382/     80D : BF                                  XCH P7_LO
    2383/     80E : 48 02               	JUN LD_P1_REG8P7
    2384/     810 :                     
    2385/     810 :                     ;;;----------------------------------------------------------------------------
    2386/     810 :                     ;;; LD_P1_REG8P1
    2387/     810 :                     ;;; P1 = REG8(P1)
    2388/     810 :                     ;;;----------------------------------------------------------------------------
    2389/     810 :                     LD_P1_REG8P1:
    2390/     810 : (MACRO)              	LD_P7_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/04/15 23:22:03


    2390/     810 : A2                                  LD P1_HI
    2390/     811 : BE                                  XCH P7_HI
    2390/     812 : A3                                  LD P1_LO
    2390/     813 : BF                                  XCH P7_LO
    2391/     814 : 48 02               	JUN LD_P1_REG8P7
    2392/     816 :                     
    2393/     816 :                     ;;;----------------------------------------------------------------------------
    2394/     816 :                     ;;; LD_P1_REG8P2
    2395/     816 :                     ;;; P1 = REG8(P2)
    2396/     816 :                     ;;;----------------------------------------------------------------------------
    2397/     816 :                     LD_P1_REG8P2:
    2398/     816 : (MACRO)              	LD_P7_P2
    2398/     816 : A4                                  LD P2_HI
    2398/     817 : BE                                  XCH P7_HI
    2398/     818 : A5                                  LD P2_LO
    2398/     819 : BF                                  XCH P7_LO
    2399/     81A : 48 02               	JUN LD_P1_REG8P7
    2400/     81C :                     
    2401/     81C :                     ;;;----------------------------------------------------------------------------
    2402/     81C :                     ;;; LD_P1_REG8P3
    2403/     81C :                     ;;; P1 = REG8(P3)
    2404/     81C :                     ;;;----------------------------------------------------------------------------
    2405/     81C :                     LD_P1_REG8P3:
    2406/     81C : (MACRO)              	LD_P7_P3
    2406/     81C : A6                                  LD P3_HI
    2406/     81D : BE                                  XCH P7_HI
    2406/     81E : A7                                  LD P3_LO
    2406/     81F : BF                                  XCH P7_LO
    2407/     820 : 48 02               	JUN LD_P1_REG8P7
    2408/     822 :                     
    2409/     822 :                     ;;;----------------------------------------------------------------------------
    2410/     822 :                     ;;; PRINTHEX_REG16P1
    2411/     822 :                     ;;; PRINT REG16(P1)
    2412/     822 :                     ;;; destroy: P6, P7
    2413/     822 :                     ;;;----------------------------------------------------------------------------
    2414/     822 :                     PRINTHEX_REG16P1:
    2415/     822 : 5B 00               	JMS PUSH_P0
    2416/     824 : (MACRO)              	LD_P0_P3
    2416/     824 : A6                                  LD P3_HI
    2416/     825 : B0                                  XCH P0_HI
    2416/     826 : A7                                  LD P3_LO
    2416/     827 : B1                                  XCH P0_LO
    2417/     828 : 5B 00               	JMS PUSH_P0
    2418/     82A : 5B 12               	JMS PUSH_P1
    2419/     82C : 5B 24               	JMS PUSH_P2
    2420/     82E :                     	
    2421/     82E : 58 AE               	JMS LD_P2P3_REG16P1
    2422/     830 : A4                  	LD R4
    2423/     831 : 5C B4               	JMS PRINT_ACC		; print bit.FEDC
    2424/     833 : A5                  	LD R5
    2425/     834 : 5C B4               	JMS PRINT_ACC		; print bit.BA98
    2426/     836 : A6                  	LD R6
    2427/     837 : 5C B4               	JMS PRINT_ACC		; print bit.7654
    2428/     839 : A7                  	LD R7
    2429/     83A : 5C B4               	JMS PRINT_ACC		; print bit.3210
    2430/     83C :                     
    2431/     83C : 5B 50               	JMS POP_P2
    2432/     83E : 5B 43               	JMS POP_P1
    2433/     840 : 5B 36               	JMS POP_P0
    2434/     842 : (MACRO)              	LD_P3_P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/04/15 23:22:03


    2434/     842 : A0                                  LD P0_HI
    2434/     843 : B6                                  XCH P3_HI
    2434/     844 : A1                                  LD P0_LO
    2434/     845 : B7                                  XCH P3_LO
    2435/     846 : 5B 36               	JMS POP_P0
    2436/     848 : C0                  	BBL 0
    2437/     849 :                     
    2438/     849 :                     ;;;----------------------------------------------------------------------------
    2439/     849 :                     ;;; LD_REG16P6_REG16P7
    2440/     849 :                     ;;; REG16(P6) = REG16(P7)
    2441/     849 :                     ;;; destroy: P6, P7, CNT_J
    2442/     849 :                     ;;;----------------------------------------------------------------------------
    2443/     849 :                     LD_REG16P6_REG16P7:
    2444/     849 : DC                  	LDM loop(4)
    2445/     84A : BB                  	XCH CNT_J
    2446/     84B :                     LDREG16P6P7_LOOP:
    2447/     84B : 2F                  	SRC P7
    2448/     84C : E9                  	RDM
    2449/     84D : 2D                  	SRC P6
    2450/     84E : E0                  	WRM
    2451/     84F : 6F                  	INC P7_LO
    2452/     850 : 6D                  	INC P6_LO
    2453/     851 : 7B 4B               	ISZ CNT_J, LDREG16P6P7_LOOP
    2454/     853 : C0                  	BBL 0
    2455/     854 :                     
    2456/     854 :                     ;;;----------------------------------------------------------------------------
    2457/     854 :                     ;;; INC_REG16P0
    2458/     854 :                     ;;; REG16(P0) = REG16(P0)+1
    2459/     854 :                     ;;; destroy: P7(R14, R15)
    2460/     854 :                     ;;;----------------------------------------------------------------------------
    2461/     854 :                     INC_REG16P0:
    2462/     854 : A1                  	LD R1
    2463/     855 : BF                  	XCH R15			; save R1 to R15
    2464/     856 :                     
    2465/     856 : DC                  	LDM loop(4)
    2466/     857 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2467/     858 :                     REG16_INC_LOOP:
    2468/     858 : 21                  	SRC P0
    2469/     859 : E9                  	RDM
    2470/     85A : F2                  	IAC 
    2471/     85B : E0                  	WRM
    2472/     85C : 1C 61               	JCN NZ, REG16_INC_EXIT
    2473/     85E : 61                  	INC R1
    2474/     85F : 7E 58               	ISZ R14, REG16_INC_LOOP
    2475/     861 :                     
    2476/     861 :                     REG16_INC_EXIT:
    2477/     861 : AF                  	LD R15
    2478/     862 : B1                  	XCH R1			; restore R1
    2479/     863 : C0                  	BBL 0
    2480/     864 :                     
    2481/     864 :                     ;;;----------------------------------------------------------------------------
    2482/     864 :                     ;;; DEC_REG16P0
    2483/     864 :                     ;;; REG16(P0) = REG16(P0) - 1
    2484/     864 :                     ;;; destroy: P7(R14, R15)
    2485/     864 :                     ;;;----------------------------------------------------------------------------
    2486/     864 :                     DEC_REG16P0:
    2487/     864 : A1                  	LD R1
    2488/     865 : BF                  	XCH R15			; save R1 to R15
    2489/     866 :                     
    2490/     866 : DC                  	LDM loop(4)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/04/15 23:22:03


    2491/     867 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2492/     868 : F1                  	CLC
    2493/     869 :                     REG16_DEC_LOOP:
    2494/     869 : 21                  	SRC P0
    2495/     86A : E9                  	RDM
    2496/     86B : F8                  	DAC
    2497/     86C : E0                  	WRM
    2498/     86D : 12 72               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2499/     86F : 61                  	INC R1
    2500/     870 : 7E 69               	ISZ R14, REG16_DEC_LOOP
    2501/     872 :                     REG16_DEC_EXIT:
    2502/     872 : AF                  	LD R15
    2503/     873 : B1                  	XCH R1			; restore R1
    2504/     874 : C0                  	BBL 0
    2505/     875 :                     
    2506/     875 :                     ;;;----------------------------------------------------------------------------
    2507/     875 :                     ;;; CMP_REG16P0_REG16P1
    2508/     875 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2509/     875 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
    2510/     875 :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2511/     875 :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2512/     875 :                     ;;; destroy: P6, P7, R5
    2513/     875 :                     ;;;----------------------------------------------------------------------------
    2514/     875 :                     CMP_REG16P0_REG16P1:
    2515/     875 : A1                  	LD R1
    2516/     876 : BF                  	XCH R15			; save R1 to R15
    2517/     877 : A3                  	LD R3
    2518/     878 : BD                  	XCH R13			; save R3 to R13
    2519/     879 : F0                  	CLB
    2520/     87A : BC                  	XCH R12			; R12 = 0
    2521/     87B : DC                  	LDM loop(4)
    2522/     87C : BE                  	XCH R14			; R14=12, 13, 14, 15
    2523/     87D : FA                  	STC
    2524/     87E :                     REG16_CMP_LOOP:
    2525/     87E : F3                  	CMC
    2526/     87F : 21                  	SRC P0
    2527/     880 : E9                  	RDM
    2528/     881 : 23                  	SRC P1
    2529/     882 : E8                  	SBM
    2530/     883 : 61                  	INC R1
    2531/     884 : 63                  	INC R3
    2532/     885 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2533/     886 : AB                  	LD R11
    2534/     887 : 14 8B               	JCN Z, REG16_CMP_NEXT
    2535/     889 : D1                  	LDM 1
    2536/     88A : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2537/     88B :                     REG16_CMP_NEXT:
    2538/     88B : 7E 7E               	ISZ R14, REG16_CMP_LOOP
    2539/     88D : AB                  	LD R11
    2540/     88E : F5                  	RAL
    2541/     88F : F3                  	CMC			; CY=~MSB
    2542/     890 :                     
    2543/     890 : AF                  	LD R15
    2544/     891 : B1                  	XCH R1			; restore R1
    2545/     892 : AD                  	LD R13
    2546/     893 : B3                  	XCH R3			; restore R3
    2547/     894 :                     
    2548/     894 : AC                  	LD R12
    2549/     895 : 14 98               	JCN Z, REG16_CMP_EXIT0
    2550/     897 : C1                  	BBL 1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/04/15 23:22:03


    2551/     898 :                     REG16_CMP_EXIT0:
    2552/     898 : C0                  	BBL 0
    2553/     899 :                     
    2554/     899 :                     ;;;----------------------------------------------------------------------------
    2555/     899 :                     ;;; ADD_REG16P0_REG16P1
    2556/     899 :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2557/     899 :                     ;;; destroy: P6, P7
    2558/     899 :                     ;;;----------------------------------------------------------------------------
    2559/     899 :                     ADD_REG16P0_REG16P1:
    2560/     899 : A1                  	LD R1
    2561/     89A : BF                  	XCH R15			; save R1 to R15
    2562/     89B : A3                  	LD R3
    2563/     89C : BD                  	XCH R13			; save R3 to R13
    2564/     89D :                     
    2565/     89D : DC                  	LDM loop(4)
    2566/     89E : BE                  	XCH R14
    2567/     89F : F1                  	CLC
    2568/     8A0 :                     REG16_ADD_LOOP:
    2569/     8A0 : 23                  	SRC P1
    2570/     8A1 : E9                  	RDM
    2571/     8A2 : 21                  	SRC P0
    2572/     8A3 : EB                  	ADM
    2573/     8A4 : E0                  	WRM
    2574/     8A5 : 61                  	INC R1
    2575/     8A6 : 63                  	INC R3
    2576/     8A7 : 7E A0               	ISZ R14, REG16_ADD_LOOP
    2577/     8A9 :                     
    2578/     8A9 : AF                  	LD R15
    2579/     8AA : B1                  	XCH R1			; restore R1
    2580/     8AB : AD                  	LD R13
    2581/     8AC : B3                  	XCH R3			; restore R3
    2582/     8AD : C0                  	BBL 0
    2583/     8AE :                     
    2584/     8AE :                     ;;;----------------------------------------------------------------------------
    2585/     8AE :                     ;;; LD_P2P3_REG16P1
    2586/     8AE :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2587/     8AE :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2588/     8AE :                     ;;; destroy: P7
    2589/     8AE :                     ;;;----------------------------------------------------------------------------
    2590/     8AE :                     LD_P2P3_REG16P1:
    2591/     8AE : (MACRO)              	LD_P7_P1
    2591/     8AE : A2                                  LD P1_HI
    2591/     8AF : BE                                  XCH P7_HI
    2591/     8B0 : A3                                  LD P1_LO
    2591/     8B1 : BF                                  XCH P7_LO
    2592/     8B2 : 2F                  	SRC P7
    2593/     8B3 : E9                  	RDM
    2594/     8B4 : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2595/     8B5 :                     
    2596/     8B5 : 6F                  	INC P7_LO
    2597/     8B6 : 2F                  	SRC P7
    2598/     8B7 : E9                  	RDM
    2599/     8B8 : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2600/     8B9 :                     	
    2601/     8B9 : 6F                  	INC P7_LO
    2602/     8BA : 2F                  	SRC P7
    2603/     8BB : E9                  	RDM
    2604/     8BC : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2605/     8BD :                     
    2606/     8BD : 6F                  	INC P7_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/04/15 23:22:03


    2607/     8BE : 2F                  	SRC P7
    2608/     8BF : E9                  	RDM
    2609/     8C0 : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2610/     8C1 :                     
    2611/     8C1 : C0                  	BBL 0
    2612/     8C2 :                     
    2613/     8C2 :                     ;;;----------------------------------------------------------------------------
    2614/     8C2 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2615/     8C2 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2616/     8C2 :                     ;;; and increment the pointer
    2617/     8C2 :                     ;;; ACC=0 get number succeed
    2618/     8C2 :                     ;;; ACC=1 no number, P1=first chalacter
    2619/     8C2 :                     ;;; destroy: P6, P7, P2, P3
    2620/     8C2 :                     ;;;----------------------------------------------------------------------------
    2621/     8C2 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2622/     8C2 : 5B 12               	JMS PUSH_P1
    2623/     8C4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2624/     8C6 : 5C EE               	JMS ISHEX_P1
    2625/     8C8 : 1C CD               	JCN ZN, GETHEX_START
    2626/     8CA :                     	;; the first character is not a number
    2627/     8CA : 5B 43               	JMS POP_P1
    2628/     8CC : C1                  	BBL 1
    2629/     8CD :                     GETHEX_START:
    2630/     8CD : 24 00               	FIM P2, 00H
    2631/     8CF : 26 00               	FIM P3, 00H
    2632/     8D1 :                     GETHEX_LOOP:
    2633/     8D1 : 5D 19               	JMS CTOI_P1
    2634/     8D3 : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2635/     8D5 : A3                  	LD P1_LO
    2636/     8D6 : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2637/     8D7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2638/     8D9 : 5C EE               	JMS ISHEX_P1
    2639/     8DB : 14 DF               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2640/     8DD : 48 D1               	JUN GETHEX_LOOP
    2641/     8DF :                     GETHEX_EXIT:
    2642/     8DF : 5B 43               	JMS POP_P1
    2643/     8E1 : 47 89               	JUN LD_REG16P1_P2P3
    2644/     8E3 :                     ;;;	BBL 0
    2645/     8E3 :                     
    2646/     8E3 :                     	
    2647/     8E3 :                     ;;;----------------------------------------------------------------------------
    2648/     8E3 :                     ;;; EMU_PRINT_REGISTERS
    2649/     8E3 :                     ;;;----------------------------------------------------------------------------
    2650/     8E3 :                     EMU_PRINT_REGISTERS:
    2651/     8E3 : 20 87               	FIM P0, lo(STR_EMU_REGHEADER)
    2652/     8E5 : 5E 00               	JMS PRINTSTR_P0
    2653/     8E7 :                     
    2654/     8E7 :                     EMU_PRINT_REGISTERS_NO_HEADER:
    2655/     8E7 : 22 00               	FIM P1, REG8_A
    2656/     8E9 : 58 10               	JMS LD_P1_REG8P1
    2657/     8EB : 5C 85               	JMS PRINTHEX_P1
    2658/     8ED : 5C 98               	JMS PRINT_SPC
    2659/     8EF :                     
    2660/     8EF : 56 30               	JMS GETFLAG_S
    2661/     8F1 : 5C B4               	JMS PRINT_ACC
    2662/     8F3 : 56 26               	JMS GETFLAG_Z
    2663/     8F5 : 5C B4               	JMS PRINT_ACC
    2664/     8F7 : 56 39               	JMS GETFLAG_C
    2665/     8F9 : 5C B4               	JMS PRINT_ACC
    2666/     8FB : 5C 98               	JMS PRINT_SPC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/04/15 23:22:03


    2667/     8FD :                     
    2668/     8FD : 22 0C               	FIM P1, REG16_BC
    2669/     8FF : 58 22               	JMS PRINTHEX_REG16P1
    2670/     901 : 5C 98               	JMS PRINT_SPC
    2671/     903 :                     
    2672/     903 : 22 08               	FIM P1, REG16_DE
    2673/     905 : 58 22               	JMS PRINTHEX_REG16P1
    2674/     907 : 5C 98               	JMS PRINT_SPC
    2675/     909 :                     
    2676/     909 : 22 04               	FIM P1, REG16_HL
    2677/     90B : 58 22               	JMS PRINTHEX_REG16P1
    2678/     90D : 5C 98               	JMS PRINT_SPC
    2679/     90F :                     
    2680/     90F : 22 18               	FIM P1, REG16_SP
    2681/     911 : 58 22               	JMS PRINTHEX_REG16P1
    2682/     913 : 5C 98               	JMS PRINT_SPC
    2683/     915 :                     
    2684/     915 : 22 14               	FIM P1, REG16_PC
    2685/     917 : 58 22               	JMS PRINTHEX_REG16P1
    2686/     919 : 5C 98               	JMS PRINT_SPC
    2687/     91B :                     
    2688/     91B : 20 1C               	FIM P0, REG16_ADDR
    2689/     91D : 22 14               	FIM P1, REG16_PC
    2690/     91F : 57 65               	JMS LD_REG16P0_REG16P1
    2691/     921 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2692/     923 : 5C 85               	JMS PRINTHEX_P1
    2693/     925 : 5C 98               	JMS PRINT_SPC
    2694/     927 :                     
    2695/     927 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2696/     929 : 5C 85               	JMS PRINTHEX_P1
    2697/     92B : 5C 98               	JMS PRINT_SPC
    2698/     92D :                     
    2699/     92D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2700/     92F : 5C 85               	JMS PRINTHEX_P1
    2701/     931 : 5C 98               	JMS PRINT_SPC
    2702/     933 :                     
    2703/     933 : 20 0C               	FIM P0, REG16_BC
    2704/     935 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2705/     937 : 58 64               	JMS DEC_REG16P0
    2706/     939 : 5C 85               	JMS PRINTHEX_P1
    2707/     93B : 5C 98               	JMS PRINT_SPC
    2708/     93D :                     	
    2709/     93D : 20 08               	FIM P0, REG16_DE
    2710/     93F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2711/     941 : 58 64               	JMS DEC_REG16P0
    2712/     943 : 5C 85               	JMS PRINTHEX_P1
    2713/     945 : 5C 98               	JMS PRINT_SPC
    2714/     947 :                     
    2715/     947 : 20 04               	FIM P0, REG16_HL
    2716/     949 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2717/     94B : 58 64               	JMS DEC_REG16P0
    2718/     94D : 5C 85               	JMS PRINTHEX_P1
    2719/     94F : 5C 98               	JMS PRINT_SPC
    2720/     951 :                     
    2721/     951 : 20 18               	FIM P0, REG16_SP
    2722/     953 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2723/     955 : 5C 85               	JMS PRINTHEX_P1
    2724/     957 : 5C 98               	JMS PRINT_SPC
    2725/     959 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2726/     95B : 5C 85               	JMS PRINTHEX_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/04/15 23:22:03


    2727/     95D :                     ;;; 	JMS PRINT_SPC
    2728/     95D :                     
    2729/     95D : 58 64               	JMS DEC_REG16P0
    2730/     95F : 58 64               	JMS DEC_REG16P0
    2731/     961 :                     	
    2732/     961 : C0                  	BBL 0
    2733/     962 :                     
    2734/     962 :                     	
    2735/     962 :                     ;;;----------------------------------------------------------------------------
    2736/     962 :                     ;;; EMULATE_OUT_P1
    2737/     962 :                     ;;; Emulate OUT instruction
    2738/     962 :                     ;;;----------------------------------------------------------------------------
    2739/     962 :                     EMULATE_OUT_P1:
    2740/     962 : 2E 00               	FIM P7, EMU_UARTRD
    2741/     964 : 5D 25               	JMS CMP_P1P7
    2742/     966 : 1C 6A               	JCN ZN, EMU_OUT_P1_L1
    2743/     968 : 49 73               	JUN EMU_OUT_UARTRD
    2744/     96A :                     EMU_OUT_P1_L1:
    2745/     96A : 2E 01               	FIM P7, EMU_UARTRC
    2746/     96C : 5D 25               	JMS CMP_P1P7
    2747/     96E : 1C 72               	JCN ZN, EMU_OUT_P1_L2
    2748/     970 : 49 79               	JUN EMU_OUT_UARTRC
    2749/     972 :                     EMU_OUT_P1_L2:
    2750/     972 : C0                  	BBL 0
    2751/     973 :                     
    2752/     973 :                     EMU_OUT_UARTRD:
    2753/     973 : 22 00               	FIM P1, REG8_A
    2754/     975 : 58 10               	JMS LD_P1_REG8P1
    2755/     977 : 4C 5F               	JUN PUTCHAR_P1
    2756/     979 :                     ;;;	BBL 0
    2757/     979 :                     EMU_OUT_UARTRC:			; do nothing
    2758/     979 : C0                  	BBL 0
    2759/     97A :                     	
    2760/     97A :                     ;;;----------------------------------------------------------------------------
    2761/     97A :                     ;;; EMULATE_IN_P1
    2762/     97A :                     ;;; Emulate IN instruction
    2763/     97A :                     ;;;----------------------------------------------------------------------------
    2764/     97A :                     EMULATE_IN_P1:
    2765/     97A : 2E 00               	FIM P7, EMU_UARTRD
    2766/     97C : 5D 25               	JMS CMP_P1P7
    2767/     97E : 1C 82               	JCN ZN, EMU_IN_P1_L1
    2768/     980 : 49 8B               	JUN EMU_IN_UARTRD
    2769/     982 :                     EMU_IN_P1_L1:
    2770/     982 : 2E 01               	FIM P7, EMU_UARTRC
    2771/     984 : 5D 25               	JMS CMP_P1P7
    2772/     986 : 1C 8A               	JCN ZN, EMU_IN_P1_L2
    2773/     988 : 49 AB               	JUN EMU_IN_UARTRC
    2774/     98A :                     EMU_IN_P1_L2:
    2775/     98A : C0                  	BBL 0
    2776/     98B :                     
    2777/     98B :                     EMU_IN_UARTRD:
    2778/     98B : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2779/     98D : 58 02               	JMS LD_P1_REG8P7
    2780/     98F :                     	
    2781/     98F : 5D 32               	JMS ISZEROORNOT_P1
    2782/     991 : 1C 95               	JCN ZN, EMU_IN_UARTRD_SKIPGETCHAR
    2783/     993 : 5C 37               	JMS GETCHAR_P1
    2784/     995 :                     EMU_IN_UARTRD_SKIPGETCHAR:
    2785/     995 : 2E 1B               	FIM P7, 1BH		; ESC
    2786/     997 : 5D 25               	JMS CMP_P1P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/04/15 23:22:03


    2787/     999 : 14 A5               	JCN Z, EMU_IN_EXIT_TO_MONITOR
    2788/     99B :                     	
    2789/     99B : 20 00               	FIM P0, REG8_A
    2790/     99D : 57 EA               	JMS LD_REG8P0_P1
    2791/     99F :                     
    2792/     99F : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2793/     9A1 : 22 00               	FIM P1, 00H
    2794/     9A3 : 47 FA               	JUN LD_REG8P7_P1
    2795/     9A5 :                     ;;;	BBL 0
    2796/     9A5 :                     
    2797/     9A5 :                     EMU_IN_EXIT_TO_MONITOR:
    2798/     9A5 : 5C A0               	JMS PRINT_CRLF
    2799/     9A7 : 58 E3               	JMS EMU_PRINT_REGISTERS
    2800/     9A9 : 40 2D               	JUN CMD_LOOP
    2801/     9AB :                     
    2802/     9AB :                     ;;; if ~test button is on then wait for the button released,
    2803/     9AB :                     ;;; and set flag to return "STOP" code on the next "IN URTRD" 
    2804/     9AB :                     EMU_IN_UARTRC:
    2805/     9AB : 19 B5               	JCN TN, EMU_IN_UARTRC_EXIT ; jump if T==1(button is not pressed)
    2806/     9AD : 11 AD               	JCN T, $		   ; wait for button released
    2807/     9AF : 20 20               	FIM P0, REG8_EMU_KEYBUF
    2808/     9B1 : 22 03               	FIM P1, EMU_IN_STOPCODE
    2809/     9B3 : 47 EA               	JUN LD_REG8P0_P1
    2810/     9B5 :                     	
    2811/     9B5 :                     EMU_IN_UARTRC_EXIT:
    2812/     9B5 : 20 00               	FIM P0, REG8_A
    2813/     9B7 : 22 FF               	FIM P1, EMU_IN_UARTRC_VALUE
    2814/     9B9 : 47 EA               	JUN LD_REG8P0_P1
    2815/     9BB :                     ;;;	BBL 0
    2816/     9BB :                     
    2817/     9BB :                     ;;;---------------------------------------------------------------------------
    2818/     9BB :                     ;;; JIN_P2_CODE_80BF
    2819/     9BB :                     ;;; Jump table for CODE 80H to BFH
    2820/     9BB :                     ;;; P2=0F0H + CODE.bit(543)0
    2821/     9BB :                     ;;;---------------------------------------------------------------------------
    2822/     9EF :                     	org 09EFH
    2823/     9EF :                     JIN_P2_CODE_80BF:
    2824/     9EF : 35                  	JIN P2
    2825/     9F0 :                     	org 09F0H
    2826/     9F0 : 44 79               	JUN ADI_P1		; 9F0: 80H<=87H; ADD
    2827/     9F2 : 44 C4               	JUN ACI_P1		; 9F2: 88H<=8FH; ADC
    2828/     9F4 : 44 F6               	JUN SUI_P1		; 9F4: 90H<=97H; SUB
    2829/     9F6 : 45 18               	JUN SBI_P1		; 9F6: 98H<=9FH; SBB
    2830/     9F8 : 45 6A               	JUN ANI_P1		; 9F8: A0H<=A7H; ANA
    2831/     9FA : 45 A1               	JUN XRI_P1		; 9FA: A8H<=AFH; XRA
    2832/     9FC : 45 E6               	JUN ORI_P1		; 9FC: B0H<=B7H; ORA
    2833/     9FE : 46 12               	JUN CPI_P1		; 9FE: B8H<=BFH; CMP
    2834/     A00 :                     ;;;---------------------------------------------------------------------------
    2835/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2836/     A00 :                     ;;;---------------------------------------------------------------------------
    2837/     A00 :                     	org 0A00H
    2838/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2839/     A00 : 33                  	JIN P1
    2840/     A01 : 00                  	NOP			; do not delete this NOP
    2841/     A02 : 42 72               	JUN CODE_01H
    2842/     A04 : 42 7E               	JUN CODE_02H
    2843/     A06 : 42 86               	JUN CODE_03H
    2844/     A08 : 42 8A               	JUN CODE_04H
    2845/     A0A : 42 8E               	JUN CODE_05H
    2846/     A0C : 42 92               	JUN CODE_06H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/04/15 23:22:03


    2847/     A0E : 42 96               	JUN CODE_07H
    2848/     A10 : 42 A6               	JUN CODE_08H
    2849/     A12 : 42 A7               	JUN CODE_09H
    2850/     A14 : 42 AF               	JUN CODE_0AH
    2851/     A16 : 42 B9               	JUN CODE_0BH
    2852/     A18 : 42 BD               	JUN CODE_0CH
    2853/     A1A : 42 C1               	JUN CODE_0DH
    2854/     A1C : 42 C5               	JUN CODE_0EH
    2855/     A1E : 42 C9               	JUN CODE_0FH
    2856/     A20 : 42 D9               	JUN CODE_10H
    2857/     A22 : 42 DA               	JUN CODE_11H
    2858/     A24 : 42 E6               	JUN CODE_12H
    2859/     A26 : 42 EE               	JUN CODE_13H
    2860/     A28 : 42 F2               	JUN CODE_14H
    2861/     A2A : 42 F6               	JUN CODE_15H
    2862/     A2C : 42 FA               	JUN CODE_16H
    2863/     A2E : 42 FE               	JUN CODE_17H
    2864/     A30 : 43 0E               	JUN CODE_18H
    2865/     A32 : 43 0F               	JUN CODE_19H
    2866/     A34 : 43 17               	JUN CODE_1AH
    2867/     A36 : 43 21               	JUN CODE_1BH
    2868/     A38 : 43 25               	JUN CODE_1CH
    2869/     A3A : 43 29               	JUN CODE_1DH
    2870/     A3C : 43 2D               	JUN CODE_1EH
    2871/     A3E : 43 31               	JUN CODE_1FH
    2872/     A40 : 43 41               	JUN CODE_20H
    2873/     A42 : 43 42               	JUN CODE_21H
    2874/     A44 : 43 4E               	JUN CODE_22H
    2875/     A46 : 43 6C               	JUN CODE_23H
    2876/     A48 : 43 70               	JUN CODE_24H
    2877/     A4A : 43 74               	JUN CODE_25H
    2878/     A4C : 43 78               	JUN CODE_26H
    2879/     A4E : 43 7C               	JUN CODE_27H
    2880/     A50 : 43 89               	JUN CODE_28H
    2881/     A52 : 43 8A               	JUN CODE_29H
    2882/     A54 : 43 92               	JUN CODE_2AH
    2883/     A56 : 43 AC               	JUN CODE_2BH
    2884/     A58 : 43 B0               	JUN CODE_2CH
    2885/     A5A : 43 B4               	JUN CODE_2DH
    2886/     A5C : 43 B8               	JUN CODE_2EH
    2887/     A5E : 43 BC               	JUN CODE_2FH
    2888/     A60 : 43 C8               	JUN CODE_30H
    2889/     A62 : 43 C9               	JUN CODE_31H
    2890/     A64 : 43 D5               	JUN CODE_32H
    2891/     A66 : 43 E9               	JUN CODE_33H
    2892/     A68 : 43 ED               	JUN CODE_34H
    2893/     A6A : 43 F9               	JUN CODE_35H
    2894/     A6C : 44 05               	JUN CODE_36H
    2895/     A6E : 44 0B               	JUN CODE_37H
    2896/     A70 : 44 0D               	JUN CODE_38H
    2897/     A72 : 44 0E               	JUN CODE_39H
    2898/     A74 : 44 16               	JUN CODE_3AH
    2899/     A76 : 44 2A               	JUN CODE_3BH
    2900/     A78 : 44 2E               	JUN CODE_3CH
    2901/     A7A : 44 34               	JUN CODE_3DH
    2902/     A7C : 44 3A               	JUN CODE_3EH
    2903/     A7E : 44 40               	JUN CODE_3FH
    2904/     A80 : 44 45               	JUN CODE_C0H
    2905/     A82 : 44 49               	JUN CODE_C1H
    2906/     A84 : 44 4F               	JUN CODE_C2H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/04/15 23:22:03


    2907/     A86 : 44 5F               	JUN CODE_C3H
    2908/     A88 : 44 6D               	JUN CODE_C4H
    2909/     A8A : 44 71               	JUN CODE_C5H
    2910/     A8C : 44 77               	JUN CODE_C6H
    2911/     A8E : 44 81               	JUN CODE_C7H
    2912/     A90 : 44 87               	JUN CODE_C8H
    2913/     A92 : 44 8F               	JUN CODE_C9H
    2914/     A94 : 44 95               	JUN CODE_CAH
    2915/     A96 : 44 99               	JUN CODE_CBH
    2916/     A98 : 44 9A               	JUN CODE_CCH
    2917/     A9A : 44 AA               	JUN CODE_CDH
    2918/     A9C : 44 C2               	JUN CODE_CEH
    2919/     A9E : 44 D2               	JUN CODE_CFH
    2920/     AA0 : 44 D8               	JUN CODE_D0H
    2921/     AA2 : 44 DC               	JUN CODE_D1H
    2922/     AA4 : 44 E2               	JUN CODE_D2H
    2923/     AA6 : 44 E6               	JUN CODE_D3H
    2924/     AA8 : 44 EA               	JUN CODE_D4H
    2925/     AAA : 44 EE               	JUN CODE_D5H
    2926/     AAC : 44 F4               	JUN CODE_D6H
    2927/     AAE : 44 FE               	JUN CODE_D7H
    2928/     AB0 : 45 04               	JUN CODE_D8H
    2929/     AB2 : 45 08               	JUN CODE_D9H
    2930/     AB4 : 45 09               	JUN CODE_DAH
    2931/     AB6 : 45 0D               	JUN CODE_DBH
    2932/     AB8 : 45 11               	JUN CODE_DCH
    2933/     ABA : 45 15               	JUN CODE_DDH
    2934/     ABC : 45 16               	JUN CODE_DEH
    2935/     ABE : 45 26               	JUN CODE_DFH
    2936/     AC0 : 45 2C               	JUN CODE_E0H
    2937/     AC2 : 45 30               	JUN CODE_E1H
    2938/     AC4 : 45 36               	JUN CODE_E2H
    2939/     AC6 : 45 3A               	JUN CODE_E3H
    2940/     AC8 : 45 5E               	JUN CODE_E4H
    2941/     ACA : 45 62               	JUN CODE_E5H
    2942/     ACC : 45 68               	JUN CODE_E6H
    2943/     ACE : 45 7A               	JUN CODE_E7H
    2944/     AD0 : 45 80               	JUN CODE_E8H
    2945/     AD2 : 45 84               	JUN CODE_E9H
    2946/     AD4 : 45 88               	JUN CODE_EAH
    2947/     AD6 : 45 8C               	JUN CODE_EBH
    2948/     AD8 : 45 9A               	JUN CODE_ECH
    2949/     ADA : 45 9E               	JUN CODE_EDH
    2950/     ADC : 45 9F               	JUN CODE_EEH
    2951/     ADE : 45 B1               	JUN CODE_EFH
    2952/     AE0 : 45 B7               	JUN CODE_F0H
    2953/     AE2 : 45 BB               	JUN CODE_F1H
    2954/     AE4 : 45 C9               	JUN CODE_F2H
    2955/     AE6 : 45 CD               	JUN CODE_F3H
    2956/     AE8 : 45 CE               	JUN CODE_F4H
    2957/     AEA : 45 D2               	JUN CODE_F5H
    2958/     AEC : 45 E4               	JUN CODE_F6H
    2959/     AEE : 45 F6               	JUN CODE_F7H
    2960/     AF0 : 45 FC               	JUN CODE_F8H
    2961/     AF2 : 46 00               	JUN CODE_F9H
    2962/     AF4 : 46 06               	JUN CODE_FAH
    2963/     AF6 : 46 0A               	JUN CODE_FBH
    2964/     AF8 : 46 0B               	JUN CODE_FCH
    2965/     AFA : 46 0F               	JUN CODE_FDH
    2966/     AFC : 46 10               	JUN CODE_FEH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/04/15 23:22:03


    2967/     AFE : 46 20               	JUN CODE_FFH
    2968/     B00 :                     
    2969/     B00 :                     	org 0B00H
    2970/     B00 :                     ;;;----------------------------------------------------------------------------
    2971/     B00 :                     ;;; PUSH_P0, P1, P2
    2972/     B00 :                     ;;; POP_P0, P1, P2
    2973/     B00 :                     ;;; Push and Pop an 8bit register pair
    2974/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2975/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    2976/     B00 :                     ;;; destroy P7, P6
    2977/     B00 :                     ;;;----------------------------------------------------------------------------
    2978/     B00 :                     
    2979/     B00 :                     PUSHP	macro ThisR0, ThisR1
    2980/     B00 :                     	LD SP_LO
    2981/     B00 :                     	DAC
    2982/     B00 :                     	XCH SP_LO		; --sp.3210
    2983/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    2984/     B00 :                     	LD SP_HI
    2985/     B00 :                     	DAC
    2986/     B00 :                     	XCH SP_HI		; --sp.7654
    2987/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    2988/     B00 :                     	SRC SP
    2989/     B00 :                     	LD ThisR0
    2990/     B00 :                     	WRM			; (sp)=R0
    2991/     B00 :                     
    2992/     B00 :                     	LD SP_LO
    2993/     B00 :                     	DAC
    2994/     B00 :                     	XCH SP_LO		; --sp.3210
    2995/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    2996/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    2997/     B00 :                     ;;;	LD SP_HI
    2998/     B00 :                     ;;;	DAC
    2999/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
    3000/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    3001/     B00 :                     	SRC SP
    3002/     B00 :                     	LD ThisR1
    3003/     B00 :                     	WRM			; (sp)=R1
    3004/     B00 :                     
    3005/     B00 :                     	BBL 0
    3006/     B00 :                     	endm
    3007/     B00 :                     ;;;----------------------------------------------------------------------------
    3008/     B00 :                     POPP	macro ThisR0, ThisR1
    3009/     B00 :                     	SRC SP
    3010/     B00 :                     	RDM
    3011/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    3012/     B00 :                     	INC SP_LO		; sp.3210++
    3013/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    3014/     B00 :                     	SRC SP
    3015/     B00 :                     	RDM
    3016/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    3017/     B00 :                     	INC SP_LO		; sp.3210++
    3018/     B00 :                     	LD SP_LO
    3019/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    3020/     B00 :                     	INC SP_HI		; sp.7654++
    3021/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    3022/     B00 :                     	BBL 0
    3023/     B00 :                     	endm
    3024/     B00 :                     ;;;----------------------------------------------------------------------------
    3025/     B00 :                     ;;;----------------------------------------------------------------------------
    3026/     B00 :                     ;;; Generate real codes from macros
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/04/15 23:22:03


    3027/     B00 :                     ;;;----------------------------------------------------------------------------
    3028/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    3028/     B00 : A9                          LD SP_LO
    3028/     B01 : F8                          DAC
    3028/     B02 : B9                          XCH SP_LO               ; --sp.3210
    3028/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    3028/     B05 : A8                          LD SP_HI
    3028/     B06 : F8                          DAC
    3028/     B07 : B8                          XCH SP_HI               ; --sp.7654
    3028/     B08 :                     PUSH_NOBORROW_R0_R1:
    3028/     B08 : 29                          SRC SP
    3028/     B09 : A0                          LD R0
    3028/     B0A : E0                          WRM                     ; (sp)=R0
    3028/     B0B :                     
    3028/     B0B : A9                          LD SP_LO
    3028/     B0C : F8                          DAC
    3028/     B0D : B9                          XCH SP_LO               ; --sp.3210
    3028/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    3028/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    3028/     B0E :                     ;;;     LD SP_HI
    3028/     B0E :                     ;;;     DAC
    3028/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    3028/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    3028/     B0E : 29                          SRC SP
    3028/     B0F : A1                          LD R1
    3028/     B10 : E0                          WRM                     ; (sp)=R1
    3028/     B11 :                     
    3028/     B11 : C0                          BBL 0
    3029/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    3029/     B12 : A9                          LD SP_LO
    3029/     B13 : F8                          DAC
    3029/     B14 : B9                          XCH SP_LO               ; --sp.3210
    3029/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
    3029/     B17 : A8                          LD SP_HI
    3029/     B18 : F8                          DAC
    3029/     B19 : B8                          XCH SP_HI               ; --sp.7654
    3029/     B1A :                     PUSH_NOBORROW_R2_R3:
    3029/     B1A : 29                          SRC SP
    3029/     B1B : A2                          LD R2
    3029/     B1C : E0                          WRM                     ; (sp)=R0
    3029/     B1D :                     
    3029/     B1D : A9                          LD SP_LO
    3029/     B1E : F8                          DAC
    3029/     B1F : B9                          XCH SP_LO               ; --sp.3210
    3029/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    3029/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    3029/     B20 :                     ;;;     LD SP_HI
    3029/     B20 :                     ;;;     DAC
    3029/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    3029/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    3029/     B20 : 29                          SRC SP
    3029/     B21 : A3                          LD R3
    3029/     B22 : E0                          WRM                     ; (sp)=R1
    3029/     B23 :                     
    3029/     B23 : C0                          BBL 0
    3030/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    3030/     B24 : A9                          LD SP_LO
    3030/     B25 : F8                          DAC
    3030/     B26 : B9                          XCH SP_LO               ; --sp.3210
    3030/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/04/15 23:22:03


    3030/     B29 : A8                          LD SP_HI
    3030/     B2A : F8                          DAC
    3030/     B2B : B8                          XCH SP_HI               ; --sp.7654
    3030/     B2C :                     PUSH_NOBORROW_R4_R5:
    3030/     B2C : 29                          SRC SP
    3030/     B2D : A4                          LD R4
    3030/     B2E : E0                          WRM                     ; (sp)=R0
    3030/     B2F :                     
    3030/     B2F : A9                          LD SP_LO
    3030/     B30 : F8                          DAC
    3030/     B31 : B9                          XCH SP_LO               ; --sp.3210
    3030/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    3030/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    3030/     B32 :                     ;;;     LD SP_HI
    3030/     B32 :                     ;;;     DAC
    3030/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    3030/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    3030/     B32 : 29                          SRC SP
    3030/     B33 : A5                          LD R5
    3030/     B34 : E0                          WRM                     ; (sp)=R1
    3030/     B35 :                     
    3030/     B35 : C0                          BBL 0
    3031/     B36 : (MACRO)              POP_P0: POPP R0, R1
    3031/     B36 : 29                          SRC SP
    3031/     B37 : E9                          RDM
    3031/     B38 : B1                          XCH R1              ; R1=(sp)
    3031/     B39 : 69                          INC SP_LO               ; sp.3210++
    3031/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    3031/     B3A : 29                          SRC SP
    3031/     B3B : E9                          RDM
    3031/     B3C : B0                          XCH R0              ; R0=(sp)
    3031/     B3D : 69                          INC SP_LO               ; sp.3210++
    3031/     B3E : A9                          LD SP_LO
    3031/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    3031/     B41 : 68                          INC SP_HI               ; sp.7654++
    3031/     B42 :                     POP_NOCARRY_R0_R1:
    3031/     B42 : C0                          BBL 0
    3032/     B43 : (MACRO)              POP_P1: POPP R2, R3
    3032/     B43 : 29                          SRC SP
    3032/     B44 : E9                          RDM
    3032/     B45 : B3                          XCH R3              ; R3=(sp)
    3032/     B46 : 69                          INC SP_LO               ; sp.3210++
    3032/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    3032/     B47 : 29                          SRC SP
    3032/     B48 : E9                          RDM
    3032/     B49 : B2                          XCH R2              ; R2=(sp)
    3032/     B4A : 69                          INC SP_LO               ; sp.3210++
    3032/     B4B : A9                          LD SP_LO
    3032/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    3032/     B4E : 68                          INC SP_HI               ; sp.7654++
    3032/     B4F :                     POP_NOCARRY_R2_R3:
    3032/     B4F : C0                          BBL 0
    3033/     B50 : (MACRO)              POP_P2: POPP R4, R5
    3033/     B50 : 29                          SRC SP
    3033/     B51 : E9                          RDM
    3033/     B52 : B5                          XCH R5              ; R5=(sp)
    3033/     B53 : 69                          INC SP_LO               ; sp.3210++
    3033/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    3033/     B54 : 29                          SRC SP
    3033/     B55 : E9                          RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/04/15 23:22:03


    3033/     B56 : B4                          XCH R4              ; R4=(sp)
    3033/     B57 : 69                          INC SP_LO               ; sp.3210++
    3033/     B58 : A9                          LD SP_LO
    3033/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    3033/     B5B : 68                          INC SP_HI               ; sp.7654++
    3033/     B5C :                     POP_NOCARRY_R4_R5:
    3033/     B5C : C0                          BBL 0
    3034/     B5D :                     
    3035/     B5D :                     ;;;	org 0B00H
    3036/     B5D :                     ;;;---------------------------------------------------------------------------
    3037/     B5D :                     ;;; PM16
    3038/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    3039/     B5D :                     ;;; 
    3040/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    3041/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    3042/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    3043/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    3044/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    3045/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    3046/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    3047/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
    3048/     B5D :                     ;;; 
    3049/     B5D :                     ;;;    PM12(BA98.7654.3210)
    3050/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    3051/     B5D :                     ;;; 
    3052/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    3053/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    3054/     B5D :                     ;;;   (for debug with 256 x 16bank)
    3055/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    3056/     B5D :                     ;;;---------------------------------------------------------------------------
    3057/     B5D :                     ;;;---------------------------------------------------------------------------
    3058/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    3059/     B5D :                     ;;; P1 = PM16(REG(P0)++)
    3060/     B5D :                     ;;; destroy: P6, P7
    3061/     B5D :                     ;;;---------------------------------------------------------------------------
    3062/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    3063/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    3063/     B5D : A0                                  LD P0_HI
    3063/     B5E : BC                                  XCH P6_HI
    3063/     B5F : A1                                  LD P0_LO
    3063/     B60 : BD                                  XCH P6_LO
    3064/     B61 : 2D                  	SRC P6
    3065/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    3066/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3067/     B65 : 2F                  	SRC P7
    3068/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3069/     B67 :                     
    3070/     B67 : 6D                  	INC P6_LO
    3071/     B68 : 2D                  	SRC P6
    3072/     B69 : E9                  	RDM			; ACC=REG(P0).bit7654
    3073/     B6A : 2E 40               	FIM P7, CHIP_PMSELECT1
    3074/     B6C : 2F                  	SRC P7
    3075/     B6D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3076/     B6E :                     
    3077/     B6E : 6D                  	INC P6_LO
    3078/     B6F : 2D                  	SRC P6
    3079/     B70 : E9                  	RDM			; ACC=REG(P0).bitBA98
    3080/     B71 : B1                  	XCH P0_LO		; P0_LO=REG(P0).bitBA98
    3081/     B72 :                     	
    3082/     B72 : 6D                  	INC P6_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/04/15 23:22:03


    3083/     B73 : 2D                  	SRC P6
    3084/     B74 : E9                  	RDM			; ACC=REG(P0).bitFEDC
    3085/     B75 : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitFEDC
    3086/     B76 :                     
    3087/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3088/     B78 :                     
    3089/     B78 : AC                  	LD P6_HI			; restore P0
    3090/     B79 : B0                  	XCH P0_HI
    3091/     B7A : AD                  	LD P6_LO
    3092/     B7B : F8                  	DAC
    3093/     B7C : F8                  	DAC
    3094/     B7D : F8                  	DAC
    3095/     B7E : B1                  	XCH P0_LO
    3096/     B7F : 48 54               	JUN INC_REG16P0
    3097/     B81 :                     ;;;	BBL 0
    3098/     B81 :                     
    3099/     B81 :                     ;;;---------------------------------------------------------------------------
    3100/     B81 :                     ;;; LD_PM16REG16P0_P1
    3101/     B81 :                     ;;; PM16(REG(P0)) = P1
    3102/     B81 :                     ;;; 
    3103/     B81 :                     ;;; destroy: P6, P7
    3104/     B81 :                     ;;;---------------------------------------------------------------------------
    3105/     B81 :                     LD_PM16REG16P0_P1:
    3106/     B81 : 21                  	SRC P0
    3107/     B82 : E9                  	RDM			; ACC = bit3210 of REG(P0)
    3108/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3109/     B85 : 2F                  	SRC P7			; ACC=REG(P0).bit3210
    3110/     B86 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3111/     B87 :                     
    3112/     B87 : 61                  	INC P0_LO
    3113/     B88 : 21                  	SRC P0
    3114/     B89 : E9                  	RDM			; ACC = bit7654 of REG(P0)
    3115/     B8A : 2E 40               	FIM P7, CHIP_PMSELECT1
    3116/     B8C : 2F                  	SRC P7
    3117/     B8D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3118/     B8E :                     
    3119/     B8E : 61                  	INC P0_LO
    3120/     B8F : 21                  	SRC P0
    3121/     B90 : E9                  	RDM			; ACC = bitBA98 of REG(P0)
    3122/     B91 : BD                  	XCH P6_LO		; P6_LO = REG(P0).bitBA98
    3123/     B92 :                     
    3124/     B92 : 61                  	INC P0_LO
    3125/     B93 : 21                  	SRC P0
    3126/     B94 : E9                  	RDM			; ACC = bitFEDC of REG(P0)
    3127/     B95 : BC                  	XCH P6_HI		; P6_HI = REG(P0).bitFEDC
    3128/     B96 :                     	
    3129/     B96 : 2D                  	SRC P6
    3130/     B97 : A3                  	LD P1_LO
    3131/     B98 : E3                  	WPM
    3132/     B99 : A2                  	LD P1_HI
    3133/     B9A : E3                  	WPM
    3134/     B9B :                     	
    3135/     B9B : A1                  	LD R1			; restore P0
    3136/     B9C : F8                  	DAC
    3137/     B9D : F8                  	DAC
    3138/     B9E : F8                  	DAC
    3139/     B9F : B1                  	XCH R1
    3140/     BA0 : C0                  	BBL 0
    3141/     BA1 :                     
    3142/     BA1 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/04/15 23:22:03


    3143/     BA1 :                     ;;; Subroutines for program memory operation
    3144/     BA1 :                     ;;;----------------------------------------------------------------------------
    3145/     BA1 :                     ;;;---------------------------------------------------------------------------
    3146/     BA1 :                     ;;; PM_WRITE_P0_P1
    3147/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3148/     BA1 :                     ;;; (0F00H+P0) = P1
    3149/     BA1 :                     ;;; input: P0, P1
    3150/     BA1 :                     ;;; output: none
    3151/     BA1 :                     ;;;---------------------------------------------------------------------------
    3152/     BA1 :                     PM_WRITE_P0_P1:
    3153/     BA1 : 21                  	SRC P0
    3154/     BA2 : A3                  	LD P1_LO
    3155/     BA3 : E3                  	WPM			; write lower 4bit
    3156/     BA4 : A2                  	LD P1_HI
    3157/     BA5 : E3                  	WPM			; write higher 4bit
    3158/     BA6 : C0                  	BBL 0
    3159/     BA7 :                     
    3160/     BA7 :                     ;;;---------------------------------------------------------------------------
    3161/     BA7 :                     ;;; PM_WRITE_P6_P7
    3162/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3163/     BA7 :                     ;;; (0F00H+P6) = P7
    3164/     BA7 :                     ;;; input: P6, P7
    3165/     BA7 :                     ;;; output: none
    3166/     BA7 :                     ;;;---------------------------------------------------------------------------
    3167/     BA7 :                     PM_WRITE_P6_P7:
    3168/     BA7 : 2D                  	SRC P6
    3169/     BA8 : AF                  	LD P7_LO
    3170/     BA9 : E3                  	WPM			; write lower 4bit
    3171/     BAA : AE                  	LD P7_HI
    3172/     BAB : E3                  	WPM			; write higher 4bit
    3173/     BAC : C0                  	BBL 0
    3174/     BAD :                     
    3175/     BAD :                     ;;;---------------------------------------------------------------------------
    3176/     BAD :                     ;;; PM_INIT_BANK
    3177/     BAD :                     ;;; initialization for program memory (RAM)
    3178/     BAD :                     ;;; Write a subroutne code for reading memory
    3179/     BAD :                     ;;; destroy: P6, P7
    3180/     BAD :                     ;;;---------------------------------------------------------------------------
    3181/     BAD :                     PM_INIT_BANK:	
    3182/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3183/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3184/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3185/     BB3 : 6D                  	INC P6_LO
    3186/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3187/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3188/     BB8 : C0                  	BBL 0
    3189/     BB9 :                     
    3190/     BB9 :                     ;;;---------------------------------------------------------------------------
    3191/     BB9 :                     ;;; PM_SELECTPMB_P1
    3192/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3193/     BB9 :                     ;;; destroy: P7
    3194/     BB9 :                     ;;;---------------------------------------------------------------------------
    3195/     BB9 :                     PM_SELECTPMB_P1:
    3196/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3197/     BBB : 2F                  	SRC P7
    3198/     BBC : A3                  	LD P1_LO
    3199/     BBD : E1                  	WMP
    3200/     BBE :                     
    3201/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3202/     BC0 : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/04/15 23:22:03


    3203/     BC1 : A2                  	LD P1_HI
    3204/     BC2 : E1                  	WMP
    3205/     BC3 : C0                  	BBL 0
    3206/     BC4 :                     ;;;----------------------------------------------------------------------------
    3207/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3208/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3209/     BC4 :                     ;;; The value of REG(P0) does not change
    3210/     BC4 :                     ;;;----------------------------------------------------------------------------
    3211/     BC4 :                     GETLINE_PM16REG16P0:
    3212/     BC4 : 5B 00               	JMS PUSH_P0
    3213/     BC6 : 5B 12               	JMS PUSH_P1
    3214/     BC8 :                     
    3215/     BC8 : 22 30               	FIM P1, REG16_MON_TMP
    3216/     BCA : 57 6F               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3217/     BCC :                     
    3218/     BCC :                     GETLINE_LOOP:
    3219/     BCC : 5C 37               	JMS GETCHAR_P1		; P1 = getchar()
    3220/     BCE : 1C CC               	JCN ZN, GETLINE_LOOP	; ACC!=0 (stop bit error)
    3221/     BD0 :                     	
    3222/     BD0 : 5D 3A               	JMS ISCRLF_P1
    3223/     BD2 : 14 DA               	JCN Z, GETLINE_L1
    3224/     BD4 : 5C AC               	JMS PRINT_CR
    3225/     BD6 : 5C B0               	JMS PRINT_LF
    3226/     BD8 : 4B FE               	JUN GETLINE_EXIT
    3227/     BDA :                     GETLINE_L1:
    3228/     BDA : 2E 08               	FIM P7, 08H		; backspace
    3229/     BDC : 5D 25               	JMS CMP_P1P7
    3230/     BDE : 14 E2               	JCN Z, GETLINE_BS
    3231/     BE0 : 4B F6               	JUN GETLINE_INSERTCHAR
    3232/     BE2 :                     GETLINE_BS:
    3233/     BE2 : 22 30               	FIM P1, REG16_MON_TMP
    3234/     BE4 : 58 75               	JMS CMP_REG16P0_REG16P1
    3235/     BE6 : 1C EA               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3236/     BE8 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3237/     BEA :                     GETLINE_DO_BS:			; delete a character on the cursor
    3238/     BEA : 58 64               	JMS DEC_REG16P0		; REG(P0)--
    3239/     BEC :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3240/     BEC : 22 08               	FIM P1, 08H
    3241/     BEE : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3242/     BF0 : 5C 98               	JMS PRINT_SPC		; put ' '
    3243/     BF2 : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3244/     BF4 :                     
    3245/     BF4 : 4B CC               	JUN GETLINE_LOOP
    3246/     BF6 :                     GETLINE_INSERTCHAR:
    3247/     BF6 : 5C 5F               	JMS PUTCHAR_P1
    3248/     BF8 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3249/     BFA : 58 54               	JMS INC_REG16P0		; REG(P0)++
    3250/     BFC :                     	
    3251/     BFC : 4B CC               	JUN GETLINE_LOOP
    3252/     BFE :                     GETLINE_EXIT:
    3253/     BFE : 22 00               	FIM P1, 00H
    3254/     C00 : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3255/     C02 :                     
    3256/     C02 : 22 30               	FIM P1, REG16_MON_TMP
    3257/     C04 : 57 65               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3258/     C06 : 5B 43               	JMS POP_P1		; restore P1
    3259/     C08 : 4B 36               	JUN POP_P0		; restore P0
    3260/     C0A :                     ;;;	BBL 0
    3261/     C0A :                     
    3262/     C0A :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/04/15 23:22:03


    3263/     C0A :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3264/     C0A :                     ;;; Print a string 
    3265/     C0A :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3266/     C0A :                     ;;; REG(INDEX) is incremented to
    3267/     C0A :                     ;;;	the end of the string
    3268/     C0A :                     ;;; 
    3269/     C0A :                     ;;; destroy: P6, P7
    3270/     C0A :                     ;;;----------------------------------------------------------------------------
    3271/     C0A :                     PRINTSTR_PM16REG16P0:
    3272/     C0A : 5B 12               	JMS PUSH_P1
    3273/     C0C :                     PRINTSTR_LOOP:
    3274/     C0C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3275/     C0E : 5D 32               	JMS ISZEROORNOT_P1
    3276/     C10 : 14 16               	JCN Z, PRINTSTR_EXIT
    3277/     C12 : 5C 5F               	JMS PUTCHAR_P1
    3278/     C14 : 4C 0C               	JUN PRINTSTR_LOOP
    3279/     C16 :                     PRINTSTR_EXIT:
    3280/     C16 : 4B 43               	JUN POP_P1
    3281/     C18 :                     ;;;	BBL 0
    3282/     C18 :                     
    3283/     C18 :                     ;;;----------------------------------------------------------------------------
    3284/     C18 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3285/     C18 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3286/     C18 :                     ;;; and increment the pointer
    3287/     C18 :                     ;;; output: P1
    3288/     C18 :                     ;;; ACC=0 get number success
    3289/     C18 :                     ;;; ACC=1 no number, P1=first character
    3290/     C18 :                     ;;; destroy: P6, P7
    3291/     C18 :                     ;;;----------------------------------------------------------------------------
    3292/     C18 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
    3293/     C18 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3294/     C1A : 5C EE               	JMS ISHEX_P1
    3295/     C1C : 1C 1F               	JCN ZN, GETHEXBYTE_L1
    3296/     C1E : C1                  	BBL 1			; no hex number and exit
    3297/     C1F :                     GETHEXBYTE_L1:	
    3298/     C1F : 5B 24               	JMS PUSH_P2
    3299/     C21 : 5D 19               	JMS CTOI_P1
    3300/     C23 : A3                  	LD  P1_LO
    3301/     C24 : B4                  	XCH P2_HI			; save for upper digit
    3302/     C25 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3303/     C27 : 5C EE               	JMS ISHEX_P1
    3304/     C29 : 14 31               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3305/     C2B : 5D 19               	JMS CTOI_P1
    3306/     C2D : A4                  	LD P2_HI
    3307/     C2E : B2                  	XCH P1_HI
    3308/     C2F : 4B 50               	JUN POP_P2
    3309/     C31 :                     ;;;	BBL 0
    3310/     C31 :                     GETHEXZBYTE_1DIGIT_EXIT:
    3311/     C31 : F0                  	CLB
    3312/     C32 : B2                  	XCH P1_HI
    3313/     C33 : A4                  	LD P2_HI
    3314/     C34 : B3                  	XCH P1_LO
    3315/     C35 : 4B 50               	JUN POP_P2
    3316/     C37 :                     ;;;	BBL 0
    3317/     C37 :                     	
    3318/     C37 :                     ;;;----------------------------------------------------------------------------
    3319/     C37 :                     ;;; I/O and some basic routines located in Page 0D00H
    3320/     C37 :                     ;;;----------------------------------------------------------------------------
    3321/     C37 :                     ;;;	org 0C00H
    3322/     C37 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 65 - 2023/04/15 23:22:03


    3323/     C37 :                     ;;; Software UART Routine
    3324/     C37 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3325/     C37 :                     ;;; defined in separated file
    3326/     C37 :                     ;;;---------------------------------------------------------------------------
    3327/     C37 :                     ;;; supported baudrates are 4800bps or 9600bps
    3328/     C37 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3329/     C37 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3330/     C37 :                     
    3331/     C37 : =2580H               	switch BAUDRATE
    3332/     C37 : =>FALSE              	case 4800
    3333/     C37 :                     	include "4800bps.inc"
    3334/     C37 : =>TRUE               	case 9600
    3335/     C37 :                     	include "9600bps.inc"
(1)    1/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C37 :                     ;;; getchar and putchar functions
(1)    3/     C37 :                     ;;; baud rate = 9600bps
(1)    4/     C37 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    6/     C37 :                     
(1)    7/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C37 :                     ;;; GETCHAR_P1
(1)    9/     C37 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C37 :                     ;;;
(1)   11/     C37 :                     ;;; Input: none
(1)   12/     C37 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     C37 :                     ;;; Working: P6, P7
(1)   14/     C37 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C37 :                     ;;; 
(1)   16/     C37 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C37 :                     ;;; 
(1)   18/     C37 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C37 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C37 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C37 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C37 :                     ;;;               |->phase delay
(1)   23/     C37 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C37 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C37 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C37 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C37 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C37 :                     
(1)   29/     C37 :                     GETCHAR_P1:
(1)   30/     C37 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C39 :                                                     ; 
(1)   32/     C39 : 19 39                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C3B : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3D : 7F 3D               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3F :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3F :                     GETCHAR_L1:
(1)   37/     C3F : 19 44               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C41 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C42 : 4C 47                       JUN GETCHAR_L3          ;<2>
(1)   40/     C44 :                     GETCHAR_L2:
(1)   41/     C44 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C45 : 00                          NOP                     ;[1]
(1)   43/     C46 : 00                          NOP                     ;[1]
(1)   44/     C47 :                     GETCHAR_L3:
(1)   45/     C47 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C48 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C49 : 7D 3F                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 66 - 2023/04/15 23:22:03


(1)   48/     C4B :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C4B : B3                  	XCH R3                  ;(1)
(1)   50/     C4C : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4E :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4E :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4E :                     GETCHAR_L4:
(1)   54/     C4E : 19 53               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C50 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     C51 : 4C 56                       JUN GETCHAR_L6          ;<2>
(1)   57/     C53 :                     GETCHAR_L5:
(1)   58/     C53 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C54 : 00                          NOP                     ;[1]
(1)   60/     C55 : 00                          NOP                     ;[1]
(1)   61/     C56 :                     GETCHAR_L6:
(1)   62/     C56 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C57 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C58 : 7D 4E                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C5A :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     C5A : B2                  	XCH R2                  ;(1)
(1)   67/     C5B :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C5B :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C5B :                     	;; check stop bit
(1)   70/     C5B : 19 5E                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5D : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5E :                     GETCHAR_OK:
(1)   73/     C5E : C0                  	BBL 0
(1)   74/     C5F :                                     
(1)   75/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5F :                     ;;; PUTCHAR_P1
(1)   77/     C5F :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     C5F :                     ;;; 
(1)   79/     C5F :                     ;;; Input: P1(R2,R3)
(1)   80/     C5F :                     ;;; Output: ACC=0
(1)   81/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5F :                     ;;; P1 is not affected
(1)   84/     C5F :                     ;;; 
(1)   85/     C5F :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5F :                     ;;; 
(1)   87/     C5F :                     ;;; Input: P1(R2,R3)
(1)   88/     C5F :                     ;;; Output: ACC=0
(1)   89/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5F :                     ;;; 
(1)   93/     C5F :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5F :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5F :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5F :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5F :                     
(1)   99/     C5F :                     PUTCHAR_P1:
(1)  100/     C5F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5F :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5F :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5F : [100]                	endif
(1)  104/     C5F :                     	
(1)  105/     C5F : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C61 : 2F                  	SRC P7              ; set port address
(1)  107/     C62 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 67 - 2023/04/15 23:22:03


(1)  108/     C62 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C64 : A3                          LD R3
(1)  110/     C65 : F1                          CLC                 ; start bit is 0
(1)  111/     C66 : F5                          RAL
(1)  112/     C67 :                                     
(1)  113/     C67 :                     PUTCHAR_L1:
(1)  114/     C67 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C68 : 00                          NOP                 ;(1)
(1)  116/     C69 : 00                          NOP                 ;(1)
(1)  117/     C6A : 00                          NOP                 ;(1)
(1)  118/     C6B : 00                          NOP                 ;(1)
(1)  119/     C6C : E1                          WMP                 ;(1)
(1)  120/     C6D : F6                          RAR                 ;(1)
(1)  121/     C6E : 7D 67                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C70 :                     	
(1)  123/     C70 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C72 : A2                          LD R2               ;(1)
(1)  125/     C73 : FA                          STC                 ;(1) stop bit is 1
(1)  126/     C74 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C75 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C76 :                     PUTCHAR_L2:
(1)  129/     C76 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C77 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C79 : 7F 79                       ISZ R15, $          ;(4)
(1)  132/     C7B : F6                          RAR                 ;(1)
(1)  133/     C7C : 7D 76                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7E :                     	
(1)  135/     C7E : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7E :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7E :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     C7E : [135]                	endif
(1)  139/     C7E :                     	
(1)  140/     C7E : C0                          BBL 0
(1)  141/     C7F :                     
(1)  142/     C7F :                     
    3336/     C7F : [3331]               	endcase
    3337/     C7F :                     
    3338/     C7F :                     ;;;---------------------------------------------------------------------------
    3339/     C7F :                     ;;; INIT_SERIAL
    3340/     C7F :                     ;;; Initialize serial port
    3341/     C7F :                     ;;;---------------------------------------------------------------------------
    3342/     C7F :                     INIT_SERIAL:
    3343/     C7F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3344/     C7F :                     	LDM BANK_SERIAL	    ; bank of output port
    3345/     C7F :                     	DCL		    ; set port bank
    3346/     C7F : [3343]               	endif
    3347/     C7F :                     	
    3348/     C7F : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3349/     C81 : 2F                  	SRC P7		    ; set port address
    3350/     C82 : D1                  	LDM 1
    3351/     C83 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3352/     C84 :                     
    3353/     C84 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3354/     C84 :                     	LDM BANK_DEFAULT    
    3355/     C84 :                     	DCL		    ; restore bank to default
    3356/     C84 : [3353]               	endif
    3357/     C84 :                     	
    3358/     C84 : C0                  	BBL 0
    3359/     C85 :                     
    3360/     C85 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 68 - 2023/04/15 23:22:03


    3361/     C85 :                     ;;; PRINTHEX_P1
    3362/     C85 :                     ;;; Print 8bit register pair in HEX format
    3363/     C85 :                     ;;; PRINT HEX
    3364/     C85 :                     ;;; destroy: P6, P7
    3365/     C85 :                     ;;;----------------------------------------------------------------------------
    3366/     C85 :                     PRINTHEX_P1:
    3367/     C85 : 5B 00               	JMS PUSH_P0
    3368/     C87 : 5B 12               	JMS PUSH_P1
    3369/     C89 : (MACRO)              	LD_P0_P1
    3369/     C89 : A2                                  LD P1_HI
    3369/     C8A : B0                                  XCH P0_HI
    3369/     C8B : A3                                  LD P1_LO
    3369/     C8C : B1                                  XCH P0_LO
    3370/     C8D : A0                  	LD R0
    3371/     C8E : 5C B4               	JMS PRINT_ACC		; print upper 4bit
    3372/     C90 : A1                  	LD R1
    3373/     C91 : 5C B4               	JMS PRINT_ACC		; print lower 4bit
    3374/     C93 : 5B 43               	JMS POP_P1
    3375/     C95 : 5B 36               	JMS POP_P0
    3376/     C97 : C0                  	BBL 0
    3377/     C98 :                     
    3378/     C98 :                     ;;;---------------------------------------------------------------------------
    3379/     C98 :                     ;;; PRINT_SPC
    3380/     C98 :                     ;;; print " "
    3381/     C98 :                     ;;; destroy: ACC
    3382/     C98 :                     ;;; This routine consumes 2 PC stack
    3383/     C98 :                     ;;;---------------------------------------------------------------------------
    3384/     C98 :                     PRINT_SPC:
    3385/     C98 : 5B 12               	JMS PUSH_P1
    3386/     C9A : 22 20               	FIM P1, ' '
    3387/     C9C : 5C 5F               	JMS PUTCHAR_P1
    3388/     C9E : 4B 43               	JUN POP_P1
    3389/     CA0 :                     ;;;	BBL 0
    3390/     CA0 :                     
    3391/     CA0 :                     ;;;---------------------------------------------------------------------------
    3392/     CA0 :                     ;;; PRINT_CRLF
    3393/     CA0 :                     ;;; print "\r\n"
    3394/     CA0 :                     ;;; destroy: ACC
    3395/     CA0 :                     ;;; This routine consumes 2 PC stack
    3396/     CA0 :                     ;;;---------------------------------------------------------------------------
    3397/     CA0 :                     PRINT_CRLF:
    3398/     CA0 : 5B 12               	JMS PUSH_P1
    3399/     CA2 : 22 0D               	FIM P1, '\r'
    3400/     CA4 : 5C 5F               	JMS PUTCHAR_P1
    3401/     CA6 : 22 0A               	FIM P1, '\n'
    3402/     CA8 : 5C 5F               	JMS PUTCHAR_P1
    3403/     CAA : 4B 43               	JUN POP_P1
    3404/     CAC :                     ;;;	BBL 0
    3405/     CAC :                     
    3406/     CAC :                     ;;;---------------------------------------------------------------------------
    3407/     CAC :                     ;;; PRINT_CR
    3408/     CAC :                     ;;; print "\r"
    3409/     CAC :                     ;;; destroy: P1, ACC
    3410/     CAC :                     ;;; This routine consumes 1 PC stack
    3411/     CAC :                     ;;;---------------------------------------------------------------------------
    3412/     CAC :                     PRINT_CR:
    3413/     CAC : 22 0D               	FIM P1, '\r'
    3414/     CAE : 4C 5F               	JUN PUTCHAR_P1
    3415/     CB0 :                     
    3416/     CB0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/04/15 23:22:03


    3417/     CB0 :                     ;;; PRINT_LF
    3418/     CB0 :                     ;;; print "\n"
    3419/     CB0 :                     ;;; destroy: P1, ACC
    3420/     CB0 :                     ;;; This routine consumes 1 PC stack
    3421/     CB0 :                     ;;;---------------------------------------------------------------------------
    3422/     CB0 :                     PRINT_LF:
    3423/     CB0 : 22 0A               	FIM P1, '\n'
    3424/     CB2 : 4C 5F               	JUN PUTCHAR_P1
    3425/     CB4 :                     
    3426/     CB4 :                     ;;;---------------------------------------------------------------------------
    3427/     CB4 :                     ;;; PRINT_ACC
    3428/     CB4 :                     ;;; print contents of ACC('0'...'F') as a character
    3429/     CB4 :                     ;;; destroy: P1, P6, P7, ACC
    3430/     CB4 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3431/     CB4 :                     ;;;---------------------------------------------------------------------------
    3432/     CB4 :                     PRINT_ACC:
    3433/     CB4 : 22 30               	FIM P1, '0'
    3434/     CB6 : F1                  	CLC			; clear carry
    3435/     CB7 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3436/     CB8 : 1A BC               	JCN CN, PRINTACC_L1
    3437/     CBA : 62                  	INC P1_HI
    3438/     CBB : F2                  	IAC
    3439/     CBC :                     PRINTACC_L1:	
    3440/     CBC : B3                  	XCH P1_LO		; P1_LO<-ACC
    3441/     CBD : 4C 5F               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3442/     CBF :                     
    3443/     CBF :                     ;;;----------------------------------------------------------------------------
    3444/     CBF :                     ;;; INC_P1
    3445/     CBF :                     ;;; P1=P1+1
    3446/     CBF :                     ;;;----------------------------------------------------------------------------
    3447/     CBF :                     INC_P1:	
    3448/     CBF : 63                  	INC P1_LO
    3449/     CC0 : A3                  	LD P1_LO
    3450/     CC1 : 1C C4               	JCN ZN, INC_P1_EXIT
    3451/     CC3 : 62                  	INC P1_HI
    3452/     CC4 :                     INC_P1_EXIT:	
    3453/     CC4 : C0                  	BBL 0
    3454/     CC5 :                     
    3455/     CC5 :                     ;;;----------------------------------------------------------------------------
    3456/     CC5 :                     ;;; DEC_P1
    3457/     CC5 :                     ;;; P1=P1-1
    3458/     CC5 :                     ;;;----------------------------------------------------------------------------
    3459/     CC5 :                     DEC_P1:	
    3460/     CC5 : A3                  	LD P1_LO
    3461/     CC6 : F8                  	DAC
    3462/     CC7 : B3                  	XCH P1_LO
    3463/     CC8 : 12 CD               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3464/     CCA : A2                  	LD P1_HI		; decrement upper 4bit
    3465/     CCB : F8                  	DAC
    3466/     CCC : B2                  	XCH P1_HI
    3467/     CCD :                     DEC_P1_EXIT:	
    3468/     CCD : C0                  	BBL 0
    3469/     CCE :                     	
    3470/     CCE :                     ;;;----------------------------------------------------------------------------
    3471/     CCE :                     ;;; ISALPHA_P1
    3472/     CCE :                     ;;; check P1 is an alphabet as a ascii character
    3473/     CCE :                     ;;; return: ACC=0 if P1 is not an alphabet
    3474/     CCE :                     ;;;	    ACC=1 if P1 is an alphabet
    3475/     CCE :                     ;;; destroy: P7
    3476/     CCE :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/04/15 23:22:03


    3477/     CCE :                     ISALPHA_P1:
    3478/     CCE :                     ISALPHA_L1:
    3479/     CCE : 2E 41               	FIM P7, 'A'
    3480/     CD0 : 5D 25               	JMS CMP_P1P7
    3481/     CD2 : 12 D5               	JCN C, ISALPHA_L10
    3482/     CD4 : C0                  	BBL 0			; P1<'A'
    3483/     CD5 :                     ISALPHA_L10:
    3484/     CD5 : 2E 5B               	FIM P7, 'Z'+1
    3485/     CD7 : 5D 25               	JMS CMP_P1P7
    3486/     CD9 : 12 DC               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3487/     CDB : C1                  	BBL 1			; 'A'<=P1<='Z'
    3488/     CDC :                     ISALPHA_L2:
    3489/     CDC : 2E 61               	FIM P7, 'a'
    3490/     CDE : 5D 25               	JMS CMP_P1P7
    3491/     CE0 : 12 E3               	JCN C, ISALPHA_L20
    3492/     CE2 : C0                  	BBL 0			; P1<'a'
    3493/     CE3 :                     ISALPHA_L20:	
    3494/     CE3 : 2E 7B               	FIM P7, 'z'+1
    3495/     CE5 : 5D 25               	JMS CMP_P1P7
    3496/     CE7 : 12 EA               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3497/     CE9 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3498/     CEA :                     ISALPHA_FALSE:
    3499/     CEA : C0                  	BBL 0
    3500/     CEB :                     
    3501/     CEB :                     ;;;----------------------------------------------------------------------------
    3502/     CEB :                     ;;; ISHEX_P1
    3503/     CEB :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3504/     CEB :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3505/     CEB :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3506/     CEB :                     ;;; destroy: P7
    3507/     CEB :                     ;;;----------------------------------------------------------------------------
    3508/     CEB : 00                  	NOP
    3509/     CEC : 00                  	NOP
    3510/     CED : 00                  	NOP
    3511/     CEE :                     ISHEX_P1:
    3512/     CEE : 2E 30               	FIM P7, '0'
    3513/     CF0 : 5D 25               	JMS CMP_P1P7
    3514/     CF2 : 12 F5               	JCN C, ISHEX_L00
    3515/     CF4 : C0                  	BBL 0			; P1<'0'
    3516/     CF5 :                     ISHEX_L00:	
    3517/     CF5 : 2E 3A               	FIM P7, '9'+1
    3518/     CF7 : 5D 25               	JMS CMP_P1P7
    3519/     CF9 : 12 FC               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3520/     CFB : C1                  	BBL 1			; '0'<=P1<='9'
    3521/     CFC :                     ISHEX_L1:
    3522/     CFC : 2E 41               	FIM P7, 'A'
    3523/     CFE : 5D 25               	JMS CMP_P1P7
    3524/     D00 : 12 03               	JCN C, ISHEX_L10
    3525/     D02 : C0                  	BBL 0			; P1<'A'
    3526/     D03 :                     ISHEX_L10:
    3527/     D03 : 2E 47               	FIM P7, 'F'+1
    3528/     D05 : 5D 25               	JMS CMP_P1P7
    3529/     D07 : 12 0A               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3530/     D09 : C1                  	BBL 1			; 'A'<=P1<='F'
    3531/     D0A :                     ISHEX_L2:
    3532/     D0A : 2E 61               	FIM P7, 'a'
    3533/     D0C : 5D 25               	JMS CMP_P1P7
    3534/     D0E : 12 11               	JCN C, ISHEX_L20
    3535/     D10 : C0                  	BBL 0			; P1<'a'
    3536/     D11 :                     ISHEX_L20:	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/04/15 23:22:03


    3537/     D11 : 2E 67               	FIM P7, 'f'+1
    3538/     D13 : 5D 25               	JMS CMP_P1P7
    3539/     D15 : 12 18               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3540/     D17 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3541/     D18 :                     ISHEX_FALSE:
    3542/     D18 : C0                  	BBL 0
    3543/     D19 :                     
    3544/     D19 :                     ;;;---------------------------------------------------------------------------
    3545/     D19 :                     ;;; CTOI_P1
    3546/     D19 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3547/     D19 :                     ;;; no error check
    3548/     D19 :                     ;;; input: P1(R2R3)
    3549/     D19 :                     ;;; output: P1_LO, (P1_HI=0)
    3550/     D19 :                     ;;;---------------------------------------------------------------------------
    3551/     D19 :                     CTOI_P1:
    3552/     D19 : F0                  	CLB
    3553/     D1A : D3                  	LDM 3
    3554/     D1B : 92                  	SUB P1_HI
    3555/     D1C : 14 22               	JCN Z, CTOI_09	; check upper 4bit
    3556/     D1E : F0                  	CLB
    3557/     D1F : D9                  	LDM 9
    3558/     D20 : 83                  	ADD P1_LO
    3559/     D21 : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3560/     D22 :                     CTOI_09:
    3561/     D22 : F0                  	CLB
    3562/     D23 : B2                  	XCH R2			; R2 = 0
    3563/     D24 : C0                  	BBL 0
    3564/     D25 :                     	
    3565/     D25 :                     ;;;---------------------------------------------------------------------------
    3566/     D25 :                     ;;; CMP_P1P7
    3567/     D25 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3568/     D25 :                     ;;; input: P1, P7
    3569/     D25 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3570/     D25 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3571/     D25 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3572/     D25 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3573/     D25 :                     ;;;---------------------------------------------------------------------------
    3574/     D25 :                     CMP_P1P7:
    3575/     D25 : F0                  	CLB
    3576/     D26 : A2                  	LD R2			
    3577/     D27 : 9E                  	SUB R14			;R2-R14
    3578/     D28 : 14 2B               	JCN Z, CMP17_L1		; jump if R2==R14
    3579/     D2A : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3580/     D2B :                     CMP17_L1:	
    3581/     D2B : F0                  	CLB
    3582/     D2C : A3                  	LD R3
    3583/     D2D : 9F                  	SUB R15			;R3-R15
    3584/     D2E : 14 31               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3585/     D30 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3586/     D31 :                     				; if P1>P7 then ACC=1, CY=1
    3587/     D31 :                     CMP17_EXIT01:
    3588/     D31 : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3589/     D32 :                     	
    3590/     D32 :                     ;;;---------------------------------------------------------------------------
    3591/     D32 :                      ;;; ISZEROORNOT_P1
    3592/     D32 :                     ;;; check P1 is zero or not
    3593/     D32 :                     ;;; Return 0 if P1 is 0
    3594/     D32 :                     ;;; return: ACC=0 if P1 == 0
    3595/     D32 :                     ;;;	    ACC=1 if P1 != 0
    3596/     D32 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/04/15 23:22:03


    3597/     D32 :                     ISZEROORNOT_P1:
    3598/     D32 : A3                  	LD P1_LO
    3599/     D33 : 1C 39               	JCN ZN, ISZEROORNOT_EXIT1
    3600/     D35 : A2                  	LD P1_HI
    3601/     D36 : 1C 39               	JCN ZN, ISZEROORNOT_EXIT1
    3602/     D38 : C0                  	BBL 0
    3603/     D39 :                     ISZEROORNOT_EXIT1:
    3604/     D39 : C1                  	BBL 1
    3605/     D3A :                     
    3606/     D3A :                     ;;;---------------------------------------------------------------------------
    3607/     D3A :                     ;;; ISCRLF_P1
    3608/     D3A :                     ;;; check if P1=='\r' | P1=='\n'
    3609/     D3A :                     ;;; input: P0
    3610/     D3A :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3611/     D3A :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3612/     D3A :                     ;;;---------------------------------------------------------------------------
    3613/     D3A :                     ISCRLF_P1:
    3614/     D3A : A2                  	LD R2
    3615/     D3B : 1C 47               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3616/     D3D : F1                  	CLC
    3617/     D3E : DD                  	LDM '\r'
    3618/     D3F : 93                  	SUB R3
    3619/     D40 : 14 48               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3620/     D42 : F1                  	CLC
    3621/     D43 : DA                  	LDM '\n'
    3622/     D44 : 93                  	SUB R3
    3623/     D45 : 14 48               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3624/     D47 :                     ISCRLF_EXIT0:
    3625/     D47 : C0                  	BBL 0
    3626/     D48 :                     ISCRLF_EXIT1:
    3627/     D48 : C1                  	BBL 1
    3628/     D49 :                     
    3629/     D49 :                     ;;;---------------------------------------------------------------------------
    3630/     D49 :                     ;;; TOUPPER_P1
    3631/     D49 :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3632/     D49 :                     ;;;---------------------------------------------------------------------------
    3633/     D49 :                     TOUPPER_P1:
    3634/     D49 : 5C CE               	JMS ISALPHA_P1
    3635/     D4B : 14 54               	JCN Z, TOUPPER_P1_EXIT
    3636/     D4D : A2                  	LD P1_HI
    3637/     D4E : F6                  	RAR
    3638/     D4F : F6                  	RAR
    3639/     D50 : F1                  	CLC
    3640/     D51 : F5                  	RAL
    3641/     D52 : F5                  	RAL
    3642/     D53 : B2                  	XCH P1_HI
    3643/     D54 :                     TOUPPER_P1_EXIT:
    3644/     D54 : C0                  	BBL 0
    3645/     D55 :                     
    3646/     D55 :                     ;;;---------------------------------------------------------------------------
    3647/     D55 :                     ;;; PRINT_DATARAM_P0
    3648/     D55 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3649/     D55 :                     ;;;---------------------------------------------------------------------------
    3650/     D55 :                     PRINT_DATARAM_P0:
    3651/     D55 : A0                  	LD P0_HI		; PRINT ADDDR
    3652/     D56 : 5C B4               	JMS PRINT_ACC
    3653/     D58 : A1                  	LD P0_LO
    3654/     D59 : 5C B4               	JMS PRINT_ACC
    3655/     D5B : 22 3A               	FIM P1, ':'
    3656/     D5D : 5C 5F               	JMS PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/04/15 23:22:03


    3657/     D5F :                     CMDDD_L2:
    3658/     D5F : F0                  	CLB		; PRINT data characters
    3659/     D60 : 21                  	SRC P0		; set address
    3660/     D61 : E9                  	RDM		; read data memory
    3661/     D62 : 5C B4               	JMS PRINT_ACC
    3662/     D64 : 71 5F               	ISZ P0_LO, CMDDD_L2
    3663/     D66 :                     
    3664/     D66 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3665/     D68 : 5C 5F               	JMS PUTCHAR_P1
    3666/     D6A : 21                  	SRC P0		; set address
    3667/     D6B : EC                  	RD0
    3668/     D6C : B2                  	XCH P1_HI
    3669/     D6D : ED                  	RD1
    3670/     D6E : B3                  	XCH P1_LO
    3671/     D6F : 5C 85               	JMS PRINTHEX_P1
    3672/     D71 : 21                  	SRC P0		; set address
    3673/     D72 : EE                  	RD2
    3674/     D73 : B2                  	XCH P1_HI
    3675/     D74 : EF                  	RD3
    3676/     D75 : B3                  	XCH P1_LO
    3677/     D76 : 5C 85               	JMS PRINTHEX_P1
    3678/     D78 : 4C A0               	JUN PRINT_CRLF
    3679/     D7A :                     ;;;	BBL 0
    3680/     D7A :                     
    3681/     D7A :                     ;;;---------------------------------------------------------------------------
    3682/     D7A :                     ;;; Program Memory Test
    3683/     D7A :                     ;;; This command is optional
    3684/     D7A :                     ;;;---------------------------------------------------------------------------
    3685/     D7A : =>FALSE              	if USE_MON_CMD_T
    3686/     D7A :                     COMMAND_T:
    3687/     D7A :                     	LDM loop(2)
    3688/     D7A :                     	XCH CNT_I
    3689/     D7A :                     CMDT_LOOP_RW:
    3690/     D7A :                     	FIM P0, REG8_MON_TMP
    3691/     D7A :                     	FIM P1, 00H
    3692/     D7A :                     	JMS LD_REG8P0_P1
    3693/     D7A :                     	
    3694/     D7A :                     	FIM P2, loops(16, 16)
    3695/     D7A :                     CMDT_LOOPH
    3696/     D7A :                     	LD_P1_P2
    3697/     D7A :                     	FIM P0, REG8_MON_TMP
    3698/     D7A :                     	JMS ADD_REG8P0_P1
    3699/     D7A :                     	FIM P3, loops(16, 16)
    3700/     D7A :                     CMDT_LOOPL:
    3701/     D7A :                     	LD_P1_P3
    3702/     D7A :                     	FIM P0, REG8_MON_TMP
    3703/     D7A :                     	JMS ADD_REG8P0_P1
    3704/     D7A :                     	
    3705/     D7A :                     	LD_P1_P2
    3706/     D7A :                     	FIM P7, lo(PM_READ_P0_P1)
    3707/     D7A :                     	JMS CMP_P1P7
    3708/     D7A :                     	JCN Z, CMDT_NEXT	; skip for PM_READ routine
    3709/     D7A :                     	FIM P7, lo(PM_READ_P0_P1+1)
    3710/     D7A :                     	JMS CMP_P1P7
    3711/     D7A :                     	JCN Z, CMDT_NEXT	; skip for PM_READ routine
    3712/     D7A :                     
    3713/     D7A :                     	FIM P0, REG16_MON_ADDR
    3714/     D7A :                     	JMS LD_REG16P0_P2P3
    3715/     D7A :                     
    3716/     D7A :                     	CLB
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/04/15 23:22:03


    3717/     D7A :                     	LDM loop(2)
    3718/     D7A :                     	SUB CNT_I
    3719/     D7A :                     	JCN Z, CMDT_WRITE
    3720/     D7A :                     CMDT_READ:
    3721/     D7A :                     	JMS LD_P1_PM16REG16P0_INCREMENT
    3722/     D7A :                     	FIM P0, REG8_MON_TMP2
    3723/     D7A :                     	JMS LD_REG8P0_P1	; REG8(TMP2)=PM(REG_ADDR)
    3724/     D7A :                     	FIM P7, REG8_MON_TMP
    3725/     D7A :                     	JMS LD_P1_REG8P7	; P1 = REG8(TMP) (correct value) 
    3726/     D7A :                     	JMS SUB_REG8P0_P1	; TMP2 = TMP2 - P1
    3727/     D7A :                     	JMS LD_P1_REG8P0	; P1 = TMP2
    3728/     D7A :                     	JMS ISZEROORNOT_P1
    3729/     D7A :                     	JCN Z, CMDT_NEXT	; check OK
    3730/     D7A :                     	JUN CMDT_ERROR
    3731/     D7A :                     CMDT_WRITE:
    3732/     D7A :                     	FIM P7, REG8_MON_TMP
    3733/     D7A :                     	JMS LD_P1_REG8P7
    3734/     D7A :                     	JMS LD_PM16REG16P0_P1
    3735/     D7A :                     CMDT_NEXT:
    3736/     D7A :                     	ISZ P3_LO, CMDT_LOOPL
    3737/     D7A :                     	ISZ P3_HI, CMDT_LOOPL
    3738/     D7A :                     	FIM P1, '\r'
    3739/     D7A :                     	JMS PUTCHAR_P1
    3740/     D7A :                     	LD_P1_P2
    3741/     D7A :                     	JMS PRINTHEX_P1
    3742/     D7A :                     	ISZ P2_LO, CMDT_LOOPH
    3743/     D7A :                     	ISZ P2_HI, CMDT_LOOPH
    3744/     D7A :                     
    3745/     D7A :                     	JMS PRINT_CRLF
    3746/     D7A :                     	ISZ CNT_I, CMDT_LOOP_RW
    3747/     D7A :                     
    3748/     D7A :                     	JMS PRINT_CRLF
    3749/     D7A :                     	JUN CMD_LOOP
    3750/     D7A :                     CMDT_ERROR:
    3751/     D7A :                     	FIM P0, lo(STR_ERROR_MEMTEST)
    3752/     D7A :                     	JMS PRINTSTR_P0
    3753/     D7A :                     	FIM P0, REG16_MON_ADDR
    3754/     D7A :                     	FIM P1, REG16_MON_ADDR
    3755/     D7A :                     	JMS DEC_REG16P0
    3756/     D7A :                     	JMS PRINTHEX_REG16P1
    3757/     D7A :                     	JMS PRINT_CRLF
    3758/     D7A :                     
    3759/     D7A :                     	JUN CMD_LOOP
    3760/     D7A : [3685]               	endif			; USE_MON_CMD_T
    3761/     D7A :                     	
    3762/     D7A :                     ;;;----------------------------------------------------------------------------
    3763/     D7A :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3764/     D7A :                     ;;; The string data sould be located in the same page as the print routine.
    3765/     D7A :                     ;;;----------------------------------------------------------------------------
    3766/     E00 :                     	org 0E00H
    3767/     E00 :                     ;;;----------------------------------------------------------------------------
    3768/     E00 :                     ;;; PRINTSTR_P0
    3769/     E00 :                     ;;; Print a string with a delimiter 00H
    3770/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3771/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3772/     E00 :                     ;;;----------------------------------------------------------------------------
    3773/     E00 :                     PRINTSTR_P0:
    3774/     E00 : 5B 00               	JMS PUSH_P0
    3775/     E02 : 5B 12               	JMS PUSH_P1
    3776/     E04 :                     PRINTSTRP0_LOOP:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/04/15 23:22:03


    3777/     E04 : 32                  	FIN P1			; P1=(P0)
    3778/     E05 : A2                  	LD P1_HI
    3779/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3780/     E08 : A3                  	LD P1_LO
    3781/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3782/     E0B :                     PRINTSTRP0_PUT:
    3783/     E0B : 5C 5F               	JMS PUTCHAR_P1		; putchar(P1)
    3784/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3785/     E0F : 60                  	INC P0_HI
    3786/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3787/     E12 :                     PRINTSTRP0_EXIT:
    3788/     E12 : 5B 43               	JMS POP_P1
    3789/     E14 : 4B 36               	JUN POP_P0
    3790/     E16 :                     ;;;	BBL 0
    3791/     E16 :                     		
    3792/     E16 :                     	
    3793/     E16 :                     ;;;----------------------------------------------------------------------------
    3794/     E16 :                     ;;; MUL16_P2P3
    3795/     E16 :                     ;;; P2P3 = P2P3*16
    3796/     E16 :                     ;;;----------------------------------------------------------------------------
    3797/     E16 :                     MUL16_P2P3:	
    3798/     E16 : A5                  	LD R5
    3799/     E17 : B4                  	XCH R4			; 100'->1000'
    3800/     E18 : A6                  	LD R6
    3801/     E19 : B5                  	XCH R5			; 10'->100'
    3802/     E1A : A7                  	LD R7
    3803/     E1B : B6                  	XCH R6			; 1'->10'
    3804/     E1C : F0                  	CLB
    3805/     E1D : B7                  	XCH R7			; 0->1'
    3806/     E1E : C0                  	BBL 0
    3807/     E1F :                     
    3808/     E1F :                     ;;;----------------------------------------------------------------------------
    3809/     E1F :                     ;;; String data
    3810/     E1F :                     ;;;----------------------------------------------------------------------------
    3811/     E1F :                     ;;;----------------------------------------------------------------------------
    3812/     E1F :                     ;;; String data for monitor
    3813/     E1F :                     ;;;----------------------------------------------------------------------------
    3814/     E1F :                     STR_OMSG:
    3815/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
    3816/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3817/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3818/     E47 :                     
    3819/     E47 :                     STR_CMDERR:
    3820/     E47 : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3821/     E4B :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3822/     E4B : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              E51 : 41 43 45 0D 0A 00 
    3823/     E57 :                     STR_ERROR_LOADCOMMAND:
    3824/     E57 : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              E5D : 45 52 52 4F 52 0D 
              E63 : 0A 00             
    3825/     E65 :                     
    3826/     E65 : =>FALSE              	if USE_MON_CMD_T
    3827/     E65 :                     STR_ERROR_MEMTEST:
    3828/     E65 :                     	data "MEMERR\r\n", 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/04/15 23:22:03


    3829/     E65 : [3826]               	endif
    3830/     E65 :                     ;;; strings for register command of 4004 monitor
    3831/     E65 :                     ;;; STR_REG0:
    3832/     E65 :                     ;;;	data "AC	SP1111\r\n", 0
    3833/     E65 :                     ;;; STR_REG1:
    3834/     E65 :                     ;;;	data "CY01234567890123\r\n", 0
    3835/     E65 :                     ;;; STR_DATAREG:
    3836/     E65 :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
    3837/     E65 :                     ;;;----------------------------------------------------------------------------
    3838/     E65 :                     ;;; String data for Emulator
    3839/     E65 :                     ;;;----------------------------------------------------------------------------
    3840/     E65 :                     STR_EMU_MESSAGE:
    3841/     E65 : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 1.0\r\n", 0
              E6B : 20 45 6D 75 6C 61 
              E71 : 74 6F 72 20 6F 6E 
              E77 : 20 34 30 30 34 20 
              E7D : 56 65 72 20 31 2E 
              E83 : 30 0D 0A 00       
    3842/     E87 :                     
    3843/     E87 :                     STR_EMU_REGHEADER:
    3844/     E87 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
              E8D : 20 20 42 43 20 20 
              E93 : 20 44 45 20 20 20 
              E99 : 48 4C 20 20 20 53 
              E9F : 50 20 20 20 50 43 
              EA5 : 20 28 2B 30 20 2B 
              EAB : 31 20 2B 32 29 42 
              EB1 : 43 29 44 45 29 48 
              EB7 : 4C 29 53 50 20 2B 
              EBD : 31 29 0D 0A 00    
    3845/     EC2 :                     STR_EMU_STOP:
    3846/     EC2 : 0D 0A 53 54 4F 50   	data "\r\nSTOP\r\n", 0
              EC8 : 0D 0A 00          
    3847/     ECB :                     STR_EMU_HLT:
    3848/     ECB : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              ED1 : 0A 00             
    3849/     ED3 :                     
    3850/     ED3 :                     ;;;---------------------------------------------------------------------------
    3851/     ED3 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3852/     ED3 :                     ;;;---------------------------------------------------------------------------
    3853/     ED3 :                     ;;; READPM_P0
    3854/     ED3 :                     ;;; P1 = (P0)
    3855/     ED3 :                     ;;; input: P0
    3856/     ED3 :                     ;;; output: P1
    3857/     ED3 :                     ;;;---------------------------------------------------------------------------
    3858/     ED3 :                     ;;;	org 0F7EH
    3859/     ED3 :                     ;;; PM_READ_P0_P1:
    3860/     ED3 : 32                  	FIN P1
    3861/     ED4 : C0                  	BBL 0
    3862/     ED5 :                     
    3863/     ED5 :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/04/15 23:22:03


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4C4 C |  ACI_P1_NOCARRY :               4CA C |
 ADD_REG16P0_REG16P1 :          899 C |  ADD_REG8P0_P1 :                795 C |
 ADI_P1 :                       479 C |  AND67_L1 :                     6B8 C |
 AND67_L2 :                     6C4 C |  AND67_L3 :                     6D0 C |
 AND67_L4 :                     6D9 C |  AND_P1_P2 :                    6DA C |
 AND_R6_R7 :                    6AE C |  ANI_P1 :                       56A C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  CALL_IF0 :                     4A3 C |
 CALL_IF1 :                     49C C |  CALL_P2P3 :                    4B6 C |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT0 :                 0 - |
 CHIP_PMSELECT1 :                40 - |  CHIP_RAM0 :                      0 - |
 CHIP_RAM1 :                     40 - | *CHIP_RAM2 :                     80 - |
 CHIP_RAM3 :                    0C0 - |  CHIP_SERIAL :                  0C0 - |
 CMDDD_L1 :                     0D8 C |  CMDDD_L2 :                    0D5F C |
 CMDDL_L0 :                     0BA C |  CMDDL_L1 :                     0C2 C |
*CMDDL_NEXT :                   0CC C |  CMDD_L1 :                      0A2 C |
*CMDD_L2 :                      0A2 C |  CMDD_L3 :                      0AA C |
 CMDH_EXIT :                    0FB C |  CMDH_SET :                     0F1 C |
 CMDL_CONTINUE :                15B C |  CMDL_ERROR :                   149 C |
 CMDL_EXIT :                    173 C |  CMDL_L0 :                      11B C |
 CMDL_L1 :                      123 C |  CMDL_L2 :                      141 C |
 CMDL_L3 :                      163 C |  CMDL_L5 :                      171 C |
 CMDL_READLOOP :                153 C |  CMDL_START :                   109 C |
 CMDPMC_BANKLOOP :              17D C |  CMDPMC_L1 :                    187 C |
 CMD_LOOP :                      2D C |  CMP17_EXIT01 :                0D31 C |
 CMP17_L1 :                    0D2B C |  CMP_P1P7 :                    0D25 C |
 CMP_REG16P0_REG16P1 :          875 C |  CODE_003F :                    1F5 C |
 CODE_007F :                    1F0 C |  CODE_00H :                     271 C |
 CODE_01H :                     272 C |  CODE_02H :                     27E C |
 CODE_03H :                     286 C |  CODE_04H :                     28A C |
 CODE_05H :                     28E C |  CODE_06H :                     292 C |
 CODE_07H :                     296 C |  CODE_08H :                     2A6 C |
 CODE_09H :                     2A7 C |  CODE_0AH :                     2AF C |
 CODE_0BH :                     2B9 C |  CODE_0CH :                     2BD C |
 CODE_0DH :                     2C1 C |  CODE_0EH :                     2C5 C |
 CODE_0FH :                     2C9 C |  CODE_10H :                     2D9 C |
 CODE_11H :                     2DA C |  CODE_12H :                     2E6 C |
 CODE_13H :                     2EE C |  CODE_14H :                     2F2 C |
 CODE_15H :                     2F6 C |  CODE_16H :                     2FA C |
 CODE_17H :                     2FE C |  CODE_18H :                     30E C |
 CODE_19H :                     30F C |  CODE_1AH :                     317 C |
 CODE_1BH :                     321 C |  CODE_1CH :                     325 C |
 CODE_1DH :                     329 C |  CODE_1EH :                     32D C |
 CODE_1FH :                     331 C |  CODE_20H :                     341 C |
 CODE_21H :                     342 C |  CODE_22H :                     34E C |
 CODE_23H :                     36C C |  CODE_24H :                     370 C |
 CODE_25H :                     374 C |  CODE_26H :                     378 C |
 CODE_27H :                     37C C |  CODE_28H :                     389 C |
 CODE_29H :                     38A C |  CODE_2AH :                     392 C |
 CODE_2BH :                     3AC C |  CODE_2CH :                     3B0 C |
 CODE_2DH :                     3B4 C |  CODE_2EH :                     3B8 C |
 CODE_2FH :                     3BC C |  CODE_30H :                     3C8 C |
 CODE_31H :                     3C9 C |  CODE_32H :                     3D5 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/04/15 23:22:03


 CODE_33H :                     3E9 C |  CODE_34H :                     3ED C |
 CODE_35H :                     3F9 C |  CODE_36H :                     405 C |
 CODE_37H :                     40B C |  CODE_38H :                     40D C |
 CODE_39H :                     40E C |  CODE_3AH :                     416 C |
 CODE_3BH :                     42A C |  CODE_3CH :                     42E C |
 CODE_3DH :                     434 C |  CODE_3EH :                     43A C |
 CODE_3FH :                     440 C |  CODE_407F :                    20B C |
 CODE_407F_MOV :                230 C |  CODE_76H :                     267 C |
 CODE_80BF :                    20B C |  CODE_80BF_ARITH_LOGIC :        258 C |
 CODE_80FF :                    206 C |  CODE_C0FF :                    1FD C |
 CODE_C0H :                     445 C |  CODE_C1H :                     449 C |
 CODE_C2H :                     44F C |  CODE_C3H :                     45F C |
 CODE_C4H :                     46D C |  CODE_C5H :                     471 C |
 CODE_C6H :                     477 C |  CODE_C7H :                     481 C |
 CODE_C8H :                     487 C |  CODE_C9H :                     48F C |
 CODE_CAH :                     495 C |  CODE_CALL :                    4AA C |
 CODE_CBH :                     499 C |  CODE_CCH :                     49A C |
 CODE_CDH :                     4AA C |  CODE_CEH :                     4C2 C |
 CODE_CFH :                     4D2 C |  CODE_D0H :                     4D8 C |
 CODE_D1H :                     4DC C |  CODE_D2H :                     4E2 C |
 CODE_D3H :                     4E6 C |  CODE_D4H :                     4EA C |
 CODE_D5H :                     4EE C |  CODE_D6H :                     4F4 C |
 CODE_D7H :                     4FE C |  CODE_D8H :                     504 C |
 CODE_D9H :                     508 C |  CODE_DAH :                     509 C |
 CODE_DBH :                     50D C |  CODE_DCH :                     511 C |
 CODE_DCR :                     436 C |  CODE_DDH :                     515 C |
 CODE_DEH :                     516 C |  CODE_DFH :                     526 C |
 CODE_E0H :                     52C C |  CODE_E1H :                     530 C |
 CODE_E2H :                     536 C |  CODE_E3H :                     53A C |
 CODE_E4H :                     55E C |  CODE_E5H :                     562 C |
 CODE_E6H :                     568 C |  CODE_E7H :                     57A C |
 CODE_E8H :                     580 C |  CODE_E9H :                     584 C |
 CODE_EAH :                     588 C |  CODE_EBH :                     58C C |
 CODE_ECH :                     59A C |  CODE_EDH :                     59E C |
 CODE_EEH :                     59F C |  CODE_EFH :                     5B1 C |
 CODE_F0H :                     5B7 C |  CODE_F1H :                     5BB C |
 CODE_F2H :                     5C9 C |  CODE_F3H :                     5CD C |
 CODE_F4H :                     5CE C |  CODE_F5H :                     5D2 C |
 CODE_F6H :                     5E4 C |  CODE_F7H :                     5F6 C |
 CODE_F8H :                     5FC C |  CODE_F9H :                     600 C |
 CODE_FAH :                     606 C |  CODE_FBH :                     60A C |
 CODE_FCH :                     60B C |  CODE_FDH :                     60F C |
 CODE_FEH :                     610 C |  CODE_FFH :                     620 C |
 CODE_INR :                     430 C |  CODE_JMP :                     45F C |
 CODE_MOV_L1 :                  238 C |  CODE_MOV_WRITE_M_TO_PM :       254 C |
 CODE_MVI :                     43C C |  CODE_NOT_NOP :                 1FD C |
 CODE_POP_REG8P2P3 :            5BF C |  CODE_PUSH_REG8P2P3 :           5D6 C |
 CODE_RET :                     48F C |  COMMAND_C :                    17B C |
 COMMAND_D :                     92 C |  COMMAND_DD :                   0CE C |
 COMMAND_DL :                   0B0 C |  COMMAND_E :                    195 C |
 COMMAND_G :                    0E7 C |  COMMAND_H :                    0E9 C |
 COMMAND_L :                    109 C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CPI_P1 :                       612 C |
 CTOI_09 :                     0D22 C |  CTOI_P1 :                     0D19 C |
*DATE :                "2023/04/15" - |  DEC_P1 :                      0CC5 C |
 DEC_P1_EXIT :                 0CCD C |  DEC_REG16P0 :                  864 C |
 DEC_REG8P1 :                   7C7 C |  EMULATE_IN_P1 :                97A C |
 EMULATE_OUT_P1 :               962 C |  EMU_DEBUG :                    1BB C |
 EMU_EXIT :                     1AB C |  EMU_EXIT_LOOP :                1AD C |
 EMU_IN_EXIT_TO_MONITOR :       9A5 C |  EMU_IN_P1_L1 :                 982 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/04/15 23:22:03


 EMU_IN_P1_L2 :                 98A C |  EMU_IN_STOPCODE :                3 - |
 EMU_IN_UARTRC :                9AB C |  EMU_IN_UARTRC_EXIT :           9B5 C |
 EMU_IN_UARTRC_VALUE :          0FF - |  EMU_IN_UARTRD :                98B C |
 EMU_IN_UARTRD_SKIPGETCHAR :    995 C |  EMU_LOOP :                     1A5 C |
 EMU_OUT_P1_L1 :                96A C |  EMU_OUT_P1_L2 :                972 C |
 EMU_OUT_UARTRC :               979 C |  EMU_OUT_UARTRD :               973 C |
 EMU_PRINTREG_AND_EXIT :        26B C |  EMU_PRINT_REGISTERS :          8E3 C |
 EMU_PRINT_REGISTERS_NO_HEADER :                                        8E7 C |
*EMU_START :                    199 C |  EMU_STEP :                     1D4 C |
 EMU_STEP_EXIT :                1E4 C |  EMU_STEP_LOOP :                1D4 C |
 EMU_UARTRC :                     1 - |  EMU_UARTRD :                     0 - |
 EMU_VIEWREG :                  1C0 C |  EMU_VIEWREG_EXIT :             1CE C |
 EMU_VIEWREG_LOOP :             1C4 C |  EXEC_CODE :                    1E6 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                  0C3F C |  GETCHAR_L2 :                  0C44 C |
 GETCHAR_L3 :                  0C47 C |  GETCHAR_L4 :                  0C4E C |
 GETCHAR_L5 :                  0C53 C |  GETCHAR_L6 :                  0C56 C |
 GETCHAR_OK :                  0C5E C |  GETCHAR_P1 :                  0C37 C |
 GETFLAG_C :                    639 C |  GETFLAG_C_1 :                  641 C |
 GETFLAG_P :                    675 C |  GETFLAG_P_0 :                  684 C |
 GETFLAG_S :                    630 C |  GETFLAG_S_EXIT1 :              638 C |
 GETFLAG_Z :                    626 C |  GETFLAG_Z_EXIT1 :              62F C |
 GETHEXBYTE_L1 :               0C1F C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C18 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C31 C |  GETHEX_EXIT :                  8DF C |
 GETHEX_LOOP :                  8D1 C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 8C2 C |
 GETHEX_START :                 8CD C |  GETLINE_BS :                  0BE2 C |
 GETLINE_DO_BS :               0BEA C |  GETLINE_EXIT :                0BFE C |
 GETLINE_INSERTCHAR :          0BF6 C |  GETLINE_L1 :                  0BDA C |
*GETLINE_L1_NEXT :             0BEC C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                21E C |
 GETSRC_SAVE_SRCVALUE :         224 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBF C |  INC_P1_EXIT :                 0CC4 C |
 INC_REG16P0 :                  854 C |  INC_REG8P1 :                   7A6 C |
 INIT_SERIAL :                 0C7F C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CEA C | *ISALPHA_L1 :                  0CCE C |
 ISALPHA_L10 :                 0CD5 C |  ISALPHA_L2 :                  0CDC C |
 ISALPHA_L20 :                 0CE3 C |  ISALPHA_P1 :                  0CCE C |
 ISCRLF_EXIT0 :                0D47 C |  ISCRLF_EXIT1 :                0D48 C |
 ISCRLF_P1 :                   0D3A C |  ISHEX_FALSE :                 0D18 C |
 ISHEX_L00 :                   0CF5 C |  ISHEX_L1 :                    0CFC C |
 ISHEX_L10 :                   0D03 C |  ISHEX_L2 :                    0D0A C |
 ISHEX_L20 :                   0D11 C |  ISHEX_P1 :                    0CEE C |
 ISZEROORNOT_EXIT1 :           0D39 C |  ISZEROORNOT_P1 :              0D32 C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      451 C |  JMP_IF1 :                      458 C |
*L0 :                            3F C |  L1 :                            47 C |
*L10 :                           8C C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 L6_CONTINUOUS :                 83 C |  L6_SETMODE :                    86 C |
 L6_VIEWREG :                    7A C |  L7 :                            8C C |
 LDREG16P6P7_LOOP :             84B C |  LD_P1_PM16REG16P0_INCREMENT : 0B5D C |
 LD_P1_REG8P0 :                 80A C |  LD_P1_REG8P1 :                 810 C |
 LD_P1_REG8P2 :                 816 C |  LD_P1_REG8P3 :                 81C C |
 LD_P1_REG8P7 :                 802 C |  LD_P2P3_REG16P1 :              8AE C |
 LD_PM16REG16P0_P1 :           0B81 C |  LD_REG16P0_P2P3 :              78F C |
 LD_REG16P0_REG16P1 :           765 C |  LD_REG16P1_P2P3 :              789 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/04/15 23:22:03


 LD_REG16P1_REG16P0 :           76F C |  LD_REG16P6_REG16P7 :           849 C |
 LD_REG16P7_P2P3 :              779 C |  LD_REG8P0_P1 :                 7EA C |
*LD_REG8P0_REG8P1 :             7D7 C |  LD_REG8P2_P1 :                 7F6 C |
 LD_REG8P3_P1 :                 7F0 C |  LD_REG8P6_REG8P7 :             7DF C |
 LD_REG8P7_P1 :                 7FA C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                  0E16 C | *NESTMAX :                      100 - |
 OR67_L1 :                      743 C |  OR67_L2 :                      74F C |
 OR67_L3 :                      75B C |  OR67_L4 :                      764 C |
 ORI_P1 :                       5E6 C |  OR_P1_P2 :                     6FC C |
 OR_R6_R7 :                     739 C | *PADDING :                        1 - |
 PFLAG_CNT1 :                   649 C |  PFLAG_CNT2 :                   64D C |
 PFLAG_CNT3 :                   651 C |  PFLAG_CNT4 :                   655 C |
 PFLAG_CNT5 :                   65A C |  PFLAG_CNT6 :                   65E C |
 PFLAG_CNT7 :                   662 C |  PFLAG_CNT8 :                   666 C |
 PM16_LINEBUF :               0FD00 - | *PM16_MEMSTART :                  0 - |
 PM_INIT_BANK :                0BAD C |  PM_INIT_HLOOP :                  9 C |
 PM_INIT_LLOOP :                 0B C |  PM_RAM_START :                0F00 - |
 PM_READ_P0_P1 :               0FFE - |  PM_SELECTPMB_P1 :             0BB9 C |
 PM_WRITE_P0_P1 :              0BA1 C |  PM_WRITE_P6_P7 :              0BA7 C |
 POP_P0 :                      0B36 C |  POP_P1 :                      0B43 C |
 POP_P2 :                      0B50 C |  PRINTACC_L1 :                 0CBC C |
 PRINTHEX_P1 :                 0C85 C |  PRINTHEX_REG16P1 :             822 C |
 PRINTSTRP0_EXIT :             0E12 C |  PRINTSTRP0_LOOP :             0E04 C |
 PRINTSTRP0_PUT :              0E0B C |  PRINTSTR_EXIT :               0C16 C |
 PRINTSTR_LOOP :               0C0C C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM16REG16P0 :        0C0A C |  PRINT_ACC :                   0CB4 C |
 PRINT_CR :                    0CAC C |  PRINT_CRLF :                  0CA0 C |
 PRINT_DATARAM_P0 :            0D55 C |  PRINT_LF :                    0CB0 C |
 PRINT_SPC :                   0C98 C |  PUSH_P0 :                     0B00 C |
 PUSH_P1 :                     0B12 C |  PUSH_P2 :                     0B24 C |
 PUTCHAR_L1 :                  0C67 C |  PUTCHAR_L2 :                  0C76 C |
 PUTCHAR_P1 :                  0C5F C |  RAM23TYPE :               "4002-2" - |
 REG16_ADDR :                    1C - |  REG16_ADD_LOOP :               8A0 C |
 REG16_BC :                      0C - |  REG16_CMP_EXIT0 :              898 C |
 REG16_CMP_LOOP :               87E C |  REG16_CMP_NEXT :               88B C |
 REG16_DE :                       8 - |  REG16_DEC_EXIT :               872 C |
 REG16_DEC_LOOP :               869 C |  REG16_HL :                       4 - |
 REG16_INC_EXIT :               861 C |  REG16_INC_LOOP :               858 C |
 REG16_MON_ADDR :                2C - |  REG16_MON_INDEX :               28 - |
*REG16_MON_PMBANK :              34 - |  REG16_MON_TMP :                 30 - |
 REG16_PC :                      14 - |  REG16_SP :                      18 - |
*REG16_STACK_40H :               40 - | *REG16_STACK_7CH :               7C - |
 REG4_EMU_MODE :                 24 - |  REG4_FLAG_1P1C :                10 - |
 REG4_FLAG_SZBH :                11 - |  REG8_A :                         0 - |
 REG8_ADDRH :                    1E - |  REG8_ADDRL :                    1C - |
 REG8_B :                        0E - |  REG8_C :                        0C - |
 REG8_D :                        0A - |  REG8_DEC_EXIT :                7D6 C |
 REG8_E :                         8 - |  REG8_EMU_KEYBUF :               20 - |
 REG8_FLAG :                     10 - |  REG8_H :                         6 - |
 REG8_INC_EXIT :                7B5 C |  REG8_L :                         4 - |
 REG8_M :                         2 - |  REG8_MON_MEMSPACE :             38 - |
*REG8_MON_RESERVED :             3A - | *REG8_MON_TMP :                  30 - |
*REG8_MON_TMP2 :                 32 - |  REG8_PCH :                      16 - |
 REG8_PCL :                      14 - |  REG8_SPH :                      1A - |
 REG8_SPL :                      18 - |  REG8_SRC :                      12 - |
*RELAXED :                        0 - |  RET_IF0 :                      48C C |
 RET_IF1 :                      489 C |  SBI_P1 :                       518 C |
 SBI_P1_NOCARRY :               51E C |  SETFLAG_C_0 :                  687 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/04/15 23:22:03


 SETFLAG_C_1 :                  690 C |  SETFLAG_C_CY :                 685 C |
 SETFLAG_P_P1 :                 642 C |  SETFLAG_ZSP_P1 :               69F C |
 SETFLAG_ZSP_REG8P0 :           699 C |  SETFLAG_ZSP_REG8P1 :           69D C |
 STACK_INIT :                    80 - |  STR_CMDERR :                  0E47 C |
 STR_EMU_HLT :                 0ECB C |  STR_EMU_MESSAGE :             0E65 C |
 STR_EMU_REGHEADER :           0E87 C |  STR_EMU_STOP :                0EC2 C |
 STR_ERROR_LOADCOMMAND :       0E57 C |  STR_ERROR_UNKNOWN_MEMSPACE :  0E4B C |
 STR_OMSG :                    0E1F C |  STR_VFD_INIT :                0E42 C |
 SUB_REG8P0_P1 :                7B6 C |  SUI_P1 :                       4F6 C |
*TIME :                  "23:22:03" - |  TOUPPER_P1 :                  0D49 C |
 TOUPPER_P1_EXIT :             0D54 C | *TRUE :                           1 - |
 USE_EMU_FLAG_P :                 1 - |  USE_MON_CMD_DP :                 0 - |
 USE_MON_CMD_T :                  0 - | *VERSION :                     142F - |
 XOR67_L1 :                     717 C |  XOR67_L2 :                     723 C |
 XOR67_L3 :                     72F C |  XOR67_L4 :                     738 C |
 XOR_P1_P2 :                    6EB C |  XOR_R6_R7 :                    70D C |
 XRI_P1 :                       5A1 C |

    501 symbols
     42 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/04/15 23:22:03


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/04/15 23:22:03


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_ACC_REG4P7                        
LD_CNT_P1                             | LD_P0_P1                             
LD_P0_P3                              | LD_P1_CNT                            
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P2_P1                             
LD_P2_P3                              | LD_P3_P0                             
LD_P3_P1                              | LD_P3_P2                             
LD_P6_P0                              | LD_P6_P1                             
LD_P6_SP                              | LD_P7_P0                             
LD_P7_P1                              | LD_P7_P2                             
LD_P7_P3                              | LD_REG4P7_ACC                        
POPP                                  | PUSHP                                

     24 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 84 - 2023/04/15 23:22:03


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 85 - 2023/04/15 23:22:03


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4252 lines source file
   4528 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
