 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/04/03  9:19:43


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/03/21
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/04/03  9:19:43


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     ;;;----------------------------------------------------------------------------
(1)   79/       0 :                     ;;; LD_REG4P7_ACC
(1)   80/       0 :                     ;;; REG4(P7)=ACC
(1)   81/       0 :                     ;;;----------------------------------------------------------------------------
(1)   82/       0 :                     LD_REG4P7_ACC macro
(1)   83/       0 :                     	SRC P7
(1)   84/       0 :                     	WRM
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     ;;;----------------------------------------------------------------------------
(1)   88/       0 :                     ;;; LD_ACC_REG4P7
(1)   89/       0 :                     ;;; REG4(P7)=ACC
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     LD_ACC_REG4P7 macro
(1)   92/       0 :                     	SRC P7
(1)   93/       0 :                     	RDM
(1)   94/       0 :                     	endm
(1)   95/       0 :                     
(1)   96/       0 :                     ;;;----------------------------------------------------------------------------
(1)   97/       0 :                     ;;; Register Pair Operations
(1)   98/       0 :                     ;;;----------------------------------------------------------------------------
(1)   99/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)  100/       0 :                     		LD P1_HI
(1)  101/       0 :                     		XCH P0_HI
(1)  102/       0 :                     		LD P1_LO
(1)  103/       0 :                     		XCH P0_LO
(1)  104/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/04/03  9:19:43


(1)  105/       0 :                     ;;;----------------------------------------------------------------------------
(1)  106/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  107/       0 :                     		LD P3_HI
(1)  108/       0 :                     		XCH P0_HI
(1)  109/       0 :                     		LD P3_LO
(1)  110/       0 :                     		XCH P0_LO
(1)  111/       0 :                     		endm
(1)  112/       0 :                     ;;;----------------------------------------------------------------------------
(1)  113/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  114/       0 :                     		LD P0_HI
(1)  115/       0 :                     		XCH P1_HI
(1)  116/       0 :                     		LD P0_LO
(1)  117/       0 :                     		XCH P1_LO
(1)  118/       0 :                     		endm
(1)  119/       0 :                     ;;;----------------------------------------------------------------------------
(1)  120/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  121/       0 :                     		LD P2_HI
(1)  122/       0 :                     		XCH P1_HI
(1)  123/       0 :                     		LD P2_LO
(1)  124/       0 :                     		XCH P1_LO
(1)  125/       0 :                     		endm
(1)  126/       0 :                     ;;;----------------------------------------------------------------------------
(1)  127/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  128/       0 :                     		LD P3_HI
(1)  129/       0 :                     		XCH P1_HI
(1)  130/       0 :                     		LD P3_LO
(1)  131/       0 :                     		XCH P1_LO
(1)  132/       0 :                     		endm
(1)  133/       0 :                     ;;;----------------------------------------------------------------------------
(1)  134/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  135/       0 :                     		LD P1_HI
(1)  136/       0 :                     		XCH P2_HI
(1)  137/       0 :                     		LD P1_LO
(1)  138/       0 :                     		XCH P2_LO
(1)  139/       0 :                     		endm
(1)  140/       0 :                     ;;;----------------------------------------------------------------------------
(1)  141/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  142/       0 :                     		LD P3_HI
(1)  143/       0 :                     		XCH P2_HI
(1)  144/       0 :                     		LD P3_LO
(1)  145/       0 :                     		XCH P2_LO
(1)  146/       0 :                     		endm
(1)  147/       0 :                     ;;;----------------------------------------------------------------------------
(1)  148/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  149/       0 :                     		LD P0_HI
(1)  150/       0 :                     		XCH P3_HI
(1)  151/       0 :                     		LD P0_LO
(1)  152/       0 :                     		XCH P3_LO
(1)  153/       0 :                     		endm
(1)  154/       0 :                     ;;;----------------------------------------------------------------------------
(1)  155/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  156/       0 :                     		LD P1_HI
(1)  157/       0 :                     		XCH P3_HI
(1)  158/       0 :                     		LD P1_LO
(1)  159/       0 :                     		XCH P3_LO
(1)  160/       0 :                     		endm
(1)  161/       0 :                     ;;;----------------------------------------------------------------------------
(1)  162/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  163/       0 :                     		LD P2_HI
(1)  164/       0 :                     		XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/04/03  9:19:43


(1)  165/       0 :                     		LD P2_LO
(1)  166/       0 :                     		XCH P3_LO
(1)  167/       0 :                     		endm
(1)  168/       0 :                     ;;;----------------------------------------------------------------------------
(1)  169/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  170/       0 :                     		LD P0_HI
(1)  171/       0 :                     		XCH P6_HI
(1)  172/       0 :                     		LD P0_LO
(1)  173/       0 :                     		XCH P6_LO
(1)  174/       0 :                     		endm
(1)  175/       0 :                     ;;;----------------------------------------------------------------------------
(1)  176/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  177/       0 :                     		LD P1_HI
(1)  178/       0 :                     		XCH P6_HI
(1)  179/       0 :                     		LD P1_LO
(1)  180/       0 :                     		XCH P6_LO
(1)  181/       0 :                     		endm
(1)  182/       0 :                     ;;;----------------------------------------------------------------------------
(1)  183/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  184/       0 :                     		LD SP_HI
(1)  185/       0 :                     		XCH P6_HI
(1)  186/       0 :                     		LD SP_LO
(1)  187/       0 :                     		XCH P6_LO
(1)  188/       0 :                     		endm
(1)  189/       0 :                     ;;;----------------------------------------------------------------------------
(1)  190/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  191/       0 :                     		LD P0_HI
(1)  192/       0 :                     		XCH P7_HI
(1)  193/       0 :                     		LD P0_LO
(1)  194/       0 :                     		XCH P7_LO
(1)  195/       0 :                     		endm
(1)  196/       0 :                     ;;;----------------------------------------------------------------------------
(1)  197/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  198/       0 :                     		LD P1_HI
(1)  199/       0 :                     		XCH P7_HI
(1)  200/       0 :                     		LD P1_LO
(1)  201/       0 :                     		XCH P7_LO
(1)  202/       0 :                     		endm
(1)  203/       0 :                     ;;;----------------------------------------------------------------------------
(1)  204/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  205/       0 :                     		LD P2_HI
(1)  206/       0 :                     		XCH P7_HI
(1)  207/       0 :                     		LD P2_LO
(1)  208/       0 :                     		XCH P7_LO
(1)  209/       0 :                     		endm
(1)  210/       0 :                     ;;;----------------------------------------------------------------------------
(1)  211/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  212/       0 :                     		LD P3_HI
(1)  213/       0 :                     		XCH P7_HI
(1)  214/       0 :                     		LD P3_LO
(1)  215/       0 :                     		XCH P7_LO
(1)  216/       0 :                     		endm
(1)  217/       0 :                     ;;;----------------------------------------------------------------------------
(1)  218/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  219/       0 :                     		LD P1_HI
(1)  220/       0 :                     		XCH CNT_HI
(1)  221/       0 :                     		LD P1_LO
(1)  222/       0 :                     		XCH CNT_LO
(1)  223/       0 :                     		endm
(1)  224/       0 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/04/03  9:19:43


(1)  225/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  226/       0 :                     		LD CNT_HI
(1)  227/       0 :                     		XCH P1_HI
(1)  228/       0 :                     		LD CNT_LO
(1)  229/       0 :                     		XCH P1_LO
(1)  230/       0 :                     		endm
(1)  231/       0 :                     ;;;----------------------------------------------------------------------------
(1)  232/       0 :                     
(1)  233/       0 :                     ;;;----------------------------------------------------------------------------
(1)  234/       0 :                     ;;; For debug
(1)  235/       0 :                     ;;;----------------------------------------------------------------------------
(1)  236/       0 :                     ;;;----------------------------------------------------------------------------
(1)  237/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)  238/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)  239/       0 :                     ;;;----------------------------------------------------------------------------
(1)  240/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)  241/       0 :                     	JMS PUSH_P1
(1)  242/       0 :                     	FIM P1, ch
(1)  243/       0 :                     	JMS PUTCHAR_P1
(1)  244/       0 :                     	JMS POP_P1
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     
      23/       0 :                     ;;;---------------------------------------------------------------------------
      24/       0 :                     ;;; Emulator compile configuration
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 :                     ;; FLAG_P is not implemented because it takes much cost
      27/       0 : =0H                  EMU_USE_FLAG_P = 0	; don't use P FLAG
      28/       0 :                     ;;; EMU_USE_FLAG_P = 1	; use P FLAG
      29/       0 :                     
      30/       0 :                     ;;;---------------------------------------------------------------------------
      31/       0 :                     ;;; Emulator port configuration
      32/       0 :                     ;;;---------------------------------------------------------------------------
      33/       0 : =0H                  EMU_UARTRC	equ	00H	; for tinybasic-1.0
      34/       0 : =1H                  EMU_UARTRD	equ	01H	; for tynybasic-1.0
      35/       0 :                     ;;;	EMU_IN_UARTRC_VALUE	equ 22H	; for tynybasic-1.0
      36/       0 : =0FFH                EMU_IN_UARTRC_VALUE	equ 0FFH	;
      37/       0 :                     
      38/       0 :                     ;;;---------------------------------------------------------------------------
      39/       0 :                     ;;; Hardware Configuration
      40/       0 :                     ;;;---------------------------------------------------------------------------
      41/       0 :                     
      42/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      43/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      44/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      45/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      46/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      47/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      48/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      49/       0 :                     
      50/       0 :                     ;;; Chip type of RAM2 and RAM3
      51/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      52/       0 :                     
      53/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      54/       0 : =0H                  BANK_RAM0	equ 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/04/03  9:19:43


      55/       0 : =0H                  CHIP_RAM0	equ 00H
      56/       0 : =0H                  BANK_RAM1	equ 0
      57/       0 : =40H                 CHIP_RAM1	equ 40H
      58/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      59/       0 : =0H                  BANK_RAM2	equ 0
      60/       0 : =80H                 CHIP_RAM2	equ 80H
      61/       0 : =0H                  BANK_RAM3	equ 0
      62/       0 : =0C0H                CHIP_RAM3	equ 0C0H
      63/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      64/       0 :                     BANK_RAM2	equ 1
      65/       0 :                     CHIP_RAM2	equ 00H
      66/       0 :                     BANK_RAM3	equ 1
      67/       0 :                     CHIP_RAM3	equ 40H
      68/       0 : [58]                 	endif
      69/       0 :                     
      70/       0 :                     ;;; Default Bank
      71/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      72/       0 :                     ;;; to omit DCL as much as possible.
      73/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      74/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      75/       0 :                     		
      76/       0 :                     ;;; Output port for serial interface
      77/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      78/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      79/       0 :                     
      80/       0 :                     ;;; Output port for program memory bank selection
      81/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      82/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      83/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      84/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      85/       0 :                     
      86/       0 :                     	
      87/       0 :                     ;;; Program Memory RAM area
      88/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
      89/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
      90/       0 :                     				; "FIN P1 and BBL 0"
      91/       0 :                     	
      92/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
      93/       0 : =0H                  PM16_MEMSTART	equ 0000H
      94/       0 : =0D00H               PM16_LINEBUF	equ 0D00H
      95/       0 :                     
      96/       0 :                     ;;; for 256 x 16 x16 PM space
      97/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
      98/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
      99/       0 :                     
     100/       0 :                     ;;;---------------------------------------------------------------------------
     101/       0 :                     ;;; Data RAM Register Configuration
     102/       0 :                     ;;;---------------------------------------------------------------------------
     103/       0 :                     ;;; RAM0
     104/       0 :                     ;;; 
     105/       0 :                     ;;; 8080 register code DDD or SSS
     106/       0 :                     ;;; 0 1 2 3 4 5 6 7
     107/       0 :                     ;;; B C D E H L M A
     108/       0 :                     ;;; 
     109/       0 :                     ;;;  ADDRESS=~(xxx)<<1
     110/       0 :                     	
     111/       0 : =0H                  REG8_A		equ 00H	;
     112/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     113/       0 : =4H                  REG8_L		equ 04H	;
     114/       0 : =6H                  REG8_H		equ 06H	;
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/04/03  9:19:43


     115/       0 : =8H                  REG8_E		equ 08H	;
     116/       0 : =0AH                 REG8_D		equ 0AH	;
     117/       0 : =0CH                 REG8_C		equ 0CH	;
     118/       0 : =0EH                 REG8_B		equ 0EH	;
     119/       0 :                     
     120/       0 : =10H                 REG8_FLAG	equ 10H ;
     121/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     122/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
     123/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     124/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     125/       0 :                     
     126/       0 :                     		;; lower byte is the first
     127/       0 : =0CH                 REG16_BC	equ REG8_C
     128/       0 : =8H                  REG16_DE	equ REG8_E
     129/       0 : =4H                  REG16_HL	equ REG8_L
     130/       0 :                     
     131/       0 : =14H                 REG8_PCL	equ REG16_PC
     132/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     133/       0 : =18H                 REG8_SPL	equ REG16_SP
     134/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     135/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     136/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     137/       0 :                     	
     138/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     139/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     140/       0 :                     
     141/       0 : =20H                 REG4_EMU_STEP	equ 20H	; Execution mode (0:continuous, 1:step)
     142/       0 :                     	
     143/       0 : =28H                 REG16_MON_INDEX	equ 28H	;
     144/       0 : =2CH                 REG16_MON_ADDR	equ 2CH	;
     145/       0 : =30H                 REG16_MON_TMP	equ 30H	;
     146/       0 : =34H                 REG16_MON_PMBANK	equ 34H	;
     147/       0 : =38H                 REG8_MON_MEMSPACE	equ 38H	; 'D', 'P', 'L' = (Data, Physical, Logical)
     148/       0 : =3AH                 REG8_MON_RESERVED	equ 3AH	; (reserved)
     149/       0 :                     	
     150/       0 :                     
     151/       0 :                     ;;; RAM1
     152/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     153/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     154/       0 :                     
     155/       0 : =80H                 STACK_INIT	equ 80H
     156/       0 :                     
     157/       0 :                     ;;; RAM2
     158/       0 :                     ;;; RAM3
     159/       0 :                     	
     160/       0 :                     ;;;---------------------------------------------------------------------------
     161/       0 :                     ;;; Program Start
     162/       0 :                     ;;;---------------------------------------------------------------------------
     163/       0 :                     	org 0000H		; beginning of Program Memory
     164/       0 :                     
     165/       0 :                     ;;;---------------------------------------------------------------------------
     166/       0 :                     ;;; Mail Loop for Monitor Program
     167/       0 :                     ;;;---------------------------------------------------------------------------
     168/       0 :                     MAIN:
     169/       0 : 00                  	NOP
     170/       1 : F0                  	CLB
     171/       2 :                     
     172/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     173/       2 :                     	LDM BANK_DEFAULT
     174/       2 : [172]                	endif
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/04/03  9:19:43


     175/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     176/       2 :                     	;; except when in use for another banks.
     177/       2 : FD                  	DCL
     178/       3 :                     
     179/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     180/       5 : 5C 7D               	JMS INIT_SERIAL		; Initialize Serial Port
     181/       7 :                     
     182/       7 :                     
     183/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     184/       7 : D0                  	LDM loop(16)
     185/       8 : B2                  	XCH P1_HI
     186/       9 :                     PM_INIT_HLOOP:
     187/       9 : D0                  	LDM loop(16)
     188/       A : B3                  	XCH P1_LO
     189/       B :                     PM_INIT_LLOOP:
     190/       B : 5B B9               	JMS PM_SELECTPMB_P1
     191/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     192/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     193/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     194/      13 :                     
     195/      13 : 22 00               	FIM P1, 00H
     196/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     197/      17 :                     	
     198/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     199/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     200/      19 : 5E 00               	JMS PRINTSTR_P0
     201/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     202/      1D : 5E 00               	JMS PRINTSTR_P0
     203/      1F :                     
     204/      1F : 20 38               	FIM P0, REG8_MON_MEMSPACE
     205/      21 : 22 44               	FIM P1, 'D'
     206/      23 : 57 B8               	JMS LD_REG8P0_P1	; set memspace 'D'
     207/      25 :                     	
     208/      25 :                     	;; init emulator PC
     209/      25 : 20 14               	FIM P0, REG16_PC
     210/      27 : 24 00               	FIM P2, 00H
     211/      29 : 26 00               	FIM P3, 00H
     212/      2B : 57 5D               	JMS LD_REG16P0_P2P3	; PC=0000H
     213/      2D :                     
     214/      2D :                     CMD_LOOP:
     215/      2D : 22 5D               	FIM P1, ']'		; prompt
     216/      2F : 5C 5D               	JMS PUTCHAR_P1
     217/      31 :                     
     218/      31 : 20 28               	FIM P0, REG16_MON_INDEX
     219/      33 : 24 0D               	FIM P2, up(PM16_LINEBUF)
     220/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     221/      37 : 57 5D               	JMS LD_REG16P0_P2P3
     222/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
     223/      3B :                     
     224/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     225/      3D : 5D 44               	JMS TOUPPER_P1
     226/      3F :                     L0:
     227/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     228/      41 : 5D 20               	JMS CMP_P1P7
     229/      43 : 1C 47               	JCN ZN, L1
     230/      45 : 41 28               	JUN COMMAND_H
     231/      47 :                     L1:
     232/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     233/      49 : 5D 20               	JMS CMP_P1P7
     234/      4B : 1C 4F               	JCN ZN, L2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/04/03  9:19:43


     235/      4D : 40 E7               	JUN COMMAND_D
     236/      4F :                     L2:
     237/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     238/      4F :                     ;;;	JMS CMP_P1P7
     239/      4F :                     ;;;	JCN ZN, L3
     240/      4F :                     ;;;	JUN COMMAND_S
     241/      4F :                     L3:
     242/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     243/      51 : 5D 20               	JMS CMP_P1P7
     244/      53 : 1C 57               	JCN ZN, L4
     245/      55 : 41 48               	JUN COMMAND_L
     246/      57 :                     L4:
     247/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     248/      59 : 5D 20               	JMS CMP_P1P7
     249/      5B : 1C 5F               	JCN ZN, L5
     250/      5D : 41 BA               	JUN COMMAND_C
     251/      5F :                     L5:
     252/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     253/      61 : 5D 20               	JMS CMP_P1P7
     254/      63 : 1C 67               	JCN ZN, L6
     255/      65 : 41 26               	JUN COMMAND_G
     256/      67 :                     L6:
     257/      67 : 2E 45               	FIM P7, 'E'		; jump to 8080 Emulator
     258/      69 : 5D 20               	JMS CMP_P1P7 		;
     259/      6B : 1C 87               	JCN ZN, L10		;
     260/      6D :                     
     261/      6D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; check next letter
     262/      6F : 5D 44               	JMS TOUPPER_P1
     263/      71 : 2E 53               	FIM P7, 'S'		; 'E' continuous mode, 'ES' step mode
     264/      73 : 5D 20               	JMS CMP_P1P7 		; 
     265/      75 : 1C 7A               	JCN ZN, L6_CONTINUOUS	;
     266/      77 : D1                  	LDM 1H			; step mode
     267/      78 : 40 7D               	JUN L6_SETMODE
     268/      7A :                     L6_CONTINUOUS			; continuous mode
     269/      7A : 58 46               	JMS DEC_REG16P0
     270/      7C : D0                  	LDM 0H
     271/      7D :                     L6_SETMODE:
     272/      7D : 2E 20               	FIM P7, REG4_EMU_STEP
     273/      7F : (MACRO)              	LD_REG4P7_ACC
     273/      7F : 2F                          SRC P7
     273/      80 : E0                          WRM
     274/      81 : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     275/      83 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     276/      85 : 41 D4               	JUN COMMAND_E
     277/      87 :                     
     278/      87 :                     
     279/      87 :                     L10:
     280/      87 : 20 AC               	FIM P0, lo(STR_CMDERR)
     281/      89 : 5E 00               	JMS PRINTSTR_P0
     282/      8B :                     
     283/      8B : 40 2D               	JUN CMD_LOOP
     284/      8D :                     
     285/      8D :                     
     286/      8D :                     ;;;---------------------------------------------------------------------------
     287/      8D :                     ;;; COMMAND_DP
     288/      8D :                     ;;; Dump Physical Memory
     289/      8D :                     ;;;	BANK=ADDR.FEDCBA98
     290/      8D :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     291/      8D :                     ;;;---------------------------------------------------------------------------
     292/      8D :                     COMMAND_DP:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/04/03  9:19:43


     293/      8D : 22 2C               	FIM P1, REG16_MON_ADDR
     294/      8F : 58 22               	JMS LD_P2P3_REG16P1
     295/      91 :                     
     296/      91 : (MACRO)              	LD_P1_P2
     296/      91 : A4                                  LD P2_HI
     296/      92 : B2                                  XCH P1_HI
     296/      93 : A5                                  LD P2_LO
     296/      94 : B3                                  XCH P1_LO
     297/      95 : 5B B9               	JMS PM_SELECTPMB_P1
     298/      97 :                     	
     299/      97 : D8                  	LDM loop(8)
     300/      98 : BA                  	XCH CNT_I
     301/      99 :                     CMDDP_L0:
     302/      99 : (MACRO)              	LD_P1_P2
     302/      99 : A4                                  LD P2_HI
     302/      9A : B2                                  XCH P1_HI
     302/      9B : A5                                  LD P2_LO
     302/      9C : B3                                  XCH P1_LO
     303/      9D : 5C 83               	JMS PRINTHEX_P1
     304/      9F : 22 3A               	FIM P1, ':'
     305/      A1 : 5C 5D               	JMS PUTCHAR_P1
     306/      A3 : 22 46               	FIM P1, 'F'
     307/      A5 : 5C 5D               	JMS PUTCHAR_P1
     308/      A7 : (MACRO)              	LD_P1_P3
     308/      A7 : A6                                  LD P3_HI
     308/      A8 : B2                                  XCH P1_HI
     308/      A9 : A7                                  LD P3_LO
     308/      AA : B3                                  XCH P1_LO
     309/      AB : 5C 83               	JMS PRINTHEX_P1
     310/      AD : 22 3A               	FIM P1, ':'
     311/      AF : 5C 5D               	JMS PUTCHAR_P1
     312/      B1 :                     
     313/      B1 :                     CMDDP_L1:	
     314/      B1 : (MACRO)              	LD_P0_P3
     314/      B1 : A6                                  LD P3_HI
     314/      B2 : B0                                  XCH P0_HI
     314/      B3 : A7                                  LD P3_LO
     314/      B4 : B1                                  XCH P0_LO
     315/      B5 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     316/      B7 : 5C 83               	JMS PRINTHEX_P1
     317/      B9 :                     
     318/      B9 : 77 B1               	ISZ P3_LO, CMDDP_L1
     319/      BB : 5C 9E               	JMS PRINT_CRLF
     320/      BD : 66                  	INC P3_HI
     321/      BE : A6                  	LD P3_HI
     322/      BF : 14 C3               	JCN Z, CMDDP_EXIT
     323/      C1 : 7A 99               	ISZ CNT_I, CMDDP_L0
     324/      C3 :                     CMDDP_EXIT:	
     325/      C3 : 20 2C               	FIM P0, REG16_MON_ADDR
     326/      C5 : 57 5D               	JMS LD_REG16P0_P2P3
     327/      C7 :                     
     328/      C7 : 40 2D               	JUN CMD_LOOP		; return to command loop
     329/      C9 :                     
     330/      C9 :                     ;;;---------------------------------------------------------------------------
     331/      C9 :                     ;;; COMMAND_DL
     332/      C9 :                     ;;; Dump Logical Memory
     333/      C9 :                     ;;;---------------------------------------------------------------------------
     334/      C9 :                     COMMAND_DL:
     335/      C9 : 20 2C               	FIM P0, REG16_MON_ADDR
     336/      CB : 57 D8               	JMS LD_P1_REG8P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/04/03  9:19:43


     337/      CD : (MACRO)              	LD_CNT_P1
     337/      CD : A2                                  LD P1_HI
     337/      CE : BA                                  XCH CNT_HI
     337/      CF : A3                                  LD P1_LO
     337/      D0 : BB                                  XCH CNT_LO
     338/      D1 : D8                  	LDM loop(8)
     339/      D2 : BA                  	XCH CNT_I
     340/      D3 :                     CMDDL_L0:
     341/      D3 : 22 2C               	FIM P1, REG16_MON_ADDR
     342/      D5 : 57 F0               	JMS PRINTHEX_REG16P1
     343/      D7 : 22 3A               	FIM P1, ':'
     344/      D9 : 5C 5D               	JMS PUTCHAR_P1
     345/      DB :                     CMDDL_L1:	
     346/      DB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     347/      DD : 5C 83               	JMS PRINTHEX_P1
     348/      DF :                     
     349/      DF : 7B DB               	ISZ CNT_J, CMDDL_L1
     350/      E1 : 5C 9E               	JMS PRINT_CRLF
     351/      E3 : 7A D3               	ISZ CNT_I, CMDDL_L0
     352/      E5 :                     CMDDL_NEXT:
     353/      E5 : 40 2D               	JUN CMD_LOOP		; return to command loop
     354/      E7 :                     
     355/      E7 :                     	
     356/      E7 :                     ;;;---------------------------------------------------------------------------
     357/      E7 :                     ;;; COMMAND_D
     358/      E7 :                     ;;; Dump Memory
     359/      E7 :                     ;;;---------------------------------------------------------------------------
     360/      E7 :                     COMMAND_D:
     361/      E7 : 22 2C               	FIM P1, REG16_MON_ADDR
     362/      E9 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     363/      EB :                     	
     364/      EB : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     365/      ED : 57 D0               	JMS LD_P1_REG8P7
     366/      EF :                     	
     367/      EF : 2E 44               	FIM P7, 'D'
     368/      F1 : 5D 20               	JMS CMP_P1P7
     369/      F3 : 1C F7               	JCN ZN, CMDD_L1
     370/      F5 : 41 0D               	JUN COMMAND_DD
     371/      F7 :                     CMDD_L1:
     372/      F7 : 2E 50               	FIM P7, 'P'
     373/      F9 : 5D 20               	JMS CMP_P1P7
     374/      FB : 1C FF               	JCN ZN, CMDD_L2
     375/      FD : 40 8D               	JUN COMMAND_DP
     376/      FF :                     CMDD_L2:
     377/      FF : 2E 4C               	FIM P7, 'L'
     378/     101 : 5D 20               	JMS CMP_P1P7
     379/     103 : 1C 07               	JCN ZN, CMDD_L3
     380/     105 : 40 C9               	JUN COMMAND_DL
     381/     107 :                     CMDD_L3:
     382/     107 : 20 B0               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     383/     109 : 5E 00               	JMS PRINTSTR_P0
     384/     10B : 40 2D               	JUN CMD_LOOP
     385/     10D :                     
     386/     10D :                     ;;;---------------------------------------------------------------------------
     387/     10D :                     ;;; COMMAND_DD
     388/     10D :                     ;;; Dump Data RAM
     389/     10D :                     ;;; input:
     390/     10D :                     ;;; REG16_MON_ADDR
     391/     10D :                     ;;; RAM0=00H-3FH
     392/     10D :                     ;;; RAM1=40H-7FH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/04/03  9:19:43


     393/     10D :                     ;;; RAM2=80H-BFH
     394/     10D :                     ;;; RAM3=C0H-FFH
     395/     10D :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     396/     10D :                     ;;;---------------------------------------------------------------------------
     397/     10D :                     COMMAND_DD:
     398/     10D : 2E 2C               	FIM P7, REG16_MON_ADDR
     399/     10F : 57 D0               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     400/     111 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     400/     111 : A2                                  LD P1_HI
     400/     112 : B0                                  XCH P0_HI
     400/     113 : A3                                  LD P1_LO
     400/     114 : B1                                  XCH P0_LO
     401/     115 :                     
     402/     115 :                     	;; PRINT 4 registers
     403/     115 : DC                  	LDM loop(4)		; PRINT 4 regs
     404/     116 : BA                  	XCH CNT_I		; I=loop(4)
     405/     117 :                     	;; PRINT 16 characters
     406/     117 :                     CMDDD_L1:
     407/     117 : 5D 50               	JMS PRINT_DATARAM_P0
     408/     119 : 60                  	INC P0_HI
     409/     11A : 7A 17               	ISZ CNT_I, CMDDD_L1
     410/     11C :                     
     411/     11C : (MACRO)              	LD_P1_P0
     411/     11C : A0                                  LD P0_HI
     411/     11D : B2                                  XCH P1_HI
     411/     11E : A1                                  LD P0_LO
     411/     11F : B3                                  XCH P1_LO
     412/     120 : 20 2C               	FIM P0, REG16_MON_ADDR
     413/     122 : 57 B8               	JMS LD_REG8P0_P1
     414/     124 :                     
     415/     124 : 40 2D               	JUN CMD_LOOP		; return to command loop
     416/     126 :                     	
     417/     126 :                     ;;;---------------------------------------------------------------------------
     418/     126 :                     ;;; COMMAND_G
     419/     126 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     420/     126 :                     ;;;---------------------------------------------------------------------------
     421/     126 :                     COMMAND_G:
     422/     126 : 4F 00               	JUN PM_RAM_START
     423/     128 :                     
     424/     128 :                     ;;;---------------------------------------------------------------------------
     425/     128 :                     ;;; COMMAND_H
     426/     128 :                     ;;; Select Memory Space and address
     427/     128 :                     ;;; 'D' = Data Memory
     428/     128 :                     ;;; 'P' = Physical Program Memory
     429/     128 :                     ;;; 'L' = Logical Program Memory
     430/     128 :                     ;;;---------------------------------------------------------------------------
     431/     128 :                     COMMAND_H:
     432/     128 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     433/     12A : 5D 2D               	JMS ISZEROORNOT_P1
     434/     12C : 1C 30               	JCN ZN, CMDH_SET
     435/     12E : 41 3A               	JUN CMDH_EXIT
     436/     130 :                     CMDH_SET:
     437/     130 : 5D 44               	JMS TOUPPER_P1
     438/     132 : 24 38               	FIM P2, REG8_MON_MEMSPACE
     439/     134 : 57 C4               	JMS LD_REG8P2_P1
     440/     136 : 22 2C               	FIM P1, REG16_MON_ADDR
     441/     138 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     442/     13A :                     CMDH_EXIT:
     443/     13A : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     444/     13C : 57 D0               	JMS LD_P1_REG8P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/04/03  9:19:43


     445/     13E : 5C 5D               	JMS PUTCHAR_P1
     446/     140 : 22 2C               	FIM P1, REG16_MON_ADDR
     447/     142 : 57 F0               	JMS PRINTHEX_REG16P1
     448/     144 : 5C 9E               	JMS PRINT_CRLF
     449/     146 : 40 2D               	JUN CMD_LOOP
     450/     148 :                     
     451/     148 :                     ;;;---------------------------------------------------------------------------
     452/     148 :                     ;;; COMMAND_L
     453/     148 :                     ;;; Load to Logical Memory
     454/     148 :                     ;;; Intel Hex format, no checksum check
     455/     148 :                     ;;; data lengh must be 0to10H/line
     456/     148 :                     ;;;---------------------------------------------------------------------------
     457/     148 :                     COMMAND_L:
     458/     148 :                     CMDL_START:
     459/     148 : 20 28               	FIM P0, REG16_MON_INDEX
     460/     14A : 24 0D               	FIM P2, up(PM16_LINEBUF)
     461/     14C : 26 00               	FIM P3, lo(PM16_LINEBUF)
     462/     14E : 57 5D               	JMS LD_REG16P0_P2P3
     463/     150 : 5B C4               	JMS GETLINE_PM16REG16P0
     464/     152 :                     
     465/     152 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     466/     154 : 5D 2D               	JMS ISZEROORNOT_P1
     467/     156 : 1C 5A               	JCN ZN, CMDL_L0
     468/     158 : 41 B2               	JUN CMDL_EXIT
     469/     15A :                     CMDL_L0:
     470/     15A : 2E 3A               	FIM P7, ':'
     471/     15C : 5D 20               	JMS CMP_P1P7
     472/     15E : 14 62               	JCN Z, CMDL_L1
     473/     160 : 41 88               	JUN CMDL_ERROR
     474/     162 :                     CMDL_L1:
     475/     162 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     476/     164 : (MACRO)              	LD_CNT_P1				; count
     476/     164 : A2                                  LD P1_HI
     476/     165 : BA                                  XCH CNT_HI
     476/     166 : A3                                  LD P1_LO
     476/     167 : BB                                  XCH CNT_LO
     477/     168 :                     
     478/     168 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     479/     16A : (MACRO)              	LD_P2_P1
     479/     16A : A2                                  LD P1_HI
     479/     16B : B4                                  XCH P2_HI
     479/     16C : A3                                  LD P1_LO
     479/     16D : B5                                  XCH P2_LO
     480/     16E : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     481/     170 : (MACRO)              	LD_P3_P1
     481/     170 : A2                                  LD P1_HI
     481/     171 : B6                                  XCH P3_HI
     481/     172 : A3                                  LD P1_LO
     481/     173 : B7                                  XCH P3_LO
     482/     174 : 22 2C               	FIM P1, REG16_MON_ADDR
     483/     176 : 57 57               	JMS LD_REG16P1_P2P3
     484/     178 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     485/     17A : 5D 2D               	JMS ISZEROORNOT_P1
     486/     17C : 1C 80               	JCN ZN, CMDL_L2
     487/     17E : 41 92               	JUN CMDL_READLOOP
     488/     180 :                     CMDL_L2:
     489/     180 : 2E 01               	FIM P7, 01H
     490/     182 : 5D 20               	JMS CMP_P1P7
     491/     184 : 1C 88               	JCN ZN, CMDL_ERROR
     492/     186 : 41 B2               	JUN CMDL_EXIT
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/04/03  9:19:43


     493/     188 :                     CMDL_ERROR:
     494/     188 : 58 46               	JMS DEC_REG16P0
     495/     18A : 5C 08               	JMS PRINTSTR_PM16REG16P0
     496/     18C : 20 BC               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     497/     18E : 5E 00               	JMS PRINTSTR_P0
     498/     190 : 40 2D               	JUN CMD_LOOP
     499/     192 :                     CMDL_READLOOP:
     500/     192 : AB                  	LD CNT_LO
     501/     193 : 1C 9A               	JCN ZN, CMDL_CONTINUE
     502/     195 : AA                  	LD CNT_HI
     503/     196 : 1C 9A               	JCN ZN, CMDL_CONTINUE
     504/     198 : 41 48               	JUN  CMDL_START		; continue to read next line
     505/     19A :                     CMDL_CONTINUE:
     506/     19A : 20 28               	FIM P0, REG16_MON_INDEX
     507/     19C : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     508/     19E : 14 A2               	JCN Z, CMDL_L3
     509/     1A0 : 41 48               	JUN CMDL_START		; continue to read next line
     510/     1A2 :                     CMDL_L3:
     511/     1A2 : 20 2C               	FIM P0, REG16_MON_ADDR
     512/     1A4 : 5B 81               	JMS LD_PM16REG16P0_P1
     513/     1A6 : 58 36               	JMS INC_REG16P0
     514/     1A8 : AB                  	LD CNT_LO
     515/     1A9 : F8                  	DAC
     516/     1AA : BB                  	XCH CNT_LO
     517/     1AB : 12 B0               	JCN C, CMDL_L5		; no borrow then skip
     518/     1AD : AA                  	LD CNT_HI
     519/     1AE : F8                  	DAC
     520/     1AF : BA                  	XCH CNT_HI
     521/     1B0 :                     CMDL_L5:
     522/     1B0 : 41 92               	JUN CMDL_READLOOP
     523/     1B2 :                     CMDL_EXIT:
     524/     1B2 :                     	;; set memory space to logical
     525/     1B2 : 20 38               	FIM P0, REG8_MON_MEMSPACE
     526/     1B4 : 22 4C               	FIM P1, 'L'
     527/     1B6 : 57 B8               	JMS LD_REG8P0_P1
     528/     1B8 : 40 2D               	JUN CMD_LOOP
     529/     1BA :                     	
     530/     1BA :                     ;;;---------------------------------------------------------------------------
     531/     1BA :                     ;;; COMMAND_C
     532/     1BA :                     ;;; Clear Program Memory
     533/     1BA :                     ;;;---------------------------------------------------------------------------
     534/     1BA :                     COMMAND_C:
     535/     1BA : 2A F0               	FIM CNT, loops(1, 16)
     536/     1BC :                     ;;;	FIM CNT, loops(16, 16)
     537/     1BC :                     CMDPMC_BANKLOOP:
     538/     1BC : (MACRO)              	LD_P1_CNT
     538/     1BC : AA                                  LD CNT_HI
     538/     1BD : B2                                  XCH P1_HI
     538/     1BE : AB                                  LD CNT_LO
     538/     1BF : B3                                  XCH P1_LO
     539/     1C0 : 5B B9               	JMS PM_SELECTPMB_P1
     540/     1C2 : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     541/     1C4 : 22 00               	FIM P1, 00H		; data to fill
     542/     1C6 :                     CMDPMC_L1:
     543/     1C6 : 5B A1               	JMS PM_WRITE_P0_P1
     544/     1C8 : 71 C6               	ISZ R1, CMDPMC_L1
     545/     1CA : 70 C6               	ISZ R0, CMDPMC_L1
     546/     1CC :                     
     547/     1CC : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     548/     1CE : 7B BC               	ISZ CNT_J, CMDPMC_BANKLOOP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/04/03  9:19:43


     549/     1D0 : 7A BC               	ISZ CNT_I, CMDPMC_BANKLOOP
     550/     1D2 :                     
     551/     1D2 :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     552/     1D2 :                     	
     553/     1D2 : 40 2D               	JUN CMD_LOOP		; return to command loop
     554/     1D4 :                     
     555/     1D4 :                     ;;;	org 0200H
     556/     1D4 :                     ;;;---------------------------------------------------------------------------
     557/     1D4 :                     ;;; 8080 emulator main loop
     558/     1D4 :                     ;;;---------------------------------------------------------------------------
     559/     1D4 :                     COMMAND_E:
     560/     1D4 :                     EMU_START:
     561/     1D4 : 20 47               	FIM P0, lo(STR_EMU_MESSAGE)
     562/     1D6 : 5E 00               	JMS PRINTSTR_P0
     563/     1D8 :                     
     564/     1D8 :                     EMU_LOOP:
     565/     1D8 : 2E 20               	FIM P7, REG4_EMU_STEP
     566/     1DA : (MACRO)              	LD_ACC_REG4P7
     566/     1DA : 2F                          SRC P7
     566/     1DB : E9                          RDM
     567/     1DC : 14 E8               	JCN Z, EMU_EXEC
     568/     1DE : 58 F2               	JMS EMU_PRINT_REGISTERS
     569/     1E0 : 5C 35               	JMS GETCHAR_P1
     570/     1E2 : 2E 2E               	FIM P7, '.'
     571/     1E4 : 5D 20               	JMS CMP_P1P7
     572/     1E6 : 14 EC               	JCN Z, EMU_EXIT
     573/     1E8 :                     EMU_EXEC:
     574/     1E8 :                     	
     575/     1E8 : 51 EE               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     576/     1EA :                     			; but it can return here by BBL from various routines
     577/     1EA :                     			; in contrast JUN consumes 2 bytes
     578/     1EA : 41 D8               	JUN EMU_LOOP
     579/     1EC :                     
     580/     1EC :                     EMU_EXIT:
     581/     1EC : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     582/     1EE :                     
     583/     1EE :                     ;;;---------------------------------------------------------------------------
     584/     1EE :                     ;;; EXEC_CODE
     585/     1EE :                     ;;;---------------------------------------------------------------------------
     586/     1EE :                     EXEC_CODE:
     587/     1EE : 20 14               	FIM P0, REG16_PC
     588/     1F0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     589/     1F2 :                     
     590/     1F2 : A2                  	LD P1_HI		;
     591/     1F3 : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     592/     1F4 : 1A F8               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     593/     1F6 : 42 10               	JUN CODE_80FF		; 80H<=CODE<=FFH
     594/     1F8 :                     
     595/     1F8 :                     ;;;---------------------------------------------------------------------------
     596/     1F8 :                     CODE_007F:			; 00H<=CODE<=7FH
     597/     1F8 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     598/     1F9 : 1A FF               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     599/     1FB : 42 15               	JUN CODE_407F		; 40H<=CODE<=7FH
     600/     1FD :                     ;;;---------------------------------------------------------------------------
     601/     1FD : 00                  	NOP
     602/     1FE : 00                  	NOP
     603/     1FF :                     CODE_003F:			; 00H<=CODE<=3FH
     604/     1FF : A3                  	LD P1_LO
     605/     200 : 1C 07               	JCN NZ,CODE_NOT_NOP
     606/     202 : A2                  	LD P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/04/03  9:19:43


     607/     203 : 1C 07               	JCN NZ,CODE_NOT_NOP
     608/     205 : 42 7F               	JUN CODE_00H		; NOP
     609/     207 :                     CODE_NOT_NOP:
     610/     207 :                     CODE_C0FF:
     611/     207 :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     612/     207 :                     	; prepare for jump table
     613/     207 :                     	; P1=P1<<1 and jump to dispatch table
     614/     207 : A3                  	LD P1_LO
     615/     208 : F1                  	CLC
     616/     209 : F5                  	RAL
     617/     20A : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     618/     20B : A2                  	LD P1_HI
     619/     20C : F5                  	RAL
     620/     20D : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     621/     20E : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     622/     210 :                     ;;;---------------------------------------------------------------------------
     623/     210 :                     CODE_80FF:			; 80H<=P1<=FFH
     624/     210 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     625/     211 : 1A 15               	JCN CN, CODE_80BF
     626/     213 : 42 07               	JUN CODE_C0FF		; C0H<=P1<=FFH
     627/     215 :                     
     628/     215 :                     ;;;---------------------------------------------------------------------------
     629/     215 :                     CODE_407F:			; 40H<=P1<=7FH
     630/     215 :                     CODE_80BF:			; 80H<=P1<=BFH
     631/     215 :                     ;;;---------------------------------------------------------------------------
     632/     215 :                     ;;; Common procedure for 40H<=CODE<=BFH
     633/     215 :                     ;;; save source value to REG(SRC)
     634/     215 :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     635/     215 :                     ;;; 8080 register code SSS
     636/     215 :                     ;;; 0 1 2 3 4 5 6 7
     637/     215 :                     ;;; B C D E H L M A
     638/     215 :                     ;;; ADDRESS=~(xxx)<<1
     639/     215 :                     ;;;---------------------------------------------------------------------------
     640/     215 : 5B 12               	JMS PUSH_P1
     641/     217 :                     	;; set source register address to P1
     642/     217 : F0                  	CLB
     643/     218 : B2                  	XCH P1_HI		; P1_HI=0000
     644/     219 : A3                  	LD P1_LO
     645/     21A : F4                  	CMA
     646/     21B : F1                  	CLC
     647/     21C : F5                  	RAL
     648/     21D : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     649/     21E :                     
     650/     21E : A3                  	LD P1_LO
     651/     21F :                     
     652/     21F : D2                   	LDM REG8_M		; check if SRCREG==M or not
     653/     220 : F1                  	CLC
     654/     221 : 93                  	SUB P1_LO
     655/     222 : 14 28               	JCN Z, GETSRC_LOAD_M
     656/     224 :                     
     657/     224 : 57 DE               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     658/     226 : 42 2E                       JUN GETSRC_SAVE_SRCVALUE
     659/     228 :                     
     660/     228 :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     661/     228 : 20 04               	FIM P0, REG16_HL
     662/     22A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     663/     22C : 58 46               	JMS DEC_REG16P0
     664/     22E :                     
     665/     22E :                     GETSRC_SAVE_SRCVALUE:
     666/     22E :                     	;; set source register value to P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/04/03  9:19:43


     667/     22E : 20 12               	FIM P0, REG8_SRC
     668/     230 : 57 B8               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     669/     232 :                     
     670/     232 : 5B 43               	JMS POP_P1
     671/     234 : A2                  	LD P1_HI
     672/     235 : F5                  	RAL
     673/     236 : 1A 3A               	JCN CN, CODE_407F_MOV	; execute MOV
     674/     238 : 42 62               	JUN CODE_80BF_ARITH_LOGIC
     675/     23A :                     
     676/     23A :                     ;;;---------------------------------------------------------------------------
     677/     23A :                     ;;; Execute MOV code
     678/     23A :                     ;;; source value is already stored to REG8(SRC)
     679/     23A :                     ;;;---------------------------------------------------------------------------
     680/     23A :                     CODE_407F_MOV:
     681/     23A : 2E 76               	FIM P7, 76H		; check HLT
     682/     23C : 5D 20               	JMS CMP_P1P7
     683/     23E : 1C 42               	JCN ZN, CODE_MOV_L1
     684/     240 : 42 71               	JUN CODE_76H		; HLT
     685/     242 :                     
     686/     242 :                     CODE_MOV_L1:
     687/     242 :                     	;; set destination REGISTER address to P2
     688/     242 : 24 00               	FIM P2, 00H
     689/     244 : A2                  	LD P1_HI
     690/     245 : F5                  	RAL
     691/     246 : F5                  	RAL
     692/     247 : F1                  	CLC
     693/     248 : F6                  	RAR
     694/     249 : F6                  	RAR
     695/     24A : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     696/     24B : A3                  	LD P1_LO
     697/     24C : F5                  	RAL			; CY=bit(3)
     698/     24D : A5                  	LD P2_LO
     699/     24E : F5                  	RAL
     700/     24F : F4                  	CMA
     701/     250 : F5                  	RAL
     702/     251 : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     703/     252 :                     
     704/     252 : 22 12               	FIM P1, REG8_SRC
     705/     254 : 57 DE               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     706/     256 :                     
     707/     256 :                     				; write SRC value to DST
     708/     256 : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     709/     257 : F1                  	CLC
     710/     258 : 95                  	SUB P2_LO		; check DST(P2) is M or not
     711/     259 : 14 5E               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     712/     25B :                     
     713/     25B : 57 C4               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     714/     25D : C0                  	BBL 0
     715/     25E :                     
     716/     25E :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
     717/     25E : 20 04               	FIM P0, REG16_HL
     718/     260 : 4B 81               	JUN LD_PM16REG16P0_P1
     719/     262 :                     ;;; 	BBL 0
     720/     262 :                     
     721/     262 :                     
     722/     262 :                     ;;;---------------------------------------------------------------------------
     723/     262 :                     CODE_80BF_ARITH_LOGIC:
     724/     262 :                     	; prepare P2 for jump table
     725/     262 :                     	; P2=0F0H + CODE.bit(543)0
     726/     262 : 24 F0               	FIM P2, 0F0H		; P2=0F0H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/04/03  9:19:43


     727/     264 : A3                  	LD P1_LO		; ACC=CODE(3210)
     728/     265 : F5                  	RAL			; CY=CODE.bit(3)
     729/     266 : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     730/     267 : F5                  	RAL			; ACC=CODE.bit(6543)
     731/     268 : F1                  	CLC			; CY=0
     732/     269 : F5                  	RAL			; ACC=CODE.bit(543).0
     733/     26A : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     734/     26B :                     
     735/     26B : 2E 12               	FIM P7, REG8_SRC
     736/     26D : 57 D0               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     737/     26F :                     
     738/     26F : 49 EF               	JUN JIN_P2_CODE_80BF
     739/     271 :                     
     740/     271 :                     ;;;---------------------------------------------------------------------------
     741/     271 :                     ;;; Emulate individual codes
     742/     271 :                     ;;;---------------------------------------------------------------------------
     743/     271 :                     CODE_76H:			; HLT
     744/     271 : 20 A4               	FIM P0, lo(STR_EMU_HLT)
     745/     273 : 5E 00               	JMS PRINTSTR_P0
     746/     275 : 2E 20               	FIM P7, REG4_EMU_STEP
     747/     277 : (MACRO)              	LD_ACC_REG4P7
     747/     277 : 2F                          SRC P7
     747/     278 : E9                          RDM
     748/     279 : 1C 7D               	JCN ZN, CODE_76H_EXIT
     749/     27B : 58 F2               	JMS EMU_PRINT_REGISTERS	; print registers if continuous mode
     750/     27D :                     CODE_76H_EXIT:
     751/     27D : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     752/     27F :                     
     753/     27F :                     CODE_00H:			; NOP
     754/     27F : C0                  	BBL 0
     755/     280 :                     
     756/     280 :                     CODE_01H:			; LXI B,B3B2
     757/     280 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     758/     282 : 24 0C               	FIM P2, REG8_C
     759/     284 : 57 C4               	JMS LD_REG8P2_P1
     760/     286 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     761/     288 : 24 0E               	FIM P2, REG8_B
     762/     28A : 47 C4               	JUN LD_REG8P2_P1
     763/     28C :                     
     764/     28C :                     CODE_02H:			; STAX B
     765/     28C : 2E 00               	FIM P7, REG8_A
     766/     28E : 57 D0               	JMS LD_P1_REG8P7
     767/     290 : 20 0C               	FIM P0, REG16_BC
     768/     292 : 4B 81               	JUN LD_PM16REG16P0_P1
     769/     294 :                     
     770/     294 :                     CODE_03H:			; INX B
     771/     294 : 20 0C               	FIM P0, REG16_BC
     772/     296 : 48 36               	JUN INC_REG16P0
     773/     298 :                     
     774/     298 :                     CODE_04H:			; INR B
     775/     298 : 22 0E               	FIM P1, REG8_B
     776/     29A : 44 3F               	JUN CODE_INR
     777/     29C :                     	
     778/     29C :                     CODE_05H:			; DCR B
     779/     29C : 22 0E               	FIM P1, REG8_B
     780/     29E : 44 45               	JUN CODE_DCR
     781/     2A0 :                     
     782/     2A0 :                     CODE_06H:			; MVI B,B2
     783/     2A0 : 24 0E               	FIM P2, REG8_B
     784/     2A2 : 44 4B               	JUN CODE_MVI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/04/03  9:19:43


     785/     2A4 :                     ;;; 	BBL 0
     786/     2A4 :                     
     787/     2A4 :                     CODE_07H:			; RLC
     788/     2A4 : 20 00               	FIM P0, REG8_A
     789/     2A6 : 57 D8               	JMS LD_P1_REG8P0
     790/     2A8 : A2                  	LD P1_HI
     791/     2A9 : F5                  	RAL			; CY=bit(7)
     792/     2AA : A3                  	LD P1_LO
     793/     2AB : F5                  	RAL
     794/     2AC : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     795/     2AD : A2                  	LD P1_HI
     796/     2AE : F5                  	RAL
     797/     2AF : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     798/     2B0 : 56 52               	JMS SETFLAG_C_CY
     799/     2B2 : 47 B8               	JUN LD_REG8P0_P1
     800/     2B4 :                     ;;;	BBL 0
     801/     2B4 :                     
     802/     2B4 :                     CODE_08H:			; ...
     803/     2B4 : C0                  	BBL 0
     804/     2B5 :                     	
     805/     2B5 :                     CODE_09H:			; DAD B
     806/     2B5 : 20 04               	FIM P0, REG16_HL
     807/     2B7 : 22 0C               	FIM P1, REG16_BC
     808/     2B9 : 58 7B               	JMS ADD_REG16P0_REG16P1
     809/     2BB : 46 52               	JUN SETFLAG_C_CY
     810/     2BD :                     ;;; 	BBL 0
     811/     2BD :                     
     812/     2BD :                     CODE_0AH:			; LDAX B
     813/     2BD : 20 0C               	FIM P0, REG16_BC
     814/     2BF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     815/     2C1 : 58 46               	JMS DEC_REG16P0
     816/     2C3 :                     	
     817/     2C3 : 24 00               	FIM P2, REG8_A
     818/     2C5 : 47 C4               	JUN LD_REG8P2_P1
     819/     2C7 :                     ;;; 	BBL 0
     820/     2C7 :                     
     821/     2C7 :                     CODE_0BH:			; DCX B
     822/     2C7 : 20 0C               	FIM P0, REG16_BC
     823/     2C9 : 48 46               	JUN DEC_REG16P0
     824/     2CB :                     ;;; 	BBL 0
     825/     2CB :                     	
     826/     2CB :                     CODE_0CH:			; INR C
     827/     2CB : 22 0C               	FIM P1, REG8_C
     828/     2CD : 44 3F               	JUN CODE_INR
     829/     2CF :                     ;;; 	BBL 0
     830/     2CF :                     
     831/     2CF :                     CODE_0DH:			; DCR C
     832/     2CF : 22 0C               	FIM P1, REG8_C
     833/     2D1 : 44 45               	JUN CODE_DCR
     834/     2D3 :                     ;;; 	BBL 0
     835/     2D3 :                     
     836/     2D3 :                     CODE_0EH:			; MVI C,B2
     837/     2D3 : 24 0C               	FIM P2, REG8_C
     838/     2D5 : 44 4B               	JUN CODE_MVI
     839/     2D7 :                     ;;; 	BBL 0
     840/     2D7 :                     
     841/     2D7 :                     CODE_0FH:			; RRC
     842/     2D7 : 20 00               	FIM P0, REG8_A
     843/     2D9 : 57 D8               	JMS LD_P1_REG8P0
     844/     2DB : A3                  	LD P1_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/04/03  9:19:43


     845/     2DC : F6                  	RAR			; CY=bit(0)
     846/     2DD : A2                  	LD P1_HI
     847/     2DE : F6                  	RAR
     848/     2DF : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     849/     2E0 : A3                  	LD P1_LO
     850/     2E1 : F6                  	RAR
     851/     2E2 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     852/     2E3 : 56 52               	JMS SETFLAG_C_CY
     853/     2E5 : 47 B8               	JUN LD_REG8P0_P1
     854/     2E7 :                     ;;; 	BBL 0
     855/     2E7 :                     
     856/     2E7 :                     CODE_10H:			; ...
     857/     2E7 : C0                  	BBL 0
     858/     2E8 :                     
     859/     2E8 :                     CODE_11H:			; LXI D,B3B2
     860/     2E8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     861/     2EA : 24 08               	FIM P2, REG8_E
     862/     2EC : 57 C4               	JMS LD_REG8P2_P1
     863/     2EE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     864/     2F0 : 24 0A               	FIM P2, REG8_D
     865/     2F2 : 47 C4               	JUN LD_REG8P2_P1
     866/     2F4 :                     
     867/     2F4 :                     CODE_12H:			; STAX D
     868/     2F4 : 2E 00               	FIM P7, REG8_A
     869/     2F6 : 57 D0               	JMS LD_P1_REG8P7
     870/     2F8 : 20 08               	FIM P0, REG16_DE
     871/     2FA : 4B 81               	JUN LD_PM16REG16P0_P1
     872/     2FC :                     	
     873/     2FC :                     CODE_13H:			; INX D
     874/     2FC : 20 08               	FIM P0, REG16_DE
     875/     2FE : 48 36               	JUN INC_REG16P0
     876/     300 :                     
     877/     300 :                     CODE_14H:			; INR D
     878/     300 : 22 0A               	FIM P1, REG8_D
     879/     302 : 44 3F               	JUN CODE_INR
     880/     304 :                     
     881/     304 :                     CODE_15H:			; DCR D
     882/     304 : 22 0A               	FIM P1, REG8_D
     883/     306 : 44 45               	JUN CODE_DCR
     884/     308 :                     ;;; 	BBL 0
     885/     308 :                     
     886/     308 :                     CODE_16H:			; MVI D,B2
     887/     308 : 24 0A               	FIM P2, REG8_D
     888/     30A : 44 4B               	JUN CODE_MVI
     889/     30C :                     ;;; 	BBL 0
     890/     30C :                     
     891/     30C :                     CODE_17H:			; RAL
     892/     30C : 20 00               	FIM P0, REG8_A
     893/     30E : 57 D8               	JMS LD_P1_REG8P0	; P1=ACC
     894/     310 : 56 48               	JMS GETFLAG_C		; CY=FLAG_C
     895/     312 :                     ;;; 	RAR			; can be omitted because CY is already C
     896/     312 : A3                  	LD P1_LO
     897/     313 : F5                  	RAL
     898/     314 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     899/     315 : A2                  	LD P1_HI
     900/     316 : F5                  	RAL
     901/     317 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     902/     318 : 56 52               	JMS SETFLAG_C_CY
     903/     31A : 47 B8               	JUN LD_REG8P0_P1
     904/     31C :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/04/03  9:19:43


     905/     31C :                     	
     906/     31C :                     CODE_18H:			; ...
     907/     31C : C0                  	BBL 0
     908/     31D :                     
     909/     31D :                     CODE_19H:			; DAD D
     910/     31D : 20 04               	FIM P0, REG16_HL
     911/     31F : 22 08               	FIM P1, REG16_DE
     912/     321 : 58 7B               	JMS ADD_REG16P0_REG16P1
     913/     323 : 46 52               	JUN SETFLAG_C_CY
     914/     325 :                     ;;;	BBL 0
     915/     325 :                     	
     916/     325 :                     CODE_1AH:			; LDAX D
     917/     325 : 20 08               	FIM P0, REG16_DE
     918/     327 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     919/     329 : 58 46               	JMS DEC_REG16P0
     920/     32B :                     	
     921/     32B : 24 00               	FIM P2, REG8_A
     922/     32D : 47 C4               	JUN LD_REG8P2_P1
     923/     32F :                     ;;;	BBL 0
     924/     32F :                     
     925/     32F :                     CODE_1BH:			; DCX D
     926/     32F : 20 08               	FIM P0, REG16_DE
     927/     331 : 48 46               	JUN DEC_REG16P0
     928/     333 :                     ;;;	BBL 0
     929/     333 :                     
     930/     333 :                     CODE_1CH:			; INR E
     931/     333 : 22 08               	FIM P1, REG8_E
     932/     335 : 44 3F               	JUN CODE_INR
     933/     337 :                     ;;;	BBL 0
     934/     337 :                     
     935/     337 :                     CODE_1DH:			; DCR E
     936/     337 : 22 08               	FIM P1, REG8_E
     937/     339 : 44 45               	JUN CODE_DCR
     938/     33B :                     ;;;	BBL 0
     939/     33B :                     
     940/     33B :                     CODE_1EH:			; MVI E,B2
     941/     33B : 24 08               	FIM P2, REG8_E
     942/     33D : 44 4B               	JUN CODE_MVI
     943/     33F :                     ;;;	BBL 0
     944/     33F :                     
     945/     33F :                     CODE_1FH:			; RAR
     946/     33F : 20 00               	FIM P0, REG8_A
     947/     341 : 57 D8               	JMS LD_P1_REG8P0	; P1=ACC
     948/     343 : 56 48               	JMS GETFLAG_C		; CY=FLAG_C
     949/     345 :                     ;;; 	RAR			; can be omitted because CY is already C
     950/     345 : A2                  	LD P1_HI
     951/     346 : F6                  	RAR
     952/     347 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
     953/     348 : A3                  	LD P1_LO
     954/     349 : F6                  	RAR
     955/     34A : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     956/     34B : 56 52               	JMS SETFLAG_C_CY
     957/     34D : 47 B8               	JUN LD_REG8P0_P1
     958/     34F :                     ;;;	BBL 0
     959/     34F :                     
     960/     34F :                     CODE_20H:			; ...
     961/     34F : C0                  	BBL 0
     962/     350 :                     
     963/     350 :                     CODE_21H:			; LXI H,B3B2
     964/     350 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/04/03  9:19:43


     965/     352 : 24 04               	FIM P2, REG8_L
     966/     354 : 57 C4               	JMS LD_REG8P2_P1
     967/     356 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     968/     358 : 24 06               	FIM P2, REG8_H
     969/     35A : 47 C4               	JUN LD_REG8P2_P1
     970/     35C :                     ;;;	BBL 0
     971/     35C :                     
     972/     35C :                     CODE_22H:			; SHLD,B3B2
     973/     35C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     974/     35E : 24 1C               	FIM P2, REG8_ADDRL
     975/     360 : 57 C4               	JMS LD_REG8P2_P1
     976/     362 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     977/     364 : 24 1E               	FIM P2, REG8_ADDRH
     978/     366 : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
     979/     368 :                     
     980/     368 : 2E 04               	FIM P7, REG8_L
     981/     36A : 57 D0               	JMS LD_P1_REG8P7
     982/     36C : 20 1C               	FIM P0, REG16_ADDR
     983/     36E : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
     984/     370 : 58 36               	JMS INC_REG16P0		; REG(ADDR)++
     985/     372 :                     	
     986/     372 : 2E 06               	FIM P7, REG8_H
     987/     374 : 57 D0               	JMS LD_P1_REG8P7
     988/     376 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
     989/     378 : 48 36               	JUN INC_REG16P0		; REG(ADDR)++ and return
     990/     37A :                     ;;;	BBL 0
     991/     37A :                     
     992/     37A :                     	
     993/     37A :                     CODE_23H:			; INX H
     994/     37A : 20 04               	FIM P0, REG16_HL
     995/     37C : 48 36               	JUN INC_REG16P0
     996/     37E :                     ;;;	BBL 0
     997/     37E :                     
     998/     37E :                     CODE_24H:			; INR H
     999/     37E : 22 06               	FIM P1, REG8_H
    1000/     380 : 44 3F               	JUN CODE_INR
    1001/     382 :                     ;;;	BBL 0
    1002/     382 :                     
    1003/     382 :                     CODE_25H:			; DCR H
    1004/     382 : 22 06               	FIM P1, REG8_H
    1005/     384 : 44 45               	JUN CODE_DCR
    1006/     386 :                     ;;;	BBL 0
    1007/     386 :                     
    1008/     386 :                     CODE_26H:			; MVI H,B2
    1009/     386 : 24 06               	FIM P2, REG8_H
    1010/     388 : 44 4B               	JUN CODE_MVI
    1011/     38A :                     ;;;	BBL 0
    1012/     38A :                     
    1013/     38A :                     CODE_27H:			; DAA
    1014/     38A :                     				; This is not properly implemeted
    1015/     38A :                     				; due to the lack of AC(CY4) flag
    1016/     38A : 20 00               	FIM P0, REG8_A
    1017/     38C : 57 D8               	JMS LD_P1_REG8P0
    1018/     38E : A3                  	LD P1_LO
    1019/     38F : FB                  	DAA
    1020/     390 : B3                  	XCH P1_LO
    1021/     391 : D0                  	LDM 0
    1022/     392 : 82                  	ADD P1_HI
    1023/     393 : B2                  	XCH P1_HI
    1024/     394 : FB                  	DAA
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/04/03  9:19:43


    1025/     395 : B2                  	XCH P1_HI
    1026/     396 :                     	
    1027/     396 : 47 B8               	JUN LD_REG8P0_P1
    1028/     398 :                     ;;;	BBL 0
    1029/     398 :                     
    1030/     398 :                     CODE_28H:			; ...
    1031/     398 : C0                  	BBL 0
    1032/     399 :                     
    1033/     399 :                     CODE_29H:			; DAD H
    1034/     399 : 20 04               	FIM P0, REG16_HL
    1035/     39B : 22 04               	FIM P1, REG16_HL
    1036/     39D : 58 7B               	JMS ADD_REG16P0_REG16P1
    1037/     39F : 46 52               	JUN SETFLAG_C_CY
    1038/     3A1 :                     ;;;	BBL 0
    1039/     3A1 :                     
    1040/     3A1 :                     CODE_2AH:			; LHLD,B3B2
    1041/     3A1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1042/     3A3 : 24 1C               	FIM P2, REG8_ADDRL
    1043/     3A5 : 57 C4               	JMS LD_REG8P2_P1
    1044/     3A7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1045/     3A9 : 24 1E               	FIM P2, REG8_ADDRH
    1046/     3AB : 57 C4               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1047/     3AD :                     
    1048/     3AD : 20 1C               	FIM P0, REG16_ADDR
    1049/     3AF : 24 04               	FIM P2, REG8_L
    1050/     3B1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1051/     3B3 : 57 C4               	JMS LD_REG8P2_P1
    1052/     3B5 :                     
    1053/     3B5 : 24 06               	FIM P2, REG8_H
    1054/     3B7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1055/     3B9 : 47 C4               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1056/     3BB :                     ;;;	BBL 0
    1057/     3BB :                     
    1058/     3BB :                     CODE_2BH:			; DCX H
    1059/     3BB : 20 04               	FIM P0, REG16_HL
    1060/     3BD : 48 46               	JUN DEC_REG16P0
    1061/     3BF :                     ;;;	BBL 0
    1062/     3BF :                     
    1063/     3BF :                     CODE_2CH:			; INR L
    1064/     3BF : 22 04               	FIM P1, REG8_L
    1065/     3C1 : 44 3F               	JUN CODE_INR
    1066/     3C3 :                     ;;;	BBL 0
    1067/     3C3 :                     
    1068/     3C3 :                     CODE_2DH:			; DCR L
    1069/     3C3 : 22 04               	FIM P1, REG8_L
    1070/     3C5 : 44 45               	JUN CODE_DCR
    1071/     3C7 :                     ;;;	BBL 0
    1072/     3C7 :                     
    1073/     3C7 :                     CODE_2EH:			; MVI L,B2
    1074/     3C7 : 24 04               	FIM P2, REG8_L
    1075/     3C9 : 44 4B               	JUN CODE_MVI
    1076/     3CB :                     ;;;	BBL 0
    1077/     3CB :                     
    1078/     3CB :                     CODE_2FH:			; CMA
    1079/     3CB : 20 00               	FIM P0, REG8_A		; A=~A
    1080/     3CD : 57 D8               	JMS LD_P1_REG8P0
    1081/     3CF : A3                  	LD P1_LO
    1082/     3D0 : F4                  	CMA
    1083/     3D1 : B3                  	XCH P1_LO
    1084/     3D2 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/04/03  9:19:43


    1085/     3D2 : A2                  	LD P1_HI
    1086/     3D3 : F4                  	CMA
    1087/     3D4 : B2                  	XCH P1_HI
    1088/     3D5 : 47 B8               	JUN LD_REG8P0_P1
    1089/     3D7 :                     ;;;	BBL 0
    1090/     3D7 :                     	
    1091/     3D7 :                     CODE_30H:			; ...
    1092/     3D7 : C0                  	BBL 0
    1093/     3D8 :                     
    1094/     3D8 :                     CODE_31H:			; LXI SP, B3B2
    1095/     3D8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1096/     3DA : 24 18               	FIM P2, REG8_SPL
    1097/     3DC : 57 C4               	JMS LD_REG8P2_P1
    1098/     3DE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1099/     3E0 : 24 1A               	FIM P2, REG8_SPH
    1100/     3E2 : 47 C4               	JUN LD_REG8P2_P1
    1101/     3E4 :                     ;;;	BBL 0
    1102/     3E4 :                     
    1103/     3E4 :                     CODE_32H:			; STA B3B2
    1104/     3E4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1105/     3E6 : 24 1C               	FIM P2, REG8_ADDRL
    1106/     3E8 : 57 C4               	JMS LD_REG8P2_P1
    1107/     3EA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1108/     3EC : 24 1E               	FIM P2, REG8_ADDRH
    1109/     3EE : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1110/     3F0 :                     
    1111/     3F0 : 2E 00               	FIM P7, REG8_A
    1112/     3F2 : 57 D0               	JMS LD_P1_REG8P7	; P1=A
    1113/     3F4 : 20 1C               	FIM P0, REG16_ADDR
    1114/     3F6 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1115/     3F8 :                     ;;;	BBL 0
    1116/     3F8 :                     	
    1117/     3F8 :                     CODE_33H:			; INX SP
    1118/     3F8 : 20 18               	FIM P0, REG16_SP
    1119/     3FA : 48 36               	JUN INC_REG16P0
    1120/     3FC :                     ;;;	BBL 0
    1121/     3FC :                     
    1122/     3FC :                     CODE_34H:			; INR M
    1123/     3FC : 20 04               	FIM P0, REG16_HL
    1124/     3FE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1125/     400 : 58 46               	JMS DEC_REG16P0
    1126/     402 :                     	
    1127/     402 : 5C BD               	JMS INC_P1
    1128/     404 : 5B 81               	JMS LD_PM16REG16P0_P1
    1129/     406 :                     
    1130/     406 : 46 6C               	JUN SETFLAG_ZSP_P1
    1131/     408 :                     ;;;	BBL 0
    1132/     408 :                     
    1133/     408 :                     CODE_35H:			; DCR M
    1134/     408 : 20 04               	FIM P0, REG16_HL
    1135/     40A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1136/     40C : 58 46               	JMS DEC_REG16P0
    1137/     40E :                     	
    1138/     40E : 5C C3               	JMS DEC_P1
    1139/     410 : 5B 81               	JMS LD_PM16REG16P0_P1
    1140/     412 :                     
    1141/     412 : 46 6C               	JUN SETFLAG_ZSP_P1
    1142/     414 :                     ;;;	BBL 0
    1143/     414 :                     	
    1144/     414 :                     CODE_36H:			; MVI M, B2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/04/03  9:19:43


    1145/     414 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1146/     416 : 20 04               	FIM P0, REG16_HL
    1147/     418 : 4B 81               	JUN LD_PM16REG16P0_P1
    1148/     41A :                     ;;;	BBL 0
    1149/     41A :                     	
    1150/     41A :                     CODE_37H:			; STC
    1151/     41A : 46 5D               	JUN SETFLAG_C_1
    1152/     41C :                     ;;;	BBL 0
    1153/     41C :                     
    1154/     41C :                     CODE_38H:			; ...
    1155/     41C : C0                  	BBL 0
    1156/     41D :                     
    1157/     41D :                     CODE_39H:			; DAD SP
    1158/     41D : 20 04               	FIM P0, REG16_HL
    1159/     41F : 22 18               	FIM P1, REG16_SP
    1160/     421 : 58 7B               	JMS ADD_REG16P0_REG16P1
    1161/     423 : 46 52               	JUN SETFLAG_C_CY
    1162/     425 :                     ;;;	BBL 0
    1163/     425 :                     
    1164/     425 :                     CODE_3AH:			; LDA B2B3
    1165/     425 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1166/     427 : 24 1C               	FIM P2, REG8_ADDRL
    1167/     429 : 57 C4               	JMS LD_REG8P2_P1
    1168/     42B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1169/     42D : 24 1E               	FIM P2, REG8_ADDRH
    1170/     42F : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1171/     431 :                     
    1172/     431 : 20 1C               	FIM P0, REG16_ADDR
    1173/     433 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1174/     435 : 24 00               	FIM P2, REG8_A
    1175/     437 : 47 C4               	JUN LD_REG8P2_P1	; P1=A and return
    1176/     439 :                     ;;;	BBL 0
    1177/     439 :                     
    1178/     439 :                     CODE_3BH:			; DCX SP
    1179/     439 : 20 18               	FIM P0, REG16_SP
    1180/     43B : 48 46               	JUN DEC_REG16P0
    1181/     43D :                     ;;;	BBL 0
    1182/     43D :                     
    1183/     43D :                     CODE_3CH:			; INR A
    1184/     43D : 22 00               	FIM P1, REG8_A
    1185/     43F :                     CODE_INR:
    1186/     43F : 57 74               	JMS INC_REG8P1
    1187/     441 : 46 6A               	JUN SETFLAG_ZSP_REG8P1
    1188/     443 :                     ;;;	BBL 0
    1189/     443 :                     
    1190/     443 :                     CODE_3DH:			; DCR A
    1191/     443 : 22 00               	FIM P1, REG8_A
    1192/     445 :                     CODE_DCR:
    1193/     445 : 57 95               	JMS DEC_REG8P1
    1194/     447 : 46 6A               	JUN SETFLAG_ZSP_REG8P1
    1195/     449 :                     ;;;	BBL 0
    1196/     449 :                     
    1197/     449 :                     CODE_3EH:			; MVI A,B2
    1198/     449 : 24 00               	FIM P2, REG8_A
    1199/     44B :                     CODE_MVI:
    1200/     44B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1201/     44D : 47 C4               	JUN LD_REG8P2_P1
    1202/     44F :                     ;;;	BBL 0
    1203/     44F :                     
    1204/     44F :                     CODE_3FH:			; CMC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/04/03  9:19:43


    1205/     44F : 56 48               	JMS GETFLAG_C
    1206/     451 :                     ;;; 	RAR			; can be omitted because CY is already C
    1207/     451 : F3                  	CMC
    1208/     452 : 46 52               	JUN SETFLAG_C_CY
    1209/     454 :                     ;;;	BBL 0
    1210/     454 :                     
    1211/     454 :                     CODE_C0H:			; RNZ
    1212/     454 : 56 35               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1213/     456 : 44 9B               	JUN RET_IF0		; return if Z flag == 0
    1214/     458 :                     	;;;	BBL 0
    1215/     458 :                     
    1216/     458 :                     CODE_C1H:			; POP B
    1217/     458 : 24 0E               	FIM P2, REG8_B
    1218/     45A : 26 0C               	FIM P3, REG8_C
    1219/     45C : 45 CE               	JUN CODE_POP_REG8P2P3
    1220/     45E :                     ;;;	BBL 0
    1221/     45E :                     
    1222/     45E :                     CODE_C2H:			; JNZ
    1223/     45E : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1224/     460 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1225/     460 :                     ;;; this jump can be omitted
    1226/     460 :                     JMP_IF0:
    1227/     460 : 14 6E               	JCN Z, CODE_JMP
    1228/     462 : 58 36               	JMS INC_REG16P0		; PC+=2
    1229/     464 : 58 36               	JMS INC_REG16P0
    1230/     466 : C0                  	BBL 0
    1231/     467 :                     JMP_IF1:
    1232/     467 : 1C 6E               	JCN ZN, CODE_JMP
    1233/     469 : 58 36               	JMS INC_REG16P0		; PC+=2
    1234/     46B : 58 36               	JMS INC_REG16P0
    1235/     46D : C0                  	BBL 0
    1236/     46E :                     
    1237/     46E :                     CODE_C3H:			; JMP B3B2
    1238/     46E :                     CODE_JMP:
    1239/     46E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1240/     470 : (MACRO)              	LD_P3_P1
    1240/     470 : A2                                  LD P1_HI
    1240/     471 : B6                                  XCH P3_HI
    1240/     472 : A3                                  LD P1_LO
    1240/     473 : B7                                  XCH P3_LO
    1241/     474 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1242/     476 : (MACRO)              	LD_P2_P1
    1242/     476 : A2                                  LD P1_HI
    1242/     477 : B4                                  XCH P2_HI
    1242/     478 : A3                                  LD P1_LO
    1242/     479 : B5                                  XCH P2_LO
    1243/     47A :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1244/     47A : 47 5D               	JUN LD_REG16P0_P2P3
    1245/     47C :                     ;;;	BBL 0
    1246/     47C :                     
    1247/     47C :                     CODE_C4H:			; CNZ
    1248/     47C : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1249/     47E : 44 B2               	JUN CALL_IF0		; call if Z==0
    1250/     480 :                     ;;;	BBL 0
    1251/     480 :                     
    1252/     480 :                     CODE_C5H:			; PUSH B
    1253/     480 : 24 0E               	FIM P2, REG8_B
    1254/     482 : 26 0C               	FIM P3, REG8_C
    1255/     484 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1256/     486 :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/04/03  9:19:43


    1257/     486 :                     
    1258/     486 :                     CODE_C6H:			; ADI B2
    1259/     486 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1260/     488 :                     ADI_P1:
    1261/     488 : 20 00               	FIM P0, REG8_A
    1262/     48A : 57 63               	JMS ADD_REG8P0_P1
    1263/     48C : 56 52               	JMS SETFLAG_C_CY
    1264/     48E : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1265/     490 :                     ;;;	BBL 0
    1266/     490 :                     	
    1267/     490 :                     CODE_C7H:			; RST 0
    1268/     490 : 24 00               	FIM P2, up(0<<3)
    1269/     492 : 26 00               	FIM P3, lo(0<<3)
    1270/     494 : 44 C5               	JUN CALL_P2P3
    1271/     496 :                     ;;;	BBL 0
    1272/     496 :                     	
    1273/     496 :                     CODE_C8H:			; RZ
    1274/     496 : 56 35               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1275/     498 :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1276/     498 :                     ;;; this jump can be omitted
    1277/     498 :                     RET_IF1:
    1278/     498 : 1C 9E               	JCN ZN, CODE_RET
    1279/     49A : C0                  	BBL 0
    1280/     49B :                     RET_IF0:
    1281/     49B : 14 9E               	JCN Z, CODE_RET
    1282/     49D : C0                  	BBL 0
    1283/     49E :                     CODE_C9H:			; RET
    1284/     49E :                     CODE_RET:	
    1285/     49E : 24 16               	FIM P2, REG8_PCH
    1286/     4A0 : 26 14               	FIM P3, REG8_PCL
    1287/     4A2 : 45 CE               	JUN CODE_POP_REG8P2P3
    1288/     4A4 :                     ;;;	BBL 0
    1289/     4A4 :                     	
    1290/     4A4 :                     CODE_CAH:			; JZ
    1291/     4A4 : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1292/     4A6 : 44 67               	JUN JMP_IF1		; jump if Z==1
    1293/     4A8 :                     ;;;	BBL 0
    1294/     4A8 :                     
    1295/     4A8 :                     CODE_CBH:			; ...
    1296/     4A8 : C0                  	BBL 0
    1297/     4A9 :                     
    1298/     4A9 :                     CODE_CCH:			; CZ
    1299/     4A9 : 56 35               	JMS GETFLAG_Z
    1300/     4AB :                     CALL_IF1:
    1301/     4AB : 1C B9               	JCN ZN, CODE_CALL
    1302/     4AD : 58 36               	JMS INC_REG16P0		; PC+=2
    1303/     4AF : 58 36               	JMS INC_REG16P0
    1304/     4B1 : C0                  	BBL 0
    1305/     4B2 :                     CALL_IF0:	
    1306/     4B2 : 14 B9               	JCN Z, CODE_CALL
    1307/     4B4 : 58 36               	JMS INC_REG16P0		; PC+=2
    1308/     4B6 : 58 36               	JMS INC_REG16P0
    1309/     4B8 : C0                  	BBL 0
    1310/     4B9 :                     
    1311/     4B9 :                     CODE_CDH:			; CALL B3B2
    1312/     4B9 :                     CODE_CALL:
    1313/     4B9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1314/     4BB : (MACRO)              	LD_P3_P1
    1314/     4BB : A2                                  LD P1_HI
    1314/     4BC : B6                                  XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/04/03  9:19:43


    1314/     4BD : A3                                  LD P1_LO
    1314/     4BE : B7                                  XCH P3_LO
    1315/     4BF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1316/     4C1 : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1316/     4C1 : A2                                  LD P1_HI
    1316/     4C2 : B4                                  XCH P2_HI
    1316/     4C3 : A3                                  LD P1_LO
    1316/     4C4 : B5                                  XCH P2_LO
    1317/     4C5 :                     
    1318/     4C5 :                     CALL_P2P3:
    1319/     4C5 : 22 1C               	FIM P1, REG16_ADDR
    1320/     4C7 : 57 3D               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
    1321/     4C9 :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1322/     4C9 : 57 5D               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1323/     4CB :                     	
    1324/     4CB :                     	;; PUSH PC
    1325/     4CB : 24 1E               	FIM P2, REG8_ADDRH
    1326/     4CD : 26 1C               	FIM P3, REG8_ADDRL
    1327/     4CF : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1328/     4D1 :                     ;;; 	BBL 0
    1329/     4D1 :                     
    1330/     4D1 :                     CODE_CEH:			; ACI B2
    1331/     4D1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1332/     4D3 :                     ACI_P1:
    1333/     4D3 : 56 48               	JMS GETFLAG_C
    1334/     4D5 : 14 D9               	JCN Z, ACI_P1_NOCARRY
    1335/     4D7 : 5C BD               	JMS INC_P1
    1336/     4D9 :                     ACI_P1_NOCARRY:	
    1337/     4D9 : 20 00               	FIM P0, REG8_A
    1338/     4DB : 57 63               	JMS ADD_REG8P0_P1
    1339/     4DD : 56 52               	JMS SETFLAG_C_CY
    1340/     4DF : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1341/     4E1 :                     ;;;	BBL 0
    1342/     4E1 :                     	
    1343/     4E1 :                     CODE_CFH:			; RST 1
    1344/     4E1 : 24 00               	FIM P2, up(1<<3)
    1345/     4E3 : 26 08               	FIM P3, lo(1<<3)
    1346/     4E5 : 44 C5               	JUN CALL_P2P3
    1347/     4E7 :                     	
    1348/     4E7 :                     CODE_D0H:			; RNC
    1349/     4E7 : 56 48               	JMS GETFLAG_C		;
    1350/     4E9 : 44 9B               	JUN RET_IF0		;
    1351/     4EB :                     ;;;	BBL 0
    1352/     4EB :                     
    1353/     4EB :                     CODE_D1H:			; POP D
    1354/     4EB : 24 0A               	FIM P2, REG8_D
    1355/     4ED : 26 08               	FIM P3, REG8_E
    1356/     4EF : 45 CE               	JUN CODE_POP_REG8P2P3
    1357/     4F1 :                     ;;;	BBL 0
    1358/     4F1 :                     
    1359/     4F1 :                     CODE_D2H:			; JNC
    1360/     4F1 : 56 48               	JMS GETFLAG_C
    1361/     4F3 : 44 60               	JUN JMP_IF0
    1362/     4F5 :                     ;;;	BBL 0
    1363/     4F5 :                     
    1364/     4F5 :                     CODE_D3H:			; OUT B2
    1365/     4F5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1366/     4F7 : 48 B1               	JUN EMULATE_OUT_P1
    1367/     4F9 :                     ;;;	BBL 0
    1368/     4F9 :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/04/03  9:19:43


    1369/     4F9 :                     CODE_D4H:			; CNC
    1370/     4F9 : 56 48               	JMS GETFLAG_C
    1371/     4FB : 44 B2               	JUN CALL_IF0
    1372/     4FD :                     ;;;	BBL 0
    1373/     4FD :                     
    1374/     4FD :                     CODE_D5H:			; PUSH D
    1375/     4FD : 24 0A               	FIM P2, REG8_D
    1376/     4FF : 26 08               	FIM P3, REG8_E
    1377/     501 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1378/     503 :                     ;;;	BBL 0
    1379/     503 :                     
    1380/     503 :                     CODE_D6H:			; SUI B2
    1381/     503 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1382/     505 :                     SUI_P1:
    1383/     505 : 20 00               	FIM P0, REG8_A
    1384/     507 : 57 84               	JMS SUB_REG8P0_P1
    1385/     509 : 56 52               	JMS SETFLAG_C_CY
    1386/     50B : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1387/     50D :                     ;;;	BBL 0
    1388/     50D :                     	
    1389/     50D :                     CODE_D7H:			; RST 2
    1390/     50D : 24 00               	FIM P2, up(2<<3)
    1391/     50F : 26 10               	FIM P3, lo(2<<3)
    1392/     511 : 44 C5               	JUN CALL_P2P3
    1393/     513 :                     ;;;	BBL 0
    1394/     513 :                     	
    1395/     513 :                     CODE_D8H:			; RC
    1396/     513 : 56 48               	JMS GETFLAG_C
    1397/     515 : 44 98               	JUN RET_IF1
    1398/     517 :                     ;;;	BBL 0
    1399/     517 :                     
    1400/     517 :                     CODE_D9H:			; ...
    1401/     517 : C0                  	BBL 0
    1402/     518 :                     
    1403/     518 :                     CODE_DAH:			; JC
    1404/     518 : 56 48               	JMS GETFLAG_C
    1405/     51A : 44 67               	JUN JMP_IF1
    1406/     51C :                     ;;;	BBL 0
    1407/     51C :                     
    1408/     51C :                     CODE_DBH:			; IN
    1409/     51C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1410/     51E : 48 C9               	JUN EMULATE_IN_P1
    1411/     520 :                     ;;;	BBL 0
    1412/     520 :                     
    1413/     520 :                     CODE_DCH:			; CC
    1414/     520 : 56 48               	JMS GETFLAG_C
    1415/     522 : 44 AB               	JUN CALL_IF1
    1416/     524 :                     
    1417/     524 :                     CODE_DDH:			; ...
    1418/     524 : C0                  	BBL 0
    1419/     525 :                     CODE_DEH:			; SBI B2
    1420/     525 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1421/     527 :                     SBI_P1:
    1422/     527 : 56 48               	JMS GETFLAG_C
    1423/     529 : 14 2D               	JCN Z, SBI_P1_NOCARRY
    1424/     52B : 5C BD               	JMS INC_P1
    1425/     52D :                     SBI_P1_NOCARRY:
    1426/     52D : 20 00               	FIM P0, REG8_A
    1427/     52F : 57 84               	JMS SUB_REG8P0_P1
    1428/     531 : 56 52               	JMS SETFLAG_C_CY
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/04/03  9:19:43


    1429/     533 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1430/     535 :                     ;;; 	BBL 0
    1431/     535 :                     
    1432/     535 :                     CODE_DFH:			; RST 3
    1433/     535 : 24 00               	FIM P2, up(3<<3)
    1434/     537 : 26 18               	FIM P3, lo(3<<3)
    1435/     539 : 44 C5               	JUN CALL_P2P3
    1436/     53B :                     
    1437/     53B :                     CODE_E0H:			; RPO
    1438/     53B : 56 51               	JMS GETFLAG_P
    1439/     53D : 44 9B               	JUN RET_IF0
    1440/     53F :                     	
    1441/     53F :                     CODE_E1H:			; POP H
    1442/     53F : 24 06               	FIM P2, REG8_H
    1443/     541 : 26 04               	FIM P3, REG8_L
    1444/     543 : 45 CE               	JUN CODE_POP_REG8P2P3
    1445/     545 :                     
    1446/     545 :                     CODE_E2H:			; JPO
    1447/     545 : 56 51               	JMS GETFLAG_P
    1448/     547 : 44 60               	JUN JMP_IF0
    1449/     549 :                     
    1450/     549 :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1451/     549 :                     	;; POP to ADDR
    1452/     549 : 24 1E               	FIM P2, REG8_ADDRH
    1453/     54B : 26 1C               	FIM P3, REG8_ADDRL
    1454/     54D : 20 18               	FIM P0, REG16_SP
    1455/     54F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1456/     551 : 57 BE               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1457/     553 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1458/     555 : 57 C4               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1459/     557 :                     
    1460/     557 :                     	;; PUSH HL
    1461/     557 : 24 06               	FIM P2, REG8_H
    1462/     559 : 26 04               	FIM P3, REG8_L
    1463/     55B : 57 E4               	JMS LD_P1_REG8P2	; P1=REG(H)
    1464/     55D : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1465/     55F : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1466/     561 :                     
    1467/     561 : 57 EA               	JMS LD_P1_REG8P3	; P1=REG(L)
    1468/     563 : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1469/     565 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1470/     567 :                     
    1471/     567 :                     	;; HL = ADDR
    1472/     567 : 2C 04               	FIM P6, REG16_HL
    1473/     569 : 2E 1C               	FIM P7, REG16_ADDR
    1474/     56B : 48 17               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1475/     56D :                     	
    1476/     56D :                     CODE_E4H:			; CPO
    1477/     56D : 56 51               	JMS GETFLAG_P
    1478/     56F : 44 B2               	JUN CALL_IF0
    1479/     571 :                     
    1480/     571 :                     CODE_E5H:			; PUSH H
    1481/     571 : 24 06               	FIM P2, REG8_H
    1482/     573 : 26 04               	FIM P3, REG8_L
    1483/     575 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1484/     577 :                     
    1485/     577 :                     CODE_E6H:			; ANI B2
    1486/     577 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1487/     579 :                     ANI_P1:
    1488/     579 : (MACRO)              	LD_P2_P1		; P2=B2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/04/03  9:19:43


    1488/     579 : A2                                  LD P1_HI
    1488/     57A : B4                                  XCH P2_HI
    1488/     57B : A3                                  LD P1_LO
    1488/     57C : B5                                  XCH P2_LO
    1489/     57D : 20 00               	FIM P0, REG8_A
    1490/     57F : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1491/     581 : 56 A8               	JMS AND_P1_P2		; P1=A&P2
    1492/     583 : 57 B8               	JMS LD_REG8P0_P1	; A= P1
    1493/     585 : 56 54               	JMS SETFLAG_C_0
    1494/     587 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1495/     589 :                     	
    1496/     589 :                     CODE_E7H:			; RST 4
    1497/     589 : 24 00               	FIM P2, up(4<<3)
    1498/     58B : 26 20               	FIM P3, lo(4<<3)
    1499/     58D : 44 C5               	JUN CALL_P2P3
    1500/     58F :                     
    1501/     58F :                     CODE_E8H:			; RPE
    1502/     58F : 56 51               	JMS GETFLAG_P
    1503/     591 : 44 98               	JUN RET_IF1
    1504/     593 :                     
    1505/     593 :                     CODE_E9H:			; PCHL
    1506/     593 : 22 04               	FIM P1, REG16_HL
    1507/     595 : 47 33               	JUN LD_REG16P0_REG16P1
    1508/     597 :                     	
    1509/     597 :                     CODE_EAH:			; JPE
    1510/     597 : 56 51               	JMS GETFLAG_P
    1511/     599 : 44 67               	JUN JMP_IF1
    1512/     59B :                     
    1513/     59B :                     CODE_EBH:			; XCHG
    1514/     59B : 20 1C               	FIM P0, REG16_ADDR
    1515/     59D : 22 04               	FIM P1, REG16_HL
    1516/     59F : 57 33               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1517/     5A1 : 20 08               	FIM P0, REG16_DE
    1518/     5A3 : 57 3D               	JMS LD_REG16P1_REG16P0	; HL=DE
    1519/     5A5 : 22 1C               	FIM P1, REG16_ADDR
    1520/     5A7 : 47 33               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1521/     5A9 :                     	
    1522/     5A9 :                     CODE_ECH:			; CPE
    1523/     5A9 : 56 51               	JMS GETFLAG_P
    1524/     5AB : 44 AB               	JUN CALL_IF1
    1525/     5AD :                     
    1526/     5AD :                     CODE_EDH:			; ...
    1527/     5AD : C0                  	BBL 0
    1528/     5AE :                     
    1529/     5AE :                     CODE_EEH:			; XRI B2
    1530/     5AE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1531/     5B0 :                     XRI_P1:
    1532/     5B0 : (MACRO)              	LD_P2_P1		; P2=B2
    1532/     5B0 : A2                                  LD P1_HI
    1532/     5B1 : B4                                  XCH P2_HI
    1532/     5B2 : A3                                  LD P1_LO
    1532/     5B3 : B5                                  XCH P2_LO
    1533/     5B4 : 20 00               	FIM P0, REG8_A
    1534/     5B6 : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1535/     5B8 : 56 E5               	JMS XOR_P1_P2
    1536/     5BA : 57 B8               	JMS LD_REG8P0_P1	; A= A ^ P2
    1537/     5BC : 56 54               	JMS SETFLAG_C_0
    1538/     5BE : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1539/     5C0 :                     	
    1540/     5C0 :                     CODE_EFH:			; RST 5
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/04/03  9:19:43


    1541/     5C0 : 24 00               	FIM P2, up(5<<3)
    1542/     5C2 : 26 28               	FIM P3, lo(5<<3)
    1543/     5C4 : 44 C5               	JUN CALL_P2P3
    1544/     5C6 :                     
    1545/     5C6 :                     CODE_F0H:			; RP
    1546/     5C6 : 56 3F               	JMS GETFLAG_S
    1547/     5C8 : 44 9B               	JUN RET_IF0
    1548/     5CA :                     	
    1549/     5CA :                     CODE_F1H:			; POP PSW
    1550/     5CA : 24 00               	FIM P2, REG8_A
    1551/     5CC : 26 10               	FIM P3, REG8_FLAG
    1552/     5CE :                     CODE_POP_REG8P2P3:
    1553/     5CE : 20 18               	FIM P0, REG16_SP
    1554/     5D0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1555/     5D2 : 57 BE               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1556/     5D4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1557/     5D6 : 47 C4               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1558/     5D8 :                     	
    1559/     5D8 :                     CODE_F2H:			; JP
    1560/     5D8 : 56 3F               	JMS GETFLAG_S
    1561/     5DA : 44 60               	JUN JMP_IF0
    1562/     5DC :                     
    1563/     5DC :                     CODE_F3H:			; DI
    1564/     5DC :                     				; Interrupt is not implemented
    1565/     5DC : C0                  	BBL 0
    1566/     5DD :                     
    1567/     5DD :                     CODE_F4H:			; CP
    1568/     5DD : 56 3F               	JMS GETFLAG_S
    1569/     5DF : 44 B2               	JUN CALL_IF0
    1570/     5E1 :                     
    1571/     5E1 :                     CODE_F5H:			; PUSH PSW
    1572/     5E1 : 24 00               	FIM P2, REG8_A
    1573/     5E3 : 26 10               	FIM P3, REG8_FLAG
    1574/     5E5 :                     CODE_PUSH_REG8P2P3:
    1575/     5E5 : 20 18               	FIM P0, REG16_SP
    1576/     5E7 :                     				; higher byte is the first
    1577/     5E7 : 57 E4               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1578/     5E9 : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1579/     5EB : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1580/     5ED :                     
    1581/     5ED : 57 EA               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1582/     5EF : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1583/     5F1 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1584/     5F3 :                     
    1585/     5F3 :                     CODE_F6H:			; ORI
    1586/     5F3 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1587/     5F5 :                     ORI_P1:
    1588/     5F5 : (MACRO)              	LD_P2_P1		; P2=B2
    1588/     5F5 : A2                                  LD P1_HI
    1588/     5F6 : B4                                  XCH P2_HI
    1588/     5F7 : A3                                  LD P1_LO
    1588/     5F8 : B5                                  XCH P2_LO
    1589/     5F9 : 20 00               	FIM P0, REG8_A
    1590/     5FB : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1591/     5FD : 56 F6               	JMS OR_P1_P2
    1592/     5FF : 57 B8               	JMS LD_REG8P0_P1	; P1= A | P2
    1593/     601 : 56 54               	JMS SETFLAG_C_0
    1594/     603 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1595/     605 :                     	
    1596/     605 :                     CODE_F7H:			; RST 6
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/04/03  9:19:43


    1597/     605 : 24 00               	FIM P2, up(6<<3)
    1598/     607 : 26 30               	FIM P3, lo(6<<3)
    1599/     609 : 44 C5               	JUN CALL_P2P3
    1600/     60B :                     
    1601/     60B :                     CODE_F8H:			; RM
    1602/     60B : 56 3F               	JMS GETFLAG_S
    1603/     60D : 44 98               	JUN RET_IF1
    1604/     60F :                     
    1605/     60F :                     CODE_F9H:			; SPHL
    1606/     60F : 2C 18               	FIM P6, REG16_SP
    1607/     611 : 2E 04               	FIM P7, REG16_HL
    1608/     613 : 48 17               	JUN LD_REG16P6_REG16P7
    1609/     615 :                     
    1610/     615 :                     CODE_FAH:			; JM
    1611/     615 : 56 3F               	JMS GETFLAG_S
    1612/     617 : 44 67               	JUN JMP_IF1
    1613/     619 :                     
    1614/     619 :                     CODE_FBH:			; EI
    1615/     619 :                     				; Interrupt is not implemented
    1616/     619 : C0                  	BBL 0
    1617/     61A :                     
    1618/     61A :                     CODE_FCH:			; CM
    1619/     61A : 56 3F               	JMS GETFLAG_S
    1620/     61C : 44 AB               	JUN CALL_IF1
    1621/     61E :                     
    1622/     61E :                     CODE_FDH:			; ...
    1623/     61E : C0                  	BBL 0
    1624/     61F :                     
    1625/     61F :                     CODE_FEH:			; CPI
    1626/     61F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1627/     621 :                     CPI_P1:
    1628/     621 : 2C 12               	FIM P6, REG8_SRC
    1629/     623 : 2E 00               	FIM P7, REG8_A
    1630/     625 : 57 AD               	JMS LD_REG8P6_REG8P7
    1631/     627 : 20 12               	FIM P0, REG8_SRC
    1632/     629 : 57 84               	JMS SUB_REG8P0_P1
    1633/     62B : 56 52               	JMS SETFLAG_C_CY
    1634/     62D : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1635/     62F :                     ;;; 	BBL 0
    1636/     62F :                     CODE_FFH:			; RST 7
    1637/     62F : 24 00               	FIM P2, up(7<<3)
    1638/     631 : 26 38               	FIM P3, lo(7<<3)
    1639/     633 : 44 C5               	JUN CALL_P2P3
    1640/     635 :                     
    1641/     635 :                     ;;;---------------------------------------------------------------------------
    1642/     635 :                     ;;; FLAG routines
    1643/     635 :                     ;;;---------------------------------------------------------------------------
    1644/     635 :                     
    1645/     635 :                     ;;;---------------------------------------------------------------------------
    1646/     635 :                     ;;; GETFLAG_Z
    1647/     635 :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1648/     635 :                     ;;;---------------------------------------------------------------------------
    1649/     635 :                     GETFLAG_Z:
    1650/     635 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1651/     637 : 2F                  	SRC P7
    1652/     638 : E9                  	RDM
    1653/     639 : F5                  	RAL
    1654/     63A : F5                  	RAL
    1655/     63B : 12 3E               	JCN C, GETFLAG_Z_EXIT1
    1656/     63D : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/04/03  9:19:43


    1657/     63E :                     GETFLAG_Z_EXIT1:
    1658/     63E : C1                  	BBL 1
    1659/     63F :                     
    1660/     63F :                     ;;;---------------------------------------------------------------------------
    1661/     63F :                     ;;; GETFLAG_S
    1662/     63F :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1663/     63F :                     ;;;---------------------------------------------------------------------------
    1664/     63F :                     GETFLAG_S:
    1665/     63F : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1666/     641 : 2F                  	SRC P7
    1667/     642 : E9                  	RDM
    1668/     643 : F5                  	RAL
    1669/     644 : 12 47               	JCN C, GETFLAG_S_EXIT1
    1670/     646 : C0                  	BBL 0
    1671/     647 :                     GETFLAG_S_EXIT1:
    1672/     647 : C1                  	BBL 1
    1673/     648 :                     
    1674/     648 :                     ;;;---------------------------------------------------------------------------
    1675/     648 :                     ;;; GETFLAG_C
    1676/     648 :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1677/     648 :                     ;;;---------------------------------------------------------------------------
    1678/     648 :                     GETFLAG_C:
    1679/     648 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1680/     64A : 2F                  	SRC P7
    1681/     64B : E9                  	RDM
    1682/     64C : F6                  	RAR
    1683/     64D : 12 50               	JCN C, GETFLAG_C_1
    1684/     64F : C0                  	BBL 0
    1685/     650 :                     GETFLAG_C_1:	
    1686/     650 : C1                  	BBL 1
    1687/     651 :                     
    1688/     651 :                     ;;;---------------------------------------------------------------------------
    1689/     651 :                     ;;; GETFLAG_P
    1690/     651 :                     ;;; Flag P is loded to ACC
    1691/     651 :                     ;;; ACC=FLAG_P
    1692/     651 :                     ;;; This routine is compiled if EMU_USE_FLAG_P, 
    1693/     651 :                     ;;; otherwise FLAG_P is always 0.
    1694/     651 :                     ;;;---------------------------------------------------------------------------
    1695/     651 :                     GETFLAG_P:
    1696/     651 : =>FALSE              	if EMU_USE_FLAG_P
    1697/     651 :                     	FIM P7, REG4_FLAG_1P1C
    1698/     651 :                     	SRC P7
    1699/     651 :                     	RDM
    1700/     651 :                     	RAL
    1701/     651 :                     	RAL
    1702/     651 :                     	JCN CN, GETFLAG_P_0
    1703/     651 :                     	BBL 1
    1704/     651 :                     GETFLAG_P_0:
    1705/     651 : [1696]               	endif 			; EMU_USE_FLAG_P
    1706/     651 : C0                  	BBL 0
    1707/     652 :                     	
    1708/     652 :                     ;;;---------------------------------------------------------------------------
    1709/     652 :                     ;;; SETFLAG_C_{CY, 0, 1}
    1710/     652 :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1711/     652 :                     ;;;---------------------------------------------------------------------------
    1712/     652 :                     SETFLAG_C_CY:
    1713/     652 : 12 5D               	JCN C, SETFLAG_C_1
    1714/     654 :                     SETFLAG_C_0:
    1715/     654 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1716/     656 : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/04/03  9:19:43


    1717/     657 : E9                  	RDM
    1718/     658 : F6                  	RAR
    1719/     659 : F1                  	CLC
    1720/     65A : F5                  	RAL
    1721/     65B : E0                  	WRM
    1722/     65C : C0                  	BBL 0
    1723/     65D :                     SETFLAG_C_1:
    1724/     65D : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1725/     65F : 2F                  	SRC P7
    1726/     660 : E9                  	RDM
    1727/     661 : F6                  	RAR
    1728/     662 : FA                  	STC
    1729/     663 : F5                  	RAL
    1730/     664 : E0                  	WRM
    1731/     665 : C0                  	BBL 0
    1732/     666 :                     
    1733/     666 :                     ;;;---------------------------------------------------------------------------
    1734/     666 :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1735/     666 :                     ;;; 
    1736/     666 :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1737/     666 :                     ;;; P flag is compiled if EMU_USE_FLAG_P (not implemented yet).
    1738/     666 :                     ;;;---------------------------------------------------------------------------
    1739/     666 :                     SETFLAG_ZSP_REG8P0:
    1740/     666 : 57 D8               	JMS LD_P1_REG8P0
    1741/     668 : 46 6C               	JUN SETFLAG_ZSP_P1
    1742/     66A :                     
    1743/     66A :                     SETFLAG_ZSP_REG8P1:
    1744/     66A : 57 DE               	JMS LD_P1_REG8P1
    1745/     66C :                     
    1746/     66C :                     SETFLAG_ZSP_P1:
    1747/     66C : A2                  	LD P1_HI		; ACC=Sxxx
    1748/     66D : F5                  	RAL			; CY=S
    1749/     66E : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1750/     66F :                     	
    1751/     66F : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
    1752/     670 :                     
    1753/     670 :                     	;; set Z FLAG
    1754/     670 : 5D 2D               	JMS ISZEROORNOT_P1
    1755/     672 : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1756/     673 : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1757/     674 : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1758/     675 : F6                  	RAR			; ACC=ZBHx (CY=S)
    1759/     676 : F6                  	RAR			; ACC=SZBH (BH=00)
    1760/     677 :                     
    1761/     677 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1762/     679 : 2F                  	SRC P7
    1763/     67A : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1764/     67B :                     
    1765/     67B : =>FALSE              	if EMU_USE_FLAG_P
    1766/     67B :                     	;; Set P flag
    1767/     67B :                     ;;; table implementation may be faster
    1768/     67B :                     ;;;              0123456789ABCDEF
    1769/     67B :                     ;;; 4bit table =(0110100110010110)
    1770/     67B :                     ;;; org 09D0H
    1771/     67B :                     ;;; PARITY4TABLE: (1 when EVEN)
    1772/     67B :                     ;;; data 1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1
    1773/     67B :                     ;;; GETPARITY_R1:
    1774/     67B :                     ;;; FIN P2
    1775/     67B :                     ;;; LD P2_LO
    1776/     67B :                     ;;; XCH_R1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/04/03  9:19:43


    1777/     67B :                     ;;; BBL 0
    1778/     67B :                     ;;; 
    1779/     67B :                     ;;; FIM P0, lo(PARITY4TABLE)
    1780/     67B :                     ;;; LD P1_H
    1781/     67B :                     ;;; XCH R1
    1782/     67B :                     ;;; JMS GETPARITY_R1
    1783/     67B :                     ;;; LD R1
    1784/     67B :                     ;;; XCH P1_H
    1785/     67B :                     ;;; LD P1_L
    1786/     67B :                     ;;; XCH R1
    1787/     67B :                     ;;; JMS GETPARITY_R1
    1788/     67B :                     ;;; LD R1
    1789/     67B :                     ;;; ADD P1_H
    1790/     67B :                     ;;; RAR       ; here CY=PARITY (1 when EVEN)
    1791/     67B :                     	
    1792/     67B :                     	CLB
    1793/     67B :                     	XCH CNT_I		; I=0
    1794/     67B :                     	LD_P1_P2		; restore P1
    1795/     67B :                     	LD P1_HI
    1796/     67B :                     	RAL
    1797/     67B :                     	JCN CN,PFLAG_CNT1
    1798/     67B :                     	INC CNT_I
    1799/     67B :                     PFLAG_CNT1:
    1800/     67B :                     	RAL
    1801/     67B :                     	JCN CN,PFLAG_CNT2
    1802/     67B :                     	INC CNT_I
    1803/     67B :                     PFLAG_CNT2:
    1804/     67B :                     	RAL
    1805/     67B :                     	JCN CN,PFLAG_CNT3
    1806/     67B :                     	INC CNT_I
    1807/     67B :                     PFLAG_CNT3:
    1808/     67B :                     	RAL
    1809/     67B :                     	JCN CN,PFLAG_CNT4
    1810/     67B :                     	INC CNT_I
    1811/     67B :                     PFLAG_CNT4:
    1812/     67B :                     	LD P1_LO
    1813/     67B :                     	RAL
    1814/     67B :                     	JCN CN,PFLAG_CNT5
    1815/     67B :                     	INC CNT_I
    1816/     67B :                     PFLAG_CNT5:
    1817/     67B :                     	RAL
    1818/     67B :                     	JCN CN,PFLAG_CNT6
    1819/     67B :                     	INC CNT_I
    1820/     67B :                     PFLAG_CNT6:
    1821/     67B :                     	RAL
    1822/     67B :                     	JCN CN,PFLAG_CNT7
    1823/     67B :                     	INC CNT_I
    1824/     67B :                     PFLAG_CNT7:
    1825/     67B :                     	RAL
    1826/     67B :                     	JCN CN,PFLAG_CNT8
    1827/     67B :                     	INC CNT_I
    1828/     67B :                     PFLAG_CNT8:
    1829/     67B :                     	FIM P7, REG4_FLAG_1P1C
    1830/     67B :                     	SRC P7
    1831/     67B :                     	RDM
    1832/     67B :                     	RAL
    1833/     67B :                     	RAL
    1834/     67B :                     	WRM			; FLAG=xCxx (CY=P)
    1835/     67B :                     
    1836/     67B :                     	LD CNT_I
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/04/03  9:19:43


    1837/     67B :                     	RAR
    1838/     67B :                     	CMC			; CY=~(LSB of I) (P=1 when EVEN )
    1839/     67B :                     
    1840/     67B :                     	RDM
    1841/     67B :                     	RAR
    1842/     67B :                     	RAR
    1843/     67B :                     	WRM			; FLAG=xPxC
    1844/     67B :                     	
    1845/     67B : [1765]               	endif			; EMU_USE_FLAG_P
    1846/     67B : C0                  	BBL 0	
    1847/     67C :                     
    1848/     67C :                     ;;;---------------------------------------------------------------------------
    1849/     67C :                     ;;; Logical operators
    1850/     67C :                     ;;; and, or, xor
    1851/     67C :                     ;;; destroy: P3(R6, R7)
    1852/     67C :                     ;;;---------------------------------------------------------------------------
    1853/     67C :                     
    1854/     67C :                     ;;;---------------------------------------------------------------------------
    1855/     67C :                     ;;; AND_R6_R7
    1856/     67C :                     ;;; R6 = R6 & R7
    1857/     67C :                     ;;;---------------------------------------------------------------------------
    1858/     67C :                     AND_R6_R7:
    1859/     67C : F0                  	CLB
    1860/     67D : A7                  	LD R7
    1861/     67E : F6                  	RAR
    1862/     67F : 12 86               	JCN C, AND67_L1	; jump if R7.bit0==1
    1863/     681 : A6                  	LD R6
    1864/     682 : F6                  	RAR
    1865/     683 : F1                  	CLC
    1866/     684 : F5                  	RAL
    1867/     685 : B6                  	XCH R6		; R6.bit0=0
    1868/     686 :                     AND67_L1:
    1869/     686 : A7                  	LD R7
    1870/     687 : F6                  	RAR
    1871/     688 : F6                  	RAR
    1872/     689 : 12 92               	JCN C, AND67_L2	; jump if R7.bit1==1
    1873/     68B : A6                  	LD R6
    1874/     68C : F6                  	RAR
    1875/     68D : F6                  	RAR
    1876/     68E : F1                  	CLC
    1877/     68F : F5                  	RAL
    1878/     690 : F5                  	RAL
    1879/     691 : B6                  	XCH R6		; R6.bit1=0
    1880/     692 :                     AND67_L2:
    1881/     692 : A7                  	LD R7
    1882/     693 : F5                  	RAL
    1883/     694 : F5                  	RAL
    1884/     695 : 12 9E               	JCN C, AND67_L3	; jump if R7.bit2==1
    1885/     697 : A6                  	LD R6
    1886/     698 : F5                  	RAL
    1887/     699 : F5                  	RAL
    1888/     69A : F1                  	CLC
    1889/     69B : F6                  	RAR
    1890/     69C : F6                  	RAR
    1891/     69D : B6                  	XCH R6		; R6.bit2=0
    1892/     69E :                     AND67_L3:
    1893/     69E : A7                  	LD R7
    1894/     69F : F5                  	RAL
    1895/     6A0 : 12 A7               	JCN C, AND67_L4	; jump if R7.bit3==1
    1896/     6A2 : A6                  	LD R6
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/04/03  9:19:43


    1897/     6A3 : F5                  	RAL
    1898/     6A4 : F1                  	CLC
    1899/     6A5 : F6                  	RAR
    1900/     6A6 : B6                  	XCH R6		; R6.bit3=0
    1901/     6A7 :                     AND67_L4:
    1902/     6A7 :                     	
    1903/     6A7 : C0                  	BBL 0
    1904/     6A8 :                     
    1905/     6A8 :                     ;;;---------------------------------------------------------------------------
    1906/     6A8 :                     ;;; AND_P1_P2
    1907/     6A8 :                     ;;; P1 = P1 & P2
    1908/     6A8 :                     ;;;---------------------------------------------------------------------------
    1909/     6A8 :                     AND_P1_P2:
    1910/     6A8 : A3                  	LD P1_LO
    1911/     6A9 : B6                  	XCH R6
    1912/     6AA : A5                  	LD P2_LO
    1913/     6AB : B7                  	XCH R7
    1914/     6AC : 56 7C               	JMS AND_R6_R7
    1915/     6AE : A6                  	LD R6
    1916/     6AF : B3                  	XCH P1_LO
    1917/     6B0 :                     	
    1918/     6B0 : A2                  	LD P1_HI
    1919/     6B1 : B6                  	XCH R6
    1920/     6B2 : A4                  	LD P2_HI
    1921/     6B3 : B7                  	XCH R7
    1922/     6B4 : 56 7C               	JMS AND_R6_R7
    1923/     6B6 : A6                  	LD R6
    1924/     6B7 : B2                  	XCH P1_HI
    1925/     6B8 : C0                  	BBL 0
    1926/     6B9 :                     
    1927/     6B9 :                     ;;;---------------------------------------------------------------------------
    1928/     6B9 :                     ;;; XOR_R6_R7
    1929/     6B9 :                     ;;; R6 = R6 ^ R7
    1930/     6B9 :                     ;;;---------------------------------------------------------------------------
    1931/     6B9 :                     XOR_R6_R7:
    1932/     6B9 : F0                  	CLB
    1933/     6BA : A7                  	LD R7
    1934/     6BB : F6                  	RAR
    1935/     6BC : 1A C3               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    1936/     6BE : A6                  	LD R6
    1937/     6BF : F6                  	RAR
    1938/     6C0 : F3                  	CMC
    1939/     6C1 : F5                  	RAL
    1940/     6C2 : B6                  	XCH R6			; cmp R6.bit0
    1941/     6C3 :                     XOR67_L1:
    1942/     6C3 : A7                  	LD R7
    1943/     6C4 : F6                  	RAR
    1944/     6C5 : F6                  	RAR
    1945/     6C6 : 1A CF               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    1946/     6C8 : A6                  	LD R6
    1947/     6C9 : F6                  	RAR
    1948/     6CA : F6                  	RAR
    1949/     6CB : F3                  	CMC
    1950/     6CC : F5                  	RAL
    1951/     6CD : F5                  	RAL
    1952/     6CE : B6                  	XCH R6			; cmp R6.bit1
    1953/     6CF :                     XOR67_L2:
    1954/     6CF : A7                  	LD R7
    1955/     6D0 : F5                  	RAL
    1956/     6D1 : F5                  	RAL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/04/03  9:19:43


    1957/     6D2 : 1A DB               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    1958/     6D4 : A6                  	LD R6
    1959/     6D5 : F5                  	RAL
    1960/     6D6 : F5                  	RAL
    1961/     6D7 : F3                  	CMC
    1962/     6D8 : F6                  	RAR
    1963/     6D9 : F6                  	RAR
    1964/     6DA : B6                  	XCH R6			; cmp R6.bit2
    1965/     6DB :                     XOR67_L3:
    1966/     6DB : A7                  	LD R7
    1967/     6DC : F5                  	RAL
    1968/     6DD : 1A E4               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    1969/     6DF : A6                  	LD R6
    1970/     6E0 : F5                  	RAL
    1971/     6E1 : F3                  	CMC
    1972/     6E2 : F6                  	RAR
    1973/     6E3 : B6                  	XCH R6			; cmp R6.bit3
    1974/     6E4 :                     XOR67_L4:
    1975/     6E4 : C0                  	BBL 0
    1976/     6E5 :                     
    1977/     6E5 :                     ;;;---------------------------------------------------------------------------
    1978/     6E5 :                     ;;; XOR_P1_P2
    1979/     6E5 :                     ;;; P1 = P1 ^ P2
    1980/     6E5 :                     ;;;---------------------------------------------------------------------------
    1981/     6E5 :                     XOR_P1_P2:
    1982/     6E5 : A3                  	LD P1_LO
    1983/     6E6 : B6                  	XCH R6
    1984/     6E7 : A5                  	LD P2_LO
    1985/     6E8 : B7                  	XCH R7
    1986/     6E9 : 56 B9               	JMS XOR_R6_R7
    1987/     6EB : A6                  	LD R6
    1988/     6EC : B3                  	XCH P1_LO
    1989/     6ED :                     	
    1990/     6ED : A2                  	LD P1_HI
    1991/     6EE : B6                  	XCH R6
    1992/     6EF : A4                  	LD P2_HI
    1993/     6F0 : B7                  	XCH R7
    1994/     6F1 : 56 B9               	JMS XOR_R6_R7
    1995/     6F3 : A6                  	LD R6
    1996/     6F4 : B2                  	XCH P1_HI
    1997/     6F5 : C0                  	BBL 0
    1998/     6F6 :                     
    1999/     6F6 :                     ;;;---------------------------------------------------------------------------
    2000/     6F6 :                     ;;; OR_P1_P2
    2001/     6F6 :                     ;;; P1 = P1 | P2
    2002/     6F6 :                     ;;;---------------------------------------------------------------------------
    2003/     6F6 :                     OR_P1_P2:
    2004/     6F6 : A3                  	LD P1_LO
    2005/     6F7 : B6                  	XCH R6
    2006/     6F8 : A5                  	LD P2_LO
    2007/     6F9 : B7                  	XCH R7
    2008/     6FA : 57 07               	JMS OR_R6_R7
    2009/     6FC : A6                  	LD R6
    2010/     6FD : B3                  	XCH P1_LO
    2011/     6FE :                     	
    2012/     6FE : A2                  	LD P1_HI
    2013/     6FF : B6                  	XCH R6
    2014/     700 : A4                  	LD P2_HI
    2015/     701 : B7                  	XCH R7
    2016/     702 : 57 07               	JMS OR_R6_R7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/04/03  9:19:43


    2017/     704 : A6                  	LD R6
    2018/     705 : B2                  	XCH P1_HI
    2019/     706 : C0                  	BBL 0
    2020/     707 :                     
    2021/     707 :                     ;;;---------------------------------------------------------------------------
    2022/     707 :                     ;;; OR_R6_R7
    2023/     707 :                     ;;; R6 = R6 | R7
    2024/     707 :                     ;;;---------------------------------------------------------------------------
    2025/     707 :                     OR_R6_R7:
    2026/     707 : F0                  	CLB
    2027/     708 : A7                  	LD R7
    2028/     709 : F6                  	RAR
    2029/     70A : 1A 11               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2030/     70C : A6                  	LD R6
    2031/     70D : F6                  	RAR
    2032/     70E : FA                  	STC
    2033/     70F : F5                  	RAL
    2034/     710 : B6                  	XCH R6			; cmp R6.bit0
    2035/     711 :                     OR67_L1:
    2036/     711 : A7                  	LD R7
    2037/     712 : F6                  	RAR
    2038/     713 : F6                  	RAR
    2039/     714 : 1A 1D               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2040/     716 : A6                  	LD R6
    2041/     717 : F6                  	RAR
    2042/     718 : F6                  	RAR
    2043/     719 : FA                  	STC
    2044/     71A : F5                  	RAL
    2045/     71B : F5                  	RAL
    2046/     71C : B6                  	XCH R6			; cmp R6.bit1
    2047/     71D :                     OR67_L2:
    2048/     71D : A7                  	LD R7
    2049/     71E : F5                  	RAL
    2050/     71F : F5                  	RAL
    2051/     720 : 1A 29               	JCN CN, OR67_L3	; jump if R7.bit2==0
    2052/     722 : A6                  	LD R6
    2053/     723 : F5                  	RAL
    2054/     724 : F5                  	RAL
    2055/     725 : FA                  	STC
    2056/     726 : F6                  	RAR
    2057/     727 : F6                  	RAR
    2058/     728 : B6                  	XCH R6			; cmp R6.bit2
    2059/     729 :                     OR67_L3:
    2060/     729 : A7                  	LD R7
    2061/     72A : F5                  	RAL
    2062/     72B : 1A 32               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2063/     72D : A6                  	LD R6
    2064/     72E : F5                  	RAL
    2065/     72F : FA                  	STC
    2066/     730 : F6                  	RAR
    2067/     731 : B6                  	XCH R6			; cmp R6.bit3
    2068/     732 :                     OR67_L4:
    2069/     732 : C0                  	BBL 0
    2070/     733 :                     
    2071/     733 :                     
    2072/     733 :                     ;;;	org 0900H
    2073/     733 :                     ;;;----------------------------------------------------------------------------
    2074/     733 :                     ;;; Subroutines for REG16 (16bit registars)
    2075/     733 :                     ;;;----------------------------------------------------------------------------
    2076/     733 :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/04/03  9:19:43


    2077/     733 :                     	
    2078/     733 :                     ;;;----------------------------------------------------------------------------
    2079/     733 :                     ;;; LD_REG16P0_REG16P1
    2080/     733 :                     ;;; REG16(P0) = REG16(P1)
    2081/     733 :                     ;;; destroy: P6, P7
    2082/     733 :                     ;;;----------------------------------------------------------------------------
    2083/     733 :                     LD_REG16P0_REG16P1:
    2084/     733 : (MACRO)              	LD_P6_P0
    2084/     733 : A0                                  LD P0_HI
    2084/     734 : BC                                  XCH P6_HI
    2084/     735 : A1                                  LD P0_LO
    2084/     736 : BD                                  XCH P6_LO
    2085/     737 : (MACRO)              	LD_P7_P1
    2085/     737 : A2                                  LD P1_HI
    2085/     738 : BE                                  XCH P7_HI
    2085/     739 : A3                                  LD P1_LO
    2085/     73A : BF                                  XCH P7_LO
    2086/     73B : 48 17               	JUN LD_REG16P6_REG16P7
    2087/     73D :                     
    2088/     73D :                     ;;;----------------------------------------------------------------------------
    2089/     73D :                     ;;; LD_REG16P1_REG16P0
    2090/     73D :                     ;;; REG16(P1) = REG16(P0)
    2091/     73D :                     ;;; destroy: P6, P7
    2092/     73D :                     ;;;----------------------------------------------------------------------------
    2093/     73D :                     LD_REG16P1_REG16P0:
    2094/     73D : (MACRO)              	LD_P6_P1
    2094/     73D : A2                                  LD P1_HI
    2094/     73E : BC                                  XCH P6_HI
    2094/     73F : A3                                  LD P1_LO
    2094/     740 : BD                                  XCH P6_LO
    2095/     741 : (MACRO)              	LD_P7_P0
    2095/     741 : A0                                  LD P0_HI
    2095/     742 : BE                                  XCH P7_HI
    2095/     743 : A1                                  LD P0_LO
    2095/     744 : BF                                  XCH P7_LO
    2096/     745 : 48 17               	JUN LD_REG16P6_REG16P7
    2097/     747 :                     
    2098/     747 :                     ;;;----------------------------------------------------------------------------
    2099/     747 :                     ;;; LD_REG16P7_P2P3
    2100/     747 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2101/     747 :                     ;;; destroy P7
    2102/     747 :                     ;;;----------------------------------------------------------------------------
    2103/     747 :                     LD_REG16P7_P2P3:
    2104/     747 : 2F                  	SRC P7
    2105/     748 : A7                  	LD P3_LO
    2106/     749 : E0                  	WRM
    2107/     74A :                     
    2108/     74A : 6F                  	INC P7_LO
    2109/     74B : 2F                  	SRC P7
    2110/     74C : A6                  	LD P3_HI
    2111/     74D : E0                  	WRM
    2112/     74E :                     
    2113/     74E : 6F                  	INC P7_LO
    2114/     74F : 2F                  	SRC P7
    2115/     750 : A5                  	LD P2_LO
    2116/     751 : E0                  	WRM
    2117/     752 :                     
    2118/     752 : 6F                  	INC P7_LO
    2119/     753 : 2F                  	SRC P7
    2120/     754 : A4                  	LD P2_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/04/03  9:19:43


    2121/     755 : E0                  	WRM
    2122/     756 :                     
    2123/     756 : C0                  	BBL 0
    2124/     757 :                     
    2125/     757 :                     ;;;----------------------------------------------------------------------------
    2126/     757 :                     ;;; LD_REG16P1_P2P3
    2127/     757 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2128/     757 :                     ;;; destroy P7
    2129/     757 :                     ;;;----------------------------------------------------------------------------
    2130/     757 :                     LD_REG16P1_P2P3:
    2131/     757 : (MACRO)              	LD_P7_P1
    2131/     757 : A2                                  LD P1_HI
    2131/     758 : BE                                  XCH P7_HI
    2131/     759 : A3                                  LD P1_LO
    2131/     75A : BF                                  XCH P7_LO
    2132/     75B : 47 47               	JUN LD_REG16P7_P2P3
    2133/     75D :                     
    2134/     75D :                     ;;;----------------------------------------------------------------------------
    2135/     75D :                     ;;; LD_REG16P0_P2P3
    2136/     75D :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2137/     75D :                     ;;; destroy P7
    2138/     75D :                     ;;;----------------------------------------------------------------------------
    2139/     75D :                     LD_REG16P0_P2P3:
    2140/     75D : (MACRO)              	LD_P7_P0
    2140/     75D : A0                                  LD P0_HI
    2140/     75E : BE                                  XCH P7_HI
    2140/     75F : A1                                  LD P0_LO
    2140/     760 : BF                                  XCH P7_LO
    2141/     761 : 47 47               	JUN LD_REG16P7_P2P3
    2142/     763 :                     
    2143/     763 :                     ;;;----------------------------------------------------------------------------
    2144/     763 :                     ;;; ADD_REG8P0_P1
    2145/     763 :                     ;;; REG8(P0) = REG16(P0)+P1
    2146/     763 :                     ;;; destroy: P7(R14, R15)
    2147/     763 :                     ;;;----------------------------------------------------------------------------
    2148/     763 :                     ADD_REG8P0_P1:
    2149/     763 : (MACRO)              	LD_P7_P0
    2149/     763 : A0                                  LD P0_HI
    2149/     764 : BE                                  XCH P7_HI
    2149/     765 : A1                                  LD P0_LO
    2149/     766 : BF                                  XCH P7_LO
    2150/     767 : 2F                  	SRC P7
    2151/     768 : E9                  	RDM
    2152/     769 : A3                  	LD P1_LO
    2153/     76A : F1                  	CLC
    2154/     76B : EB                  	ADM
    2155/     76C : E0                  	WRM
    2156/     76D : 6F                  	INC P7_LO
    2157/     76E : 2F                  	SRC P7
    2158/     76F : E9                  	RDM
    2159/     770 : A2                  	LD P1_HI
    2160/     771 : EB                  	ADM
    2161/     772 : E0                  	WRM
    2162/     773 : C0                  	BBL 0
    2163/     774 :                     
    2164/     774 :                     ;;;----------------------------------------------------------------------------
    2165/     774 :                     ;;; INC_REG8P1
    2166/     774 :                     ;;; REG8(P1) = REG16(P1)+1
    2167/     774 :                     ;;; CY is set if overflow
    2168/     774 :                     ;;; destroy: P7(R14, R15)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/04/03  9:19:43


    2169/     774 :                     ;;;----------------------------------------------------------------------------
    2170/     774 :                     INC_REG8P1:
    2171/     774 : (MACRO)              	LD_P7_P1
    2171/     774 : A2                                  LD P1_HI
    2171/     775 : BE                                  XCH P7_HI
    2171/     776 : A3                                  LD P1_LO
    2171/     777 : BF                                  XCH P7_LO
    2172/     778 :                     	
    2173/     778 : 2F                  	SRC P7
    2174/     779 : E9                  	RDM
    2175/     77A : F2                  	IAC 
    2176/     77B : E0                  	WRM			; REG(P0).lower++
    2177/     77C : 1C 83               	JCN NZ, REG8_INC_EXIT
    2178/     77E : 6F                  	INC P7_LO
    2179/     77F : 2F                  	SRC P7
    2180/     780 : E9                  	RDM
    2181/     781 : F2                  	IAC 
    2182/     782 : E0                  	WRM			; REG(P0).higher++
    2183/     783 :                     REG8_INC_EXIT:
    2184/     783 : C0                  	BBL 0
    2185/     784 :                     
    2186/     784 :                     ;;;----------------------------------------------------------------------------
    2187/     784 :                     ;;; SUB_REG8P0_P1
    2188/     784 :                     ;;; REG8(P0) = REG8(P0)-P1
    2189/     784 :                     ;;; destroy: P7(R14, R15)
    2190/     784 :                     ;;;----------------------------------------------------------------------------
    2191/     784 :                     SUB_REG8P0_P1:
    2192/     784 : (MACRO)              	LD_P7_P0
    2192/     784 : A0                                  LD P0_HI
    2192/     785 : BE                                  XCH P7_HI
    2192/     786 : A1                                  LD P0_LO
    2192/     787 : BF                                  XCH P7_LO
    2193/     788 : 2F                  	SRC P7
    2194/     789 : E9                  	RDM
    2195/     78A : F1                  	CLC
    2196/     78B : 93                  	SUB P1_LO
    2197/     78C : E0                  	WRM
    2198/     78D : F3                  	CMC
    2199/     78E :                     
    2200/     78E : 6F                  	INC P7_LO
    2201/     78F : 2F                  	SRC P7
    2202/     790 : E9                  	RDM
    2203/     791 : 92                  	SUB P1_HI
    2204/     792 : E0                  	WRM
    2205/     793 : F3                  	CMC
    2206/     794 :                     
    2207/     794 : C0                  	BBL 0	
    2208/     795 :                     
    2209/     795 :                     ;;;----------------------------------------------------------------------------
    2210/     795 :                     ;;; DEC_REG8P1
    2211/     795 :                     ;;; REG8(P1) = REG16(P1)+1
    2212/     795 :                     ;;; destroy: P7(R14, R15)
    2213/     795 :                     ;;;----------------------------------------------------------------------------
    2214/     795 :                     DEC_REG8P1:
    2215/     795 : (MACRO)              	LD_P7_P1
    2215/     795 : A2                                  LD P1_HI
    2215/     796 : BE                                  XCH P7_HI
    2215/     797 : A3                                  LD P1_LO
    2215/     798 : BF                                  XCH P7_LO
    2216/     799 :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/04/03  9:19:43


    2217/     799 : 2F                  	SRC P7
    2218/     79A : E9                  	RDM
    2219/     79B : F8                  	DAC 
    2220/     79C : E0                  	WRM			; REG(P0).lower--
    2221/     79D : 12 A4               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2222/     79F : 6F                  	INC P7_LO
    2223/     7A0 : 2F                  	SRC P7
    2224/     7A1 : E9                  	RDM
    2225/     7A2 : F8                  	DAC 
    2226/     7A3 : E0                  	WRM			; REG(P0).higher--
    2227/     7A4 :                     REG8_DEC_EXIT:
    2228/     7A4 : C0                  	BBL 0
    2229/     7A5 :                     
    2230/     7A5 :                     ;;;----------------------------------------------------------------------------
    2231/     7A5 :                     ;;; LD_REG8P0_REG8P1
    2232/     7A5 :                     ;;; REG8(P0)=REG8(P1)
    2233/     7A5 :                     ;;; destroy: P6, P7
    2234/     7A5 :                     ;;;----------------------------------------------------------------------------
    2235/     7A5 :                     LD_REG8P0_REG8P1:
    2236/     7A5 : (MACRO)              	LD_P6_P0
    2236/     7A5 : A0                                  LD P0_HI
    2236/     7A6 : BC                                  XCH P6_HI
    2236/     7A7 : A1                                  LD P0_LO
    2236/     7A8 : BD                                  XCH P6_LO
    2237/     7A9 : (MACRO)              	LD_P7_P1
    2237/     7A9 : A2                                  LD P1_HI
    2237/     7AA : BE                                  XCH P7_HI
    2237/     7AB : A3                                  LD P1_LO
    2237/     7AC : BF                                  XCH P7_LO
    2238/     7AD :                     LD_REG8P6_REG8P7:
    2239/     7AD : 2F                  	SRC P7
    2240/     7AE : E9                  	RDM
    2241/     7AF : 2D                  	SRC P6
    2242/     7B0 : E0                  	WRM
    2243/     7B1 : 6F                  	INC P7_LO
    2244/     7B2 : 6D                  	INC P6_LO
    2245/     7B3 : 2F                  	SRC P7
    2246/     7B4 : E9                  	RDM
    2247/     7B5 : 2D                  	SRC P6
    2248/     7B6 : E0                  	WRM
    2249/     7B7 :                     
    2250/     7B7 : C0                  	BBL 0
    2251/     7B8 :                     
    2252/     7B8 :                     ;;;----------------------------------------------------------------------------
    2253/     7B8 :                     ;;; LD_REG8P0_P1
    2254/     7B8 :                     ;;; REG8(P0)=P1
    2255/     7B8 :                     ;;;----------------------------------------------------------------------------
    2256/     7B8 :                     LD_REG8P0_P1:
    2257/     7B8 : (MACRO)              	LD_P7_P0
    2257/     7B8 : A0                                  LD P0_HI
    2257/     7B9 : BE                                  XCH P7_HI
    2257/     7BA : A1                                  LD P0_LO
    2257/     7BB : BF                                  XCH P7_LO
    2258/     7BC : 47 C8                	JUN LD_REG8P7_P1
    2259/     7BE :                     
    2260/     7BE :                     ;;;----------------------------------------------------------------------------
    2261/     7BE :                     ;;; LD_REG8P3_P1
    2262/     7BE :                     ;;; REG8(P3)=P1
    2263/     7BE :                     ;;;----------------------------------------------------------------------------
    2264/     7BE :                     LD_REG8P3_P1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/04/03  9:19:43


    2265/     7BE : (MACRO)              	LD_P7_P3
    2265/     7BE : A6                                  LD P3_HI
    2265/     7BF : BE                                  XCH P7_HI
    2265/     7C0 : A7                                  LD P3_LO
    2265/     7C1 : BF                                  XCH P7_LO
    2266/     7C2 : 47 C8                	JUN LD_REG8P7_P1
    2267/     7C4 :                     
    2268/     7C4 :                     ;;;----------------------------------------------------------------------------
    2269/     7C4 :                     ;;; LD_REG8P2_P1
    2270/     7C4 :                     ;;; REG8(P2) = P1
    2271/     7C4 :                     ;;;----------------------------------------------------------------------------
    2272/     7C4 :                     LD_REG8P2_P1:
    2273/     7C4 : (MACRO)              	LD_P7_P2
    2273/     7C4 : A4                                  LD P2_HI
    2273/     7C5 : BE                                  XCH P7_HI
    2273/     7C6 : A5                                  LD P2_LO
    2273/     7C7 : BF                                  XCH P7_LO
    2274/     7C8 :                     ;;; 	JUN LD_REG8P7_P1
    2275/     7C8 :                     ;;;----------------------------------------------------------------------------
    2276/     7C8 :                     ;;; LD_REG8P7_P1
    2277/     7C8 :                     ;;; REG8(P7)=P1
    2278/     7C8 :                     ;;; destroy: P7
    2279/     7C8 :                     ;;;----------------------------------------------------------------------------
    2280/     7C8 :                     LD_REG8P7_P1:
    2281/     7C8 : 2F                  	SRC P7
    2282/     7C9 : A3                  	LD P1_LO
    2283/     7CA : E0                  	WRM
    2284/     7CB :                     
    2285/     7CB : 6F                  	INC P7_LO
    2286/     7CC : 2F                  	SRC P7
    2287/     7CD : A2                  	LD P1_HI
    2288/     7CE : E0                  	WRM
    2289/     7CF :                     
    2290/     7CF : C0                  	BBL 0
    2291/     7D0 :                     	
    2292/     7D0 :                     ;;;----------------------------------------------------------------------------
    2293/     7D0 :                     ;;; LD_P1_REG8P7
    2294/     7D0 :                     ;;; P1 = REG8(P7)
    2295/     7D0 :                     ;;;----------------------------------------------------------------------------
    2296/     7D0 :                     LD_P1_REG8P7:
    2297/     7D0 : 2F                  	SRC P7
    2298/     7D1 : E9                  	RDM
    2299/     7D2 : B3                  	XCH P1_LO
    2300/     7D3 :                     
    2301/     7D3 : 6F                  	INC P7_LO		; P7_LO++
    2302/     7D4 : 2F                  	SRC P7
    2303/     7D5 : E9                  	RDM
    2304/     7D6 : B2                  	XCH P1_HI
    2305/     7D7 : C0                  	BBL 0
    2306/     7D8 :                     
    2307/     7D8 :                     ;;;----------------------------------------------------------------------------
    2308/     7D8 :                     ;;; LD_P1_REG8P0
    2309/     7D8 :                     ;;; P1 = REG8(P0)
    2310/     7D8 :                     ;;;----------------------------------------------------------------------------
    2311/     7D8 :                     LD_P1_REG8P0:
    2312/     7D8 : (MACRO)              	LD_P7_P0
    2312/     7D8 : A0                                  LD P0_HI
    2312/     7D9 : BE                                  XCH P7_HI
    2312/     7DA : A1                                  LD P0_LO
    2312/     7DB : BF                                  XCH P7_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/04/03  9:19:43


    2313/     7DC : 47 D0               	JUN LD_P1_REG8P7
    2314/     7DE :                     
    2315/     7DE :                     ;;;----------------------------------------------------------------------------
    2316/     7DE :                     ;;; LD_P1_REG8P1
    2317/     7DE :                     ;;; P1 = REG8(P1)
    2318/     7DE :                     ;;;----------------------------------------------------------------------------
    2319/     7DE :                     LD_P1_REG8P1:
    2320/     7DE : (MACRO)              	LD_P7_P1
    2320/     7DE : A2                                  LD P1_HI
    2320/     7DF : BE                                  XCH P7_HI
    2320/     7E0 : A3                                  LD P1_LO
    2320/     7E1 : BF                                  XCH P7_LO
    2321/     7E2 : 47 D0               	JUN LD_P1_REG8P7
    2322/     7E4 :                     
    2323/     7E4 :                     ;;;----------------------------------------------------------------------------
    2324/     7E4 :                     ;;; LD_P1_REG8P2
    2325/     7E4 :                     ;;; P1 = REG8(P2)
    2326/     7E4 :                     ;;;----------------------------------------------------------------------------
    2327/     7E4 :                     LD_P1_REG8P2:
    2328/     7E4 : (MACRO)              	LD_P7_P2
    2328/     7E4 : A4                                  LD P2_HI
    2328/     7E5 : BE                                  XCH P7_HI
    2328/     7E6 : A5                                  LD P2_LO
    2328/     7E7 : BF                                  XCH P7_LO
    2329/     7E8 : 47 D0               	JUN LD_P1_REG8P7
    2330/     7EA :                     
    2331/     7EA :                     ;;;----------------------------------------------------------------------------
    2332/     7EA :                     ;;; LD_P1_REG8P3
    2333/     7EA :                     ;;; P1 = REG8(P3)
    2334/     7EA :                     ;;;----------------------------------------------------------------------------
    2335/     7EA :                     LD_P1_REG8P3:
    2336/     7EA : (MACRO)              	LD_P7_P3
    2336/     7EA : A6                                  LD P3_HI
    2336/     7EB : BE                                  XCH P7_HI
    2336/     7EC : A7                                  LD P3_LO
    2336/     7ED : BF                                  XCH P7_LO
    2337/     7EE : 47 D0               	JUN LD_P1_REG8P7
    2338/     7F0 :                     
    2339/     7F0 :                     ;;;----------------------------------------------------------------------------
    2340/     7F0 :                     ;;; PRINTHEX_REG16P1
    2341/     7F0 :                     ;;; PRINT REG16(P1)
    2342/     7F0 :                     ;;; destroy: P6, P7
    2343/     7F0 :                     ;;;----------------------------------------------------------------------------
    2344/     7F0 :                     PRINTHEX_REG16P1:
    2345/     7F0 : 5B 00               	JMS PUSH_P0
    2346/     7F2 : (MACRO)              	LD_P0_P3
    2346/     7F2 : A6                                  LD P3_HI
    2346/     7F3 : B0                                  XCH P0_HI
    2346/     7F4 : A7                                  LD P3_LO
    2346/     7F5 : B1                                  XCH P0_LO
    2347/     7F6 : 5B 00               	JMS PUSH_P0
    2348/     7F8 : 5B 12               	JMS PUSH_P1
    2349/     7FA : 5B 24               	JMS PUSH_P2
    2350/     7FC :                     	
    2351/     7FC : 58 22               	JMS LD_P2P3_REG16P1
    2352/     7FE : A4                  	LD R4
    2353/     7FF : 5C B2               	JMS PRINT_ACC		; print bit.FEDC
    2354/     801 : A5                  	LD R5
    2355/     802 : 5C B2               	JMS PRINT_ACC		; print bit.BA98
    2356/     804 : A6                  	LD R6
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/04/03  9:19:43


    2357/     805 : 5C B2               	JMS PRINT_ACC		; print bit.7654
    2358/     807 : A7                  	LD R7
    2359/     808 : 5C B2               	JMS PRINT_ACC		; print bit.3210
    2360/     80A :                     
    2361/     80A : 5B 50               	JMS POP_P2
    2362/     80C : 5B 43               	JMS POP_P1
    2363/     80E : 5B 36               	JMS POP_P0
    2364/     810 : (MACRO)              	LD_P3_P0
    2364/     810 : A0                                  LD P0_HI
    2364/     811 : B6                                  XCH P3_HI
    2364/     812 : A1                                  LD P0_LO
    2364/     813 : B7                                  XCH P3_LO
    2365/     814 : 5B 36               	JMS POP_P0
    2366/     816 : C0                  	BBL 0
    2367/     817 :                     
    2368/     817 :                     ;;;----------------------------------------------------------------------------
    2369/     817 :                     ;;; LD_REG16P6_REG16P7
    2370/     817 :                     ;;; REG16(P6) = REG16(P7)
    2371/     817 :                     ;;; destroy: P6, P7, CNT_J
    2372/     817 :                     ;;;----------------------------------------------------------------------------
    2373/     817 :                     LD_REG16P6_REG16P7:
    2374/     817 : DC                  	LDM loop(4)
    2375/     818 : BB                  	XCH CNT_J
    2376/     819 :                     LDREG16P6P7_LOOP:
    2377/     819 : 2F                  	SRC P7
    2378/     81A : E9                  	RDM
    2379/     81B : 2D                  	SRC P6
    2380/     81C : E0                  	WRM
    2381/     81D : 6F                  	INC P7_LO
    2382/     81E : 6D                  	INC P6_LO
    2383/     81F : 7B 19               	ISZ CNT_J, LDREG16P6P7_LOOP
    2384/     821 : C0                  	BBL 0
    2385/     822 :                     
    2386/     822 :                     ;;;----------------------------------------------------------------------------
    2387/     822 :                     ;;; LD_P2P3_REG16P1
    2388/     822 :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2389/     822 :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2390/     822 :                     ;;; destroy: P7
    2391/     822 :                     ;;;----------------------------------------------------------------------------
    2392/     822 :                     LD_P2P3_REG16P1:
    2393/     822 : (MACRO)              	LD_P7_P1
    2393/     822 : A2                                  LD P1_HI
    2393/     823 : BE                                  XCH P7_HI
    2393/     824 : A3                                  LD P1_LO
    2393/     825 : BF                                  XCH P7_LO
    2394/     826 : 2F                  	SRC P7
    2395/     827 : E9                  	RDM
    2396/     828 : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2397/     829 :                     
    2398/     829 : 6F                  	INC P7_LO
    2399/     82A : 2F                  	SRC P7
    2400/     82B : E9                  	RDM
    2401/     82C : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2402/     82D :                     	
    2403/     82D : 6F                  	INC P7_LO
    2404/     82E : 2F                  	SRC P7
    2405/     82F : E9                  	RDM
    2406/     830 : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2407/     831 :                     
    2408/     831 : 6F                  	INC P7_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/04/03  9:19:43


    2409/     832 : 2F                  	SRC P7
    2410/     833 : E9                  	RDM
    2411/     834 : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2412/     835 :                     
    2413/     835 : C0                  	BBL 0
    2414/     836 :                     
    2415/     836 :                     ;;;----------------------------------------------------------------------------
    2416/     836 :                     ;;; INC_REG16P0
    2417/     836 :                     ;;; REG16(P0) = REG16(P0)+1
    2418/     836 :                     ;;; destroy: P7(R14, R15)
    2419/     836 :                     ;;;----------------------------------------------------------------------------
    2420/     836 :                     INC_REG16P0:
    2421/     836 : A1                  	LD R1
    2422/     837 : BF                  	XCH R15			; save R1 to R15
    2423/     838 :                     
    2424/     838 : DC                  	LDM loop(4)
    2425/     839 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2426/     83A :                     REG16_INC_LOOP:
    2427/     83A : 21                  	SRC P0
    2428/     83B : E9                  	RDM
    2429/     83C : F2                  	IAC 
    2430/     83D : E0                  	WRM
    2431/     83E : 1C 43               	JCN NZ, REG16_INC_EXIT
    2432/     840 : 61                  	INC R1
    2433/     841 : 7E 3A               	ISZ R14, REG16_INC_LOOP
    2434/     843 :                     
    2435/     843 :                     REG16_INC_EXIT:
    2436/     843 : AF                  	LD R15
    2437/     844 : B1                  	XCH R1			; restore R1
    2438/     845 : C0                  	BBL 0
    2439/     846 :                     
    2440/     846 :                     ;;;----------------------------------------------------------------------------
    2441/     846 :                     ;;; DEC_REG16P0
    2442/     846 :                     ;;; REG16(P0) = REG16(P0) - 1
    2443/     846 :                     ;;; destroy: P7(R14, R15)
    2444/     846 :                     ;;;----------------------------------------------------------------------------
    2445/     846 :                     DEC_REG16P0:
    2446/     846 : A1                  	LD R1
    2447/     847 : BF                  	XCH R15			; save R1 to R15
    2448/     848 :                     
    2449/     848 : DC                  	LDM loop(4)
    2450/     849 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2451/     84A : F1                  	CLC
    2452/     84B :                     REG16_DEC_LOOP:
    2453/     84B : 21                  	SRC P0
    2454/     84C : E9                  	RDM
    2455/     84D : F8                  	DAC
    2456/     84E : E0                  	WRM
    2457/     84F : 12 54               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2458/     851 : 61                  	INC R1
    2459/     852 : 7E 4B               	ISZ R14, REG16_DEC_LOOP
    2460/     854 :                     REG16_DEC_EXIT:
    2461/     854 : AF                  	LD R15
    2462/     855 : B1                  	XCH R1			; restore R1
    2463/     856 : C0                  	BBL 0
    2464/     857 :                     
    2465/     857 :                     ;;;----------------------------------------------------------------------------
    2466/     857 :                     ;;; CMP_REG16P0_REG16P1
    2467/     857 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2468/     857 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/04/03  9:19:43


    2469/     857 :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2470/     857 :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2471/     857 :                     ;;; destroy: P6, P7, R5
    2472/     857 :                     ;;;----------------------------------------------------------------------------
    2473/     857 :                     CMP_REG16P0_REG16P1:
    2474/     857 : A1                  	LD R1
    2475/     858 : BF                  	XCH R15			; save R1 to R15
    2476/     859 : A3                  	LD R3
    2477/     85A : BD                  	XCH R13			; save R3 to R13
    2478/     85B : F0                  	CLB
    2479/     85C : BC                  	XCH R12			; R12 = 0
    2480/     85D : DC                  	LDM loop(4)
    2481/     85E : BE                  	XCH R14			; R14=12, 13, 14, 15
    2482/     85F : FA                  	STC
    2483/     860 :                     REG16_CMP_LOOP:
    2484/     860 : F3                  	CMC
    2485/     861 : 21                  	SRC P0
    2486/     862 : E9                  	RDM
    2487/     863 : 23                  	SRC P1
    2488/     864 : E8                  	SBM
    2489/     865 : 61                  	INC R1
    2490/     866 : 63                  	INC R3
    2491/     867 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2492/     868 : AB                  	LD R11
    2493/     869 : 14 6D               	JCN Z, REG16_CMP_NEXT
    2494/     86B : D1                  	LDM 1
    2495/     86C : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2496/     86D :                     REG16_CMP_NEXT:
    2497/     86D : 7E 60               	ISZ R14, REG16_CMP_LOOP
    2498/     86F : AB                  	LD R11
    2499/     870 : F5                  	RAL
    2500/     871 : F3                  	CMC			; CY=~MSB
    2501/     872 :                     
    2502/     872 : AF                  	LD R15
    2503/     873 : B1                  	XCH R1			; restore R1
    2504/     874 : AD                  	LD R13
    2505/     875 : B3                  	XCH R3			; restore R3
    2506/     876 :                     
    2507/     876 : AC                  	LD R12
    2508/     877 : 14 7A               	JCN Z, REG16_CMP_EXIT0
    2509/     879 : C1                  	BBL 1
    2510/     87A :                     REG16_CMP_EXIT0:
    2511/     87A : C0                  	BBL 0
    2512/     87B :                     
    2513/     87B :                     ;;;----------------------------------------------------------------------------
    2514/     87B :                     ;;; ADD_REG16P0_REG16P1
    2515/     87B :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2516/     87B :                     ;;; destroy: P6, P7
    2517/     87B :                     ;;;----------------------------------------------------------------------------
    2518/     87B :                     ADD_REG16P0_REG16P1:
    2519/     87B : A1                  	LD R1
    2520/     87C : BF                  	XCH R15			; save R1 to R15
    2521/     87D : A3                  	LD R3
    2522/     87E : BD                  	XCH R13			; save R3 to R13
    2523/     87F :                     
    2524/     87F : DC                  	LDM loop(4)
    2525/     880 : BE                  	XCH R14
    2526/     881 : F1                  	CLC
    2527/     882 :                     REG16_ADD_LOOP:
    2528/     882 : 23                  	SRC P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/04/03  9:19:43


    2529/     883 : E9                  	RDM
    2530/     884 : 21                  	SRC P0
    2531/     885 : EB                  	ADM
    2532/     886 : E0                  	WRM
    2533/     887 : 61                  	INC R1
    2534/     888 : 63                  	INC R3
    2535/     889 : 7E 82               	ISZ R14, REG16_ADD_LOOP
    2536/     88B :                     
    2537/     88B : AF                  	LD R15
    2538/     88C : B1                  	XCH R1			; restore R1
    2539/     88D : AD                  	LD R13
    2540/     88E : B3                  	XCH R3			; restore R3
    2541/     88F : C0                  	BBL 0
    2542/     890 :                     
    2543/     890 :                     ;;;----------------------------------------------------------------------------
    2544/     890 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2545/     890 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2546/     890 :                     ;;; and increment the pointer
    2547/     890 :                     ;;; ACC=0 get number succeed
    2548/     890 :                     ;;; ACC=1 no number, P1=first chalacter
    2549/     890 :                     ;;; destroy: P6, P7, P2, P3
    2550/     890 :                     ;;;----------------------------------------------------------------------------
    2551/     890 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2552/     890 : 5B 12               	JMS PUSH_P1
    2553/     892 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2554/     894 : 5C E9               	JMS ISHEX_P1
    2555/     896 : 1C 9B               	JCN ZN, GETHEX_START
    2556/     898 :                     	;; the first character is not a number
    2557/     898 : 5B 43               	JMS POP_P1
    2558/     89A : C1                  	BBL 1
    2559/     89B :                     GETHEX_START:
    2560/     89B : 24 00               	FIM P2, 00H
    2561/     89D : 26 00               	FIM P3, 00H
    2562/     89F :                     GETHEX_LOOP:
    2563/     89F : 5D 14               	JMS CTOI_P1
    2564/     8A1 : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2565/     8A3 : A3                  	LD P1_LO
    2566/     8A4 : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2567/     8A5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2568/     8A7 : 5C E9               	JMS ISHEX_P1
    2569/     8A9 : 14 AD               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2570/     8AB : 48 9F               	JUN GETHEX_LOOP
    2571/     8AD :                     GETHEX_EXIT:
    2572/     8AD : 5B 43               	JMS POP_P1
    2573/     8AF : 47 57               	JUN LD_REG16P1_P2P3
    2574/     8B1 :                     ;;;	BBL 0
    2575/     8B1 :                     
    2576/     8B1 :                     ;;;----------------------------------------------------------------------------
    2577/     8B1 :                     ;;; EMULATE_OUT_P1
    2578/     8B1 :                     ;;; Emulate OUT instruction
    2579/     8B1 :                     ;;;----------------------------------------------------------------------------
    2580/     8B1 :                     EMULATE_OUT_P1:
    2581/     8B1 : 2E 01               	FIM P7, EMU_UARTRD
    2582/     8B3 : 5D 20               	JMS CMP_P1P7
    2583/     8B5 : 1C B9               	JCN ZN, EMU_OUT_P1_L1
    2584/     8B7 : 48 C2               	JUN EMU_OUT_UARTRD
    2585/     8B9 :                     EMU_OUT_P1_L1:
    2586/     8B9 : 2E 00               	FIM P7, EMU_UARTRC
    2587/     8BB : 5D 20               	JMS CMP_P1P7
    2588/     8BD : 1C C1               	JCN ZN, EMU_OUT_P1_L2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/04/03  9:19:43


    2589/     8BF : 48 C8               	JUN EMU_OUT_UARTRC
    2590/     8C1 :                     EMU_OUT_P1_L2:
    2591/     8C1 : C0                  	BBL 0
    2592/     8C2 :                     
    2593/     8C2 :                     EMU_OUT_UARTRD:
    2594/     8C2 : 22 00               	FIM P1, REG8_A
    2595/     8C4 : 57 DE               	JMS LD_P1_REG8P1
    2596/     8C6 : 4C 5D               	JUN PUTCHAR_P1
    2597/     8C8 :                     ;;;	BBL 0
    2598/     8C8 :                     EMU_OUT_UARTRC:			; do nothing
    2599/     8C8 : C0                  	BBL 0
    2600/     8C9 :                     	
    2601/     8C9 :                     ;;;----------------------------------------------------------------------------
    2602/     8C9 :                     ;;; EMULATE_IN_P1
    2603/     8C9 :                     ;;; Emulate IN instruction
    2604/     8C9 :                     ;;;----------------------------------------------------------------------------
    2605/     8C9 :                     EMULATE_IN_P1:
    2606/     8C9 : 2E 01               	FIM P7, EMU_UARTRD
    2607/     8CB : 5D 20               	JMS CMP_P1P7
    2608/     8CD : 1C D1               	JCN ZN, EMU_IN_P1_L1
    2609/     8CF : 48 DA               	JUN EMU_IN_UARTRD
    2610/     8D1 :                     EMU_IN_P1_L1:
    2611/     8D1 : 2E 00               	FIM P7, EMU_UARTRC
    2612/     8D3 : 5D 20               	JMS CMP_P1P7
    2613/     8D5 : 1C D9               	JCN ZN, EMU_IN_P1_L2
    2614/     8D7 : 48 E6               	JUN EMU_IN_UARTRC
    2615/     8D9 :                     EMU_IN_P1_L2:
    2616/     8D9 : C0                  	BBL 0
    2617/     8DA :                     
    2618/     8DA :                     EMU_IN_UARTRD:
    2619/     8DA : 5C 35               	JMS GETCHAR_P1
    2620/     8DC : 2E 1B               	FIM P7, 1BH		; ESC
    2621/     8DE : 5D 20               	JMS CMP_P1P7
    2622/     8E0 : 14 EC               	JCN Z, EMU_IN_EXIT
    2623/     8E2 :                     	
    2624/     8E2 : 20 00               	FIM P0, REG8_A
    2625/     8E4 : 47 B8               	JUN LD_REG8P0_P1
    2626/     8E6 :                     ;;;	BBL 0
    2627/     8E6 :                     
    2628/     8E6 :                     EMU_IN_UARTRC:
    2629/     8E6 : 20 00               	FIM P0, REG8_A
    2630/     8E8 : 22 FF               	FIM P1, EMU_IN_UARTRC_VALUE
    2631/     8EA : 47 B8               	JUN LD_REG8P0_P1
    2632/     8EC :                     ;;;	BBL 0
    2633/     8EC :                     
    2634/     8EC :                     EMU_IN_EXIT:
    2635/     8EC : 5C 9E               	JMS PRINT_CRLF
    2636/     8EE : 58 F2               	JMS EMU_PRINT_REGISTERS
    2637/     8F0 : 40 2D               	JUN CMD_LOOP
    2638/     8F2 :                     	
    2639/     8F2 :                     ;;;----------------------------------------------------------------------------
    2640/     8F2 :                     ;;; EMU_PRINT_REGISTERS
    2641/     8F2 :                     ;;;----------------------------------------------------------------------------
    2642/     8F2 :                     EMU_PRINT_REGISTERS:
    2643/     8F2 : 20 69               	FIM P0, lo(STR_EMU_REG)
    2644/     8F4 : 5E 00               	JMS PRINTSTR_P0
    2645/     8F6 :                     
    2646/     8F6 : 22 00               	FIM P1, REG8_A
    2647/     8F8 : 57 DE               	JMS LD_P1_REG8P1
    2648/     8FA : 5C 83               	JMS PRINTHEX_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/04/03  9:19:43


    2649/     8FC : 5C 96               	JMS PRINT_SPC
    2650/     8FE :                     
    2651/     8FE : 56 3F               	JMS GETFLAG_S
    2652/     900 : 5C B2               	JMS PRINT_ACC
    2653/     902 : 56 35               	JMS GETFLAG_Z
    2654/     904 : 5C B2               	JMS PRINT_ACC
    2655/     906 : 56 48               	JMS GETFLAG_C
    2656/     908 : 5C B2               	JMS PRINT_ACC
    2657/     90A : 5C 96               	JMS PRINT_SPC
    2658/     90C :                     
    2659/     90C : 22 0C               	FIM P1, REG16_BC
    2660/     90E : 57 F0               	JMS PRINTHEX_REG16P1
    2661/     910 : 5C 96               	JMS PRINT_SPC
    2662/     912 :                     
    2663/     912 : 22 08               	FIM P1, REG16_DE
    2664/     914 : 57 F0               	JMS PRINTHEX_REG16P1
    2665/     916 : 5C 96               	JMS PRINT_SPC
    2666/     918 :                     
    2667/     918 : 22 04               	FIM P1, REG16_HL
    2668/     91A : 57 F0               	JMS PRINTHEX_REG16P1
    2669/     91C : 5C 96               	JMS PRINT_SPC
    2670/     91E :                     
    2671/     91E : 22 18               	FIM P1, REG16_SP
    2672/     920 : 57 F0               	JMS PRINTHEX_REG16P1
    2673/     922 : 5C 96               	JMS PRINT_SPC
    2674/     924 :                     
    2675/     924 : 22 14               	FIM P1, REG16_PC
    2676/     926 : 57 F0               	JMS PRINTHEX_REG16P1
    2677/     928 : 5C 96               	JMS PRINT_SPC
    2678/     92A :                     
    2679/     92A : 20 1C               	FIM P0, REG16_ADDR
    2680/     92C : 22 14               	FIM P1, REG16_PC
    2681/     92E : 57 33               	JMS LD_REG16P0_REG16P1
    2682/     930 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2683/     932 : 5C 83               	JMS PRINTHEX_P1
    2684/     934 : 5C 96               	JMS PRINT_SPC
    2685/     936 :                     
    2686/     936 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2687/     938 : 5C 83               	JMS PRINTHEX_P1
    2688/     93A : 5C 96               	JMS PRINT_SPC
    2689/     93C :                     
    2690/     93C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2691/     93E : 5C 83               	JMS PRINTHEX_P1
    2692/     940 : 5C 96               	JMS PRINT_SPC
    2693/     942 :                     
    2694/     942 : 20 0C               	FIM P0, REG16_BC
    2695/     944 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2696/     946 : 58 46               	JMS DEC_REG16P0
    2697/     948 : 5C 83               	JMS PRINTHEX_P1
    2698/     94A : 5C 96               	JMS PRINT_SPC
    2699/     94C :                     	
    2700/     94C : 20 08               	FIM P0, REG16_DE
    2701/     94E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2702/     950 : 58 46               	JMS DEC_REG16P0
    2703/     952 : 5C 83               	JMS PRINTHEX_P1
    2704/     954 : 5C 96               	JMS PRINT_SPC
    2705/     956 :                     
    2706/     956 : 20 04               	FIM P0, REG16_HL
    2707/     958 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2708/     95A : 58 46               	JMS DEC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/04/03  9:19:43


    2709/     95C : 5C 83               	JMS PRINTHEX_P1
    2710/     95E : 5C 96               	JMS PRINT_SPC
    2711/     960 :                     
    2712/     960 : 20 18               	FIM P0, REG16_SP
    2713/     962 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2714/     964 : 5C 83               	JMS PRINTHEX_P1
    2715/     966 : 5C 96               	JMS PRINT_SPC
    2716/     968 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2717/     96A : 5C 83               	JMS PRINTHEX_P1
    2718/     96C :                     ;;; 	JMS PRINT_SPC
    2719/     96C :                     
    2720/     96C : 58 46               	JMS DEC_REG16P0
    2721/     96E : 58 46               	JMS DEC_REG16P0
    2722/     970 :                     	
    2723/     970 : 4C 9E               	JUN PRINT_CRLF
    2724/     972 :                     ;;;	BBL 0
    2725/     972 :                     
    2726/     972 :                     
    2727/     972 :                     	
    2728/     972 :                     ;;;---------------------------------------------------------------------------
    2729/     972 :                     ;;; JIN_P2_CODE_80BF
    2730/     972 :                     ;;; Jump table for CODE 80H to BFH
    2731/     972 :                     ;;; P2=0F0H + CODE.bit(543)0
    2732/     972 :                     ;;;---------------------------------------------------------------------------
    2733/     9EF :                     	org 09EFH
    2734/     9EF :                     JIN_P2_CODE_80BF:
    2735/     9EF : 35                  	JIN P2
    2736/     9F0 :                     	org 09F0H
    2737/     9F0 : 44 88               	JUN ADI_P1		; 9F0: 80H<=87H
    2738/     9F2 : 44 D3               	JUN ACI_P1		; 9F2: 88H<=8FH
    2739/     9F4 : 45 05               	JUN SUI_P1		; 9F4: 90H<=97H
    2740/     9F6 : 45 27               	JUN SBI_P1		; 9F6: 98H<=9FH
    2741/     9F8 : 45 79               	JUN ANI_P1		; 9F8: A0H<=A7H
    2742/     9FA : 45 B0               	JUN XRI_P1		; 9FA: A8H<=AFH
    2743/     9FC : 45 F5               	JUN ORI_P1		; 9FC: B0H<=B7H
    2744/     9FE : 46 21               	JUN CPI_P1		; 9FE: B8H<=BFH
    2745/     A00 :                     ;;;---------------------------------------------------------------------------
    2746/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2747/     A00 :                     ;;;---------------------------------------------------------------------------
    2748/     A00 :                     	org 0A00H
    2749/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2750/     A00 : 33                  	JIN P1
    2751/     A01 : 00                  	NOP			; do not delete this NOP
    2752/     A02 : 42 80               	JUN CODE_01H
    2753/     A04 : 42 8C               	JUN CODE_02H
    2754/     A06 : 42 94               	JUN CODE_03H
    2755/     A08 : 42 98               	JUN CODE_04H
    2756/     A0A : 42 9C               	JUN CODE_05H
    2757/     A0C : 42 A0               	JUN CODE_06H
    2758/     A0E : 42 A4               	JUN CODE_07H
    2759/     A10 : 42 B4               	JUN CODE_08H
    2760/     A12 : 42 B5               	JUN CODE_09H
    2761/     A14 : 42 BD               	JUN CODE_0AH
    2762/     A16 : 42 C7               	JUN CODE_0BH
    2763/     A18 : 42 CB               	JUN CODE_0CH
    2764/     A1A : 42 CF               	JUN CODE_0DH
    2765/     A1C : 42 D3               	JUN CODE_0EH
    2766/     A1E : 42 D7               	JUN CODE_0FH
    2767/     A20 : 42 E7               	JUN CODE_10H
    2768/     A22 : 42 E8               	JUN CODE_11H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/04/03  9:19:43


    2769/     A24 : 42 F4               	JUN CODE_12H
    2770/     A26 : 42 FC               	JUN CODE_13H
    2771/     A28 : 43 00               	JUN CODE_14H
    2772/     A2A : 43 04               	JUN CODE_15H
    2773/     A2C : 43 08               	JUN CODE_16H
    2774/     A2E : 43 0C               	JUN CODE_17H
    2775/     A30 : 43 1C               	JUN CODE_18H
    2776/     A32 : 43 1D               	JUN CODE_19H
    2777/     A34 : 43 25               	JUN CODE_1AH
    2778/     A36 : 43 2F               	JUN CODE_1BH
    2779/     A38 : 43 33               	JUN CODE_1CH
    2780/     A3A : 43 37               	JUN CODE_1DH
    2781/     A3C : 43 3B               	JUN CODE_1EH
    2782/     A3E : 43 3F               	JUN CODE_1FH
    2783/     A40 : 43 4F               	JUN CODE_20H
    2784/     A42 : 43 50               	JUN CODE_21H
    2785/     A44 : 43 5C               	JUN CODE_22H
    2786/     A46 : 43 7A               	JUN CODE_23H
    2787/     A48 : 43 7E               	JUN CODE_24H
    2788/     A4A : 43 82               	JUN CODE_25H
    2789/     A4C : 43 86               	JUN CODE_26H
    2790/     A4E : 43 8A               	JUN CODE_27H
    2791/     A50 : 43 98               	JUN CODE_28H
    2792/     A52 : 43 99               	JUN CODE_29H
    2793/     A54 : 43 A1               	JUN CODE_2AH
    2794/     A56 : 43 BB               	JUN CODE_2BH
    2795/     A58 : 43 BF               	JUN CODE_2CH
    2796/     A5A : 43 C3               	JUN CODE_2DH
    2797/     A5C : 43 C7               	JUN CODE_2EH
    2798/     A5E : 43 CB               	JUN CODE_2FH
    2799/     A60 : 43 D7               	JUN CODE_30H
    2800/     A62 : 43 D8               	JUN CODE_31H
    2801/     A64 : 43 E4               	JUN CODE_32H
    2802/     A66 : 43 F8               	JUN CODE_33H
    2803/     A68 : 43 FC               	JUN CODE_34H
    2804/     A6A : 44 08               	JUN CODE_35H
    2805/     A6C : 44 14               	JUN CODE_36H
    2806/     A6E : 44 1A               	JUN CODE_37H
    2807/     A70 : 44 1C               	JUN CODE_38H
    2808/     A72 : 44 1D               	JUN CODE_39H
    2809/     A74 : 44 25               	JUN CODE_3AH
    2810/     A76 : 44 39               	JUN CODE_3BH
    2811/     A78 : 44 3D               	JUN CODE_3CH
    2812/     A7A : 44 43               	JUN CODE_3DH
    2813/     A7C : 44 49               	JUN CODE_3EH
    2814/     A7E : 44 4F               	JUN CODE_3FH
    2815/     A80 : 44 54               	JUN CODE_C0H
    2816/     A82 : 44 58               	JUN CODE_C1H
    2817/     A84 : 44 5E               	JUN CODE_C2H
    2818/     A86 : 44 6E               	JUN CODE_C3H
    2819/     A88 : 44 7C               	JUN CODE_C4H
    2820/     A8A : 44 80               	JUN CODE_C5H
    2821/     A8C : 44 86               	JUN CODE_C6H
    2822/     A8E : 44 90               	JUN CODE_C7H
    2823/     A90 : 44 96               	JUN CODE_C8H
    2824/     A92 : 44 9E               	JUN CODE_C9H
    2825/     A94 : 44 A4               	JUN CODE_CAH
    2826/     A96 : 44 A8               	JUN CODE_CBH
    2827/     A98 : 44 A9               	JUN CODE_CCH
    2828/     A9A : 44 B9               	JUN CODE_CDH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/04/03  9:19:43


    2829/     A9C : 44 D1               	JUN CODE_CEH
    2830/     A9E : 44 E1               	JUN CODE_CFH
    2831/     AA0 : 44 E7               	JUN CODE_D0H
    2832/     AA2 : 44 EB               	JUN CODE_D1H
    2833/     AA4 : 44 F1               	JUN CODE_D2H
    2834/     AA6 : 44 F5               	JUN CODE_D3H
    2835/     AA8 : 44 F9               	JUN CODE_D4H
    2836/     AAA : 44 FD               	JUN CODE_D5H
    2837/     AAC : 45 03               	JUN CODE_D6H
    2838/     AAE : 45 0D               	JUN CODE_D7H
    2839/     AB0 : 45 13               	JUN CODE_D8H
    2840/     AB2 : 45 17               	JUN CODE_D9H
    2841/     AB4 : 45 18               	JUN CODE_DAH
    2842/     AB6 : 45 1C               	JUN CODE_DBH
    2843/     AB8 : 45 20               	JUN CODE_DCH
    2844/     ABA : 45 24               	JUN CODE_DDH
    2845/     ABC : 45 25               	JUN CODE_DEH
    2846/     ABE : 45 35               	JUN CODE_DFH
    2847/     AC0 : 45 3B               	JUN CODE_E0H
    2848/     AC2 : 45 3F               	JUN CODE_E1H
    2849/     AC4 : 45 45               	JUN CODE_E2H
    2850/     AC6 : 45 49               	JUN CODE_E3H
    2851/     AC8 : 45 6D               	JUN CODE_E4H
    2852/     ACA : 45 71               	JUN CODE_E5H
    2853/     ACC : 45 77               	JUN CODE_E6H
    2854/     ACE : 45 89               	JUN CODE_E7H
    2855/     AD0 : 45 8F               	JUN CODE_E8H
    2856/     AD2 : 45 93               	JUN CODE_E9H
    2857/     AD4 : 45 97               	JUN CODE_EAH
    2858/     AD6 : 45 9B               	JUN CODE_EBH
    2859/     AD8 : 45 A9               	JUN CODE_ECH
    2860/     ADA : 45 AD               	JUN CODE_EDH
    2861/     ADC : 45 AE               	JUN CODE_EEH
    2862/     ADE : 45 C0               	JUN CODE_EFH
    2863/     AE0 : 45 C6               	JUN CODE_F0H
    2864/     AE2 : 45 CA               	JUN CODE_F1H
    2865/     AE4 : 45 D8               	JUN CODE_F2H
    2866/     AE6 : 45 DC               	JUN CODE_F3H
    2867/     AE8 : 45 DD               	JUN CODE_F4H
    2868/     AEA : 45 E1               	JUN CODE_F5H
    2869/     AEC : 45 F3               	JUN CODE_F6H
    2870/     AEE : 46 05               	JUN CODE_F7H
    2871/     AF0 : 46 0B               	JUN CODE_F8H
    2872/     AF2 : 46 0F               	JUN CODE_F9H
    2873/     AF4 : 46 15               	JUN CODE_FAH
    2874/     AF6 : 46 19               	JUN CODE_FBH
    2875/     AF8 : 46 1A               	JUN CODE_FCH
    2876/     AFA : 46 1E               	JUN CODE_FDH
    2877/     AFC : 46 1F               	JUN CODE_FEH
    2878/     AFE : 46 2F               	JUN CODE_FFH
    2879/     B00 :                     
    2880/     B00 :                     	org 0B00H
    2881/     B00 :                     ;;;----------------------------------------------------------------------------
    2882/     B00 :                     ;;; PUSH_P0, P1, P2
    2883/     B00 :                     ;;; POP_P0, P1, P2
    2884/     B00 :                     ;;; Push and Pop an 8bit register pair
    2885/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2886/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    2887/     B00 :                     ;;; destroy P7, P6
    2888/     B00 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/04/03  9:19:43


    2889/     B00 :                     
    2890/     B00 :                     PUSHP	macro ThisR0, ThisR1
    2891/     B00 :                     	LD SP_LO
    2892/     B00 :                     	DAC
    2893/     B00 :                     	XCH SP_LO		; --sp.3210
    2894/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    2895/     B00 :                     	LD SP_HI
    2896/     B00 :                     	DAC
    2897/     B00 :                     	XCH SP_HI		; --sp.7654
    2898/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    2899/     B00 :                     	SRC SP
    2900/     B00 :                     	LD ThisR0
    2901/     B00 :                     	WRM			; (sp)=R0
    2902/     B00 :                     
    2903/     B00 :                     	LD SP_LO
    2904/     B00 :                     	DAC
    2905/     B00 :                     	XCH SP_LO		; --sp.3210
    2906/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    2907/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    2908/     B00 :                     ;;;	LD SP_HI
    2909/     B00 :                     ;;;	DAC
    2910/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
    2911/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    2912/     B00 :                     	SRC SP
    2913/     B00 :                     	LD ThisR1
    2914/     B00 :                     	WRM			; (sp)=R1
    2915/     B00 :                     
    2916/     B00 :                     	BBL 0
    2917/     B00 :                     	endm
    2918/     B00 :                     ;;;----------------------------------------------------------------------------
    2919/     B00 :                     POPP	macro ThisR0, ThisR1
    2920/     B00 :                     	SRC SP
    2921/     B00 :                     	RDM
    2922/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    2923/     B00 :                     	INC SP_LO		; sp.3210++
    2924/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    2925/     B00 :                     	SRC SP
    2926/     B00 :                     	RDM
    2927/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    2928/     B00 :                     	INC SP_LO		; sp.3210++
    2929/     B00 :                     	LD SP_LO
    2930/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    2931/     B00 :                     	INC SP_HI		; sp.7654++
    2932/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    2933/     B00 :                     	BBL 0
    2934/     B00 :                     	endm
    2935/     B00 :                     ;;;----------------------------------------------------------------------------
    2936/     B00 :                     ;;;----------------------------------------------------------------------------
    2937/     B00 :                     ;;; Generate real codes from macros
    2938/     B00 :                     ;;;----------------------------------------------------------------------------
    2939/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    2939/     B00 : A9                          LD SP_LO
    2939/     B01 : F8                          DAC
    2939/     B02 : B9                          XCH SP_LO               ; --sp.3210
    2939/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    2939/     B05 : A8                          LD SP_HI
    2939/     B06 : F8                          DAC
    2939/     B07 : B8                          XCH SP_HI               ; --sp.7654
    2939/     B08 :                     PUSH_NOBORROW_R0_R1:
    2939/     B08 : 29                          SRC SP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/04/03  9:19:43


    2939/     B09 : A0                          LD R0
    2939/     B0A : E0                          WRM                     ; (sp)=R0
    2939/     B0B :                     
    2939/     B0B : A9                          LD SP_LO
    2939/     B0C : F8                          DAC
    2939/     B0D : B9                          XCH SP_LO               ; --sp.3210
    2939/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    2939/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    2939/     B0E :                     ;;;     LD SP_HI
    2939/     B0E :                     ;;;     DAC
    2939/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    2939/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    2939/     B0E : 29                          SRC SP
    2939/     B0F : A1                          LD R1
    2939/     B10 : E0                          WRM                     ; (sp)=R1
    2939/     B11 :                     
    2939/     B11 : C0                          BBL 0
    2940/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    2940/     B12 : A9                          LD SP_LO
    2940/     B13 : F8                          DAC
    2940/     B14 : B9                          XCH SP_LO               ; --sp.3210
    2940/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
    2940/     B17 : A8                          LD SP_HI
    2940/     B18 : F8                          DAC
    2940/     B19 : B8                          XCH SP_HI               ; --sp.7654
    2940/     B1A :                     PUSH_NOBORROW_R2_R3:
    2940/     B1A : 29                          SRC SP
    2940/     B1B : A2                          LD R2
    2940/     B1C : E0                          WRM                     ; (sp)=R0
    2940/     B1D :                     
    2940/     B1D : A9                          LD SP_LO
    2940/     B1E : F8                          DAC
    2940/     B1F : B9                          XCH SP_LO               ; --sp.3210
    2940/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    2940/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    2940/     B20 :                     ;;;     LD SP_HI
    2940/     B20 :                     ;;;     DAC
    2940/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    2940/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    2940/     B20 : 29                          SRC SP
    2940/     B21 : A3                          LD R3
    2940/     B22 : E0                          WRM                     ; (sp)=R1
    2940/     B23 :                     
    2940/     B23 : C0                          BBL 0
    2941/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    2941/     B24 : A9                          LD SP_LO
    2941/     B25 : F8                          DAC
    2941/     B26 : B9                          XCH SP_LO               ; --sp.3210
    2941/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
    2941/     B29 : A8                          LD SP_HI
    2941/     B2A : F8                          DAC
    2941/     B2B : B8                          XCH SP_HI               ; --sp.7654
    2941/     B2C :                     PUSH_NOBORROW_R4_R5:
    2941/     B2C : 29                          SRC SP
    2941/     B2D : A4                          LD R4
    2941/     B2E : E0                          WRM                     ; (sp)=R0
    2941/     B2F :                     
    2941/     B2F : A9                          LD SP_LO
    2941/     B30 : F8                          DAC
    2941/     B31 : B9                          XCH SP_LO               ; --sp.3210
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/04/03  9:19:43


    2941/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    2941/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    2941/     B32 :                     ;;;     LD SP_HI
    2941/     B32 :                     ;;;     DAC
    2941/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    2941/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    2941/     B32 : 29                          SRC SP
    2941/     B33 : A5                          LD R5
    2941/     B34 : E0                          WRM                     ; (sp)=R1
    2941/     B35 :                     
    2941/     B35 : C0                          BBL 0
    2942/     B36 : (MACRO)              POP_P0: POPP R0, R1
    2942/     B36 : 29                          SRC SP
    2942/     B37 : E9                          RDM
    2942/     B38 : B1                          XCH R1              ; R1=(sp)
    2942/     B39 : 69                          INC SP_LO               ; sp.3210++
    2942/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    2942/     B3A : 29                          SRC SP
    2942/     B3B : E9                          RDM
    2942/     B3C : B0                          XCH R0              ; R0=(sp)
    2942/     B3D : 69                          INC SP_LO               ; sp.3210++
    2942/     B3E : A9                          LD SP_LO
    2942/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    2942/     B41 : 68                          INC SP_HI               ; sp.7654++
    2942/     B42 :                     POP_NOCARRY_R0_R1:
    2942/     B42 : C0                          BBL 0
    2943/     B43 : (MACRO)              POP_P1: POPP R2, R3
    2943/     B43 : 29                          SRC SP
    2943/     B44 : E9                          RDM
    2943/     B45 : B3                          XCH R3              ; R3=(sp)
    2943/     B46 : 69                          INC SP_LO               ; sp.3210++
    2943/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    2943/     B47 : 29                          SRC SP
    2943/     B48 : E9                          RDM
    2943/     B49 : B2                          XCH R2              ; R2=(sp)
    2943/     B4A : 69                          INC SP_LO               ; sp.3210++
    2943/     B4B : A9                          LD SP_LO
    2943/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    2943/     B4E : 68                          INC SP_HI               ; sp.7654++
    2943/     B4F :                     POP_NOCARRY_R2_R3:
    2943/     B4F : C0                          BBL 0
    2944/     B50 : (MACRO)              POP_P2: POPP R4, R5
    2944/     B50 : 29                          SRC SP
    2944/     B51 : E9                          RDM
    2944/     B52 : B5                          XCH R5              ; R5=(sp)
    2944/     B53 : 69                          INC SP_LO               ; sp.3210++
    2944/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    2944/     B54 : 29                          SRC SP
    2944/     B55 : E9                          RDM
    2944/     B56 : B4                          XCH R4              ; R4=(sp)
    2944/     B57 : 69                          INC SP_LO               ; sp.3210++
    2944/     B58 : A9                          LD SP_LO
    2944/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    2944/     B5B : 68                          INC SP_HI               ; sp.7654++
    2944/     B5C :                     POP_NOCARRY_R4_R5:
    2944/     B5C : C0                          BBL 0
    2945/     B5D :                     
    2946/     B5D :                     ;;;	org 0B00H
    2947/     B5D :                     ;;;---------------------------------------------------------------------------
    2948/     B5D :                     ;;; PM16
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/04/03  9:19:43


    2949/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    2950/     B5D :                     ;;; 
    2951/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    2952/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    2953/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    2954/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    2955/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    2956/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    2957/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    2958/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
    2959/     B5D :                     ;;; 
    2960/     B5D :                     ;;;    PM12(BA98.7654.3210)
    2961/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    2962/     B5D :                     ;;; 
    2963/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    2964/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    2965/     B5D :                     ;;;   (for debug with 256 x 16bank)
    2966/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    2967/     B5D :                     ;;;---------------------------------------------------------------------------
    2968/     B5D :                     ;;;---------------------------------------------------------------------------
    2969/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    2970/     B5D :                     ;;; P1 = PM16(REG(P0)++)
    2971/     B5D :                     ;;; destroy: P6, P7
    2972/     B5D :                     ;;;---------------------------------------------------------------------------
    2973/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    2974/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    2974/     B5D : A0                                  LD P0_HI
    2974/     B5E : BC                                  XCH P6_HI
    2974/     B5F : A1                                  LD P0_LO
    2974/     B60 : BD                                  XCH P6_LO
    2975/     B61 : 2D                  	SRC P6
    2976/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    2977/     B63 :                     
    2978/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    2979/     B65 : 2F                  	SRC P7
    2980/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    2981/     B67 :                     
    2982/     B67 : 6D                  	INC P6_LO
    2983/     B68 : 2D                  	SRC P6
    2984/     B69 : E9                  	RDM
    2985/     B6A : B1                  	XCH P0_LO		; P0_LO=REG(P0).bit7654
    2986/     B6B :                     	
    2987/     B6B : 6D                  	INC P6_LO
    2988/     B6C : 2D                  	SRC P6
    2989/     B6D : E9                  	RDM
    2990/     B6E : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitBA98
    2991/     B6F :                     
    2992/     B6F : 6D                  	INC P6_LO
    2993/     B70 : 2D                  	SRC P6
    2994/     B71 : E9                  	RDM
    2995/     B72 :                     
    2996/     B72 : 2E 40               	FIM P7, CHIP_PMSELECT1
    2997/     B74 : 2F                  	SRC P7
    2998/     B75 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    2999/     B76 :                     
    3000/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3001/     B78 :                     
    3002/     B78 : AC                  	LD P6_HI			; restore P0
    3003/     B79 : B0                  	XCH P0_HI
    3004/     B7A : AD                  	LD P6_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/04/03  9:19:43


    3005/     B7B : F8                  	DAC
    3006/     B7C : F8                  	DAC
    3007/     B7D : F8                  	DAC
    3008/     B7E : B1                  	XCH P0_LO
    3009/     B7F : 48 36               	JUN INC_REG16P0
    3010/     B81 :                     ;;;	BBL 0
    3011/     B81 :                     
    3012/     B81 :                     ;;;---------------------------------------------------------------------------
    3013/     B81 :                     ;;; LD_PM16REG16P0_P1
    3014/     B81 :                     ;;; PM16(REG(P0)) = P1
    3015/     B81 :                     ;;; 
    3016/     B81 :                     ;;; destroy: P7
    3017/     B81 :                     ;;;---------------------------------------------------------------------------
    3018/     B81 :                     LD_PM16REG16P0_P1:
    3019/     B81 : 21                  	SRC P0
    3020/     B82 : E9                  	RDM			; bit3210 of REG(P0)
    3021/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3022/     B85 : 2F                  	SRC P7
    3023/     B86 : E1                  	WMP			; set bank to REG(P0).bit3210
    3024/     B87 :                     
    3025/     B87 :                     
    3026/     B87 : 61                  	INC P0_LO
    3027/     B88 : 21                  	SRC P0
    3028/     B89 : E9                  	RDM			; bit7654 of REG(P0)
    3029/     B8A : BD                  	XCH P6_LO		; R13 = REG(P0).bit7654
    3030/     B8B :                     
    3031/     B8B : 61                  	INC P0_LO
    3032/     B8C : 21                  	SRC P0
    3033/     B8D : E9                  	RDM
    3034/     B8E : BC                  	XCH P6_HI		; R12 = REG(P0).bitBA98
    3035/     B8F :                     	
    3036/     B8F : 61                  	INC P0_LO
    3037/     B90 : 21                  	SRC P0
    3038/     B91 : E9                  	RDM
    3039/     B92 :                     
    3040/     B92 : 2E 40               	FIM P7, CHIP_PMSELECT1
    3041/     B94 : 2F                  	SRC P7
    3042/     B95 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    3043/     B96 :                     
    3044/     B96 : 2D                  	SRC P6
    3045/     B97 : A3                  	LD P1_LO
    3046/     B98 : E3                  	WPM
    3047/     B99 : A2                  	LD P1_HI
    3048/     B9A : E3                  	WPM
    3049/     B9B :                     	
    3050/     B9B : A1                  	LD R1			; restore P0
    3051/     B9C : F8                  	DAC
    3052/     B9D : F8                  	DAC
    3053/     B9E : F8                  	DAC
    3054/     B9F : B1                  	XCH R1
    3055/     BA0 : C0                  	BBL 0
    3056/     BA1 :                     
    3057/     BA1 :                     ;;;----------------------------------------------------------------------------
    3058/     BA1 :                     ;;; Subroutines for program memory operation
    3059/     BA1 :                     ;;;----------------------------------------------------------------------------
    3060/     BA1 :                     ;;;---------------------------------------------------------------------------
    3061/     BA1 :                     ;;; PM_WRITE_P0_P1
    3062/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3063/     BA1 :                     ;;; (0F00H+P0) = P1
    3064/     BA1 :                     ;;; input: P0, P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/04/03  9:19:43


    3065/     BA1 :                     ;;; output: none
    3066/     BA1 :                     ;;;---------------------------------------------------------------------------
    3067/     BA1 :                     PM_WRITE_P0_P1:
    3068/     BA1 : 21                  	SRC P0
    3069/     BA2 : A3                  	LD P1_LO
    3070/     BA3 : E3                  	WPM			; write lower 4bit
    3071/     BA4 : A2                  	LD P1_HI
    3072/     BA5 : E3                  	WPM			; write higher 4bit
    3073/     BA6 : C0                  	BBL 0
    3074/     BA7 :                     
    3075/     BA7 :                     ;;;---------------------------------------------------------------------------
    3076/     BA7 :                     ;;; PM_WRITE_P6_P7
    3077/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3078/     BA7 :                     ;;; (0F00H+P6) = P7
    3079/     BA7 :                     ;;; input: P6, P7
    3080/     BA7 :                     ;;; output: none
    3081/     BA7 :                     ;;;---------------------------------------------------------------------------
    3082/     BA7 :                     PM_WRITE_P6_P7:
    3083/     BA7 : 2D                  	SRC P6
    3084/     BA8 : AF                  	LD P7_LO
    3085/     BA9 : E3                  	WPM			; write lower 4bit
    3086/     BAA : AE                  	LD P7_HI
    3087/     BAB : E3                  	WPM			; write higher 4bit
    3088/     BAC : C0                  	BBL 0
    3089/     BAD :                     
    3090/     BAD :                     ;;;---------------------------------------------------------------------------
    3091/     BAD :                     ;;; PM_INIT_BANK
    3092/     BAD :                     ;;; initialization for program memory (RAM)
    3093/     BAD :                     ;;; Write a subroutne code for reading memory
    3094/     BAD :                     ;;; destroy: P6, P7
    3095/     BAD :                     ;;;---------------------------------------------------------------------------
    3096/     BAD :                     PM_INIT_BANK:	
    3097/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3098/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3099/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3100/     BB3 : 6D                  	INC P6_LO
    3101/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3102/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3103/     BB8 : C0                  	BBL 0
    3104/     BB9 :                     
    3105/     BB9 :                     ;;;---------------------------------------------------------------------------
    3106/     BB9 :                     ;;; PM_SELECTPMB_P1
    3107/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3108/     BB9 :                     ;;; destroy: P7
    3109/     BB9 :                     ;;;---------------------------------------------------------------------------
    3110/     BB9 :                     PM_SELECTPMB_P1:
    3111/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3112/     BBB : 2F                  	SRC P7
    3113/     BBC : A3                  	LD P1_LO
    3114/     BBD : E1                  	WMP
    3115/     BBE :                     
    3116/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3117/     BC0 : 2F                  	SRC P7
    3118/     BC1 : A2                  	LD P1_HI
    3119/     BC2 : E1                  	WMP
    3120/     BC3 : C0                  	BBL 0
    3121/     BC4 :                     ;;;----------------------------------------------------------------------------
    3122/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3123/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3124/     BC4 :                     ;;; The value of REG(P0) does not change
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/04/03  9:19:43


    3125/     BC4 :                     ;;;----------------------------------------------------------------------------
    3126/     BC4 :                     GETLINE_PM16REG16P0:
    3127/     BC4 : 5B 00               	JMS PUSH_P0
    3128/     BC6 : 5B 12               	JMS PUSH_P1
    3129/     BC8 :                     
    3130/     BC8 : 22 30               	FIM P1, REG16_MON_TMP
    3131/     BCA : 57 3D               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3132/     BCC :                     
    3133/     BCC :                     GETLINE_LOOP:
    3134/     BCC : 5C 35               	JMS GETCHAR_P1		; P1 = getchar()
    3135/     BCE :                     
    3136/     BCE : 5D 35               	JMS ISCRLF_P1
    3137/     BD0 : 14 D8               	JCN Z, GETLINE_L1
    3138/     BD2 : 5C AA               	JMS PRINT_CR
    3139/     BD4 : 5C AE               	JMS PRINT_LF
    3140/     BD6 : 4B FC               	JUN GETLINE_EXIT
    3141/     BD8 :                     GETLINE_L1:
    3142/     BD8 : 2E 08               	FIM P7, 08H		; backspace
    3143/     BDA : 5D 20               	JMS CMP_P1P7
    3144/     BDC : 14 E0               	JCN Z, GETLINE_BS
    3145/     BDE : 4B F4               	JUN GETLINE_INSERTCHAR
    3146/     BE0 :                     GETLINE_BS:
    3147/     BE0 : 22 30               	FIM P1, REG16_MON_TMP
    3148/     BE2 : 58 57               	JMS CMP_REG16P0_REG16P1
    3149/     BE4 : 1C E8               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3150/     BE6 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3151/     BE8 :                     GETLINE_DO_BS:			; delete a character on the cursor
    3152/     BE8 : 58 46               	JMS DEC_REG16P0		; REG(P0)--
    3153/     BEA :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3154/     BEA : 22 08               	FIM P1, 08H
    3155/     BEC : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3156/     BEE : 5C 96               	JMS PRINT_SPC		; put ' '
    3157/     BF0 : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3158/     BF2 :                     
    3159/     BF2 : 4B CC               	JUN GETLINE_LOOP
    3160/     BF4 :                     GETLINE_INSERTCHAR:
    3161/     BF4 : 5C 5D               	JMS PUTCHAR_P1
    3162/     BF6 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3163/     BF8 : 58 36               	JMS INC_REG16P0		; REG(P0)++
    3164/     BFA :                     	
    3165/     BFA : 4B CC               	JUN GETLINE_LOOP
    3166/     BFC :                     GETLINE_EXIT:
    3167/     BFC : 22 00               	FIM P1, 00H
    3168/     BFE : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3169/     C00 :                     
    3170/     C00 : 22 30               	FIM P1, REG16_MON_TMP
    3171/     C02 : 57 33               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3172/     C04 : 5B 43               	JMS POP_P1		; restore P1
    3173/     C06 : 4B 36               	JUN POP_P0		; restore P0
    3174/     C08 :                     ;;;	BBL 0
    3175/     C08 :                     
    3176/     C08 :                     ;;;----------------------------------------------------------------------------
    3177/     C08 :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3178/     C08 :                     ;;; Print a string 
    3179/     C08 :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3180/     C08 :                     ;;; REG(INDEX) is incremented to
    3181/     C08 :                     ;;;	the end of the string
    3182/     C08 :                     ;;; 
    3183/     C08 :                     ;;; destroy: P6, P7
    3184/     C08 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/04/03  9:19:43


    3185/     C08 :                     PRINTSTR_PM16REG16P0:
    3186/     C08 : 5B 12               	JMS PUSH_P1
    3187/     C0A :                     PRINTSTR_LOOP:
    3188/     C0A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3189/     C0C : 5D 2D               	JMS ISZEROORNOT_P1
    3190/     C0E : 14 14               	JCN Z, PRINTSTR_EXIT
    3191/     C10 : 5C 5D               	JMS PUTCHAR_P1
    3192/     C12 : 4C 0A               	JUN PRINTSTR_LOOP
    3193/     C14 :                     PRINTSTR_EXIT:
    3194/     C14 : 4B 43               	JUN POP_P1
    3195/     C16 :                     ;;;	BBL 0
    3196/     C16 :                     
    3197/     C16 :                     ;;;----------------------------------------------------------------------------
    3198/     C16 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3199/     C16 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3200/     C16 :                     ;;; and increment the pointer
    3201/     C16 :                     ;;; output: P1
    3202/     C16 :                     ;;; ACC=0 get number success
    3203/     C16 :                     ;;; ACC=1 no number, P1=first character
    3204/     C16 :                     ;;; destroy: P6, P7
    3205/     C16 :                     ;;;----------------------------------------------------------------------------
    3206/     C16 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
    3207/     C16 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3208/     C18 : 5C E9               	JMS ISHEX_P1
    3209/     C1A : 1C 1D               	JCN ZN, GETHEXBYTE_L1
    3210/     C1C : C1                  	BBL 1			; no hex number and exit
    3211/     C1D :                     GETHEXBYTE_L1:	
    3212/     C1D : 5B 24               	JMS PUSH_P2
    3213/     C1F : 5D 14               	JMS CTOI_P1
    3214/     C21 : A3                  	LD  P1_LO
    3215/     C22 : B4                  	XCH P2_HI			; save for upper digit
    3216/     C23 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3217/     C25 : 5C E9               	JMS ISHEX_P1
    3218/     C27 : 14 2F               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3219/     C29 : 5D 14               	JMS CTOI_P1
    3220/     C2B : A4                  	LD P2_HI
    3221/     C2C : B2                  	XCH P1_HI
    3222/     C2D : 4B 50               	JUN POP_P2
    3223/     C2F :                     ;;;	BBL 0
    3224/     C2F :                     GETHEXZBYTE_1DIGIT_EXIT:
    3225/     C2F : F0                  	CLB
    3226/     C30 : B2                  	XCH P1_HI
    3227/     C31 : A4                  	LD P2_HI
    3228/     C32 : B3                  	XCH P1_LO
    3229/     C33 : 4B 50               	JUN POP_P2
    3230/     C35 :                     ;;;	BBL 0
    3231/     C35 :                     	
    3232/     C35 :                     ;;;----------------------------------------------------------------------------
    3233/     C35 :                     ;;; I/O and some basic routines located in Page 0D00H
    3234/     C35 :                     ;;;----------------------------------------------------------------------------
    3235/     C35 :                     ;;;	org 0C00H
    3236/     C35 :                     ;;;---------------------------------------------------------------------------
    3237/     C35 :                     ;;; Software UART Routine
    3238/     C35 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3239/     C35 :                     ;;; defined in separated file
    3240/     C35 :                     ;;;---------------------------------------------------------------------------
    3241/     C35 :                     ;;; supported baudrates are 4800bps or 9600bps
    3242/     C35 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3243/     C35 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3244/     C35 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/04/03  9:19:43


    3245/     C35 : =2580H               	switch BAUDRATE
    3246/     C35 : =>FALSE              	case 4800
    3247/     C35 :                     	include "4800bps.inc"
    3248/     C35 : =>TRUE               	case 9600
    3249/     C35 :                     	include "9600bps.inc"
(1)    1/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C35 :                     ;;; getchar and putchar functions
(1)    3/     C35 :                     ;;; baud rate = 9600bps
(1)    4/     C35 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    6/     C35 :                     
(1)    7/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C35 :                     ;;; GETCHAR_P1
(1)    9/     C35 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C35 :                     ;;;
(1)   11/     C35 :                     ;;; Input: none
(1)   12/     C35 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     C35 :                     ;;; Working: P6, P7
(1)   14/     C35 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C35 :                     ;;; 
(1)   16/     C35 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C35 :                     ;;; 
(1)   18/     C35 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C35 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C35 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C35 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C35 :                     ;;;               |->phase delay
(1)   23/     C35 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C35 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C35 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C35 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C35 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C35 :                     
(1)   29/     C35 :                     GETCHAR_P1:
(1)   30/     C35 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C37 :                                                     ; 
(1)   32/     C37 : 19 37                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C39 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3B : 7F 3B               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3D :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3D :                     GETCHAR_L1:
(1)   37/     C3D : 19 42               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C3F : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C40 : 4C 45                       JUN GETCHAR_L3          ;<2>
(1)   40/     C42 :                     GETCHAR_L2:
(1)   41/     C42 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C43 : 00                          NOP                     ;[1]
(1)   43/     C44 : 00                          NOP                     ;[1]
(1)   44/     C45 :                     GETCHAR_L3:
(1)   45/     C45 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C46 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C47 : 7D 3D                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     C49 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C49 : B3                  	XCH R3                  ;(1)
(1)   50/     C4A : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4C :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4C :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4C :                     GETCHAR_L4:
(1)   54/     C4C : 19 51               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C4E : F1                          CLC                     ;<1> TEST="0" then CY=0
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 65 - 2023/04/03  9:19:43


(1)   56/     C4F : 4C 54                       JUN GETCHAR_L6          ;<2>
(1)   57/     C51 :                     GETCHAR_L5:
(1)   58/     C51 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C52 : 00                          NOP                     ;[1]
(1)   60/     C53 : 00                          NOP                     ;[1]
(1)   61/     C54 :                     GETCHAR_L6:
(1)   62/     C54 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C55 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C56 : 7D 4C                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C58 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     C58 : B2                  	XCH R2                  ;(1)
(1)   67/     C59 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C59 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C59 :                     	;; check stop bit
(1)   70/     C59 : 19 5C                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5B : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5C :                     GETCHAR_OK:
(1)   73/     C5C : C0                  	BBL 0
(1)   74/     C5D :                                     
(1)   75/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5D :                     ;;; PUTCHAR_P1
(1)   77/     C5D :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     C5D :                     ;;; 
(1)   79/     C5D :                     ;;; Input: P1(R2,R3)
(1)   80/     C5D :                     ;;; Output: ACC=0
(1)   81/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5D :                     ;;; P1 is not affected
(1)   84/     C5D :                     ;;; 
(1)   85/     C5D :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5D :                     ;;; 
(1)   87/     C5D :                     ;;; Input: P1(R2,R3)
(1)   88/     C5D :                     ;;; Output: ACC=0
(1)   89/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5D :                     ;;; 
(1)   93/     C5D :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5D :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5D :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5D :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5D :                     
(1)   99/     C5D :                     PUTCHAR_P1:
(1)  100/     C5D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5D :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5D :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5D : [100]                	endif
(1)  104/     C5D :                     	
(1)  105/     C5D : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C5F : 2F                  	SRC P7              ; set port address
(1)  107/     C60 :                     
(1)  108/     C60 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C62 : A3                          LD R3
(1)  110/     C63 : F1                          CLC                 ; start bit is 0
(1)  111/     C64 : F5                          RAL
(1)  112/     C65 :                                     
(1)  113/     C65 :                     PUTCHAR_L1:
(1)  114/     C65 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C66 : 00                          NOP                 ;(1)
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 66 - 2023/04/03  9:19:43


(1)  116/     C67 : 00                          NOP                 ;(1)
(1)  117/     C68 : 00                          NOP                 ;(1)
(1)  118/     C69 : 00                          NOP                 ;(1)
(1)  119/     C6A : E1                          WMP                 ;(1)
(1)  120/     C6B : F6                          RAR                 ;(1)
(1)  121/     C6C : 7D 65                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C6E :                     	
(1)  123/     C6E : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C70 : A2                          LD R2               ;(1)
(1)  125/     C71 : FA                          STC                 ;(1) stop bit is 1
(1)  126/     C72 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C73 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C74 :                     PUTCHAR_L2:
(1)  129/     C74 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C75 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C77 : 7F 77                       ISZ R15, $          ;(4)
(1)  132/     C79 : F6                          RAR                 ;(1)
(1)  133/     C7A : 7D 74                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7C :                     	
(1)  135/     C7C : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7C :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7C :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     C7C : [135]                	endif
(1)  139/     C7C :                     	
(1)  140/     C7C : C0                          BBL 0
(1)  141/     C7D :                     
(1)  142/     C7D :                     
    3250/     C7D : [3245]               	endcase
    3251/     C7D :                     
    3252/     C7D :                     ;;;---------------------------------------------------------------------------
    3253/     C7D :                     ;;; INIT_SERIAL
    3254/     C7D :                     ;;; Initialize serial port
    3255/     C7D :                     ;;;---------------------------------------------------------------------------
    3256/     C7D :                     INIT_SERIAL:
    3257/     C7D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3258/     C7D :                     	LDM BANK_SERIAL	    ; bank of output port
    3259/     C7D :                     	DCL		    ; set port bank
    3260/     C7D : [3257]               	endif
    3261/     C7D :                     	
    3262/     C7D : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3263/     C7F : 2F                  	SRC P7		    ; set port address
    3264/     C80 : D1                  	LDM 1
    3265/     C81 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3266/     C82 :                     
    3267/     C82 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3268/     C82 :                     	LDM BANK_DEFAULT    
    3269/     C82 :                     	DCL		    ; restore bank to default
    3270/     C82 : [3267]               	endif
    3271/     C82 :                     	
    3272/     C82 : C0                  	BBL 0
    3273/     C83 :                     
    3274/     C83 :                     ;;;----------------------------------------------------------------------------
    3275/     C83 :                     ;;; PRINTHEX_P1
    3276/     C83 :                     ;;; Print 8bit register pair in HEX format
    3277/     C83 :                     ;;; PRINT HEX
    3278/     C83 :                     ;;; destroy: P6, P7
    3279/     C83 :                     ;;;----------------------------------------------------------------------------
    3280/     C83 :                     PRINTHEX_P1:
    3281/     C83 : 5B 00               	JMS PUSH_P0
    3282/     C85 : 5B 12               	JMS PUSH_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 67 - 2023/04/03  9:19:43


    3283/     C87 : (MACRO)              	LD_P0_P1
    3283/     C87 : A2                                  LD P1_HI
    3283/     C88 : B0                                  XCH P0_HI
    3283/     C89 : A3                                  LD P1_LO
    3283/     C8A : B1                                  XCH P0_LO
    3284/     C8B : A0                  	LD R0
    3285/     C8C : 5C B2               	JMS PRINT_ACC		; print upper 4bit
    3286/     C8E : A1                  	LD R1
    3287/     C8F : 5C B2               	JMS PRINT_ACC		; print lower 4bit
    3288/     C91 : 5B 43               	JMS POP_P1
    3289/     C93 : 5B 36               	JMS POP_P0
    3290/     C95 : C0                  	BBL 0
    3291/     C96 :                     
    3292/     C96 :                     ;;;---------------------------------------------------------------------------
    3293/     C96 :                     ;;; PRINT_SPC
    3294/     C96 :                     ;;; print " "
    3295/     C96 :                     ;;; destroy: ACC
    3296/     C96 :                     ;;; This routine consumes 2 PC stack
    3297/     C96 :                     ;;;---------------------------------------------------------------------------
    3298/     C96 :                     PRINT_SPC:
    3299/     C96 : 5B 12               	JMS PUSH_P1
    3300/     C98 : 22 20               	FIM P1, ' '
    3301/     C9A : 5C 5D               	JMS PUTCHAR_P1
    3302/     C9C : 4B 43               	JUN POP_P1
    3303/     C9E :                     ;;;	BBL 0
    3304/     C9E :                     
    3305/     C9E :                     ;;;---------------------------------------------------------------------------
    3306/     C9E :                     ;;; PRINT_CRLF
    3307/     C9E :                     ;;; print "\r\n"
    3308/     C9E :                     ;;; destroy: ACC
    3309/     C9E :                     ;;; This routine consumes 2 PC stack
    3310/     C9E :                     ;;;---------------------------------------------------------------------------
    3311/     C9E :                     PRINT_CRLF:
    3312/     C9E : 5B 12               	JMS PUSH_P1
    3313/     CA0 : 22 0D               	FIM P1, '\r'
    3314/     CA2 : 5C 5D               	JMS PUTCHAR_P1
    3315/     CA4 : 22 0A               	FIM P1, '\n'
    3316/     CA6 : 5C 5D               	JMS PUTCHAR_P1
    3317/     CA8 : 4B 43               	JUN POP_P1
    3318/     CAA :                     ;;;	BBL 0
    3319/     CAA :                     
    3320/     CAA :                     ;;;---------------------------------------------------------------------------
    3321/     CAA :                     ;;; PRINT_CR
    3322/     CAA :                     ;;; print "\r"
    3323/     CAA :                     ;;; destroy: P1, ACC
    3324/     CAA :                     ;;; This routine consumes 1 PC stack
    3325/     CAA :                     ;;;---------------------------------------------------------------------------
    3326/     CAA :                     PRINT_CR:
    3327/     CAA : 22 0D               	FIM P1, '\r'
    3328/     CAC : 4C 5D               	JUN PUTCHAR_P1
    3329/     CAE :                     
    3330/     CAE :                     ;;;---------------------------------------------------------------------------
    3331/     CAE :                     ;;; PRINT_LF
    3332/     CAE :                     ;;; print "\n"
    3333/     CAE :                     ;;; destroy: P1, ACC
    3334/     CAE :                     ;;; This routine consumes 1 PC stack
    3335/     CAE :                     ;;;---------------------------------------------------------------------------
    3336/     CAE :                     PRINT_LF:
    3337/     CAE : 22 0A               	FIM P1, '\n'
    3338/     CB0 : 4C 5D               	JUN PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 68 - 2023/04/03  9:19:43


    3339/     CB2 :                     
    3340/     CB2 :                     ;;;---------------------------------------------------------------------------
    3341/     CB2 :                     ;;; PRINT_ACC
    3342/     CB2 :                     ;;; print contents of ACC('0'...'F') as a character
    3343/     CB2 :                     ;;; destroy: P1, P6, P7, ACC
    3344/     CB2 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3345/     CB2 :                     ;;;---------------------------------------------------------------------------
    3346/     CB2 :                     PRINT_ACC:
    3347/     CB2 : 22 30               	FIM P1, '0'
    3348/     CB4 : F1                  	CLC			; clear carry
    3349/     CB5 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3350/     CB6 : 1A BA               	JCN CN, PRINTACC_L1
    3351/     CB8 : 62                  	INC P1_HI
    3352/     CB9 : F2                  	IAC
    3353/     CBA :                     PRINTACC_L1:	
    3354/     CBA : B3                  	XCH P1_LO		; P1_LO<-ACC
    3355/     CBB : 4C 5D               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3356/     CBD :                     
    3357/     CBD :                     ;;;----------------------------------------------------------------------------
    3358/     CBD :                     ;;; INC_P1
    3359/     CBD :                     ;;; P1=P1+1
    3360/     CBD :                     ;;;----------------------------------------------------------------------------
    3361/     CBD :                     INC_P1:	
    3362/     CBD : 63                  	INC P1_LO
    3363/     CBE : A3                  	LD P1_LO
    3364/     CBF : 1C C2               	JCN ZN, INC_P1_EXIT
    3365/     CC1 : 62                  	INC P1_HI
    3366/     CC2 :                     INC_P1_EXIT:	
    3367/     CC2 : C0                  	BBL 0
    3368/     CC3 :                     
    3369/     CC3 :                     ;;;----------------------------------------------------------------------------
    3370/     CC3 :                     ;;; DEC_P1
    3371/     CC3 :                     ;;; P1=P1-1
    3372/     CC3 :                     ;;;----------------------------------------------------------------------------
    3373/     CC3 :                     DEC_P1:	
    3374/     CC3 : A3                  	LD P1_LO
    3375/     CC4 : F8                  	DAC
    3376/     CC5 : B3                  	XCH P1_LO
    3377/     CC6 : 12 CB               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3378/     CC8 : A2                  	LD P1_HI		; decrement upper 4bit
    3379/     CC9 : F8                  	DAC
    3380/     CCA : B2                  	XCH P1_HI
    3381/     CCB :                     DEC_P1_EXIT:	
    3382/     CCB : C0                  	BBL 0
    3383/     CCC :                     	
    3384/     CCC :                     ;;;----------------------------------------------------------------------------
    3385/     CCC :                     ;;; ISALPHA_P1
    3386/     CCC :                     ;;; check P1 is an alphabet as a ascii character
    3387/     CCC :                     ;;; return: ACC=0 if P1 is not an alphabet
    3388/     CCC :                     ;;;	    ACC=1 if P1 is an alphabet
    3389/     CCC :                     ;;; destroy: P7
    3390/     CCC :                     ;;;----------------------------------------------------------------------------
    3391/     CCC :                     ISALPHA_P1:
    3392/     CCC :                     ISALPHA_L1:
    3393/     CCC : 2E 41               	FIM P7, 'A'
    3394/     CCE : 5D 20               	JMS CMP_P1P7
    3395/     CD0 : 12 D3               	JCN C, ISALPHA_L10
    3396/     CD2 : C0                  	BBL 0			; P1<'A'
    3397/     CD3 :                     ISALPHA_L10:
    3398/     CD3 : 2E 5B               	FIM P7, 'Z'+1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/04/03  9:19:43


    3399/     CD5 : 5D 20               	JMS CMP_P1P7
    3400/     CD7 : 12 DA               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3401/     CD9 : C1                  	BBL 1			; 'A'<=P1<='Z'
    3402/     CDA :                     ISALPHA_L2:
    3403/     CDA : 2E 61               	FIM P7, 'a'
    3404/     CDC : 5D 20               	JMS CMP_P1P7
    3405/     CDE : 12 E1               	JCN C, ISALPHA_L20
    3406/     CE0 : C0                  	BBL 0			; P1<'a'
    3407/     CE1 :                     ISALPHA_L20:	
    3408/     CE1 : 2E 7B               	FIM P7, 'z'+1
    3409/     CE3 : 5D 20               	JMS CMP_P1P7
    3410/     CE5 : 12 E8               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3411/     CE7 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3412/     CE8 :                     ISALPHA_FALSE:
    3413/     CE8 : C0                  	BBL 0
    3414/     CE9 :                     
    3415/     CE9 :                     ;;;----------------------------------------------------------------------------
    3416/     CE9 :                     ;;; ISHEX_P1
    3417/     CE9 :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3418/     CE9 :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3419/     CE9 :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3420/     CE9 :                     ;;; destroy: P7
    3421/     CE9 :                     ;;;----------------------------------------------------------------------------
    3422/     CE9 :                     ISHEX_P1:
    3423/     CE9 : 2E 30               	FIM P7, '0'
    3424/     CEB : 5D 20               	JMS CMP_P1P7
    3425/     CED : 12 F0               	JCN C, ISHEX_L00
    3426/     CEF : C0                  	BBL 0			; P1<'0'
    3427/     CF0 :                     ISHEX_L00:	
    3428/     CF0 : 2E 3A               	FIM P7, '9'+1
    3429/     CF2 : 5D 20               	JMS CMP_P1P7
    3430/     CF4 : 12 F7               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3431/     CF6 : C1                  	BBL 1			; '0'<=P1<='9'
    3432/     CF7 :                     ISHEX_L1:
    3433/     CF7 : 2E 41               	FIM P7, 'A'
    3434/     CF9 : 5D 20               	JMS CMP_P1P7
    3435/     CFB : 12 FE               	JCN C, ISHEX_L10
    3436/     CFD : C0                  	BBL 0			; P1<'A'
    3437/     CFE :                     ISHEX_L10:
    3438/     CFE : 2E 47               	FIM P7, 'F'+1
    3439/     D00 : 5D 20               	JMS CMP_P1P7
    3440/     D02 : 12 05               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3441/     D04 : C1                  	BBL 1			; 'A'<=P1<='F'
    3442/     D05 :                     ISHEX_L2:
    3443/     D05 : 2E 61               	FIM P7, 'a'
    3444/     D07 : 5D 20               	JMS CMP_P1P7
    3445/     D09 : 12 0C               	JCN C, ISHEX_L20
    3446/     D0B : C0                  	BBL 0			; P1<'a'
    3447/     D0C :                     ISHEX_L20:	
    3448/     D0C : 2E 67               	FIM P7, 'f'+1
    3449/     D0E : 5D 20               	JMS CMP_P1P7
    3450/     D10 : 12 13               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3451/     D12 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3452/     D13 :                     ISHEX_FALSE:
    3453/     D13 : C0                  	BBL 0
    3454/     D14 :                     
    3455/     D14 :                     ;;;---------------------------------------------------------------------------
    3456/     D14 :                     ;;; CTOI_P1
    3457/     D14 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3458/     D14 :                     ;;; no error check
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/04/03  9:19:43


    3459/     D14 :                     ;;; input: P1(R2R3)
    3460/     D14 :                     ;;; output: P1_LO, (P1_HI=0)
    3461/     D14 :                     ;;;---------------------------------------------------------------------------
    3462/     D14 :                     CTOI_P1:
    3463/     D14 : F0                  	CLB
    3464/     D15 : D3                  	LDM 3
    3465/     D16 : 92                  	SUB P1_HI
    3466/     D17 : 14 1D               	JCN Z, CTOI_09	; check upper 4bit
    3467/     D19 : F0                  	CLB
    3468/     D1A : D9                  	LDM 9
    3469/     D1B : 83                  	ADD P1_LO
    3470/     D1C : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3471/     D1D :                     CTOI_09:
    3472/     D1D : F0                  	CLB
    3473/     D1E : B2                  	XCH R2			; R2 = 0
    3474/     D1F : C0                  	BBL 0
    3475/     D20 :                     	
    3476/     D20 :                     ;;;---------------------------------------------------------------------------
    3477/     D20 :                     ;;; CMP_P1P7
    3478/     D20 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3479/     D20 :                     ;;; input: P1, P7
    3480/     D20 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3481/     D20 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3482/     D20 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3483/     D20 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3484/     D20 :                     ;;;---------------------------------------------------------------------------
    3485/     D20 :                     CMP_P1P7:
    3486/     D20 : F0                  	CLB
    3487/     D21 : A2                  	LD R2			
    3488/     D22 : 9E                  	SUB R14			;R2-R14
    3489/     D23 : 14 26               	JCN Z, CMP17_L1		; jump if R2==R14
    3490/     D25 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3491/     D26 :                     CMP17_L1:	
    3492/     D26 : F0                  	CLB
    3493/     D27 : A3                  	LD R3
    3494/     D28 : 9F                  	SUB R15			;R3-R15
    3495/     D29 : 14 2C               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3496/     D2B : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3497/     D2C :                     				; if P1>P7 then ACC=1, CY=1
    3498/     D2C :                     CMP17_EXIT01:
    3499/     D2C : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3500/     D2D :                     	
    3501/     D2D :                     ;;;---------------------------------------------------------------------------
    3502/     D2D :                      ;;; ISZEROORNOT_P1
    3503/     D2D :                     ;;; check P1 is zero or not
    3504/     D2D :                     ;;; Return 0 if P1 is 0
    3505/     D2D :                     ;;; return: ACC=0 if P1 == 0
    3506/     D2D :                     ;;;	    ACC=1 if P1 != 0
    3507/     D2D :                     ;;;---------------------------------------------------------------------------
    3508/     D2D :                     ISZEROORNOT_P1:
    3509/     D2D : A3                  	LD P1_LO
    3510/     D2E : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3511/     D30 : A2                  	LD P1_HI
    3512/     D31 : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3513/     D33 : C0                  	BBL 0
    3514/     D34 :                     ISZEROORNOT_EXIT1:
    3515/     D34 : C1                  	BBL 1
    3516/     D35 :                     
    3517/     D35 :                     ;;;---------------------------------------------------------------------------
    3518/     D35 :                     ;;; ISCRLF_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/04/03  9:19:43


    3519/     D35 :                     ;;; check if P1=='\r' | P1=='\n'
    3520/     D35 :                     ;;; input: P0
    3521/     D35 :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3522/     D35 :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3523/     D35 :                     ;;;---------------------------------------------------------------------------
    3524/     D35 :                     ISCRLF_P1:
    3525/     D35 : A2                  	LD R2
    3526/     D36 : 1C 42               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3527/     D38 : F1                  	CLC
    3528/     D39 : DD                  	LDM '\r'
    3529/     D3A : 93                  	SUB R3
    3530/     D3B : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3531/     D3D : F1                  	CLC
    3532/     D3E : DA                  	LDM '\n'
    3533/     D3F : 93                  	SUB R3
    3534/     D40 : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3535/     D42 :                     ISCRLF_EXIT0:
    3536/     D42 : C0                  	BBL 0
    3537/     D43 :                     ISCRLF_EXIT1:
    3538/     D43 : C1                  	BBL 1
    3539/     D44 :                     
    3540/     D44 :                     ;;;---------------------------------------------------------------------------
    3541/     D44 :                     ;;; TOUPPER_P1
    3542/     D44 :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3543/     D44 :                     ;;;---------------------------------------------------------------------------
    3544/     D44 :                     TOUPPER_P1:
    3545/     D44 : 5C CC               	JMS ISALPHA_P1
    3546/     D46 : 14 4F               	JCN Z, TOUPPER_P1_EXIT
    3547/     D48 : A2                  	LD P1_HI
    3548/     D49 : F6                  	RAR
    3549/     D4A : F6                  	RAR
    3550/     D4B : F1                  	CLC
    3551/     D4C : F5                  	RAL
    3552/     D4D : F5                  	RAL
    3553/     D4E : B2                  	XCH P1_HI
    3554/     D4F :                     TOUPPER_P1_EXIT:
    3555/     D4F : C0                  	BBL 0
    3556/     D50 :                     
    3557/     D50 :                     ;;;---------------------------------------------------------------------------
    3558/     D50 :                     ;;; PRINT_DATARAM_P0
    3559/     D50 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3560/     D50 :                     ;;;---------------------------------------------------------------------------
    3561/     D50 :                     PRINT_DATARAM_P0:
    3562/     D50 : A0                  	LD P0_HI		; PRINT ADDDR
    3563/     D51 : 5C B2               	JMS PRINT_ACC
    3564/     D53 : A1                  	LD P0_LO
    3565/     D54 : 5C B2               	JMS PRINT_ACC
    3566/     D56 : 22 3A               	FIM P1, ':'
    3567/     D58 : 5C 5D               	JMS PUTCHAR_P1
    3568/     D5A :                     CMDDD_L2:
    3569/     D5A : F0                  	CLB		; PRINT data characters
    3570/     D5B : 21                  	SRC P0		; set address
    3571/     D5C : E9                  	RDM		; read data memory
    3572/     D5D : 5C B2               	JMS PRINT_ACC
    3573/     D5F : 71 5A               	ISZ P0_LO, CMDDD_L2
    3574/     D61 :                     
    3575/     D61 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3576/     D63 : 5C 5D               	JMS PUTCHAR_P1
    3577/     D65 : 21                  	SRC P0		; set address
    3578/     D66 : EC                  	RD0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/04/03  9:19:43


    3579/     D67 : B2                  	XCH P1_HI
    3580/     D68 : ED                  	RD1
    3581/     D69 : B3                  	XCH P1_LO
    3582/     D6A : 5C 83               	JMS PRINTHEX_P1
    3583/     D6C : 21                  	SRC P0		; set address
    3584/     D6D : EE                  	RD2
    3585/     D6E : B2                  	XCH P1_HI
    3586/     D6F : EF                  	RD3
    3587/     D70 : B3                  	XCH P1_LO
    3588/     D71 : 5C 83               	JMS PRINTHEX_P1
    3589/     D73 : 4C 9E               	JUN PRINT_CRLF
    3590/     D75 :                     ;;;	BBL 0
    3591/     D75 :                     
    3592/     D75 :                     ;;;----------------------------------------------------------------------------
    3593/     D75 :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3594/     D75 :                     ;;; The string data sould be located in the same page as the print routine.
    3595/     D75 :                     ;;;----------------------------------------------------------------------------
    3596/     E00 :                     	org 0E00H
    3597/     E00 :                     ;;;----------------------------------------------------------------------------
    3598/     E00 :                     ;;; PRINTSTR_P0
    3599/     E00 :                     ;;; Print a string with a delimiter 00H
    3600/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3601/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3602/     E00 :                     ;;;----------------------------------------------------------------------------
    3603/     E00 :                     PRINTSTR_P0:
    3604/     E00 : 5B 00               	JMS PUSH_P0
    3605/     E02 : 5B 12               	JMS PUSH_P1
    3606/     E04 :                     PRINTSTRP0_LOOP:
    3607/     E04 : 32                  	FIN P1			; P1=(P0)
    3608/     E05 : A2                  	LD P1_HI
    3609/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3610/     E08 : A3                  	LD P1_LO
    3611/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3612/     E0B :                     PRINTSTRP0_PUT:
    3613/     E0B : 5C 5D               	JMS PUTCHAR_P1		; putchar(P1)
    3614/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3615/     E0F : 60                  	INC P0_HI
    3616/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3617/     E12 :                     PRINTSTRP0_EXIT:
    3618/     E12 : 5B 43               	JMS POP_P1
    3619/     E14 : 4B 36               	JUN POP_P0
    3620/     E16 :                     ;;;	BBL 0
    3621/     E16 :                     		
    3622/     E16 :                     	
    3623/     E16 :                     ;;;----------------------------------------------------------------------------
    3624/     E16 :                     ;;; MUL16_P2P3
    3625/     E16 :                     ;;; P2P3 = P2P3*16
    3626/     E16 :                     ;;;----------------------------------------------------------------------------
    3627/     E16 :                     MUL16_P2P3:	
    3628/     E16 : A5                  	LD R5
    3629/     E17 : B4                  	XCH R4			; 100'->1000'
    3630/     E18 : A6                  	LD R6
    3631/     E19 : B5                  	XCH R5			; 10'->100'
    3632/     E1A : A7                  	LD R7
    3633/     E1B : B6                  	XCH R6			; 1'->10'
    3634/     E1C : F0                  	CLB
    3635/     E1D : B7                  	XCH R7			; 0->1'
    3636/     E1E : C0                  	BBL 0
    3637/     E1F :                     
    3638/     E1F :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/04/03  9:19:43


    3639/     E1F :                     ;;; String data
    3640/     E1F :                     ;;;----------------------------------------------------------------------------
    3641/     E1F :                     
    3642/     E1F :                     STR_OMSG:
    3643/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
    3644/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3645/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3646/     E47 :                     STR_EMU_MESSAGE:
    3647/     E47 : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 1.0\r\n", 0
              E4D : 20 45 6D 75 6C 61 
              E53 : 74 6F 72 20 6F 6E 
              E59 : 20 34 30 30 34 20 
              E5F : 56 65 72 20 31 2E 
              E65 : 30 0D 0A 00       
    3648/     E69 :                     
    3649/     E69 :                     STR_EMU_REG:
    3650/     E69 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
              E6F : 20 20 42 43 20 20 
              E75 : 20 44 45 20 20 20 
              E7B : 48 4C 20 20 20 53 
              E81 : 50 20 20 20 50 43 
              E87 : 20 28 2B 30 20 2B 
              E8D : 31 20 2B 32 29 42 
              E93 : 43 29 44 45 29 48 
              E99 : 4C 29 53 50 20 2B 
              E9F : 31 29 0D 0A 00    
    3651/     EA4 :                     STR_EMU_HLT:
    3652/     EA4 : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              EAA : 0A 00             
    3653/     EAC :                     ;;; strings for register command of 4004 monitor
    3654/     EAC :                     ;;; STR_REG0:
    3655/     EAC :                     ;;;	data "AC	SP1111\r\n", 0
    3656/     EAC :                     ;;; STR_REG1:
    3657/     EAC :                     ;;;	data "CY01234567890123\r\n", 0
    3658/     EAC :                     ;;; STR_DATAREG:
    3659/     EAC :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
    3660/     EAC :                     
    3661/     EAC :                     STR_CMDERR:
    3662/     EAC : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3663/     EB0 :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3664/     EB0 : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              EB6 : 41 43 45 0D 0A 00 
    3665/     EBC :                     STR_ERROR_LOADCOMMAND:
    3666/     EBC : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              EC2 : 45 52 52 4F 52 0D 
              EC8 : 0A 00             
    3667/     ECA :                     
    3668/     ECA :                     ;;;---------------------------------------------------------------------------
    3669/     ECA :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3670/     ECA :                     ;;;---------------------------------------------------------------------------
    3671/     ECA :                     ;;; READPM_P0
    3672/     ECA :                     ;;; P1 = (P0)
    3673/     ECA :                     ;;; input: P0
    3674/     ECA :                     ;;; output: P1
    3675/     ECA :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/04/03  9:19:43


    3676/     ECA :                     ;;;	org 0F7EH
    3677/     ECA :                     ;;; PM_READ_P0_P1:
    3678/     ECA : 32                  	FIN P1
    3679/     ECB : C0                  	BBL 0
    3680/     ECC :                     
    3681/     ECC :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/04/03  9:19:43


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4D3 C |  ACI_P1_NOCARRY :               4D9 C |
 ADD_REG16P0_REG16P1 :          87B C |  ADD_REG8P0_P1 :                763 C |
 ADI_P1 :                       488 C |  AND67_L1 :                     686 C |
 AND67_L2 :                     692 C |  AND67_L3 :                     69E C |
 AND67_L4 :                     6A7 C |  AND_P1_P2 :                    6A8 C |
 AND_R6_R7 :                    67C C |  ANI_P1 :                       579 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  CALL_IF0 :                     4B2 C |
 CALL_IF1 :                     4AB C |  CALL_P2P3 :                    4C5 C |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT0 :                 0 - |
 CHIP_PMSELECT1 :                40 - |  CHIP_RAM0 :                      0 - |
 CHIP_RAM1 :                     40 - | *CHIP_RAM2 :                     80 - |
 CHIP_RAM3 :                    0C0 - |  CHIP_SERIAL :                  0C0 - |
 CMDDD_L1 :                     117 C |  CMDDD_L2 :                    0D5A C |
 CMDDL_L0 :                     0D3 C |  CMDDL_L1 :                     0DB C |
*CMDDL_NEXT :                   0E5 C |  CMDDP_EXIT :                   0C3 C |
 CMDDP_L0 :                      99 C |  CMDDP_L1 :                     0B1 C |
 CMDD_L1 :                      0F7 C |  CMDD_L2 :                      0FF C |
 CMDD_L3 :                      107 C |  CMDH_EXIT :                    13A C |
 CMDH_SET :                     130 C |  CMDL_CONTINUE :                19A C |
 CMDL_ERROR :                   188 C |  CMDL_EXIT :                    1B2 C |
 CMDL_L0 :                      15A C |  CMDL_L1 :                      162 C |
 CMDL_L2 :                      180 C |  CMDL_L3 :                      1A2 C |
 CMDL_L5 :                      1B0 C |  CMDL_READLOOP :                192 C |
 CMDL_START :                   148 C |  CMDPMC_BANKLOOP :              1BC C |
 CMDPMC_L1 :                    1C6 C |  CMD_LOOP :                      2D C |
 CMP17_EXIT01 :                0D2C C |  CMP17_L1 :                    0D26 C |
 CMP_P1P7 :                    0D20 C |  CMP_REG16P0_REG16P1 :          857 C |
 CODE_003F :                    1FF C |  CODE_007F :                    1F8 C |
 CODE_00H :                     27F C |  CODE_01H :                     280 C |
 CODE_02H :                     28C C |  CODE_03H :                     294 C |
 CODE_04H :                     298 C |  CODE_05H :                     29C C |
 CODE_06H :                     2A0 C |  CODE_07H :                     2A4 C |
 CODE_08H :                     2B4 C |  CODE_09H :                     2B5 C |
 CODE_0AH :                     2BD C |  CODE_0BH :                     2C7 C |
 CODE_0CH :                     2CB C |  CODE_0DH :                     2CF C |
 CODE_0EH :                     2D3 C |  CODE_0FH :                     2D7 C |
 CODE_10H :                     2E7 C |  CODE_11H :                     2E8 C |
 CODE_12H :                     2F4 C |  CODE_13H :                     2FC C |
 CODE_14H :                     300 C |  CODE_15H :                     304 C |
 CODE_16H :                     308 C |  CODE_17H :                     30C C |
 CODE_18H :                     31C C |  CODE_19H :                     31D C |
 CODE_1AH :                     325 C |  CODE_1BH :                     32F C |
 CODE_1CH :                     333 C |  CODE_1DH :                     337 C |
 CODE_1EH :                     33B C |  CODE_1FH :                     33F C |
 CODE_20H :                     34F C |  CODE_21H :                     350 C |
 CODE_22H :                     35C C |  CODE_23H :                     37A C |
 CODE_24H :                     37E C |  CODE_25H :                     382 C |
 CODE_26H :                     386 C |  CODE_27H :                     38A C |
 CODE_28H :                     398 C |  CODE_29H :                     399 C |
 CODE_2AH :                     3A1 C |  CODE_2BH :                     3BB C |
 CODE_2CH :                     3BF C |  CODE_2DH :                     3C3 C |
 CODE_2EH :                     3C7 C |  CODE_2FH :                     3CB C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/04/03  9:19:43


 CODE_30H :                     3D7 C |  CODE_31H :                     3D8 C |
 CODE_32H :                     3E4 C |  CODE_33H :                     3F8 C |
 CODE_34H :                     3FC C |  CODE_35H :                     408 C |
 CODE_36H :                     414 C |  CODE_37H :                     41A C |
 CODE_38H :                     41C C |  CODE_39H :                     41D C |
 CODE_3AH :                     425 C |  CODE_3BH :                     439 C |
 CODE_3CH :                     43D C |  CODE_3DH :                     443 C |
 CODE_3EH :                     449 C |  CODE_3FH :                     44F C |
 CODE_407F :                    215 C |  CODE_407F_MOV :                23A C |
 CODE_76H :                     271 C |  CODE_76H_EXIT :                27D C |
 CODE_80BF :                    215 C |  CODE_80BF_ARITH_LOGIC :        262 C |
 CODE_80FF :                    210 C |  CODE_C0FF :                    207 C |
 CODE_C0H :                     454 C |  CODE_C1H :                     458 C |
 CODE_C2H :                     45E C |  CODE_C3H :                     46E C |
 CODE_C4H :                     47C C |  CODE_C5H :                     480 C |
 CODE_C6H :                     486 C |  CODE_C7H :                     490 C |
 CODE_C8H :                     496 C |  CODE_C9H :                     49E C |
 CODE_CAH :                     4A4 C |  CODE_CALL :                    4B9 C |
 CODE_CBH :                     4A8 C |  CODE_CCH :                     4A9 C |
 CODE_CDH :                     4B9 C |  CODE_CEH :                     4D1 C |
 CODE_CFH :                     4E1 C |  CODE_D0H :                     4E7 C |
 CODE_D1H :                     4EB C |  CODE_D2H :                     4F1 C |
 CODE_D3H :                     4F5 C |  CODE_D4H :                     4F9 C |
 CODE_D5H :                     4FD C |  CODE_D6H :                     503 C |
 CODE_D7H :                     50D C |  CODE_D8H :                     513 C |
 CODE_D9H :                     517 C |  CODE_DAH :                     518 C |
 CODE_DBH :                     51C C |  CODE_DCH :                     520 C |
 CODE_DCR :                     445 C |  CODE_DDH :                     524 C |
 CODE_DEH :                     525 C |  CODE_DFH :                     535 C |
 CODE_E0H :                     53B C |  CODE_E1H :                     53F C |
 CODE_E2H :                     545 C |  CODE_E3H :                     549 C |
 CODE_E4H :                     56D C |  CODE_E5H :                     571 C |
 CODE_E6H :                     577 C |  CODE_E7H :                     589 C |
 CODE_E8H :                     58F C |  CODE_E9H :                     593 C |
 CODE_EAH :                     597 C |  CODE_EBH :                     59B C |
 CODE_ECH :                     5A9 C |  CODE_EDH :                     5AD C |
 CODE_EEH :                     5AE C |  CODE_EFH :                     5C0 C |
 CODE_F0H :                     5C6 C |  CODE_F1H :                     5CA C |
 CODE_F2H :                     5D8 C |  CODE_F3H :                     5DC C |
 CODE_F4H :                     5DD C |  CODE_F5H :                     5E1 C |
 CODE_F6H :                     5F3 C |  CODE_F7H :                     605 C |
 CODE_F8H :                     60B C |  CODE_F9H :                     60F C |
 CODE_FAH :                     615 C |  CODE_FBH :                     619 C |
 CODE_FCH :                     61A C |  CODE_FDH :                     61E C |
 CODE_FEH :                     61F C |  CODE_FFH :                     62F C |
 CODE_INR :                     43F C |  CODE_JMP :                     46E C |
 CODE_MOV_L1 :                  242 C |  CODE_MOV_WRITE_M_TO_PM :       25E C |
 CODE_MVI :                     44B C |  CODE_NOT_NOP :                 207 C |
 CODE_POP_REG8P2P3 :            5CE C |  CODE_PUSH_REG8P2P3 :           5E5 C |
 CODE_RET :                     49E C |  COMMAND_C :                    1BA C |
 COMMAND_D :                    0E7 C |  COMMAND_DD :                   10D C |
 COMMAND_DL :                   0C9 C |  COMMAND_DP :                    8D C |
 COMMAND_E :                    1D4 C |  COMMAND_G :                    126 C |
 COMMAND_H :                    128 C |  COMMAND_L :                    148 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CPI_P1 :                       621 C |  CTOI_09 :                     0D1D C |
 CTOI_P1 :                     0D14 C | *DATE :                "2023/04/03" - |
 DEC_P1 :                      0CC3 C |  DEC_P1_EXIT :                 0CCB C |
 DEC_REG16P0 :                  846 C |  DEC_REG8P1 :                   795 C |
 EMULATE_IN_P1 :                8C9 C |  EMULATE_OUT_P1 :               8B1 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/04/03  9:19:43


 EMU_EXEC :                     1E8 C |  EMU_EXIT :                     1EC C |
 EMU_IN_EXIT :                  8EC C |  EMU_IN_P1_L1 :                 8D1 C |
 EMU_IN_P1_L2 :                 8D9 C |  EMU_IN_UARTRC :                8E6 C |
 EMU_IN_UARTRC_VALUE :          0FF - |  EMU_IN_UARTRD :                8DA C |
 EMU_LOOP :                     1D8 C |  EMU_OUT_P1_L1 :                8B9 C |
 EMU_OUT_P1_L2 :                8C1 C |  EMU_OUT_UARTRC :               8C8 C |
 EMU_OUT_UARTRD :               8C2 C |  EMU_PRINT_REGISTERS :          8F2 C |
*EMU_START :                    1D4 C |  EMU_UARTRC :                     0 - |
 EMU_UARTRD :                     1 - |  EMU_USE_FLAG_P :                 0 - |
 EXEC_CODE :                    1EE C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR_L1 :                  0C3D C |
 GETCHAR_L2 :                  0C42 C |  GETCHAR_L3 :                  0C45 C |
 GETCHAR_L4 :                  0C4C C |  GETCHAR_L5 :                  0C51 C |
 GETCHAR_L6 :                  0C54 C |  GETCHAR_OK :                  0C5C C |
 GETCHAR_P1 :                  0C35 C |  GETFLAG_C :                    648 C |
 GETFLAG_C_1 :                  650 C |  GETFLAG_P :                    651 C |
 GETFLAG_S :                    63F C |  GETFLAG_S_EXIT1 :              647 C |
 GETFLAG_Z :                    635 C |  GETFLAG_Z_EXIT1 :              63E C |
 GETHEXBYTE_L1 :               0C1D C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C16 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C2F C |  GETHEX_EXIT :                  8AD C |
 GETHEX_LOOP :                  89F C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 890 C |
 GETHEX_START :                 89B C |  GETLINE_BS :                  0BE0 C |
 GETLINE_DO_BS :               0BE8 C |  GETLINE_EXIT :                0BFC C |
 GETLINE_INSERTCHAR :          0BF4 C |  GETLINE_L1 :                  0BD8 C |
*GETLINE_L1_NEXT :             0BEA C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                228 C |
 GETSRC_SAVE_SRCVALUE :         22E C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBD C |  INC_P1_EXIT :                 0CC2 C |
 INC_REG16P0 :                  836 C |  INC_REG8P1 :                   774 C |
 INIT_SERIAL :                 0C7D C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CE8 C | *ISALPHA_L1 :                  0CCC C |
 ISALPHA_L10 :                 0CD3 C |  ISALPHA_L2 :                  0CDA C |
 ISALPHA_L20 :                 0CE1 C |  ISALPHA_P1 :                  0CCC C |
 ISCRLF_EXIT0 :                0D42 C |  ISCRLF_EXIT1 :                0D43 C |
 ISCRLF_P1 :                   0D35 C |  ISHEX_FALSE :                 0D13 C |
 ISHEX_L00 :                   0CF0 C |  ISHEX_L1 :                    0CF7 C |
 ISHEX_L10 :                   0CFE C |  ISHEX_L2 :                    0D05 C |
 ISHEX_L20 :                   0D0C C |  ISHEX_P1 :                    0CE9 C |
 ISZEROORNOT_EXIT1 :           0D34 C |  ISZEROORNOT_P1 :              0D2D C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      460 C |  JMP_IF1 :                      467 C |
*L0 :                            3F C |  L1 :                            47 C |
 L10 :                           87 C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 L6_CONTINUOUS :                 7A C |  L6_SETMODE :                    7D C |
 LDREG16P6P7_LOOP :             819 C |  LD_P1_PM16REG16P0_INCREMENT : 0B5D C |
 LD_P1_REG8P0 :                 7D8 C |  LD_P1_REG8P1 :                 7DE C |
 LD_P1_REG8P2 :                 7E4 C |  LD_P1_REG8P3 :                 7EA C |
 LD_P1_REG8P7 :                 7D0 C |  LD_P2P3_REG16P1 :              822 C |
 LD_PM16REG16P0_P1 :           0B81 C |  LD_REG16P0_P2P3 :              75D C |
 LD_REG16P0_REG16P1 :           733 C |  LD_REG16P1_P2P3 :              757 C |
 LD_REG16P1_REG16P0 :           73D C |  LD_REG16P6_REG16P7 :           817 C |
 LD_REG16P7_P2P3 :              747 C |  LD_REG8P0_P1 :                 7B8 C |
*LD_REG8P0_REG8P1 :             7A5 C |  LD_REG8P2_P1 :                 7C4 C |
 LD_REG8P3_P1 :                 7BE C |  LD_REG8P6_REG8P7 :             7AD C |
 LD_REG8P7_P1 :                 7C8 C | *LISTON :                         1 - |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/04/03  9:19:43


*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                  0E16 C | *NESTMAX :                      100 - |
 OR67_L1 :                      711 C |  OR67_L2 :                      71D C |
 OR67_L3 :                      729 C |  OR67_L4 :                      732 C |
 ORI_P1 :                       5F5 C |  OR_P1_P2 :                     6F6 C |
 OR_R6_R7 :                     707 C | *PADDING :                        1 - |
 PM16_LINEBUF :                0D00 - | *PM16_MEMSTART :                  0 - |
 PM_INIT_BANK :                0BAD C |  PM_INIT_HLOOP :                  9 C |
 PM_INIT_LLOOP :                 0B C |  PM_RAM_START :                0F00 - |
 PM_READ_P0_P1 :               0FFE - |  PM_SELECTPMB_P1 :             0BB9 C |
 PM_WRITE_P0_P1 :              0BA1 C |  PM_WRITE_P6_P7 :              0BA7 C |
 POP_P0 :                      0B36 C |  POP_P1 :                      0B43 C |
 POP_P2 :                      0B50 C |  PRINTACC_L1 :                 0CBA C |
 PRINTHEX_P1 :                 0C83 C |  PRINTHEX_REG16P1 :             7F0 C |
 PRINTSTRP0_EXIT :             0E12 C |  PRINTSTRP0_LOOP :             0E04 C |
 PRINTSTRP0_PUT :              0E0B C |  PRINTSTR_EXIT :               0C14 C |
 PRINTSTR_LOOP :               0C0A C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM16REG16P0 :        0C08 C |  PRINT_ACC :                   0CB2 C |
 PRINT_CR :                    0CAA C |  PRINT_CRLF :                  0C9E C |
 PRINT_DATARAM_P0 :            0D50 C |  PRINT_LF :                    0CAE C |
 PRINT_SPC :                   0C96 C |  PUSH_P0 :                     0B00 C |
 PUSH_P1 :                     0B12 C |  PUSH_P2 :                     0B24 C |
 PUTCHAR_L1 :                  0C65 C |  PUTCHAR_L2 :                  0C74 C |
 PUTCHAR_P1 :                  0C5D C |  RAM23TYPE :               "4002-2" - |
 REG16_ADDR :                    1C - |  REG16_ADD_LOOP :               882 C |
 REG16_BC :                      0C - |  REG16_CMP_EXIT0 :              87A C |
 REG16_CMP_LOOP :               860 C |  REG16_CMP_NEXT :               86D C |
 REG16_DE :                       8 - |  REG16_DEC_EXIT :               854 C |
 REG16_DEC_LOOP :               84B C |  REG16_HL :                       4 - |
 REG16_INC_EXIT :               843 C |  REG16_INC_LOOP :               83A C |
 REG16_MON_ADDR :                2C - |  REG16_MON_INDEX :               28 - |
*REG16_MON_PMBANK :              34 - |  REG16_MON_TMP :                 30 - |
 REG16_PC :                      14 - |  REG16_SP :                      18 - |
*REG16_STACK_40H :               40 - | *REG16_STACK_7CH :               7C - |
 REG4_EMU_STEP :                 20 - |  REG4_FLAG_1P1C :                10 - |
 REG4_FLAG_SZBH :                11 - |  REG8_A :                         0 - |
 REG8_ADDRH :                    1E - |  REG8_ADDRL :                    1C - |
 REG8_B :                        0E - |  REG8_C :                        0C - |
 REG8_D :                        0A - |  REG8_DEC_EXIT :                7A4 C |
 REG8_E :                         8 - |  REG8_FLAG :                     10 - |
 REG8_H :                         6 - |  REG8_INC_EXIT :                783 C |
 REG8_L :                         4 - |  REG8_M :                         2 - |
 REG8_MON_MEMSPACE :             38 - | *REG8_MON_RESERVED :             3A - |
 REG8_PCH :                      16 - |  REG8_PCL :                      14 - |
 REG8_SPH :                      1A - |  REG8_SPL :                      18 - |
 REG8_SRC :                      12 - | *RELAXED :                        0 - |
 RET_IF0 :                      49B C |  RET_IF1 :                      498 C |
 SBI_P1 :                       527 C |  SBI_P1_NOCARRY :               52D C |
 SETFLAG_C_0 :                  654 C |  SETFLAG_C_1 :                  65D C |
 SETFLAG_C_CY :                 652 C |  SETFLAG_ZSP_P1 :               66C C |
 SETFLAG_ZSP_REG8P0 :           666 C |  SETFLAG_ZSP_REG8P1 :           66A C |
 STACK_INIT :                    80 - |  STR_CMDERR :                  0EAC C |
 STR_EMU_HLT :                 0EA4 C |  STR_EMU_MESSAGE :             0E47 C |
 STR_EMU_REG :                 0E69 C |  STR_ERROR_LOADCOMMAND :       0EBC C |
 STR_ERROR_UNKNOWN_MEMSPACE :  0EB0 C |  STR_OMSG :                    0E1F C |
 STR_VFD_INIT :                0E42 C |  SUB_REG8P0_P1 :                784 C |
 SUI_P1 :                       505 C | *TIME :                  " 9:19:43" - |
 TOUPPER_P1 :                  0D44 C |  TOUPPER_P1_EXIT :             0D4F C |
*TRUE :                           1 - | *VERSION :                     142F - |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/04/03  9:19:43


 XOR67_L1 :                     6C3 C |  XOR67_L2 :                     6CF C |
 XOR67_L3 :                     6DB C |  XOR67_L4 :                     6E4 C |
 XOR_P1_P2 :                    6E5 C |  XOR_R6_R7 :                    6B9 C |
 XRI_P1 :                       5B0 C |

    476 symbols
     38 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/04/03  9:19:43


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/04/03  9:19:43


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_ACC_REG4P7                        
LD_CNT_P1                             | LD_P0_P1                             
LD_P0_P3                              | LD_P1_CNT                            
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P2_P1                             
LD_P2_P3                              | LD_P3_P0                             
LD_P3_P1                              | LD_P3_P2                             
LD_P6_P0                              | LD_P6_P1                             
LD_P6_SP                              | LD_P7_P0                             
LD_P7_P1                              | LD_P7_P2                             
LD_P7_P3                              | LD_REG4P7_ACC                        
POPP                                  | PUSHP                                

     24 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/04/03  9:19:43


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/04/03  9:19:43


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4070 lines source file
   4364 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
