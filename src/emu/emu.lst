 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/04/10 10:54:46


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/04/09
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/04/10 10:54:46


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     ;;;----------------------------------------------------------------------------
(1)   79/       0 :                     ;;; LD_REG4P7_ACC
(1)   80/       0 :                     ;;; REG4(P7)=ACC
(1)   81/       0 :                     ;;;----------------------------------------------------------------------------
(1)   82/       0 :                     LD_REG4P7_ACC macro
(1)   83/       0 :                     	SRC P7
(1)   84/       0 :                     	WRM
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     ;;;----------------------------------------------------------------------------
(1)   88/       0 :                     ;;; LD_ACC_REG4P7
(1)   89/       0 :                     ;;; REG4(P7)=ACC
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     LD_ACC_REG4P7 macro
(1)   92/       0 :                     	SRC P7
(1)   93/       0 :                     	RDM
(1)   94/       0 :                     	endm
(1)   95/       0 :                     
(1)   96/       0 :                     ;;;----------------------------------------------------------------------------
(1)   97/       0 :                     ;;; Register Pair Operations
(1)   98/       0 :                     ;;;----------------------------------------------------------------------------
(1)   99/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)  100/       0 :                     		LD P1_HI
(1)  101/       0 :                     		XCH P0_HI
(1)  102/       0 :                     		LD P1_LO
(1)  103/       0 :                     		XCH P0_LO
(1)  104/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/04/10 10:54:46


(1)  105/       0 :                     ;;;----------------------------------------------------------------------------
(1)  106/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  107/       0 :                     		LD P3_HI
(1)  108/       0 :                     		XCH P0_HI
(1)  109/       0 :                     		LD P3_LO
(1)  110/       0 :                     		XCH P0_LO
(1)  111/       0 :                     		endm
(1)  112/       0 :                     ;;;----------------------------------------------------------------------------
(1)  113/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  114/       0 :                     		LD P0_HI
(1)  115/       0 :                     		XCH P1_HI
(1)  116/       0 :                     		LD P0_LO
(1)  117/       0 :                     		XCH P1_LO
(1)  118/       0 :                     		endm
(1)  119/       0 :                     ;;;----------------------------------------------------------------------------
(1)  120/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  121/       0 :                     		LD P2_HI
(1)  122/       0 :                     		XCH P1_HI
(1)  123/       0 :                     		LD P2_LO
(1)  124/       0 :                     		XCH P1_LO
(1)  125/       0 :                     		endm
(1)  126/       0 :                     ;;;----------------------------------------------------------------------------
(1)  127/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  128/       0 :                     		LD P3_HI
(1)  129/       0 :                     		XCH P1_HI
(1)  130/       0 :                     		LD P3_LO
(1)  131/       0 :                     		XCH P1_LO
(1)  132/       0 :                     		endm
(1)  133/       0 :                     ;;;----------------------------------------------------------------------------
(1)  134/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  135/       0 :                     		LD P1_HI
(1)  136/       0 :                     		XCH P2_HI
(1)  137/       0 :                     		LD P1_LO
(1)  138/       0 :                     		XCH P2_LO
(1)  139/       0 :                     		endm
(1)  140/       0 :                     ;;;----------------------------------------------------------------------------
(1)  141/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  142/       0 :                     		LD P3_HI
(1)  143/       0 :                     		XCH P2_HI
(1)  144/       0 :                     		LD P3_LO
(1)  145/       0 :                     		XCH P2_LO
(1)  146/       0 :                     		endm
(1)  147/       0 :                     ;;;----------------------------------------------------------------------------
(1)  148/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  149/       0 :                     		LD P0_HI
(1)  150/       0 :                     		XCH P3_HI
(1)  151/       0 :                     		LD P0_LO
(1)  152/       0 :                     		XCH P3_LO
(1)  153/       0 :                     		endm
(1)  154/       0 :                     ;;;----------------------------------------------------------------------------
(1)  155/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  156/       0 :                     		LD P1_HI
(1)  157/       0 :                     		XCH P3_HI
(1)  158/       0 :                     		LD P1_LO
(1)  159/       0 :                     		XCH P3_LO
(1)  160/       0 :                     		endm
(1)  161/       0 :                     ;;;----------------------------------------------------------------------------
(1)  162/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  163/       0 :                     		LD P2_HI
(1)  164/       0 :                     		XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/04/10 10:54:46


(1)  165/       0 :                     		LD P2_LO
(1)  166/       0 :                     		XCH P3_LO
(1)  167/       0 :                     		endm
(1)  168/       0 :                     ;;;----------------------------------------------------------------------------
(1)  169/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  170/       0 :                     		LD P0_HI
(1)  171/       0 :                     		XCH P6_HI
(1)  172/       0 :                     		LD P0_LO
(1)  173/       0 :                     		XCH P6_LO
(1)  174/       0 :                     		endm
(1)  175/       0 :                     ;;;----------------------------------------------------------------------------
(1)  176/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  177/       0 :                     		LD P1_HI
(1)  178/       0 :                     		XCH P6_HI
(1)  179/       0 :                     		LD P1_LO
(1)  180/       0 :                     		XCH P6_LO
(1)  181/       0 :                     		endm
(1)  182/       0 :                     ;;;----------------------------------------------------------------------------
(1)  183/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  184/       0 :                     		LD SP_HI
(1)  185/       0 :                     		XCH P6_HI
(1)  186/       0 :                     		LD SP_LO
(1)  187/       0 :                     		XCH P6_LO
(1)  188/       0 :                     		endm
(1)  189/       0 :                     ;;;----------------------------------------------------------------------------
(1)  190/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  191/       0 :                     		LD P0_HI
(1)  192/       0 :                     		XCH P7_HI
(1)  193/       0 :                     		LD P0_LO
(1)  194/       0 :                     		XCH P7_LO
(1)  195/       0 :                     		endm
(1)  196/       0 :                     ;;;----------------------------------------------------------------------------
(1)  197/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  198/       0 :                     		LD P1_HI
(1)  199/       0 :                     		XCH P7_HI
(1)  200/       0 :                     		LD P1_LO
(1)  201/       0 :                     		XCH P7_LO
(1)  202/       0 :                     		endm
(1)  203/       0 :                     ;;;----------------------------------------------------------------------------
(1)  204/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  205/       0 :                     		LD P2_HI
(1)  206/       0 :                     		XCH P7_HI
(1)  207/       0 :                     		LD P2_LO
(1)  208/       0 :                     		XCH P7_LO
(1)  209/       0 :                     		endm
(1)  210/       0 :                     ;;;----------------------------------------------------------------------------
(1)  211/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  212/       0 :                     		LD P3_HI
(1)  213/       0 :                     		XCH P7_HI
(1)  214/       0 :                     		LD P3_LO
(1)  215/       0 :                     		XCH P7_LO
(1)  216/       0 :                     		endm
(1)  217/       0 :                     ;;;----------------------------------------------------------------------------
(1)  218/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  219/       0 :                     		LD P1_HI
(1)  220/       0 :                     		XCH CNT_HI
(1)  221/       0 :                     		LD P1_LO
(1)  222/       0 :                     		XCH CNT_LO
(1)  223/       0 :                     		endm
(1)  224/       0 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/04/10 10:54:46


(1)  225/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  226/       0 :                     		LD CNT_HI
(1)  227/       0 :                     		XCH P1_HI
(1)  228/       0 :                     		LD CNT_LO
(1)  229/       0 :                     		XCH P1_LO
(1)  230/       0 :                     		endm
(1)  231/       0 :                     ;;;----------------------------------------------------------------------------
(1)  232/       0 :                     
(1)  233/       0 :                     ;;;----------------------------------------------------------------------------
(1)  234/       0 :                     ;;; For debug
(1)  235/       0 :                     ;;;----------------------------------------------------------------------------
(1)  236/       0 :                     ;;;----------------------------------------------------------------------------
(1)  237/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)  238/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)  239/       0 :                     ;;;----------------------------------------------------------------------------
(1)  240/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)  241/       0 :                     	JMS PUSH_P1
(1)  242/       0 :                     	FIM P1, ch
(1)  243/       0 :                     	JMS PUTCHAR_P1
(1)  244/       0 :                     	JMS POP_P1
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     ;;; ENABLE_MEMTEST = 0
      23/       0 : =1H                  ENABLE_MEMTEST = 1			; memory test command 'T'
      24/       0 :                     
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 :                     ;;; Emulator compile configuration
      27/       0 :                     ;;;---------------------------------------------------------------------------
      28/       0 :                     ;; FLAG_P is not implemented because it takes much cost
      29/       0 : =0H                  EMU_USE_FLAG_P = 0	; don't use P FLAG
      30/       0 :                     ;;; EMU_USE_FLAG_P = 1	; use P FLAG
      31/       0 :                     
      32/       0 :                     ;;;---------------------------------------------------------------------------
      33/       0 :                     ;;; Emulator port configuration
      34/       0 :                     ;;;---------------------------------------------------------------------------
      35/       0 : =0H                  EMU_UARTRC	equ	00H	; for tinybasic-1.0
      36/       0 : =1H                  EMU_UARTRD	equ	01H	; for tynybasic-1.0
      37/       0 :                     ;;;	EMU_IN_UARTRC_VALUE	equ 22H	; for tynybasic-1.0
      38/       0 : =0FFH                EMU_IN_UARTRC_VALUE	equ 0FFH	;
      39/       0 : =3H                  EMU_IN_STOPCODE	equ 03H			; ctrl-C
      40/       0 :                     	
      41/       0 :                     ;;;---------------------------------------------------------------------------
      42/       0 :                     ;;; Hardware Configuration
      43/       0 :                     ;;;---------------------------------------------------------------------------
      44/       0 :                     
      45/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      46/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      47/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      48/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      49/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      50/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      51/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      52/       0 :                     
      53/       0 :                     ;;; Chip type of RAM2 and RAM3
      54/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/04/10 10:54:46


      55/       0 :                     
      56/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      57/       0 : =0H                  BANK_RAM0	equ 0
      58/       0 : =0H                  CHIP_RAM0	equ 00H
      59/       0 : =0H                  BANK_RAM1	equ 0
      60/       0 : =40H                 CHIP_RAM1	equ 40H
      61/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      62/       0 : =0H                  BANK_RAM2	equ 0
      63/       0 : =80H                 CHIP_RAM2	equ 80H
      64/       0 : =0H                  BANK_RAM3	equ 0
      65/       0 : =0C0H                CHIP_RAM3	equ 0C0H
      66/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      67/       0 :                     BANK_RAM2	equ 1
      68/       0 :                     CHIP_RAM2	equ 00H
      69/       0 :                     BANK_RAM3	equ 1
      70/       0 :                     CHIP_RAM3	equ 40H
      71/       0 : [61]                 	endif
      72/       0 :                     
      73/       0 :                     ;;; Default Bank
      74/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      75/       0 :                     ;;; to omit DCL as much as possible.
      76/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      77/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      78/       0 :                     		
      79/       0 :                     ;;; Output port for serial interface
      80/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      81/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      82/       0 :                     
      83/       0 :                     ;;; Output port for program memory bank selection
      84/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      85/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      86/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      87/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      88/       0 :                     
      89/       0 :                     	
      90/       0 :                     ;;; Program Memory RAM area
      91/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
      92/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
      93/       0 :                     				; "FIN P1 and BBL 0"
      94/       0 :                     	
      95/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
      96/       0 : =0H                  PM16_MEMSTART	equ 0000H
      97/       0 : =0FD00H              PM16_LINEBUF	equ 0FD00H
      98/       0 :                     
      99/       0 :                     ;;; for 256 x 16 x16 PM space
     100/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
     101/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
     102/       0 :                     
     103/       0 :                     ;;;---------------------------------------------------------------------------
     104/       0 :                     ;;; Data RAM Register Configuration
     105/       0 :                     ;;;---------------------------------------------------------------------------
     106/       0 :                     ;;; RAM0
     107/       0 :                     ;;; 
     108/       0 :                     ;;; 8080 register code DDD or SSS
     109/       0 :                     ;;; 0 1 2 3 4 5 6 7
     110/       0 :                     ;;; B C D E H L M A
     111/       0 :                     ;;; 
     112/       0 :                     ;;;  ADDRESS=~(xxx)<<1
     113/       0 :                     	
     114/       0 : =0H                  REG8_A		equ 00H	;
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/04/10 10:54:46


     115/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     116/       0 : =4H                  REG8_L		equ 04H	;
     117/       0 : =6H                  REG8_H		equ 06H	;
     118/       0 : =8H                  REG8_E		equ 08H	;
     119/       0 : =0AH                 REG8_D		equ 0AH	;
     120/       0 : =0CH                 REG8_C		equ 0CH	;
     121/       0 : =0EH                 REG8_B		equ 0EH	;
     122/       0 :                     
     123/       0 : =10H                 REG8_FLAG	equ 10H ;
     124/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     125/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
     126/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     127/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     128/       0 :                     
     129/       0 :                     		;; lower byte is the first
     130/       0 : =0CH                 REG16_BC	equ REG8_C
     131/       0 : =8H                  REG16_DE	equ REG8_E
     132/       0 : =4H                  REG16_HL	equ REG8_L
     133/       0 :                     
     134/       0 : =14H                 REG8_PCL	equ REG16_PC
     135/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     136/       0 : =18H                 REG8_SPL	equ REG16_SP
     137/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     138/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     139/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     140/       0 :                     	
     141/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     142/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     143/       0 :                     
     144/       0 : =20H                 REG8_EMU_KEYBUF equ 20H ; virtual buffer for input STOP key
     145/       0 : =24H                 REG4_EMU_STEP	equ 24H	; Execution mode (0:continuous, 1:step)
     146/       0 :                     	
     147/       0 : =28H                 REG16_MON_INDEX	equ 28H	;
     148/       0 : =2CH                 REG16_MON_ADDR	equ 2CH	;
     149/       0 : =30H                 REG16_MON_TMP	equ 30H	;
     150/       0 : =30H                 REG8_MON_TMP	equ 30H	;
     151/       0 : =32H                 REG8_MON_TMP2	equ 32H	;
     152/       0 : =34H                 REG16_MON_PMBANK	equ 34H	; not used (?)
     153/       0 : =38H                 REG8_MON_MEMSPACE	equ 38H	; 'D', 'P', 'L' = (Data, Physical, Logical)
     154/       0 : =3AH                 REG8_MON_RESERVED	equ 3AH	; (reserved)
     155/       0 :                     	
     156/       0 :                     
     157/       0 :                     ;;; RAM1
     158/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     159/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     160/       0 :                     
     161/       0 : =80H                 STACK_INIT	equ 80H
     162/       0 :                     
     163/       0 :                     ;;; RAM2
     164/       0 :                     ;;; RAM3
     165/       0 :                     	
     166/       0 :                     ;;;---------------------------------------------------------------------------
     167/       0 :                     ;;; Program Start
     168/       0 :                     ;;;---------------------------------------------------------------------------
     169/       0 :                     	org 0000H		; beginning of Program Memory
     170/       0 :                     
     171/       0 :                     ;;;---------------------------------------------------------------------------
     172/       0 :                     ;;; Mail Loop for Monitor Program
     173/       0 :                     ;;; 
     174/       0 :                     ;;; Command:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/04/10 10:54:46


     175/       0 :                     ;;; H : Select memory space
     176/       0 :                     ;;;   HD : Data RAM (4002)
     177/       0 :                     ;;;   HP : Physical Program Memory
     178/       0 :                     ;;;   HL : Logical Program Memory
     179/       0 :                     ;;; D : Dump memory
     180/       0 :                     ;;; L : Load Intel hex to logical program memory
     181/       0 :                     ;;; C : Clear Program Memory
     182/       0 :                     ;;; G : Go to PM_RAM_START (0F00H)
     183/       0 :                     ;;; E : 8080 Emulator
     184/       0 :                     ;;;   ES : 8080 Emulator (step mode)
     185/       0 :                     ;;; 
     186/       0 :                     ;;;---------------------------------------------------------------------------
     187/       0 :                     MAIN:
     188/       0 : 00                  	NOP
     189/       1 : F0                  	CLB
     190/       2 :                     
     191/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     192/       2 :                     	LDM BANK_DEFAULT
     193/       2 : [191]                	endif
     194/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     195/       2 :                     	;; except when in use for another banks.
     196/       2 : FD                  	DCL
     197/       3 :                     
     198/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     199/       5 : 5C 7F               	JMS INIT_SERIAL		; Initialize Serial Port
     200/       7 :                     
     201/       7 :                     
     202/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     203/       7 : D0                  	LDM loop(16)
     204/       8 : B2                  	XCH P1_HI
     205/       9 :                     PM_INIT_HLOOP:
     206/       9 : D0                  	LDM loop(16)
     207/       A : B3                  	XCH P1_LO
     208/       B :                     PM_INIT_LLOOP:
     209/       B : 5B B9               	JMS PM_SELECTPMB_P1
     210/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     211/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     212/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     213/      13 :                     
     214/      13 : 22 00               	FIM P1, 00H
     215/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     216/      17 :                     	
     217/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     218/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     219/      19 : 5E 00               	JMS PRINTSTR_P0
     220/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     221/      1D : 5E 00               	JMS PRINTSTR_P0
     222/      1F :                     
     223/      1F : 20 38               	FIM P0, REG8_MON_MEMSPACE
     224/      21 : 22 44               	FIM P1, 'D'
     225/      23 : 57 C1               	JMS LD_REG8P0_P1	; set memspace 'D'
     226/      25 :                     	
     227/      25 :                     	;; init emulator PC
     228/      25 : 20 14               	FIM P0, REG16_PC
     229/      27 : 24 00               	FIM P2, 00H
     230/      29 : 26 00               	FIM P3, 00H
     231/      2B : 57 66               	JMS LD_REG16P0_P2P3	; PC=0000H
     232/      2D :                     
     233/      2D :                     CMD_LOOP:
     234/      2D : 22 5D               	FIM P1, ']'		; prompt
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/04/10 10:54:46


     235/      2F : 5C 5F               	JMS PUTCHAR_P1
     236/      31 :                     
     237/      31 : 20 28               	FIM P0, REG16_MON_INDEX
     238/      33 : 24 FD               	FIM P2, up(PM16_LINEBUF)
     239/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     240/      37 : 57 66               	JMS LD_REG16P0_P2P3
     241/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
     242/      3B :                     
     243/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     244/      3D : 5D 49               	JMS TOUPPER_P1
     245/      3F :                     L0:
     246/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     247/      41 : 5D 25               	JMS CMP_P1P7
     248/      43 : 1C 47               	JCN ZN, L1
     249/      45 : 41 30               	JUN COMMAND_H
     250/      47 :                     L1:
     251/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     252/      49 : 5D 25               	JMS CMP_P1P7
     253/      4B : 1C 4F               	JCN ZN, L2
     254/      4D : 40 91               	JUN COMMAND_D
     255/      4F :                     L2:
     256/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     257/      4F :                     ;;;	JMS CMP_P1P7
     258/      4F :                     ;;;	JCN ZN, L3
     259/      4F :                     ;;;	JUN COMMAND_S
     260/      4F :                     L3:
     261/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     262/      51 : 5D 25               	JMS CMP_P1P7
     263/      53 : 1C 57               	JCN ZN, L4
     264/      55 : 41 50               	JUN COMMAND_L
     265/      57 :                     L4:
     266/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     267/      59 : 5D 25               	JMS CMP_P1P7
     268/      5B : 1C 5F               	JCN ZN, L5
     269/      5D : 41 C2               	JUN COMMAND_C
     270/      5F :                     L5:
     271/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     272/      61 : 5D 25               	JMS CMP_P1P7
     273/      63 : 1C 67               	JCN ZN, L6
     274/      65 : 41 2E               	JUN COMMAND_G
     275/      67 :                     L6:
     276/      67 : 2E 45               	FIM P7, 'E'		; jump to 8080 Emulator
     277/      69 : 5D 25               	JMS CMP_P1P7 		;
     278/      6B : 1C 83               	JCN ZN, L7		;
     279/      6D :                     
     280/      6D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; check next letter
     281/      6F : 5D 49               	JMS TOUPPER_P1
     282/      71 : 2E 53               	FIM P7, 'S'		; 'E' continuous mode, 'ES' step mode
     283/      73 : 5D 25               	JMS CMP_P1P7 		; 
     284/      75 : 1C 7A               	JCN ZN, L6_CONTINUOUS	;
     285/      77 : D1                  	LDM 1H			; step mode
     286/      78 : 40 7D               	JUN L6_SETMODE
     287/      7A :                     L6_CONTINUOUS			; continuous mode
     288/      7A : 58 4F               	JMS DEC_REG16P0
     289/      7C : D0                  	LDM 0H
     290/      7D :                     L6_SETMODE:
     291/      7D : 2E 24               	FIM P7, REG4_EMU_STEP
     292/      7F : (MACRO)              	LD_REG4P7_ACC
     292/      7F : 2F                          SRC P7
     292/      80 : E0                          WRM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/04/10 10:54:46


     293/      81 : 41 DC               	JUN COMMAND_E
     294/      83 :                     
     295/      83 :                     L7:
     296/      83 : =>TRUE               	if ENABLE_MEMTEST
     297/      83 : 2E 54               	FIM P7, 'T'		; Test program memory
     298/      85 : 5D 25               	JMS CMP_P1P7
     299/      87 : 1C 8B               	JCN ZN, L10
     300/      89 : 4D 7A               	JUN COMMAND_T
     301/      8B : [296]                	endif
     302/      8B :                     L10:
     303/      8B : 20 47               	FIM P0, lo(STR_CMDERR)
     304/      8D : 5E 00               	JMS PRINTSTR_P0
     305/      8F :                     
     306/      8F : 40 2D               	JUN CMD_LOOP
     307/      91 :                     
     308/      91 :                     
     309/      91 :                     ;;;---------------------------------------------------------------------------
     310/      91 :                     ;;; COMMAND_D
     311/      91 :                     ;;; Dump Memory
     312/      91 :                     ;;;---------------------------------------------------------------------------
     313/      91 :                     COMMAND_D:
     314/      91 : 22 2C               	FIM P1, REG16_MON_ADDR
     315/      93 : 58 99               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     316/      95 :                     	
     317/      95 : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     318/      97 : 57 D9               	JMS LD_P1_REG8P7
     319/      99 :                     	
     320/      99 : 2E 44               	FIM P7, 'D'
     321/      9B : 5D 25               	JMS CMP_P1P7
     322/      9D : 1C A1               	JCN ZN, CMDD_L1
     323/      9F : 41 15               	JUN COMMAND_DD
     324/      A1 :                     CMDD_L1:
     325/      A1 : 2E 50               	FIM P7, 'P'
     326/      A3 : 5D 25               	JMS CMP_P1P7
     327/      A5 : 1C A9               	JCN ZN, CMDD_L2
     328/      A7 : 40 B7               	JUN COMMAND_DP
     329/      A9 :                     CMDD_L2:
     330/      A9 : 2E 4C               	FIM P7, 'L'
     331/      AB : 5D 25               	JMS CMP_P1P7
     332/      AD : 1C B1               	JCN ZN, CMDD_L3
     333/      AF : 40 F7               	JUN COMMAND_DL
     334/      B1 :                     CMDD_L3:
     335/      B1 : 20 4B               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     336/      B3 : 5E 00               	JMS PRINTSTR_P0
     337/      B5 : 40 2D               	JUN CMD_LOOP
     338/      B7 :                     
     339/      B7 :                     ;;;---------------------------------------------------------------------------
     340/      B7 :                     ;;; COMMAND_DP
     341/      B7 :                     ;;; Dump Physical Memory
     342/      B7 :                     ;;;	BANK=ADDR.FEDCBA98
     343/      B7 :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     344/      B7 :                     ;;;---------------------------------------------------------------------------
     345/      B7 :                     COMMAND_DP:
     346/      B7 : 22 2C               	FIM P1, REG16_MON_ADDR
     347/      B9 : 58 2B               	JMS LD_P2P3_REG16P1
     348/      BB :                     
     349/      BB : (MACRO)              	LD_P1_P2
     349/      BB : A4                                  LD P2_HI
     349/      BC : B2                                  XCH P1_HI
     349/      BD : A5                                  LD P2_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/04/10 10:54:46


     349/      BE : B3                                  XCH P1_LO
     350/      BF : 5B B9               	JMS PM_SELECTPMB_P1
     351/      C1 :                     	
     352/      C1 : D8                  	LDM loop(8)
     353/      C2 : BA                  	XCH CNT_I
     354/      C3 :                     CMDDP_L0:
     355/      C3 : (MACRO)              	LD_P1_P2
     355/      C3 : A4                                  LD P2_HI
     355/      C4 : B2                                  XCH P1_HI
     355/      C5 : A5                                  LD P2_LO
     355/      C6 : B3                                  XCH P1_LO
     356/      C7 : 5C 85               	JMS PRINTHEX_P1
     357/      C9 : 22 3A               	FIM P1, ':'
     358/      CB : 5C 5F               	JMS PUTCHAR_P1
     359/      CD : 22 46               	FIM P1, 'F'
     360/      CF : 5C 5F               	JMS PUTCHAR_P1
     361/      D1 : (MACRO)              	LD_P1_P3
     361/      D1 : A6                                  LD P3_HI
     361/      D2 : B2                                  XCH P1_HI
     361/      D3 : A7                                  LD P3_LO
     361/      D4 : B3                                  XCH P1_LO
     362/      D5 : 5C 85               	JMS PRINTHEX_P1
     363/      D7 : 22 3A               	FIM P1, ':'
     364/      D9 : 5C 5F               	JMS PUTCHAR_P1
     365/      DB :                     
     366/      DB :                     CMDDP_L1:	
     367/      DB : (MACRO)              	LD_P0_P3
     367/      DB : A6                                  LD P3_HI
     367/      DC : B0                                  XCH P0_HI
     367/      DD : A7                                  LD P3_LO
     367/      DE : B1                                  XCH P0_LO
     368/      DF : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     369/      E1 : 5C 85               	JMS PRINTHEX_P1
     370/      E3 :                     
     371/      E3 : 77 DB               	ISZ P3_LO, CMDDP_L1
     372/      E5 : 5C A0               	JMS PRINT_CRLF
     373/      E7 : 66                  	INC P3_HI
     374/      E8 : A6                  	LD P3_HI
     375/      E9 : 14 ED               	JCN Z, CMDDP_EXIT
     376/      EB : 7A C3               	ISZ CNT_I, CMDDP_L0
     377/      ED :                     CMDDP_EXIT:	
     378/      ED : 20 2C               	FIM P0, REG16_MON_ADDR
     379/      EF : 57 66               	JMS LD_REG16P0_P2P3
     380/      F1 :                     
     381/      F1 : 40 2D               	JUN CMD_LOOP		; return to command loop
     382/      F3 :                     
     383/      F3 : 00                  	NOP
     384/      F4 : 00                  	NOP
     385/      F5 : 00                  	NOP
     386/      F6 : 00                  	NOP
     387/      F7 :                     ;;;---------------------------------------------------------------------------
     388/      F7 :                     ;;; COMMAND_DL
     389/      F7 :                     ;;; Dump Logical Memory
     390/      F7 :                     ;;;---------------------------------------------------------------------------
     391/      F7 :                     COMMAND_DL:
     392/      F7 : 20 2C               	FIM P0, REG16_MON_ADDR
     393/      F9 : 57 E1               	JMS LD_P1_REG8P0
     394/      FB : (MACRO)              	LD_CNT_P1
     394/      FB : A2                                  LD P1_HI
     394/      FC : BA                                  XCH CNT_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/04/10 10:54:46


     394/      FD : A3                                  LD P1_LO
     394/      FE : BB                                  XCH CNT_LO
     395/      FF : D8                  	LDM loop(8)
     396/     100 : BA                  	XCH CNT_I
     397/     101 :                     CMDDL_L0:
     398/     101 : 22 2C               	FIM P1, REG16_MON_ADDR
     399/     103 : 57 F9               	JMS PRINTHEX_REG16P1
     400/     105 : 22 3A               	FIM P1, ':'
     401/     107 : 5C 5F               	JMS PUTCHAR_P1
     402/     109 :                     CMDDL_L1:	
     403/     109 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     404/     10B : 5C 85               	JMS PRINTHEX_P1
     405/     10D :                     
     406/     10D : 7B 09               	ISZ CNT_J, CMDDL_L1
     407/     10F : 5C A0               	JMS PRINT_CRLF
     408/     111 : 7A 01               	ISZ CNT_I, CMDDL_L0
     409/     113 :                     CMDDL_NEXT:
     410/     113 : 40 2D               	JUN CMD_LOOP		; return to command loop
     411/     115 :                     
     412/     115 :                     ;;;---------------------------------------------------------------------------
     413/     115 :                     ;;; COMMAND_DD
     414/     115 :                     ;;; Dump Data RAM
     415/     115 :                     ;;; input:
     416/     115 :                     ;;; REG16_MON_ADDR
     417/     115 :                     ;;; RAM0=00H-3FH
     418/     115 :                     ;;; RAM1=40H-7FH
     419/     115 :                     ;;; RAM2=80H-BFH
     420/     115 :                     ;;; RAM3=C0H-FFH
     421/     115 :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     422/     115 :                     ;;;---------------------------------------------------------------------------
     423/     115 :                     COMMAND_DD:
     424/     115 : 2E 2C               	FIM P7, REG16_MON_ADDR
     425/     117 : 57 D9               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     426/     119 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     426/     119 : A2                                  LD P1_HI
     426/     11A : B0                                  XCH P0_HI
     426/     11B : A3                                  LD P1_LO
     426/     11C : B1                                  XCH P0_LO
     427/     11D :                     
     428/     11D :                     	;; PRINT 4 registers
     429/     11D : DC                  	LDM loop(4)		; PRINT 4 regs
     430/     11E : BA                  	XCH CNT_I		; I=loop(4)
     431/     11F :                     	;; PRINT 16 characters
     432/     11F :                     CMDDD_L1:
     433/     11F : 5D 55               	JMS PRINT_DATARAM_P0
     434/     121 : 60                  	INC P0_HI
     435/     122 : 7A 1F               	ISZ CNT_I, CMDDD_L1
     436/     124 :                     
     437/     124 : (MACRO)              	LD_P1_P0
     437/     124 : A0                                  LD P0_HI
     437/     125 : B2                                  XCH P1_HI
     437/     126 : A1                                  LD P0_LO
     437/     127 : B3                                  XCH P1_LO
     438/     128 : 20 2C               	FIM P0, REG16_MON_ADDR
     439/     12A : 57 C1               	JMS LD_REG8P0_P1
     440/     12C :                     
     441/     12C : 40 2D               	JUN CMD_LOOP		; return to command loop
     442/     12E :                     	
     443/     12E :                     ;;;---------------------------------------------------------------------------
     444/     12E :                     ;;; COMMAND_G
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/04/10 10:54:46


     445/     12E :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     446/     12E :                     ;;;---------------------------------------------------------------------------
     447/     12E :                     COMMAND_G:
     448/     12E : 4F 00               	JUN PM_RAM_START
     449/     130 :                     
     450/     130 :                     ;;;---------------------------------------------------------------------------
     451/     130 :                     ;;; COMMAND_H
     452/     130 :                     ;;; Select Memory Space and address
     453/     130 :                     ;;; 'D' = Data Memory
     454/     130 :                     ;;; 'P' = Physical Program Memory
     455/     130 :                     ;;; 'L' = Logical Program Memory
     456/     130 :                     ;;;---------------------------------------------------------------------------
     457/     130 :                     COMMAND_H:
     458/     130 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     459/     132 : 5D 32               	JMS ISZEROORNOT_P1
     460/     134 : 1C 38               	JCN ZN, CMDH_SET
     461/     136 : 41 42               	JUN CMDH_EXIT
     462/     138 :                     CMDH_SET:
     463/     138 : 5D 49               	JMS TOUPPER_P1
     464/     13A : 24 38               	FIM P2, REG8_MON_MEMSPACE
     465/     13C : 57 CD               	JMS LD_REG8P2_P1
     466/     13E : 22 2C               	FIM P1, REG16_MON_ADDR
     467/     140 : 58 99               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     468/     142 :                     CMDH_EXIT:
     469/     142 : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     470/     144 : 57 D9               	JMS LD_P1_REG8P7
     471/     146 : 5C 5F               	JMS PUTCHAR_P1
     472/     148 : 22 2C               	FIM P1, REG16_MON_ADDR
     473/     14A : 57 F9               	JMS PRINTHEX_REG16P1
     474/     14C : 5C A0               	JMS PRINT_CRLF
     475/     14E : 40 2D               	JUN CMD_LOOP
     476/     150 :                     
     477/     150 :                     ;;;---------------------------------------------------------------------------
     478/     150 :                     ;;; COMMAND_L
     479/     150 :                     ;;; Load to Logical Memory
     480/     150 :                     ;;; Intel Hex format, no checksum check
     481/     150 :                     ;;; data lengh must be 0to10H/line
     482/     150 :                     ;;;---------------------------------------------------------------------------
     483/     150 :                     COMMAND_L:
     484/     150 :                     CMDL_START:
     485/     150 : 20 28               	FIM P0, REG16_MON_INDEX
     486/     152 : 24 FD               	FIM P2, up(PM16_LINEBUF)
     487/     154 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     488/     156 : 57 66               	JMS LD_REG16P0_P2P3
     489/     158 : 5B C4               	JMS GETLINE_PM16REG16P0
     490/     15A :                     
     491/     15A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     492/     15C : 5D 32               	JMS ISZEROORNOT_P1
     493/     15E : 1C 62               	JCN ZN, CMDL_L0
     494/     160 : 41 BA               	JUN CMDL_EXIT
     495/     162 :                     CMDL_L0:
     496/     162 : 2E 3A               	FIM P7, ':'
     497/     164 : 5D 25               	JMS CMP_P1P7
     498/     166 : 14 6A               	JCN Z, CMDL_L1
     499/     168 : 41 90               	JUN CMDL_ERROR
     500/     16A :                     CMDL_L1:
     501/     16A : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     502/     16C : (MACRO)              	LD_CNT_P1				; count
     502/     16C : A2                                  LD P1_HI
     502/     16D : BA                                  XCH CNT_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/04/10 10:54:46


     502/     16E : A3                                  LD P1_LO
     502/     16F : BB                                  XCH CNT_LO
     503/     170 :                     
     504/     170 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     505/     172 : (MACRO)              	LD_P2_P1
     505/     172 : A2                                  LD P1_HI
     505/     173 : B4                                  XCH P2_HI
     505/     174 : A3                                  LD P1_LO
     505/     175 : B5                                  XCH P2_LO
     506/     176 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     507/     178 : (MACRO)              	LD_P3_P1
     507/     178 : A2                                  LD P1_HI
     507/     179 : B6                                  XCH P3_HI
     507/     17A : A3                                  LD P1_LO
     507/     17B : B7                                  XCH P3_LO
     508/     17C : 22 2C               	FIM P1, REG16_MON_ADDR
     509/     17E : 57 60               	JMS LD_REG16P1_P2P3
     510/     180 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     511/     182 : 5D 32               	JMS ISZEROORNOT_P1
     512/     184 : 1C 88               	JCN ZN, CMDL_L2
     513/     186 : 41 9A               	JUN CMDL_READLOOP
     514/     188 :                     CMDL_L2:
     515/     188 : 2E 01               	FIM P7, 01H
     516/     18A : 5D 25               	JMS CMP_P1P7
     517/     18C : 1C 90               	JCN ZN, CMDL_ERROR
     518/     18E : 41 BA               	JUN CMDL_EXIT
     519/     190 :                     CMDL_ERROR:
     520/     190 : 58 4F               	JMS DEC_REG16P0
     521/     192 : 5C 0A               	JMS PRINTSTR_PM16REG16P0
     522/     194 : 20 57               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     523/     196 : 5E 00               	JMS PRINTSTR_P0
     524/     198 : 40 2D               	JUN CMD_LOOP
     525/     19A :                     CMDL_READLOOP:
     526/     19A : AB                  	LD CNT_LO
     527/     19B : 1C A2               	JCN ZN, CMDL_CONTINUE
     528/     19D : AA                  	LD CNT_HI
     529/     19E : 1C A2               	JCN ZN, CMDL_CONTINUE
     530/     1A0 : 41 50               	JUN  CMDL_START		; continue to read next line
     531/     1A2 :                     CMDL_CONTINUE:
     532/     1A2 : 20 28               	FIM P0, REG16_MON_INDEX
     533/     1A4 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     534/     1A6 : 14 AA               	JCN Z, CMDL_L3
     535/     1A8 : 41 50               	JUN CMDL_START		; continue to read next line
     536/     1AA :                     CMDL_L3:
     537/     1AA : 20 2C               	FIM P0, REG16_MON_ADDR
     538/     1AC : 5B 81               	JMS LD_PM16REG16P0_P1
     539/     1AE : 58 3F               	JMS INC_REG16P0
     540/     1B0 : AB                  	LD CNT_LO
     541/     1B1 : F8                  	DAC
     542/     1B2 : BB                  	XCH CNT_LO
     543/     1B3 : 12 B8               	JCN C, CMDL_L5		; no borrow then skip
     544/     1B5 : AA                  	LD CNT_HI
     545/     1B6 : F8                  	DAC
     546/     1B7 : BA                  	XCH CNT_HI
     547/     1B8 :                     CMDL_L5:
     548/     1B8 : 41 9A               	JUN CMDL_READLOOP
     549/     1BA :                     CMDL_EXIT:
     550/     1BA :                     	;; set memory space to logical
     551/     1BA : 20 38               	FIM P0, REG8_MON_MEMSPACE
     552/     1BC : 22 4C               	FIM P1, 'L'
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/04/10 10:54:46


     553/     1BE : 57 C1               	JMS LD_REG8P0_P1
     554/     1C0 : 40 2D               	JUN CMD_LOOP
     555/     1C2 :                     	
     556/     1C2 :                     ;;;---------------------------------------------------------------------------
     557/     1C2 :                     ;;; COMMAND_C
     558/     1C2 :                     ;;; Clear Program Memory
     559/     1C2 :                     ;;;---------------------------------------------------------------------------
     560/     1C2 :                     COMMAND_C:
     561/     1C2 :                     ;;; 	FIM CNT, loops(1, 16)
     562/     1C2 : 2A 00               	FIM CNT, loops(16, 16)
     563/     1C4 :                     CMDPMC_BANKLOOP:
     564/     1C4 : (MACRO)              	LD_P1_CNT
     564/     1C4 : AA                                  LD CNT_HI
     564/     1C5 : B2                                  XCH P1_HI
     564/     1C6 : AB                                  LD CNT_LO
     564/     1C7 : B3                                  XCH P1_LO
     565/     1C8 : 5B B9               	JMS PM_SELECTPMB_P1
     566/     1CA : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     567/     1CC : 22 00               	FIM P1, 00H		; data to fill
     568/     1CE :                     CMDPMC_L1:
     569/     1CE : 5B A1               	JMS PM_WRITE_P0_P1
     570/     1D0 : 71 CE               	ISZ R1, CMDPMC_L1
     571/     1D2 : 70 CE               	ISZ R0, CMDPMC_L1
     572/     1D4 :                     
     573/     1D4 : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     574/     1D6 : 7B C4               	ISZ CNT_J, CMDPMC_BANKLOOP
     575/     1D8 : 7A C4               	ISZ CNT_I, CMDPMC_BANKLOOP
     576/     1DA :                     
     577/     1DA :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     578/     1DA :                     	
     579/     1DA : 40 2D               	JUN CMD_LOOP		; return to command loop
     580/     1DC :                     
     581/     1DC :                     ;;;	org 0200H
     582/     1DC :                     ;;;---------------------------------------------------------------------------
     583/     1DC :                     ;;; 8080 emulator main loop
     584/     1DC :                     ;;;---------------------------------------------------------------------------
     585/     1DC :                     COMMAND_E:
     586/     1DC : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     587/     1DE : 58 99               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     588/     1E0 :                     EMU_START:
     589/     1E0 : 20 6E               	FIM P0, lo(STR_EMU_MESSAGE)
     590/     1E2 : 5E 00               	JMS PRINTSTR_P0
     591/     1E4 :                     
     592/     1E4 :                     EMU_LOOP:
     593/     1E4 : 2E 24               	FIM P7, REG4_EMU_STEP
     594/     1E6 : (MACRO)              	LD_ACC_REG4P7
     594/     1E6 : 2F                          SRC P7
     594/     1E7 : E9                          RDM
     595/     1E8 : 14 F4               	JCN Z, EMU_EXEC
     596/     1EA : 58 BA               	JMS EMU_PRINT_REGISTERS
     597/     1EC : 5C 37               	JMS GETCHAR_P1
     598/     1EE : 2E 2E               	FIM P7, '.'
     599/     1F0 : 5D 25               	JMS CMP_P1P7
     600/     1F2 : 14 F8               	JCN Z, EMU_EXIT
     601/     1F4 :                     EMU_EXEC:
     602/     1F4 :                     	
     603/     1F4 : 51 FA               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     604/     1F6 :                     			; but it can return here by BBL from various routines
     605/     1F6 :                     			; in contrast JUN consumes 2 bytes
     606/     1F6 : 41 E4               	JUN EMU_LOOP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/04/10 10:54:46


     607/     1F8 :                     
     608/     1F8 :                     EMU_EXIT:
     609/     1F8 : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     610/     1FA :                     
     611/     1FA :                     ;;;---------------------------------------------------------------------------
     612/     1FA :                     ;;; EXEC_CODE
     613/     1FA :                     ;;;---------------------------------------------------------------------------
     614/     1FA :                     EXEC_CODE:
     615/     1FA : 20 14               	FIM P0, REG16_PC
     616/     1FC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     617/     1FE :                     
     618/     1FE : A2                  	LD P1_HI		;
     619/     1FF : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     620/     200 : 1A 04               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     621/     202 : 42 1A               	JUN CODE_80FF		; 80H<=CODE<=FFH
     622/     204 :                     
     623/     204 :                     ;;;---------------------------------------------------------------------------
     624/     204 :                     CODE_007F:			; 00H<=CODE<=7FH
     625/     204 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     626/     205 : 1A 09               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     627/     207 : 42 1F               	JUN CODE_407F		; 40H<=CODE<=7FH
     628/     209 :                     ;;;---------------------------------------------------------------------------
     629/     209 :                     CODE_003F:			; 00H<=CODE<=3FH
     630/     209 : A3                  	LD P1_LO
     631/     20A : 1C 11               	JCN NZ,CODE_NOT_NOP
     632/     20C : A2                  	LD P1_HI
     633/     20D : 1C 11               	JCN NZ,CODE_NOT_NOP
     634/     20F : 42 89               	JUN CODE_00H		; NOP
     635/     211 :                     CODE_NOT_NOP:
     636/     211 :                     CODE_C0FF:
     637/     211 :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     638/     211 :                     	; prepare for jump table
     639/     211 :                     	; P1=P1<<1 and jump to dispatch table
     640/     211 : A3                  	LD P1_LO
     641/     212 : F1                  	CLC
     642/     213 : F5                  	RAL
     643/     214 : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     644/     215 : A2                  	LD P1_HI
     645/     216 : F5                  	RAL
     646/     217 : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     647/     218 : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     648/     21A :                     ;;;---------------------------------------------------------------------------
     649/     21A :                     CODE_80FF:			; 80H<=P1<=FFH
     650/     21A : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     651/     21B : 1A 1F               	JCN CN, CODE_80BF
     652/     21D : 42 11               	JUN CODE_C0FF		; C0H<=P1<=FFH
     653/     21F :                     
     654/     21F :                     ;;;---------------------------------------------------------------------------
     655/     21F :                     CODE_407F:			; 40H<=P1<=7FH
     656/     21F :                     CODE_80BF:			; 80H<=P1<=BFH
     657/     21F :                     ;;;---------------------------------------------------------------------------
     658/     21F :                     ;;; Common procedure for 40H<=CODE<=BFH
     659/     21F :                     ;;; save source value to REG(SRC)
     660/     21F :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     661/     21F :                     ;;; 8080 register code SSS
     662/     21F :                     ;;; 0 1 2 3 4 5 6 7
     663/     21F :                     ;;; B C D E H L M A
     664/     21F :                     ;;; ADDRESS=~(xxx)<<1
     665/     21F :                     ;;;---------------------------------------------------------------------------
     666/     21F : 5B 12               	JMS PUSH_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/04/10 10:54:46


     667/     221 :                     	;; set source register address to P1
     668/     221 : F0                  	CLB
     669/     222 : B2                  	XCH P1_HI		; P1_HI=0000
     670/     223 : A3                  	LD P1_LO
     671/     224 : F4                  	CMA
     672/     225 : F1                  	CLC
     673/     226 : F5                  	RAL
     674/     227 : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     675/     228 :                     
     676/     228 : A3                  	LD P1_LO
     677/     229 :                     
     678/     229 : D2                   	LDM REG8_M		; check if SRCREG==M or not
     679/     22A : F1                  	CLC
     680/     22B : 93                  	SUB P1_LO
     681/     22C : 14 32               	JCN Z, GETSRC_LOAD_M
     682/     22E :                     
     683/     22E : 57 E7               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     684/     230 : 42 38                       JUN GETSRC_SAVE_SRCVALUE
     685/     232 :                     
     686/     232 :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     687/     232 : 20 04               	FIM P0, REG16_HL
     688/     234 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     689/     236 : 58 4F               	JMS DEC_REG16P0
     690/     238 :                     
     691/     238 :                     GETSRC_SAVE_SRCVALUE:
     692/     238 :                     	;; set source register value to P1
     693/     238 : 20 12               	FIM P0, REG8_SRC
     694/     23A : 57 C1               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     695/     23C :                     
     696/     23C : 5B 43               	JMS POP_P1
     697/     23E : A2                  	LD P1_HI
     698/     23F : F5                  	RAL
     699/     240 : 1A 44               	JCN CN, CODE_407F_MOV	; execute MOV
     700/     242 : 42 6C               	JUN CODE_80BF_ARITH_LOGIC
     701/     244 :                     
     702/     244 :                     ;;;---------------------------------------------------------------------------
     703/     244 :                     ;;; Execute MOV code
     704/     244 :                     ;;; source value is already stored to REG8(SRC)
     705/     244 :                     ;;;---------------------------------------------------------------------------
     706/     244 :                     CODE_407F_MOV:
     707/     244 : 2E 76               	FIM P7, 76H		; check HLT
     708/     246 : 5D 25               	JMS CMP_P1P7
     709/     248 : 1C 4C               	JCN ZN, CODE_MOV_L1
     710/     24A : 42 7B               	JUN CODE_76H		; HLT
     711/     24C :                     
     712/     24C :                     CODE_MOV_L1:
     713/     24C :                     	;; set destination REGISTER address to P2
     714/     24C : 24 00               	FIM P2, 00H
     715/     24E : A2                  	LD P1_HI
     716/     24F : F5                  	RAL
     717/     250 : F5                  	RAL
     718/     251 : F1                  	CLC
     719/     252 : F6                  	RAR
     720/     253 : F6                  	RAR
     721/     254 : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     722/     255 : A3                  	LD P1_LO
     723/     256 : F5                  	RAL			; CY=bit(3)
     724/     257 : A5                  	LD P2_LO
     725/     258 : F5                  	RAL
     726/     259 : F4                  	CMA
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/04/10 10:54:46


     727/     25A : F5                  	RAL
     728/     25B : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     729/     25C :                     
     730/     25C : 22 12               	FIM P1, REG8_SRC
     731/     25E : 57 E7               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     732/     260 :                     
     733/     260 :                     				; write SRC value to DST
     734/     260 : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     735/     261 : F1                  	CLC
     736/     262 : 95                  	SUB P2_LO		; check DST(P2) is M or not
     737/     263 : 14 68               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     738/     265 :                     
     739/     265 : 57 CD               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     740/     267 : C0                  	BBL 0
     741/     268 :                     
     742/     268 :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
     743/     268 : 20 04               	FIM P0, REG16_HL
     744/     26A : 4B 81               	JUN LD_PM16REG16P0_P1
     745/     26C :                     ;;; 	BBL 0
     746/     26C :                     
     747/     26C :                     
     748/     26C :                     ;;;---------------------------------------------------------------------------
     749/     26C :                     CODE_80BF_ARITH_LOGIC:
     750/     26C :                     	; prepare P2 for jump table
     751/     26C :                     	; P2=0F0H + CODE.bit(543)0
     752/     26C : 24 F0               	FIM P2, 0F0H		; P2=0F0H
     753/     26E : A3                  	LD P1_LO		; ACC=CODE(3210)
     754/     26F : F5                  	RAL			; CY=CODE.bit(3)
     755/     270 : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     756/     271 : F5                  	RAL			; ACC=CODE.bit(6543)
     757/     272 : F1                  	CLC			; CY=0
     758/     273 : F5                  	RAL			; ACC=CODE.bit(543).0
     759/     274 : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     760/     275 :                     
     761/     275 : 2E 12               	FIM P7, REG8_SRC
     762/     277 : 57 D9               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     763/     279 :                     
     764/     279 : 49 EF               	JUN JIN_P2_CODE_80BF
     765/     27B :                     
     766/     27B :                     ;;;---------------------------------------------------------------------------
     767/     27B :                     ;;; Emulate individual codes
     768/     27B :                     ;;;---------------------------------------------------------------------------
     769/     27B :                     CODE_76H:			; HLT
     770/     27B : 20 CB               	FIM P0, lo(STR_EMU_HLT)
     771/     27D : 5E 00               	JMS PRINTSTR_P0
     772/     27F : 2E 24               	FIM P7, REG4_EMU_STEP
     773/     281 : (MACRO)              	LD_ACC_REG4P7
     773/     281 : 2F                          SRC P7
     773/     282 : E9                          RDM
     774/     283 : 1C 87               	JCN ZN, CODE_76H_EXIT
     775/     285 : 58 BA               	JMS EMU_PRINT_REGISTERS	; print registers if continuous mode
     776/     287 :                     CODE_76H_EXIT:
     777/     287 : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     778/     289 :                     
     779/     289 :                     CODE_00H:			; NOP
     780/     289 : C0                  	BBL 0
     781/     28A :                     
     782/     28A :                     CODE_01H:			; LXI B,B3B2
     783/     28A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     784/     28C : 24 0C               	FIM P2, REG8_C
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/04/10 10:54:46


     785/     28E : 57 CD               	JMS LD_REG8P2_P1
     786/     290 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     787/     292 : 24 0E               	FIM P2, REG8_B
     788/     294 : 47 CD               	JUN LD_REG8P2_P1
     789/     296 :                     
     790/     296 :                     CODE_02H:			; STAX B
     791/     296 : 2E 00               	FIM P7, REG8_A
     792/     298 : 57 D9               	JMS LD_P1_REG8P7
     793/     29A : 20 0C               	FIM P0, REG16_BC
     794/     29C : 4B 81               	JUN LD_PM16REG16P0_P1
     795/     29E :                     
     796/     29E :                     CODE_03H:			; INX B
     797/     29E : 20 0C               	FIM P0, REG16_BC
     798/     2A0 : 48 3F               	JUN INC_REG16P0
     799/     2A2 :                     
     800/     2A2 :                     CODE_04H:			; INR B
     801/     2A2 : 22 0E               	FIM P1, REG8_B
     802/     2A4 : 44 48               	JUN CODE_INR
     803/     2A6 :                     	
     804/     2A6 :                     CODE_05H:			; DCR B
     805/     2A6 : 22 0E               	FIM P1, REG8_B
     806/     2A8 : 44 4E               	JUN CODE_DCR
     807/     2AA :                     
     808/     2AA :                     CODE_06H:			; MVI B,B2
     809/     2AA : 24 0E               	FIM P2, REG8_B
     810/     2AC : 44 54               	JUN CODE_MVI
     811/     2AE :                     ;;; 	BBL 0
     812/     2AE :                     
     813/     2AE :                     CODE_07H:			; RLC
     814/     2AE : 20 00               	FIM P0, REG8_A
     815/     2B0 : 57 E1               	JMS LD_P1_REG8P0
     816/     2B2 : A2                  	LD P1_HI
     817/     2B3 : F5                  	RAL			; CY=bit(7)
     818/     2B4 : A3                  	LD P1_LO
     819/     2B5 : F5                  	RAL
     820/     2B6 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     821/     2B7 : A2                  	LD P1_HI
     822/     2B8 : F5                  	RAL
     823/     2B9 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     824/     2BA : 56 5B               	JMS SETFLAG_C_CY
     825/     2BC : 47 C1               	JUN LD_REG8P0_P1
     826/     2BE :                     ;;;	BBL 0
     827/     2BE :                     
     828/     2BE :                     CODE_08H:			; ...
     829/     2BE : C0                  	BBL 0
     830/     2BF :                     	
     831/     2BF :                     CODE_09H:			; DAD B
     832/     2BF : 20 04               	FIM P0, REG16_HL
     833/     2C1 : 22 0C               	FIM P1, REG16_BC
     834/     2C3 : 58 84               	JMS ADD_REG16P0_REG16P1
     835/     2C5 : 46 5B               	JUN SETFLAG_C_CY
     836/     2C7 :                     ;;; 	BBL 0
     837/     2C7 :                     
     838/     2C7 :                     CODE_0AH:			; LDAX B
     839/     2C7 : 20 0C               	FIM P0, REG16_BC
     840/     2C9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     841/     2CB : 58 4F               	JMS DEC_REG16P0
     842/     2CD :                     	
     843/     2CD : 24 00               	FIM P2, REG8_A
     844/     2CF : 47 CD               	JUN LD_REG8P2_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/04/10 10:54:46


     845/     2D1 :                     ;;; 	BBL 0
     846/     2D1 :                     
     847/     2D1 :                     CODE_0BH:			; DCX B
     848/     2D1 : 20 0C               	FIM P0, REG16_BC
     849/     2D3 : 48 4F               	JUN DEC_REG16P0
     850/     2D5 :                     ;;; 	BBL 0
     851/     2D5 :                     	
     852/     2D5 :                     CODE_0CH:			; INR C
     853/     2D5 : 22 0C               	FIM P1, REG8_C
     854/     2D7 : 44 48               	JUN CODE_INR
     855/     2D9 :                     ;;; 	BBL 0
     856/     2D9 :                     
     857/     2D9 :                     CODE_0DH:			; DCR C
     858/     2D9 : 22 0C               	FIM P1, REG8_C
     859/     2DB : 44 4E               	JUN CODE_DCR
     860/     2DD :                     ;;; 	BBL 0
     861/     2DD :                     
     862/     2DD :                     CODE_0EH:			; MVI C,B2
     863/     2DD : 24 0C               	FIM P2, REG8_C
     864/     2DF : 44 54               	JUN CODE_MVI
     865/     2E1 :                     ;;; 	BBL 0
     866/     2E1 :                     
     867/     2E1 :                     CODE_0FH:			; RRC
     868/     2E1 : 20 00               	FIM P0, REG8_A
     869/     2E3 : 57 E1               	JMS LD_P1_REG8P0
     870/     2E5 : A3                  	LD P1_LO
     871/     2E6 : F6                  	RAR			; CY=bit(0)
     872/     2E7 : A2                  	LD P1_HI
     873/     2E8 : F6                  	RAR
     874/     2E9 : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     875/     2EA : A3                  	LD P1_LO
     876/     2EB : F6                  	RAR
     877/     2EC : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     878/     2ED : 56 5B               	JMS SETFLAG_C_CY
     879/     2EF : 47 C1               	JUN LD_REG8P0_P1
     880/     2F1 :                     ;;; 	BBL 0
     881/     2F1 :                     
     882/     2F1 :                     CODE_10H:			; ...
     883/     2F1 : C0                  	BBL 0
     884/     2F2 :                     
     885/     2F2 :                     CODE_11H:			; LXI D,B3B2
     886/     2F2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     887/     2F4 : 24 08               	FIM P2, REG8_E
     888/     2F6 : 57 CD               	JMS LD_REG8P2_P1
     889/     2F8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     890/     2FA : 24 0A               	FIM P2, REG8_D
     891/     2FC : 47 CD               	JUN LD_REG8P2_P1
     892/     2FE :                     
     893/     2FE :                     CODE_12H:			; STAX D
     894/     2FE : 2E 00               	FIM P7, REG8_A
     895/     300 : 57 D9               	JMS LD_P1_REG8P7
     896/     302 : 20 08               	FIM P0, REG16_DE
     897/     304 : 4B 81               	JUN LD_PM16REG16P0_P1
     898/     306 :                     	
     899/     306 :                     CODE_13H:			; INX D
     900/     306 : 20 08               	FIM P0, REG16_DE
     901/     308 : 48 3F               	JUN INC_REG16P0
     902/     30A :                     
     903/     30A :                     CODE_14H:			; INR D
     904/     30A : 22 0A               	FIM P1, REG8_D
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/04/10 10:54:46


     905/     30C : 44 48               	JUN CODE_INR
     906/     30E :                     
     907/     30E :                     CODE_15H:			; DCR D
     908/     30E : 22 0A               	FIM P1, REG8_D
     909/     310 : 44 4E               	JUN CODE_DCR
     910/     312 :                     ;;; 	BBL 0
     911/     312 :                     
     912/     312 :                     CODE_16H:			; MVI D,B2
     913/     312 : 24 0A               	FIM P2, REG8_D
     914/     314 : 44 54               	JUN CODE_MVI
     915/     316 :                     ;;; 	BBL 0
     916/     316 :                     
     917/     316 :                     CODE_17H:			; RAL
     918/     316 : 20 00               	FIM P0, REG8_A
     919/     318 : 57 E1               	JMS LD_P1_REG8P0	; P1=ACC
     920/     31A : 56 51               	JMS GETFLAG_C		; CY=FLAG_C
     921/     31C :                     ;;; 	RAR			; can be omitted because CY is already C
     922/     31C : A3                  	LD P1_LO
     923/     31D : F5                  	RAL
     924/     31E : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     925/     31F : A2                  	LD P1_HI
     926/     320 : F5                  	RAL
     927/     321 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     928/     322 : 56 5B               	JMS SETFLAG_C_CY
     929/     324 : 47 C1               	JUN LD_REG8P0_P1
     930/     326 :                     ;;;	BBL 0
     931/     326 :                     	
     932/     326 :                     CODE_18H:			; ...
     933/     326 : C0                  	BBL 0
     934/     327 :                     
     935/     327 :                     CODE_19H:			; DAD D
     936/     327 : 20 04               	FIM P0, REG16_HL
     937/     329 : 22 08               	FIM P1, REG16_DE
     938/     32B : 58 84               	JMS ADD_REG16P0_REG16P1
     939/     32D : 46 5B               	JUN SETFLAG_C_CY
     940/     32F :                     ;;;	BBL 0
     941/     32F :                     	
     942/     32F :                     CODE_1AH:			; LDAX D
     943/     32F : 20 08               	FIM P0, REG16_DE
     944/     331 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     945/     333 : 58 4F               	JMS DEC_REG16P0
     946/     335 :                     	
     947/     335 : 24 00               	FIM P2, REG8_A
     948/     337 : 47 CD               	JUN LD_REG8P2_P1
     949/     339 :                     ;;;	BBL 0
     950/     339 :                     
     951/     339 :                     CODE_1BH:			; DCX D
     952/     339 : 20 08               	FIM P0, REG16_DE
     953/     33B : 48 4F               	JUN DEC_REG16P0
     954/     33D :                     ;;;	BBL 0
     955/     33D :                     
     956/     33D :                     CODE_1CH:			; INR E
     957/     33D : 22 08               	FIM P1, REG8_E
     958/     33F : 44 48               	JUN CODE_INR
     959/     341 :                     ;;;	BBL 0
     960/     341 :                     
     961/     341 :                     CODE_1DH:			; DCR E
     962/     341 : 22 08               	FIM P1, REG8_E
     963/     343 : 44 4E               	JUN CODE_DCR
     964/     345 :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/04/10 10:54:46


     965/     345 :                     
     966/     345 :                     CODE_1EH:			; MVI E,B2
     967/     345 : 24 08               	FIM P2, REG8_E
     968/     347 : 44 54               	JUN CODE_MVI
     969/     349 :                     ;;;	BBL 0
     970/     349 :                     
     971/     349 :                     CODE_1FH:			; RAR
     972/     349 : 20 00               	FIM P0, REG8_A
     973/     34B : 57 E1               	JMS LD_P1_REG8P0	; P1=ACC
     974/     34D : 56 51               	JMS GETFLAG_C		; CY=FLAG_C
     975/     34F :                     ;;; 	RAR			; can be omitted because CY is already C
     976/     34F : A2                  	LD P1_HI
     977/     350 : F6                  	RAR
     978/     351 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
     979/     352 : A3                  	LD P1_LO
     980/     353 : F6                  	RAR
     981/     354 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     982/     355 : 56 5B               	JMS SETFLAG_C_CY
     983/     357 : 47 C1               	JUN LD_REG8P0_P1
     984/     359 :                     ;;;	BBL 0
     985/     359 :                     
     986/     359 :                     CODE_20H:			; ...
     987/     359 : C0                  	BBL 0
     988/     35A :                     
     989/     35A :                     CODE_21H:			; LXI H,B3B2
     990/     35A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     991/     35C : 24 04               	FIM P2, REG8_L
     992/     35E : 57 CD               	JMS LD_REG8P2_P1
     993/     360 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     994/     362 : 24 06               	FIM P2, REG8_H
     995/     364 : 47 CD               	JUN LD_REG8P2_P1
     996/     366 :                     ;;;	BBL 0
     997/     366 :                     
     998/     366 :                     CODE_22H:			; SHLD,B3B2
     999/     366 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1000/     368 : 24 1C               	FIM P2, REG8_ADDRL
    1001/     36A : 57 CD               	JMS LD_REG8P2_P1
    1002/     36C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1003/     36E : 24 1E               	FIM P2, REG8_ADDRH
    1004/     370 : 57 CD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1005/     372 :                     
    1006/     372 : 2E 04               	FIM P7, REG8_L
    1007/     374 : 57 D9               	JMS LD_P1_REG8P7
    1008/     376 : 20 1C               	FIM P0, REG16_ADDR
    1009/     378 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
    1010/     37A : 58 3F               	JMS INC_REG16P0		; REG(ADDR)++
    1011/     37C :                     	
    1012/     37C : 2E 06               	FIM P7, REG8_H
    1013/     37E : 57 D9               	JMS LD_P1_REG8P7
    1014/     380 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
    1015/     382 : 48 3F               	JUN INC_REG16P0		; REG(ADDR)++ and return
    1016/     384 :                     ;;;	BBL 0
    1017/     384 :                     
    1018/     384 :                     	
    1019/     384 :                     CODE_23H:			; INX H
    1020/     384 : 20 04               	FIM P0, REG16_HL
    1021/     386 : 48 3F               	JUN INC_REG16P0
    1022/     388 :                     ;;;	BBL 0
    1023/     388 :                     
    1024/     388 :                     CODE_24H:			; INR H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/04/10 10:54:46


    1025/     388 : 22 06               	FIM P1, REG8_H
    1026/     38A : 44 48               	JUN CODE_INR
    1027/     38C :                     ;;;	BBL 0
    1028/     38C :                     
    1029/     38C :                     CODE_25H:			; DCR H
    1030/     38C : 22 06               	FIM P1, REG8_H
    1031/     38E : 44 4E               	JUN CODE_DCR
    1032/     390 :                     ;;;	BBL 0
    1033/     390 :                     
    1034/     390 :                     CODE_26H:			; MVI H,B2
    1035/     390 : 24 06               	FIM P2, REG8_H
    1036/     392 : 44 54               	JUN CODE_MVI
    1037/     394 :                     ;;;	BBL 0
    1038/     394 :                     
    1039/     394 :                     CODE_27H:			; DAA
    1040/     394 :                     				; This is not properly implemeted
    1041/     394 :                     				; due to the lack of AC(CY4) flag
    1042/     394 : 20 00               	FIM P0, REG8_A
    1043/     396 : 57 E1               	JMS LD_P1_REG8P0
    1044/     398 : A3                  	LD P1_LO
    1045/     399 : FB                  	DAA
    1046/     39A : B3                  	XCH P1_LO		; P1_LO=DAA(P1_LO), CY=0 or 1
    1047/     39B : D0                  	LDM 0
    1048/     39C : 82                  	ADD P1_HI		; ACC=P1_HI+CY
    1049/     39D : FB                  	DAA
    1050/     39E : B2                  	XCH P1_HI
    1051/     39F :                     	
    1052/     39F : 47 C1               	JUN LD_REG8P0_P1
    1053/     3A1 :                     ;;;	BBL 0
    1054/     3A1 :                     
    1055/     3A1 :                     CODE_28H:			; ...
    1056/     3A1 : C0                  	BBL 0
    1057/     3A2 :                     
    1058/     3A2 :                     CODE_29H:			; DAD H
    1059/     3A2 : 20 04               	FIM P0, REG16_HL
    1060/     3A4 : 22 04               	FIM P1, REG16_HL
    1061/     3A6 : 58 84               	JMS ADD_REG16P0_REG16P1
    1062/     3A8 : 46 5B               	JUN SETFLAG_C_CY
    1063/     3AA :                     ;;;	BBL 0
    1064/     3AA :                     
    1065/     3AA :                     CODE_2AH:			; LHLD,B3B2
    1066/     3AA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1067/     3AC : 24 1C               	FIM P2, REG8_ADDRL
    1068/     3AE : 57 CD               	JMS LD_REG8P2_P1
    1069/     3B0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1070/     3B2 : 24 1E               	FIM P2, REG8_ADDRH
    1071/     3B4 : 57 CD               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1072/     3B6 :                     
    1073/     3B6 : 20 1C               	FIM P0, REG16_ADDR
    1074/     3B8 : 24 04               	FIM P2, REG8_L
    1075/     3BA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1076/     3BC : 57 CD               	JMS LD_REG8P2_P1
    1077/     3BE :                     
    1078/     3BE : 24 06               	FIM P2, REG8_H
    1079/     3C0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1080/     3C2 : 47 CD               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1081/     3C4 :                     ;;;	BBL 0
    1082/     3C4 :                     
    1083/     3C4 :                     CODE_2BH:			; DCX H
    1084/     3C4 : 20 04               	FIM P0, REG16_HL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/04/10 10:54:46


    1085/     3C6 : 48 4F               	JUN DEC_REG16P0
    1086/     3C8 :                     ;;;	BBL 0
    1087/     3C8 :                     
    1088/     3C8 :                     CODE_2CH:			; INR L
    1089/     3C8 : 22 04               	FIM P1, REG8_L
    1090/     3CA : 44 48               	JUN CODE_INR
    1091/     3CC :                     ;;;	BBL 0
    1092/     3CC :                     
    1093/     3CC :                     CODE_2DH:			; DCR L
    1094/     3CC : 22 04               	FIM P1, REG8_L
    1095/     3CE : 44 4E               	JUN CODE_DCR
    1096/     3D0 :                     ;;;	BBL 0
    1097/     3D0 :                     
    1098/     3D0 :                     CODE_2EH:			; MVI L,B2
    1099/     3D0 : 24 04               	FIM P2, REG8_L
    1100/     3D2 : 44 54               	JUN CODE_MVI
    1101/     3D4 :                     ;;;	BBL 0
    1102/     3D4 :                     
    1103/     3D4 :                     CODE_2FH:			; CMA
    1104/     3D4 : 20 00               	FIM P0, REG8_A		; A=~A
    1105/     3D6 : 57 E1               	JMS LD_P1_REG8P0
    1106/     3D8 : A3                  	LD P1_LO
    1107/     3D9 : F4                  	CMA
    1108/     3DA : B3                  	XCH P1_LO
    1109/     3DB :                     
    1110/     3DB : A2                  	LD P1_HI
    1111/     3DC : F4                  	CMA
    1112/     3DD : B2                  	XCH P1_HI
    1113/     3DE : 47 C1               	JUN LD_REG8P0_P1
    1114/     3E0 :                     ;;;	BBL 0
    1115/     3E0 :                     	
    1116/     3E0 :                     CODE_30H:			; ...
    1117/     3E0 : C0                  	BBL 0
    1118/     3E1 :                     
    1119/     3E1 :                     CODE_31H:			; LXI SP, B3B2
    1120/     3E1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1121/     3E3 : 24 18               	FIM P2, REG8_SPL
    1122/     3E5 : 57 CD               	JMS LD_REG8P2_P1
    1123/     3E7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1124/     3E9 : 24 1A               	FIM P2, REG8_SPH
    1125/     3EB : 47 CD               	JUN LD_REG8P2_P1
    1126/     3ED :                     ;;;	BBL 0
    1127/     3ED :                     
    1128/     3ED :                     CODE_32H:			; STA B3B2
    1129/     3ED : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1130/     3EF : 24 1C               	FIM P2, REG8_ADDRL
    1131/     3F1 : 57 CD               	JMS LD_REG8P2_P1
    1132/     3F3 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1133/     3F5 : 24 1E               	FIM P2, REG8_ADDRH
    1134/     3F7 : 57 CD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1135/     3F9 :                     
    1136/     3F9 : 2E 00               	FIM P7, REG8_A
    1137/     3FB : 57 D9               	JMS LD_P1_REG8P7	; P1=A
    1138/     3FD : 20 1C               	FIM P0, REG16_ADDR
    1139/     3FF : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1140/     401 :                     ;;;	BBL 0
    1141/     401 :                     	
    1142/     401 :                     CODE_33H:			; INX SP
    1143/     401 : 20 18               	FIM P0, REG16_SP
    1144/     403 : 48 3F               	JUN INC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/04/10 10:54:46


    1145/     405 :                     ;;;	BBL 0
    1146/     405 :                     
    1147/     405 :                     CODE_34H:			; INR M
    1148/     405 : 20 04               	FIM P0, REG16_HL
    1149/     407 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1150/     409 : 58 4F               	JMS DEC_REG16P0
    1151/     40B :                     	
    1152/     40B : 5C BF               	JMS INC_P1
    1153/     40D : 5B 81               	JMS LD_PM16REG16P0_P1
    1154/     40F :                     
    1155/     40F : 46 75               	JUN SETFLAG_ZSP_P1
    1156/     411 :                     ;;;	BBL 0
    1157/     411 :                     
    1158/     411 :                     CODE_35H:			; DCR M
    1159/     411 : 20 04               	FIM P0, REG16_HL
    1160/     413 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1161/     415 : 58 4F               	JMS DEC_REG16P0
    1162/     417 :                     	
    1163/     417 : 5C C5               	JMS DEC_P1
    1164/     419 : 5B 81               	JMS LD_PM16REG16P0_P1
    1165/     41B :                     
    1166/     41B : 46 75               	JUN SETFLAG_ZSP_P1
    1167/     41D :                     ;;;	BBL 0
    1168/     41D :                     	
    1169/     41D :                     CODE_36H:			; MVI M, B2
    1170/     41D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1171/     41F : 20 04               	FIM P0, REG16_HL
    1172/     421 : 4B 81               	JUN LD_PM16REG16P0_P1
    1173/     423 :                     ;;;	BBL 0
    1174/     423 :                     	
    1175/     423 :                     CODE_37H:			; STC
    1176/     423 : 46 66               	JUN SETFLAG_C_1
    1177/     425 :                     ;;;	BBL 0
    1178/     425 :                     
    1179/     425 :                     CODE_38H:			; ...
    1180/     425 : C0                  	BBL 0
    1181/     426 :                     
    1182/     426 :                     CODE_39H:			; DAD SP
    1183/     426 : 20 04               	FIM P0, REG16_HL
    1184/     428 : 22 18               	FIM P1, REG16_SP
    1185/     42A : 58 84               	JMS ADD_REG16P0_REG16P1
    1186/     42C : 46 5B               	JUN SETFLAG_C_CY
    1187/     42E :                     ;;;	BBL 0
    1188/     42E :                     
    1189/     42E :                     CODE_3AH:			; LDA B2B3
    1190/     42E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1191/     430 : 24 1C               	FIM P2, REG8_ADDRL
    1192/     432 : 57 CD               	JMS LD_REG8P2_P1
    1193/     434 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1194/     436 : 24 1E               	FIM P2, REG8_ADDRH
    1195/     438 : 57 CD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1196/     43A :                     
    1197/     43A : 20 1C               	FIM P0, REG16_ADDR
    1198/     43C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1199/     43E : 24 00               	FIM P2, REG8_A
    1200/     440 : 47 CD               	JUN LD_REG8P2_P1	; P1=A and return
    1201/     442 :                     ;;;	BBL 0
    1202/     442 :                     
    1203/     442 :                     CODE_3BH:			; DCX SP
    1204/     442 : 20 18               	FIM P0, REG16_SP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/04/10 10:54:46


    1205/     444 : 48 4F               	JUN DEC_REG16P0
    1206/     446 :                     ;;;	BBL 0
    1207/     446 :                     
    1208/     446 :                     CODE_3CH:			; INR A
    1209/     446 : 22 00               	FIM P1, REG8_A
    1210/     448 :                     CODE_INR:
    1211/     448 : 57 7D               	JMS INC_REG8P1
    1212/     44A : 46 73               	JUN SETFLAG_ZSP_REG8P1
    1213/     44C :                     ;;;	BBL 0
    1214/     44C :                     
    1215/     44C :                     CODE_3DH:			; DCR A
    1216/     44C : 22 00               	FIM P1, REG8_A
    1217/     44E :                     CODE_DCR:
    1218/     44E : 57 9E               	JMS DEC_REG8P1
    1219/     450 : 46 73               	JUN SETFLAG_ZSP_REG8P1
    1220/     452 :                     ;;;	BBL 0
    1221/     452 :                     
    1222/     452 :                     CODE_3EH:			; MVI A,B2
    1223/     452 : 24 00               	FIM P2, REG8_A
    1224/     454 :                     CODE_MVI:
    1225/     454 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1226/     456 : 47 CD               	JUN LD_REG8P2_P1
    1227/     458 :                     ;;;	BBL 0
    1228/     458 :                     
    1229/     458 :                     CODE_3FH:			; CMC
    1230/     458 : 56 51               	JMS GETFLAG_C
    1231/     45A :                     ;;; 	RAR			; can be omitted because CY is already C
    1232/     45A : F3                  	CMC
    1233/     45B : 46 5B               	JUN SETFLAG_C_CY
    1234/     45D :                     ;;;	BBL 0
    1235/     45D :                     
    1236/     45D :                     CODE_C0H:			; RNZ
    1237/     45D : 56 3E               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1238/     45F : 44 A4               	JUN RET_IF0		; return if Z flag == 0
    1239/     461 :                     	;;;	BBL 0
    1240/     461 :                     
    1241/     461 :                     CODE_C1H:			; POP B
    1242/     461 : 24 0E               	FIM P2, REG8_B
    1243/     463 : 26 0C               	FIM P3, REG8_C
    1244/     465 : 45 D7               	JUN CODE_POP_REG8P2P3
    1245/     467 :                     ;;;	BBL 0
    1246/     467 :                     
    1247/     467 :                     CODE_C2H:			; JNZ
    1248/     467 : 56 3E               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1249/     469 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1250/     469 :                     ;;; this jump can be omitted
    1251/     469 :                     JMP_IF0:
    1252/     469 : 14 77               	JCN Z, CODE_JMP
    1253/     46B : 58 3F               	JMS INC_REG16P0		; PC+=2
    1254/     46D : 58 3F               	JMS INC_REG16P0
    1255/     46F : C0                  	BBL 0
    1256/     470 :                     JMP_IF1:
    1257/     470 : 1C 77               	JCN ZN, CODE_JMP
    1258/     472 : 58 3F               	JMS INC_REG16P0		; PC+=2
    1259/     474 : 58 3F               	JMS INC_REG16P0
    1260/     476 : C0                  	BBL 0
    1261/     477 :                     
    1262/     477 :                     CODE_C3H:			; JMP B3B2
    1263/     477 :                     CODE_JMP:
    1264/     477 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/04/10 10:54:46


    1265/     479 : (MACRO)              	LD_P3_P1
    1265/     479 : A2                                  LD P1_HI
    1265/     47A : B6                                  XCH P3_HI
    1265/     47B : A3                                  LD P1_LO
    1265/     47C : B7                                  XCH P3_LO
    1266/     47D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1267/     47F : (MACRO)              	LD_P2_P1
    1267/     47F : A2                                  LD P1_HI
    1267/     480 : B4                                  XCH P2_HI
    1267/     481 : A3                                  LD P1_LO
    1267/     482 : B5                                  XCH P2_LO
    1268/     483 :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1269/     483 : 47 66               	JUN LD_REG16P0_P2P3
    1270/     485 :                     ;;;	BBL 0
    1271/     485 :                     
    1272/     485 :                     CODE_C4H:			; CNZ
    1273/     485 : 56 3E               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1274/     487 : 44 BB               	JUN CALL_IF0		; call if Z==0
    1275/     489 :                     ;;;	BBL 0
    1276/     489 :                     
    1277/     489 :                     CODE_C5H:			; PUSH B
    1278/     489 : 24 0E               	FIM P2, REG8_B
    1279/     48B : 26 0C               	FIM P3, REG8_C
    1280/     48D : 45 EE               	JUN CODE_PUSH_REG8P2P3
    1281/     48F :                     ;;;	BBL 0
    1282/     48F :                     
    1283/     48F :                     CODE_C6H:			; ADI B2
    1284/     48F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1285/     491 :                     ADI_P1:
    1286/     491 : 20 00               	FIM P0, REG8_A
    1287/     493 : 57 6C               	JMS ADD_REG8P0_P1
    1288/     495 : 56 5B               	JMS SETFLAG_C_CY
    1289/     497 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1290/     499 :                     ;;;	BBL 0
    1291/     499 :                     	
    1292/     499 :                     CODE_C7H:			; RST 0
    1293/     499 : 24 00               	FIM P2, up(0<<3)
    1294/     49B : 26 00               	FIM P3, lo(0<<3)
    1295/     49D : 44 CE               	JUN CALL_P2P3
    1296/     49F :                     ;;;	BBL 0
    1297/     49F :                     	
    1298/     49F :                     CODE_C8H:			; RZ
    1299/     49F : 56 3E               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1300/     4A1 :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1301/     4A1 :                     ;;; this jump can be omitted
    1302/     4A1 :                     RET_IF1:
    1303/     4A1 : 1C A7               	JCN ZN, CODE_RET
    1304/     4A3 : C0                  	BBL 0
    1305/     4A4 :                     RET_IF0:
    1306/     4A4 : 14 A7               	JCN Z, CODE_RET
    1307/     4A6 : C0                  	BBL 0
    1308/     4A7 :                     CODE_C9H:			; RET
    1309/     4A7 :                     CODE_RET:	
    1310/     4A7 : 24 16               	FIM P2, REG8_PCH
    1311/     4A9 : 26 14               	FIM P3, REG8_PCL
    1312/     4AB : 45 D7               	JUN CODE_POP_REG8P2P3
    1313/     4AD :                     ;;;	BBL 0
    1314/     4AD :                     	
    1315/     4AD :                     CODE_CAH:			; JZ
    1316/     4AD : 56 3E               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/04/10 10:54:46


    1317/     4AF : 44 70               	JUN JMP_IF1		; jump if Z==1
    1318/     4B1 :                     ;;;	BBL 0
    1319/     4B1 :                     
    1320/     4B1 :                     CODE_CBH:			; ...
    1321/     4B1 : C0                  	BBL 0
    1322/     4B2 :                     
    1323/     4B2 :                     CODE_CCH:			; CZ
    1324/     4B2 : 56 3E               	JMS GETFLAG_Z
    1325/     4B4 :                     CALL_IF1:
    1326/     4B4 : 1C C2               	JCN ZN, CODE_CALL
    1327/     4B6 : 58 3F               	JMS INC_REG16P0		; PC+=2
    1328/     4B8 : 58 3F               	JMS INC_REG16P0
    1329/     4BA : C0                  	BBL 0
    1330/     4BB :                     CALL_IF0:	
    1331/     4BB : 14 C2               	JCN Z, CODE_CALL
    1332/     4BD : 58 3F               	JMS INC_REG16P0		; PC+=2
    1333/     4BF : 58 3F               	JMS INC_REG16P0
    1334/     4C1 : C0                  	BBL 0
    1335/     4C2 :                     
    1336/     4C2 :                     CODE_CDH:			; CALL B3B2
    1337/     4C2 :                     CODE_CALL:
    1338/     4C2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1339/     4C4 : (MACRO)              	LD_P3_P1
    1339/     4C4 : A2                                  LD P1_HI
    1339/     4C5 : B6                                  XCH P3_HI
    1339/     4C6 : A3                                  LD P1_LO
    1339/     4C7 : B7                                  XCH P3_LO
    1340/     4C8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1341/     4CA : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1341/     4CA : A2                                  LD P1_HI
    1341/     4CB : B4                                  XCH P2_HI
    1341/     4CC : A3                                  LD P1_LO
    1341/     4CD : B5                                  XCH P2_LO
    1342/     4CE :                     
    1343/     4CE :                     CALL_P2P3:
    1344/     4CE : 22 1C               	FIM P1, REG16_ADDR
    1345/     4D0 : 57 46               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
    1346/     4D2 :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1347/     4D2 : 57 66               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1348/     4D4 :                     	
    1349/     4D4 :                     	;; PUSH PC
    1350/     4D4 : 24 1E               	FIM P2, REG8_ADDRH
    1351/     4D6 : 26 1C               	FIM P3, REG8_ADDRL
    1352/     4D8 : 45 EE               	JUN CODE_PUSH_REG8P2P3
    1353/     4DA :                     ;;; 	BBL 0
    1354/     4DA :                     
    1355/     4DA :                     CODE_CEH:			; ACI B2
    1356/     4DA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1357/     4DC :                     ACI_P1:
    1358/     4DC : 56 51               	JMS GETFLAG_C
    1359/     4DE : 14 E2               	JCN Z, ACI_P1_NOCARRY
    1360/     4E0 : 5C BF               	JMS INC_P1
    1361/     4E2 :                     ACI_P1_NOCARRY:	
    1362/     4E2 : 20 00               	FIM P0, REG8_A
    1363/     4E4 : 57 6C               	JMS ADD_REG8P0_P1
    1364/     4E6 : 56 5B               	JMS SETFLAG_C_CY
    1365/     4E8 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1366/     4EA :                     ;;;	BBL 0
    1367/     4EA :                     	
    1368/     4EA :                     CODE_CFH:			; RST 1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/04/10 10:54:46


    1369/     4EA : 24 00               	FIM P2, up(1<<3)
    1370/     4EC : 26 08               	FIM P3, lo(1<<3)
    1371/     4EE : 44 CE               	JUN CALL_P2P3
    1372/     4F0 :                     	
    1373/     4F0 :                     CODE_D0H:			; RNC
    1374/     4F0 : 56 51               	JMS GETFLAG_C		;
    1375/     4F2 : 44 A4               	JUN RET_IF0		;
    1376/     4F4 :                     ;;;	BBL 0
    1377/     4F4 :                     
    1378/     4F4 :                     CODE_D1H:			; POP D
    1379/     4F4 : 24 0A               	FIM P2, REG8_D
    1380/     4F6 : 26 08               	FIM P3, REG8_E
    1381/     4F8 : 45 D7               	JUN CODE_POP_REG8P2P3
    1382/     4FA :                     ;;;	BBL 0
    1383/     4FA :                     
    1384/     4FA :                     CODE_D2H:			; JNC
    1385/     4FA : 56 51               	JMS GETFLAG_C
    1386/     4FC : 44 69               	JUN JMP_IF0
    1387/     4FE :                     ;;;	BBL 0
    1388/     4FE :                     
    1389/     4FE :                     CODE_D3H:			; OUT B2
    1390/     4FE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1391/     500 : 49 3A               	JUN EMULATE_OUT_P1
    1392/     502 :                     ;;;	BBL 0
    1393/     502 :                     	
    1394/     502 :                     CODE_D4H:			; CNC
    1395/     502 : 56 51               	JMS GETFLAG_C
    1396/     504 : 44 BB               	JUN CALL_IF0
    1397/     506 :                     ;;;	BBL 0
    1398/     506 :                     
    1399/     506 :                     CODE_D5H:			; PUSH D
    1400/     506 : 24 0A               	FIM P2, REG8_D
    1401/     508 : 26 08               	FIM P3, REG8_E
    1402/     50A : 45 EE               	JUN CODE_PUSH_REG8P2P3
    1403/     50C :                     ;;;	BBL 0
    1404/     50C :                     
    1405/     50C :                     CODE_D6H:			; SUI B2
    1406/     50C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1407/     50E :                     SUI_P1:
    1408/     50E : 20 00               	FIM P0, REG8_A
    1409/     510 : 57 8D               	JMS SUB_REG8P0_P1
    1410/     512 : 56 5B               	JMS SETFLAG_C_CY
    1411/     514 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1412/     516 :                     ;;;	BBL 0
    1413/     516 :                     	
    1414/     516 :                     CODE_D7H:			; RST 2
    1415/     516 : 24 00               	FIM P2, up(2<<3)
    1416/     518 : 26 10               	FIM P3, lo(2<<3)
    1417/     51A : 44 CE               	JUN CALL_P2P3
    1418/     51C :                     ;;;	BBL 0
    1419/     51C :                     	
    1420/     51C :                     CODE_D8H:			; RC
    1421/     51C : 56 51               	JMS GETFLAG_C
    1422/     51E : 44 A1               	JUN RET_IF1
    1423/     520 :                     ;;;	BBL 0
    1424/     520 :                     
    1425/     520 :                     CODE_D9H:			; ...
    1426/     520 : C0                  	BBL 0
    1427/     521 :                     
    1428/     521 :                     CODE_DAH:			; JC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/04/10 10:54:46


    1429/     521 : 56 51               	JMS GETFLAG_C
    1430/     523 : 44 70               	JUN JMP_IF1
    1431/     525 :                     ;;;	BBL 0
    1432/     525 :                     
    1433/     525 :                     CODE_DBH:			; IN
    1434/     525 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1435/     527 : 49 52               	JUN EMULATE_IN_P1
    1436/     529 :                     ;;;	BBL 0
    1437/     529 :                     
    1438/     529 :                     CODE_DCH:			; CC
    1439/     529 : 56 51               	JMS GETFLAG_C
    1440/     52B : 44 B4               	JUN CALL_IF1
    1441/     52D :                     
    1442/     52D :                     CODE_DDH:			; ...
    1443/     52D : C0                  	BBL 0
    1444/     52E :                     CODE_DEH:			; SBI B2
    1445/     52E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1446/     530 :                     SBI_P1:
    1447/     530 : 56 51               	JMS GETFLAG_C
    1448/     532 : 14 36               	JCN Z, SBI_P1_NOCARRY
    1449/     534 : 5C BF               	JMS INC_P1
    1450/     536 :                     SBI_P1_NOCARRY:
    1451/     536 : 20 00               	FIM P0, REG8_A
    1452/     538 : 57 8D               	JMS SUB_REG8P0_P1
    1453/     53A : 56 5B               	JMS SETFLAG_C_CY
    1454/     53C : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1455/     53E :                     ;;; 	BBL 0
    1456/     53E :                     
    1457/     53E :                     CODE_DFH:			; RST 3
    1458/     53E : 24 00               	FIM P2, up(3<<3)
    1459/     540 : 26 18               	FIM P3, lo(3<<3)
    1460/     542 : 44 CE               	JUN CALL_P2P3
    1461/     544 :                     
    1462/     544 :                     CODE_E0H:			; RPO
    1463/     544 : 56 5A               	JMS GETFLAG_P
    1464/     546 : 44 A4               	JUN RET_IF0
    1465/     548 :                     	
    1466/     548 :                     CODE_E1H:			; POP H
    1467/     548 : 24 06               	FIM P2, REG8_H
    1468/     54A : 26 04               	FIM P3, REG8_L
    1469/     54C : 45 D7               	JUN CODE_POP_REG8P2P3
    1470/     54E :                     
    1471/     54E :                     CODE_E2H:			; JPO
    1472/     54E : 56 5A               	JMS GETFLAG_P
    1473/     550 : 44 69               	JUN JMP_IF0
    1474/     552 :                     
    1475/     552 :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1476/     552 :                     	;; POP to ADDR
    1477/     552 : 24 1E               	FIM P2, REG8_ADDRH
    1478/     554 : 26 1C               	FIM P3, REG8_ADDRL
    1479/     556 : 20 18               	FIM P0, REG16_SP
    1480/     558 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1481/     55A : 57 C7               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1482/     55C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1483/     55E : 57 CD               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1484/     560 :                     
    1485/     560 :                     	;; PUSH HL
    1486/     560 : 24 06               	FIM P2, REG8_H
    1487/     562 : 26 04               	FIM P3, REG8_L
    1488/     564 : 57 ED               	JMS LD_P1_REG8P2	; P1=REG(H)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/04/10 10:54:46


    1489/     566 : 58 4F               	JMS DEC_REG16P0		; REG(SP)--
    1490/     568 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1491/     56A :                     
    1492/     56A : 57 F3               	JMS LD_P1_REG8P3	; P1=REG(L)
    1493/     56C : 58 4F               	JMS DEC_REG16P0		; REG(SP)--
    1494/     56E : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1495/     570 :                     
    1496/     570 :                     	;; HL = ADDR
    1497/     570 : 2C 04               	FIM P6, REG16_HL
    1498/     572 : 2E 1C               	FIM P7, REG16_ADDR
    1499/     574 : 48 20               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1500/     576 :                     	
    1501/     576 :                     CODE_E4H:			; CPO
    1502/     576 : 56 5A               	JMS GETFLAG_P
    1503/     578 : 44 BB               	JUN CALL_IF0
    1504/     57A :                     
    1505/     57A :                     CODE_E5H:			; PUSH H
    1506/     57A : 24 06               	FIM P2, REG8_H
    1507/     57C : 26 04               	FIM P3, REG8_L
    1508/     57E : 45 EE               	JUN CODE_PUSH_REG8P2P3
    1509/     580 :                     
    1510/     580 :                     CODE_E6H:			; ANI B2
    1511/     580 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1512/     582 :                     ANI_P1:
    1513/     582 : (MACRO)              	LD_P2_P1		; P2=B2
    1513/     582 : A2                                  LD P1_HI
    1513/     583 : B4                                  XCH P2_HI
    1513/     584 : A3                                  LD P1_LO
    1513/     585 : B5                                  XCH P2_LO
    1514/     586 : 20 00               	FIM P0, REG8_A
    1515/     588 : 57 E1               	JMS LD_P1_REG8P0	; P1=A
    1516/     58A : 56 B1               	JMS AND_P1_P2		; P1=A&P2
    1517/     58C : 57 C1               	JMS LD_REG8P0_P1	; A= P1
    1518/     58E : 56 5D               	JMS SETFLAG_C_0
    1519/     590 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1520/     592 :                     	
    1521/     592 :                     CODE_E7H:			; RST 4
    1522/     592 : 24 00               	FIM P2, up(4<<3)
    1523/     594 : 26 20               	FIM P3, lo(4<<3)
    1524/     596 : 44 CE               	JUN CALL_P2P3
    1525/     598 :                     
    1526/     598 :                     CODE_E8H:			; RPE
    1527/     598 : 56 5A               	JMS GETFLAG_P
    1528/     59A : 44 A1               	JUN RET_IF1
    1529/     59C :                     
    1530/     59C :                     CODE_E9H:			; PCHL
    1531/     59C : 22 04               	FIM P1, REG16_HL
    1532/     59E : 47 3C               	JUN LD_REG16P0_REG16P1
    1533/     5A0 :                     	
    1534/     5A0 :                     CODE_EAH:			; JPE
    1535/     5A0 : 56 5A               	JMS GETFLAG_P
    1536/     5A2 : 44 70               	JUN JMP_IF1
    1537/     5A4 :                     
    1538/     5A4 :                     CODE_EBH:			; XCHG
    1539/     5A4 : 20 1C               	FIM P0, REG16_ADDR
    1540/     5A6 : 22 04               	FIM P1, REG16_HL
    1541/     5A8 : 57 3C               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1542/     5AA : 20 08               	FIM P0, REG16_DE
    1543/     5AC : 57 46               	JMS LD_REG16P1_REG16P0	; HL=DE
    1544/     5AE : 22 1C               	FIM P1, REG16_ADDR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/04/10 10:54:46


    1545/     5B0 : 47 3C               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1546/     5B2 :                     	
    1547/     5B2 :                     CODE_ECH:			; CPE
    1548/     5B2 : 56 5A               	JMS GETFLAG_P
    1549/     5B4 : 44 B4               	JUN CALL_IF1
    1550/     5B6 :                     
    1551/     5B6 :                     CODE_EDH:			; ...
    1552/     5B6 : C0                  	BBL 0
    1553/     5B7 :                     
    1554/     5B7 :                     CODE_EEH:			; XRI B2
    1555/     5B7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1556/     5B9 :                     XRI_P1:
    1557/     5B9 : (MACRO)              	LD_P2_P1		; P2=B2
    1557/     5B9 : A2                                  LD P1_HI
    1557/     5BA : B4                                  XCH P2_HI
    1557/     5BB : A3                                  LD P1_LO
    1557/     5BC : B5                                  XCH P2_LO
    1558/     5BD : 20 00               	FIM P0, REG8_A
    1559/     5BF : 57 E1               	JMS LD_P1_REG8P0	; P1=A
    1560/     5C1 : 56 EE               	JMS XOR_P1_P2
    1561/     5C3 : 57 C1               	JMS LD_REG8P0_P1	; A= A ^ P2
    1562/     5C5 : 56 5D               	JMS SETFLAG_C_0
    1563/     5C7 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1564/     5C9 :                     	
    1565/     5C9 :                     CODE_EFH:			; RST 5
    1566/     5C9 : 24 00               	FIM P2, up(5<<3)
    1567/     5CB : 26 28               	FIM P3, lo(5<<3)
    1568/     5CD : 44 CE               	JUN CALL_P2P3
    1569/     5CF :                     
    1570/     5CF :                     CODE_F0H:			; RP
    1571/     5CF : 56 48               	JMS GETFLAG_S
    1572/     5D1 : 44 A4               	JUN RET_IF0
    1573/     5D3 :                     	
    1574/     5D3 :                     CODE_F1H:			; POP PSW
    1575/     5D3 : 24 00               	FIM P2, REG8_A
    1576/     5D5 : 26 10               	FIM P3, REG8_FLAG
    1577/     5D7 :                     CODE_POP_REG8P2P3:
    1578/     5D7 : 20 18               	FIM P0, REG16_SP
    1579/     5D9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1580/     5DB : 57 C7               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1581/     5DD : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1582/     5DF : 47 CD               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1583/     5E1 :                     	
    1584/     5E1 :                     CODE_F2H:			; JP
    1585/     5E1 : 56 48               	JMS GETFLAG_S
    1586/     5E3 : 44 69               	JUN JMP_IF0
    1587/     5E5 :                     
    1588/     5E5 :                     CODE_F3H:			; DI
    1589/     5E5 :                     				; Interrupt is not implemented
    1590/     5E5 : C0                  	BBL 0
    1591/     5E6 :                     
    1592/     5E6 :                     CODE_F4H:			; CP
    1593/     5E6 : 56 48               	JMS GETFLAG_S
    1594/     5E8 : 44 BB               	JUN CALL_IF0
    1595/     5EA :                     
    1596/     5EA :                     CODE_F5H:			; PUSH PSW
    1597/     5EA : 24 00               	FIM P2, REG8_A
    1598/     5EC : 26 10               	FIM P3, REG8_FLAG
    1599/     5EE :                     CODE_PUSH_REG8P2P3:
    1600/     5EE : 20 18               	FIM P0, REG16_SP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/04/10 10:54:46


    1601/     5F0 :                     				; higher byte is the first
    1602/     5F0 : 57 ED               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1603/     5F2 : 58 4F               	JMS DEC_REG16P0		; REG(SP)--
    1604/     5F4 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1605/     5F6 :                     
    1606/     5F6 : 57 F3               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1607/     5F8 : 58 4F               	JMS DEC_REG16P0		; REG(SP)--
    1608/     5FA : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1609/     5FC :                     
    1610/     5FC :                     CODE_F6H:			; ORI
    1611/     5FC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1612/     5FE :                     ORI_P1:
    1613/     5FE : (MACRO)              	LD_P2_P1		; P2=B2
    1613/     5FE : A2                                  LD P1_HI
    1613/     5FF : B4                                  XCH P2_HI
    1613/     600 : A3                                  LD P1_LO
    1613/     601 : B5                                  XCH P2_LO
    1614/     602 : 20 00               	FIM P0, REG8_A
    1615/     604 : 57 E1               	JMS LD_P1_REG8P0	; P1=A
    1616/     606 : 56 FF               	JMS OR_P1_P2
    1617/     608 : 57 C1               	JMS LD_REG8P0_P1	; P1= A | P2
    1618/     60A : 56 5D               	JMS SETFLAG_C_0
    1619/     60C : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1620/     60E :                     	
    1621/     60E :                     CODE_F7H:			; RST 6
    1622/     60E : 24 00               	FIM P2, up(6<<3)
    1623/     610 : 26 30               	FIM P3, lo(6<<3)
    1624/     612 : 44 CE               	JUN CALL_P2P3
    1625/     614 :                     
    1626/     614 :                     CODE_F8H:			; RM
    1627/     614 : 56 48               	JMS GETFLAG_S
    1628/     616 : 44 A1               	JUN RET_IF1
    1629/     618 :                     
    1630/     618 :                     CODE_F9H:			; SPHL
    1631/     618 : 2C 18               	FIM P6, REG16_SP
    1632/     61A : 2E 04               	FIM P7, REG16_HL
    1633/     61C : 48 20               	JUN LD_REG16P6_REG16P7
    1634/     61E :                     
    1635/     61E :                     CODE_FAH:			; JM
    1636/     61E : 56 48               	JMS GETFLAG_S
    1637/     620 : 44 70               	JUN JMP_IF1
    1638/     622 :                     
    1639/     622 :                     CODE_FBH:			; EI
    1640/     622 :                     				; Interrupt is not implemented
    1641/     622 : C0                  	BBL 0
    1642/     623 :                     
    1643/     623 :                     CODE_FCH:			; CM
    1644/     623 : 56 48               	JMS GETFLAG_S
    1645/     625 : 44 B4               	JUN CALL_IF1
    1646/     627 :                     
    1647/     627 :                     CODE_FDH:			; ...
    1648/     627 : C0                  	BBL 0
    1649/     628 :                     
    1650/     628 :                     CODE_FEH:			; CPI
    1651/     628 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1652/     62A :                     CPI_P1:
    1653/     62A : 2C 12               	FIM P6, REG8_SRC
    1654/     62C : 2E 00               	FIM P7, REG8_A
    1655/     62E : 57 B6               	JMS LD_REG8P6_REG8P7
    1656/     630 : 20 12               	FIM P0, REG8_SRC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/04/10 10:54:46


    1657/     632 : 57 8D               	JMS SUB_REG8P0_P1
    1658/     634 : 56 5B               	JMS SETFLAG_C_CY
    1659/     636 : 46 6F               	JUN SETFLAG_ZSP_REG8P0
    1660/     638 :                     ;;; 	BBL 0
    1661/     638 :                     CODE_FFH:			; RST 7
    1662/     638 : 24 00               	FIM P2, up(7<<3)
    1663/     63A : 26 38               	FIM P3, lo(7<<3)
    1664/     63C : 44 CE               	JUN CALL_P2P3
    1665/     63E :                     
    1666/     63E :                     ;;;---------------------------------------------------------------------------
    1667/     63E :                     ;;; FLAG routines
    1668/     63E :                     ;;;---------------------------------------------------------------------------
    1669/     63E :                     
    1670/     63E :                     ;;;---------------------------------------------------------------------------
    1671/     63E :                     ;;; GETFLAG_Z
    1672/     63E :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1673/     63E :                     ;;;---------------------------------------------------------------------------
    1674/     63E :                     GETFLAG_Z:
    1675/     63E : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1676/     640 : 2F                  	SRC P7
    1677/     641 : E9                  	RDM
    1678/     642 : F5                  	RAL
    1679/     643 : F5                  	RAL
    1680/     644 : 12 47               	JCN C, GETFLAG_Z_EXIT1
    1681/     646 : C0                  	BBL 0
    1682/     647 :                     GETFLAG_Z_EXIT1:
    1683/     647 : C1                  	BBL 1
    1684/     648 :                     
    1685/     648 :                     ;;;---------------------------------------------------------------------------
    1686/     648 :                     ;;; GETFLAG_S
    1687/     648 :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1688/     648 :                     ;;;---------------------------------------------------------------------------
    1689/     648 :                     GETFLAG_S:
    1690/     648 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1691/     64A : 2F                  	SRC P7
    1692/     64B : E9                  	RDM
    1693/     64C : F5                  	RAL
    1694/     64D : 12 50               	JCN C, GETFLAG_S_EXIT1
    1695/     64F : C0                  	BBL 0
    1696/     650 :                     GETFLAG_S_EXIT1:
    1697/     650 : C1                  	BBL 1
    1698/     651 :                     
    1699/     651 :                     ;;;---------------------------------------------------------------------------
    1700/     651 :                     ;;; GETFLAG_C
    1701/     651 :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1702/     651 :                     ;;;---------------------------------------------------------------------------
    1703/     651 :                     GETFLAG_C:
    1704/     651 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1705/     653 : 2F                  	SRC P7
    1706/     654 : E9                  	RDM
    1707/     655 : F6                  	RAR
    1708/     656 : 12 59               	JCN C, GETFLAG_C_1
    1709/     658 : C0                  	BBL 0
    1710/     659 :                     GETFLAG_C_1:	
    1711/     659 : C1                  	BBL 1
    1712/     65A :                     
    1713/     65A :                     ;;;---------------------------------------------------------------------------
    1714/     65A :                     ;;; GETFLAG_P
    1715/     65A :                     ;;; Flag P is loded to ACC
    1716/     65A :                     ;;; ACC=FLAG_P
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/04/10 10:54:46


    1717/     65A :                     ;;; This routine is compiled if EMU_USE_FLAG_P, 
    1718/     65A :                     ;;; otherwise FLAG_P is always 0.
    1719/     65A :                     ;;;---------------------------------------------------------------------------
    1720/     65A :                     GETFLAG_P:
    1721/     65A : =>FALSE              	if EMU_USE_FLAG_P
    1722/     65A :                     	FIM P7, REG4_FLAG_1P1C
    1723/     65A :                     	SRC P7
    1724/     65A :                     	RDM
    1725/     65A :                     	RAL
    1726/     65A :                     	RAL
    1727/     65A :                     	JCN CN, GETFLAG_P_0
    1728/     65A :                     	BBL 1
    1729/     65A :                     GETFLAG_P_0:
    1730/     65A : [1721]               	endif 			; EMU_USE_FLAG_P
    1731/     65A : C0                  	BBL 0
    1732/     65B :                     	
    1733/     65B :                     ;;;---------------------------------------------------------------------------
    1734/     65B :                     ;;; SETFLAG_C_{CY, 0, 1}
    1735/     65B :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1736/     65B :                     ;;;---------------------------------------------------------------------------
    1737/     65B :                     SETFLAG_C_CY:
    1738/     65B : 12 66               	JCN C, SETFLAG_C_1
    1739/     65D :                     SETFLAG_C_0:
    1740/     65D : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1741/     65F : 2F                  	SRC P7
    1742/     660 : E9                  	RDM
    1743/     661 : F6                  	RAR
    1744/     662 : F1                  	CLC
    1745/     663 : F5                  	RAL
    1746/     664 : E0                  	WRM
    1747/     665 : C0                  	BBL 0
    1748/     666 :                     SETFLAG_C_1:
    1749/     666 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1750/     668 : 2F                  	SRC P7
    1751/     669 : E9                  	RDM
    1752/     66A : F6                  	RAR
    1753/     66B : FA                  	STC
    1754/     66C : F5                  	RAL
    1755/     66D : E0                  	WRM
    1756/     66E : C0                  	BBL 0
    1757/     66F :                     
    1758/     66F :                     ;;;---------------------------------------------------------------------------
    1759/     66F :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1760/     66F :                     ;;; 
    1761/     66F :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1762/     66F :                     ;;; P flag is compiled if EMU_USE_FLAG_P (not implemented yet).
    1763/     66F :                     ;;;---------------------------------------------------------------------------
    1764/     66F :                     SETFLAG_ZSP_REG8P0:
    1765/     66F : 57 E1               	JMS LD_P1_REG8P0
    1766/     671 : 46 75               	JUN SETFLAG_ZSP_P1
    1767/     673 :                     
    1768/     673 :                     SETFLAG_ZSP_REG8P1:
    1769/     673 : 57 E7               	JMS LD_P1_REG8P1
    1770/     675 :                     
    1771/     675 :                     SETFLAG_ZSP_P1:
    1772/     675 : A2                  	LD P1_HI		; ACC=Sxxx
    1773/     676 : F5                  	RAL			; CY=S
    1774/     677 : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1775/     678 :                     	
    1776/     678 : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/04/10 10:54:46


    1777/     679 :                     
    1778/     679 :                     	;; set Z FLAG
    1779/     679 : 5D 32               	JMS ISZEROORNOT_P1
    1780/     67B : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1781/     67C : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1782/     67D : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1783/     67E : F6                  	RAR			; ACC=ZBHx (CY=S)
    1784/     67F : F6                  	RAR			; ACC=SZBH (BH=00)
    1785/     680 :                     
    1786/     680 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1787/     682 : 2F                  	SRC P7
    1788/     683 : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1789/     684 :                     
    1790/     684 : =>FALSE              	if EMU_USE_FLAG_P
    1791/     684 :                     	;; Set P flag
    1792/     684 :                     ;;; table implementation may be faster
    1793/     684 :                     ;;;              0123456789ABCDEF
    1794/     684 :                     ;;; 4bit table =(0110100110010110)
    1795/     684 :                     ;;; org 09D0H
    1796/     684 :                     ;;; PARITY4TABLE: (1 when EVEN)
    1797/     684 :                     ;;; data 1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1
    1798/     684 :                     ;;; GETPARITY_R1:
    1799/     684 :                     ;;; FIN P2
    1800/     684 :                     ;;; LD P2_LO
    1801/     684 :                     ;;; XCH_R1
    1802/     684 :                     ;;; BBL 0
    1803/     684 :                     ;;; 
    1804/     684 :                     ;;; FIM P0, lo(PARITY4TABLE)
    1805/     684 :                     ;;; LD P1_H
    1806/     684 :                     ;;; XCH R1
    1807/     684 :                     ;;; JMS GETPARITY_R1
    1808/     684 :                     ;;; LD R1
    1809/     684 :                     ;;; XCH P1_H
    1810/     684 :                     ;;; LD P1_L
    1811/     684 :                     ;;; XCH R1
    1812/     684 :                     ;;; JMS GETPARITY_R1
    1813/     684 :                     ;;; LD R1
    1814/     684 :                     ;;; ADD P1_H
    1815/     684 :                     ;;; RAR       ; here CY=PARITY (1 when EVEN)
    1816/     684 :                     	
    1817/     684 :                     	CLB
    1818/     684 :                     	XCH CNT_I		; I=0
    1819/     684 :                     	LD_P1_P2		; restore P1
    1820/     684 :                     	LD P1_HI
    1821/     684 :                     	RAL
    1822/     684 :                     	JCN CN,PFLAG_CNT1
    1823/     684 :                     	INC CNT_I
    1824/     684 :                     PFLAG_CNT1:
    1825/     684 :                     	RAL
    1826/     684 :                     	JCN CN,PFLAG_CNT2
    1827/     684 :                     	INC CNT_I
    1828/     684 :                     PFLAG_CNT2:
    1829/     684 :                     	RAL
    1830/     684 :                     	JCN CN,PFLAG_CNT3
    1831/     684 :                     	INC CNT_I
    1832/     684 :                     PFLAG_CNT3:
    1833/     684 :                     	RAL
    1834/     684 :                     	JCN CN,PFLAG_CNT4
    1835/     684 :                     	INC CNT_I
    1836/     684 :                     PFLAG_CNT4:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/04/10 10:54:46


    1837/     684 :                     	LD P1_LO
    1838/     684 :                     	RAL
    1839/     684 :                     	JCN CN,PFLAG_CNT5
    1840/     684 :                     	INC CNT_I
    1841/     684 :                     PFLAG_CNT5:
    1842/     684 :                     	RAL
    1843/     684 :                     	JCN CN,PFLAG_CNT6
    1844/     684 :                     	INC CNT_I
    1845/     684 :                     PFLAG_CNT6:
    1846/     684 :                     	RAL
    1847/     684 :                     	JCN CN,PFLAG_CNT7
    1848/     684 :                     	INC CNT_I
    1849/     684 :                     PFLAG_CNT7:
    1850/     684 :                     	RAL
    1851/     684 :                     	JCN CN,PFLAG_CNT8
    1852/     684 :                     	INC CNT_I
    1853/     684 :                     PFLAG_CNT8:
    1854/     684 :                     	FIM P7, REG4_FLAG_1P1C
    1855/     684 :                     	SRC P7
    1856/     684 :                     	RDM
    1857/     684 :                     	RAL
    1858/     684 :                     	RAL
    1859/     684 :                     	WRM			; FLAG=xCxx (CY=P)
    1860/     684 :                     
    1861/     684 :                     	LD CNT_I
    1862/     684 :                     	RAR
    1863/     684 :                     	CMC			; CY=~(LSB of I) (P=1 when EVEN )
    1864/     684 :                     
    1865/     684 :                     	RDM
    1866/     684 :                     	RAR
    1867/     684 :                     	RAR
    1868/     684 :                     	WRM			; FLAG=xPxC
    1869/     684 :                     	
    1870/     684 : [1790]               	endif			; EMU_USE_FLAG_P
    1871/     684 : C0                  	BBL 0	
    1872/     685 :                     
    1873/     685 :                     ;;;---------------------------------------------------------------------------
    1874/     685 :                     ;;; Logical operators
    1875/     685 :                     ;;; and, or, xor
    1876/     685 :                     ;;; destroy: P3(R6, R7)
    1877/     685 :                     ;;;---------------------------------------------------------------------------
    1878/     685 :                     
    1879/     685 :                     ;;;---------------------------------------------------------------------------
    1880/     685 :                     ;;; AND_R6_R7
    1881/     685 :                     ;;; R6 = R6 & R7
    1882/     685 :                     ;;;---------------------------------------------------------------------------
    1883/     685 :                     AND_R6_R7:
    1884/     685 : F0                  	CLB
    1885/     686 : A7                  	LD R7
    1886/     687 : F6                  	RAR
    1887/     688 : 12 8F               	JCN C, AND67_L1	; jump if R7.bit0==1
    1888/     68A : A6                  	LD R6
    1889/     68B : F6                  	RAR
    1890/     68C : F1                  	CLC
    1891/     68D : F5                  	RAL
    1892/     68E : B6                  	XCH R6		; R6.bit0=0
    1893/     68F :                     AND67_L1:
    1894/     68F : A7                  	LD R7
    1895/     690 : F6                  	RAR
    1896/     691 : F6                  	RAR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/04/10 10:54:46


    1897/     692 : 12 9B               	JCN C, AND67_L2	; jump if R7.bit1==1
    1898/     694 : A6                  	LD R6
    1899/     695 : F6                  	RAR
    1900/     696 : F6                  	RAR
    1901/     697 : F1                  	CLC
    1902/     698 : F5                  	RAL
    1903/     699 : F5                  	RAL
    1904/     69A : B6                  	XCH R6		; R6.bit1=0
    1905/     69B :                     AND67_L2:
    1906/     69B : A7                  	LD R7
    1907/     69C : F5                  	RAL
    1908/     69D : F5                  	RAL
    1909/     69E : 12 A7               	JCN C, AND67_L3	; jump if R7.bit2==1
    1910/     6A0 : A6                  	LD R6
    1911/     6A1 : F5                  	RAL
    1912/     6A2 : F5                  	RAL
    1913/     6A3 : F1                  	CLC
    1914/     6A4 : F6                  	RAR
    1915/     6A5 : F6                  	RAR
    1916/     6A6 : B6                  	XCH R6		; R6.bit2=0
    1917/     6A7 :                     AND67_L3:
    1918/     6A7 : A7                  	LD R7
    1919/     6A8 : F5                  	RAL
    1920/     6A9 : 12 B0               	JCN C, AND67_L4	; jump if R7.bit3==1
    1921/     6AB : A6                  	LD R6
    1922/     6AC : F5                  	RAL
    1923/     6AD : F1                  	CLC
    1924/     6AE : F6                  	RAR
    1925/     6AF : B6                  	XCH R6		; R6.bit3=0
    1926/     6B0 :                     AND67_L4:
    1927/     6B0 :                     	
    1928/     6B0 : C0                  	BBL 0
    1929/     6B1 :                     
    1930/     6B1 :                     ;;;---------------------------------------------------------------------------
    1931/     6B1 :                     ;;; AND_P1_P2
    1932/     6B1 :                     ;;; P1 = P1 & P2
    1933/     6B1 :                     ;;;---------------------------------------------------------------------------
    1934/     6B1 :                     AND_P1_P2:
    1935/     6B1 : A3                  	LD P1_LO
    1936/     6B2 : B6                  	XCH R6
    1937/     6B3 : A5                  	LD P2_LO
    1938/     6B4 : B7                  	XCH R7
    1939/     6B5 : 56 85               	JMS AND_R6_R7
    1940/     6B7 : A6                  	LD R6
    1941/     6B8 : B3                  	XCH P1_LO
    1942/     6B9 :                     	
    1943/     6B9 : A2                  	LD P1_HI
    1944/     6BA : B6                  	XCH R6
    1945/     6BB : A4                  	LD P2_HI
    1946/     6BC : B7                  	XCH R7
    1947/     6BD : 56 85               	JMS AND_R6_R7
    1948/     6BF : A6                  	LD R6
    1949/     6C0 : B2                  	XCH P1_HI
    1950/     6C1 : C0                  	BBL 0
    1951/     6C2 :                     
    1952/     6C2 :                     ;;;---------------------------------------------------------------------------
    1953/     6C2 :                     ;;; XOR_R6_R7
    1954/     6C2 :                     ;;; R6 = R6 ^ R7
    1955/     6C2 :                     ;;;---------------------------------------------------------------------------
    1956/     6C2 :                     XOR_R6_R7:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/04/10 10:54:46


    1957/     6C2 : F0                  	CLB
    1958/     6C3 : A7                  	LD R7
    1959/     6C4 : F6                  	RAR
    1960/     6C5 : 1A CC               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    1961/     6C7 : A6                  	LD R6
    1962/     6C8 : F6                  	RAR
    1963/     6C9 : F3                  	CMC
    1964/     6CA : F5                  	RAL
    1965/     6CB : B6                  	XCH R6			; cmp R6.bit0
    1966/     6CC :                     XOR67_L1:
    1967/     6CC : A7                  	LD R7
    1968/     6CD : F6                  	RAR
    1969/     6CE : F6                  	RAR
    1970/     6CF : 1A D8               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    1971/     6D1 : A6                  	LD R6
    1972/     6D2 : F6                  	RAR
    1973/     6D3 : F6                  	RAR
    1974/     6D4 : F3                  	CMC
    1975/     6D5 : F5                  	RAL
    1976/     6D6 : F5                  	RAL
    1977/     6D7 : B6                  	XCH R6			; cmp R6.bit1
    1978/     6D8 :                     XOR67_L2:
    1979/     6D8 : A7                  	LD R7
    1980/     6D9 : F5                  	RAL
    1981/     6DA : F5                  	RAL
    1982/     6DB : 1A E4               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    1983/     6DD : A6                  	LD R6
    1984/     6DE : F5                  	RAL
    1985/     6DF : F5                  	RAL
    1986/     6E0 : F3                  	CMC
    1987/     6E1 : F6                  	RAR
    1988/     6E2 : F6                  	RAR
    1989/     6E3 : B6                  	XCH R6			; cmp R6.bit2
    1990/     6E4 :                     XOR67_L3:
    1991/     6E4 : A7                  	LD R7
    1992/     6E5 : F5                  	RAL
    1993/     6E6 : 1A ED               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    1994/     6E8 : A6                  	LD R6
    1995/     6E9 : F5                  	RAL
    1996/     6EA : F3                  	CMC
    1997/     6EB : F6                  	RAR
    1998/     6EC : B6                  	XCH R6			; cmp R6.bit3
    1999/     6ED :                     XOR67_L4:
    2000/     6ED : C0                  	BBL 0
    2001/     6EE :                     
    2002/     6EE :                     ;;;---------------------------------------------------------------------------
    2003/     6EE :                     ;;; XOR_P1_P2
    2004/     6EE :                     ;;; P1 = P1 ^ P2
    2005/     6EE :                     ;;;---------------------------------------------------------------------------
    2006/     6EE :                     XOR_P1_P2:
    2007/     6EE : A3                  	LD P1_LO
    2008/     6EF : B6                  	XCH R6
    2009/     6F0 : A5                  	LD P2_LO
    2010/     6F1 : B7                  	XCH R7
    2011/     6F2 : 56 C2               	JMS XOR_R6_R7
    2012/     6F4 : A6                  	LD R6
    2013/     6F5 : B3                  	XCH P1_LO
    2014/     6F6 :                     	
    2015/     6F6 : A2                  	LD P1_HI
    2016/     6F7 : B6                  	XCH R6
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/04/10 10:54:46


    2017/     6F8 : A4                  	LD P2_HI
    2018/     6F9 : B7                  	XCH R7
    2019/     6FA : 56 C2               	JMS XOR_R6_R7
    2020/     6FC : A6                  	LD R6
    2021/     6FD : B2                  	XCH P1_HI
    2022/     6FE : C0                  	BBL 0
    2023/     6FF :                     
    2024/     6FF :                     ;;;---------------------------------------------------------------------------
    2025/     6FF :                     ;;; OR_P1_P2
    2026/     6FF :                     ;;; P1 = P1 | P2
    2027/     6FF :                     ;;;---------------------------------------------------------------------------
    2028/     6FF :                     OR_P1_P2:
    2029/     6FF : A3                  	LD P1_LO
    2030/     700 : B6                  	XCH R6
    2031/     701 : A5                  	LD P2_LO
    2032/     702 : B7                  	XCH R7
    2033/     703 : 57 10               	JMS OR_R6_R7
    2034/     705 : A6                  	LD R6
    2035/     706 : B3                  	XCH P1_LO
    2036/     707 :                     	
    2037/     707 : A2                  	LD P1_HI
    2038/     708 : B6                  	XCH R6
    2039/     709 : A4                  	LD P2_HI
    2040/     70A : B7                  	XCH R7
    2041/     70B : 57 10               	JMS OR_R6_R7
    2042/     70D : A6                  	LD R6
    2043/     70E : B2                  	XCH P1_HI
    2044/     70F : C0                  	BBL 0
    2045/     710 :                     
    2046/     710 :                     ;;;---------------------------------------------------------------------------
    2047/     710 :                     ;;; OR_R6_R7
    2048/     710 :                     ;;; R6 = R6 | R7
    2049/     710 :                     ;;;---------------------------------------------------------------------------
    2050/     710 :                     OR_R6_R7:
    2051/     710 : F0                  	CLB
    2052/     711 : A7                  	LD R7
    2053/     712 : F6                  	RAR
    2054/     713 : 1A 1A               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2055/     715 : A6                  	LD R6
    2056/     716 : F6                  	RAR
    2057/     717 : FA                  	STC
    2058/     718 : F5                  	RAL
    2059/     719 : B6                  	XCH R6			; cmp R6.bit0
    2060/     71A :                     OR67_L1:
    2061/     71A : A7                  	LD R7
    2062/     71B : F6                  	RAR
    2063/     71C : F6                  	RAR
    2064/     71D : 1A 26               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2065/     71F : A6                  	LD R6
    2066/     720 : F6                  	RAR
    2067/     721 : F6                  	RAR
    2068/     722 : FA                  	STC
    2069/     723 : F5                  	RAL
    2070/     724 : F5                  	RAL
    2071/     725 : B6                  	XCH R6			; cmp R6.bit1
    2072/     726 :                     OR67_L2:
    2073/     726 : A7                  	LD R7
    2074/     727 : F5                  	RAL
    2075/     728 : F5                  	RAL
    2076/     729 : 1A 32               	JCN CN, OR67_L3	; jump if R7.bit2==0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/04/10 10:54:46


    2077/     72B : A6                  	LD R6
    2078/     72C : F5                  	RAL
    2079/     72D : F5                  	RAL
    2080/     72E : FA                  	STC
    2081/     72F : F6                  	RAR
    2082/     730 : F6                  	RAR
    2083/     731 : B6                  	XCH R6			; cmp R6.bit2
    2084/     732 :                     OR67_L3:
    2085/     732 : A7                  	LD R7
    2086/     733 : F5                  	RAL
    2087/     734 : 1A 3B               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2088/     736 : A6                  	LD R6
    2089/     737 : F5                  	RAL
    2090/     738 : FA                  	STC
    2091/     739 : F6                  	RAR
    2092/     73A : B6                  	XCH R6			; cmp R6.bit3
    2093/     73B :                     OR67_L4:
    2094/     73B : C0                  	BBL 0
    2095/     73C :                     
    2096/     73C :                     
    2097/     73C :                     ;;;	org 0900H
    2098/     73C :                     ;;;----------------------------------------------------------------------------
    2099/     73C :                     ;;; Subroutines for REG16 (16bit registars)
    2100/     73C :                     ;;;----------------------------------------------------------------------------
    2101/     73C :                     	
    2102/     73C :                     	
    2103/     73C :                     ;;;----------------------------------------------------------------------------
    2104/     73C :                     ;;; LD_REG16P0_REG16P1
    2105/     73C :                     ;;; REG16(P0) = REG16(P1)
    2106/     73C :                     ;;; destroy: P6, P7
    2107/     73C :                     ;;;----------------------------------------------------------------------------
    2108/     73C :                     LD_REG16P0_REG16P1:
    2109/     73C : (MACRO)              	LD_P6_P0
    2109/     73C : A0                                  LD P0_HI
    2109/     73D : BC                                  XCH P6_HI
    2109/     73E : A1                                  LD P0_LO
    2109/     73F : BD                                  XCH P6_LO
    2110/     740 : (MACRO)              	LD_P7_P1
    2110/     740 : A2                                  LD P1_HI
    2110/     741 : BE                                  XCH P7_HI
    2110/     742 : A3                                  LD P1_LO
    2110/     743 : BF                                  XCH P7_LO
    2111/     744 : 48 20               	JUN LD_REG16P6_REG16P7
    2112/     746 :                     
    2113/     746 :                     ;;;----------------------------------------------------------------------------
    2114/     746 :                     ;;; LD_REG16P1_REG16P0
    2115/     746 :                     ;;; REG16(P1) = REG16(P0)
    2116/     746 :                     ;;; destroy: P6, P7
    2117/     746 :                     ;;;----------------------------------------------------------------------------
    2118/     746 :                     LD_REG16P1_REG16P0:
    2119/     746 : (MACRO)              	LD_P6_P1
    2119/     746 : A2                                  LD P1_HI
    2119/     747 : BC                                  XCH P6_HI
    2119/     748 : A3                                  LD P1_LO
    2119/     749 : BD                                  XCH P6_LO
    2120/     74A : (MACRO)              	LD_P7_P0
    2120/     74A : A0                                  LD P0_HI
    2120/     74B : BE                                  XCH P7_HI
    2120/     74C : A1                                  LD P0_LO
    2120/     74D : BF                                  XCH P7_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/04/10 10:54:46


    2121/     74E : 48 20               	JUN LD_REG16P6_REG16P7
    2122/     750 :                     
    2123/     750 :                     ;;;----------------------------------------------------------------------------
    2124/     750 :                     ;;; LD_REG16P7_P2P3
    2125/     750 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2126/     750 :                     ;;; destroy P7
    2127/     750 :                     ;;;----------------------------------------------------------------------------
    2128/     750 :                     LD_REG16P7_P2P3:
    2129/     750 : 2F                  	SRC P7
    2130/     751 : A7                  	LD P3_LO
    2131/     752 : E0                  	WRM
    2132/     753 :                     
    2133/     753 : 6F                  	INC P7_LO
    2134/     754 : 2F                  	SRC P7
    2135/     755 : A6                  	LD P3_HI
    2136/     756 : E0                  	WRM
    2137/     757 :                     
    2138/     757 : 6F                  	INC P7_LO
    2139/     758 : 2F                  	SRC P7
    2140/     759 : A5                  	LD P2_LO
    2141/     75A : E0                  	WRM
    2142/     75B :                     
    2143/     75B : 6F                  	INC P7_LO
    2144/     75C : 2F                  	SRC P7
    2145/     75D : A4                  	LD P2_HI
    2146/     75E : E0                  	WRM
    2147/     75F :                     
    2148/     75F : C0                  	BBL 0
    2149/     760 :                     
    2150/     760 :                     ;;;----------------------------------------------------------------------------
    2151/     760 :                     ;;; LD_REG16P1_P2P3
    2152/     760 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2153/     760 :                     ;;; destroy P7
    2154/     760 :                     ;;;----------------------------------------------------------------------------
    2155/     760 :                     LD_REG16P1_P2P3:
    2156/     760 : (MACRO)              	LD_P7_P1
    2156/     760 : A2                                  LD P1_HI
    2156/     761 : BE                                  XCH P7_HI
    2156/     762 : A3                                  LD P1_LO
    2156/     763 : BF                                  XCH P7_LO
    2157/     764 : 47 50               	JUN LD_REG16P7_P2P3
    2158/     766 :                     
    2159/     766 :                     ;;;----------------------------------------------------------------------------
    2160/     766 :                     ;;; LD_REG16P0_P2P3
    2161/     766 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2162/     766 :                     ;;; destroy P7
    2163/     766 :                     ;;;----------------------------------------------------------------------------
    2164/     766 :                     LD_REG16P0_P2P3:
    2165/     766 : (MACRO)              	LD_P7_P0
    2165/     766 : A0                                  LD P0_HI
    2165/     767 : BE                                  XCH P7_HI
    2165/     768 : A1                                  LD P0_LO
    2165/     769 : BF                                  XCH P7_LO
    2166/     76A : 47 50               	JUN LD_REG16P7_P2P3
    2167/     76C :                     
    2168/     76C :                     ;;;----------------------------------------------------------------------------
    2169/     76C :                     ;;; ADD_REG8P0_P1
    2170/     76C :                     ;;; REG8(P0) = REG16(P0)+P1
    2171/     76C :                     ;;; destroy: P7(R14, R15)
    2172/     76C :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/04/10 10:54:46


    2173/     76C :                     ADD_REG8P0_P1:
    2174/     76C : (MACRO)              	LD_P7_P0
    2174/     76C : A0                                  LD P0_HI
    2174/     76D : BE                                  XCH P7_HI
    2174/     76E : A1                                  LD P0_LO
    2174/     76F : BF                                  XCH P7_LO
    2175/     770 : 2F                  	SRC P7
    2176/     771 : E9                  	RDM
    2177/     772 : A3                  	LD P1_LO
    2178/     773 : F1                  	CLC
    2179/     774 : EB                  	ADM
    2180/     775 : E0                  	WRM
    2181/     776 : 6F                  	INC P7_LO
    2182/     777 : 2F                  	SRC P7
    2183/     778 : E9                  	RDM
    2184/     779 : A2                  	LD P1_HI
    2185/     77A : EB                  	ADM
    2186/     77B : E0                  	WRM
    2187/     77C : C0                  	BBL 0
    2188/     77D :                     
    2189/     77D :                     ;;;----------------------------------------------------------------------------
    2190/     77D :                     ;;; INC_REG8P1
    2191/     77D :                     ;;; REG8(P1) = REG16(P1)+1
    2192/     77D :                     ;;; CY is set if overflow
    2193/     77D :                     ;;; destroy: P7(R14, R15)
    2194/     77D :                     ;;;----------------------------------------------------------------------------
    2195/     77D :                     INC_REG8P1:
    2196/     77D : (MACRO)              	LD_P7_P1
    2196/     77D : A2                                  LD P1_HI
    2196/     77E : BE                                  XCH P7_HI
    2196/     77F : A3                                  LD P1_LO
    2196/     780 : BF                                  XCH P7_LO
    2197/     781 :                     	
    2198/     781 : 2F                  	SRC P7
    2199/     782 : E9                  	RDM
    2200/     783 : F2                  	IAC 
    2201/     784 : E0                  	WRM			; REG(P0).lower++
    2202/     785 : 1C 8C               	JCN NZ, REG8_INC_EXIT
    2203/     787 : 6F                  	INC P7_LO
    2204/     788 : 2F                  	SRC P7
    2205/     789 : E9                  	RDM
    2206/     78A : F2                  	IAC 
    2207/     78B : E0                  	WRM			; REG(P0).higher++
    2208/     78C :                     REG8_INC_EXIT:
    2209/     78C : C0                  	BBL 0
    2210/     78D :                     
    2211/     78D :                     ;;;----------------------------------------------------------------------------
    2212/     78D :                     ;;; SUB_REG8P0_P1
    2213/     78D :                     ;;; REG8(P0) = REG8(P0)-P1
    2214/     78D :                     ;;; destroy: P7(R14, R15)
    2215/     78D :                     ;;;----------------------------------------------------------------------------
    2216/     78D :                     SUB_REG8P0_P1:
    2217/     78D : (MACRO)              	LD_P7_P0
    2217/     78D : A0                                  LD P0_HI
    2217/     78E : BE                                  XCH P7_HI
    2217/     78F : A1                                  LD P0_LO
    2217/     790 : BF                                  XCH P7_LO
    2218/     791 : 2F                  	SRC P7
    2219/     792 : E9                  	RDM
    2220/     793 : F1                  	CLC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/04/10 10:54:46


    2221/     794 : 93                  	SUB P1_LO
    2222/     795 : E0                  	WRM
    2223/     796 : F3                  	CMC
    2224/     797 :                     
    2225/     797 : 6F                  	INC P7_LO
    2226/     798 : 2F                  	SRC P7
    2227/     799 : E9                  	RDM
    2228/     79A : 92                  	SUB P1_HI
    2229/     79B : E0                  	WRM
    2230/     79C : F3                  	CMC
    2231/     79D :                     
    2232/     79D : C0                  	BBL 0	
    2233/     79E :                     
    2234/     79E :                     ;;;----------------------------------------------------------------------------
    2235/     79E :                     ;;; DEC_REG8P1
    2236/     79E :                     ;;; REG8(P1) = REG16(P1)+1
    2237/     79E :                     ;;; destroy: P7(R14, R15)
    2238/     79E :                     ;;;----------------------------------------------------------------------------
    2239/     79E :                     DEC_REG8P1:
    2240/     79E : (MACRO)              	LD_P7_P1
    2240/     79E : A2                                  LD P1_HI
    2240/     79F : BE                                  XCH P7_HI
    2240/     7A0 : A3                                  LD P1_LO
    2240/     7A1 : BF                                  XCH P7_LO
    2241/     7A2 :                     	
    2242/     7A2 : 2F                  	SRC P7
    2243/     7A3 : E9                  	RDM
    2244/     7A4 : F8                  	DAC 
    2245/     7A5 : E0                  	WRM			; REG(P0).lower--
    2246/     7A6 : 12 AD               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2247/     7A8 : 6F                  	INC P7_LO
    2248/     7A9 : 2F                  	SRC P7
    2249/     7AA : E9                  	RDM
    2250/     7AB : F8                  	DAC 
    2251/     7AC : E0                  	WRM			; REG(P0).higher--
    2252/     7AD :                     REG8_DEC_EXIT:
    2253/     7AD : C0                  	BBL 0
    2254/     7AE :                     
    2255/     7AE :                     ;;;----------------------------------------------------------------------------
    2256/     7AE :                     ;;; LD_REG8P0_REG8P1
    2257/     7AE :                     ;;; REG8(P0)=REG8(P1)
    2258/     7AE :                     ;;; destroy: P6, P7
    2259/     7AE :                     ;;;----------------------------------------------------------------------------
    2260/     7AE :                     LD_REG8P0_REG8P1:
    2261/     7AE : (MACRO)              	LD_P6_P0
    2261/     7AE : A0                                  LD P0_HI
    2261/     7AF : BC                                  XCH P6_HI
    2261/     7B0 : A1                                  LD P0_LO
    2261/     7B1 : BD                                  XCH P6_LO
    2262/     7B2 : (MACRO)              	LD_P7_P1
    2262/     7B2 : A2                                  LD P1_HI
    2262/     7B3 : BE                                  XCH P7_HI
    2262/     7B4 : A3                                  LD P1_LO
    2262/     7B5 : BF                                  XCH P7_LO
    2263/     7B6 :                     LD_REG8P6_REG8P7:
    2264/     7B6 : 2F                  	SRC P7
    2265/     7B7 : E9                  	RDM
    2266/     7B8 : 2D                  	SRC P6
    2267/     7B9 : E0                  	WRM
    2268/     7BA : 6F                  	INC P7_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/04/10 10:54:46


    2269/     7BB : 6D                  	INC P6_LO
    2270/     7BC : 2F                  	SRC P7
    2271/     7BD : E9                  	RDM
    2272/     7BE : 2D                  	SRC P6
    2273/     7BF : E0                  	WRM
    2274/     7C0 :                     
    2275/     7C0 : C0                  	BBL 0
    2276/     7C1 :                     
    2277/     7C1 :                     ;;;----------------------------------------------------------------------------
    2278/     7C1 :                     ;;; LD_REG8P0_P1
    2279/     7C1 :                     ;;; REG8(P0)=P1
    2280/     7C1 :                     ;;;----------------------------------------------------------------------------
    2281/     7C1 :                     LD_REG8P0_P1:
    2282/     7C1 : (MACRO)              	LD_P7_P0
    2282/     7C1 : A0                                  LD P0_HI
    2282/     7C2 : BE                                  XCH P7_HI
    2282/     7C3 : A1                                  LD P0_LO
    2282/     7C4 : BF                                  XCH P7_LO
    2283/     7C5 : 47 D1                	JUN LD_REG8P7_P1
    2284/     7C7 :                     
    2285/     7C7 :                     ;;;----------------------------------------------------------------------------
    2286/     7C7 :                     ;;; LD_REG8P3_P1
    2287/     7C7 :                     ;;; REG8(P3)=P1
    2288/     7C7 :                     ;;;----------------------------------------------------------------------------
    2289/     7C7 :                     LD_REG8P3_P1:
    2290/     7C7 : (MACRO)              	LD_P7_P3
    2290/     7C7 : A6                                  LD P3_HI
    2290/     7C8 : BE                                  XCH P7_HI
    2290/     7C9 : A7                                  LD P3_LO
    2290/     7CA : BF                                  XCH P7_LO
    2291/     7CB : 47 D1                	JUN LD_REG8P7_P1
    2292/     7CD :                     
    2293/     7CD :                     ;;;----------------------------------------------------------------------------
    2294/     7CD :                     ;;; LD_REG8P2_P1
    2295/     7CD :                     ;;; REG8(P2) = P1
    2296/     7CD :                     ;;;----------------------------------------------------------------------------
    2297/     7CD :                     LD_REG8P2_P1:
    2298/     7CD : (MACRO)              	LD_P7_P2
    2298/     7CD : A4                                  LD P2_HI
    2298/     7CE : BE                                  XCH P7_HI
    2298/     7CF : A5                                  LD P2_LO
    2298/     7D0 : BF                                  XCH P7_LO
    2299/     7D1 :                     ;;; 	JUN LD_REG8P7_P1
    2300/     7D1 :                     ;;;----------------------------------------------------------------------------
    2301/     7D1 :                     ;;; LD_REG8P7_P1
    2302/     7D1 :                     ;;; REG8(P7)=P1
    2303/     7D1 :                     ;;; destroy: P7
    2304/     7D1 :                     ;;;----------------------------------------------------------------------------
    2305/     7D1 :                     LD_REG8P7_P1:
    2306/     7D1 : 2F                  	SRC P7
    2307/     7D2 : A3                  	LD P1_LO
    2308/     7D3 : E0                  	WRM
    2309/     7D4 :                     
    2310/     7D4 : 6F                  	INC P7_LO
    2311/     7D5 : 2F                  	SRC P7
    2312/     7D6 : A2                  	LD P1_HI
    2313/     7D7 : E0                  	WRM
    2314/     7D8 :                     
    2315/     7D8 : C0                  	BBL 0
    2316/     7D9 :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/04/10 10:54:46


    2317/     7D9 :                     ;;;----------------------------------------------------------------------------
    2318/     7D9 :                     ;;; LD_P1_REG8P7
    2319/     7D9 :                     ;;; P1 = REG8(P7)
    2320/     7D9 :                     ;;;----------------------------------------------------------------------------
    2321/     7D9 :                     LD_P1_REG8P7:
    2322/     7D9 : 2F                  	SRC P7
    2323/     7DA : E9                  	RDM
    2324/     7DB : B3                  	XCH P1_LO
    2325/     7DC :                     
    2326/     7DC : 6F                  	INC P7_LO		; P7_LO++
    2327/     7DD : 2F                  	SRC P7
    2328/     7DE : E9                  	RDM
    2329/     7DF : B2                  	XCH P1_HI
    2330/     7E0 : C0                  	BBL 0
    2331/     7E1 :                     
    2332/     7E1 :                     ;;;----------------------------------------------------------------------------
    2333/     7E1 :                     ;;; LD_P1_REG8P0
    2334/     7E1 :                     ;;; P1 = REG8(P0)
    2335/     7E1 :                     ;;;----------------------------------------------------------------------------
    2336/     7E1 :                     LD_P1_REG8P0:
    2337/     7E1 : (MACRO)              	LD_P7_P0
    2337/     7E1 : A0                                  LD P0_HI
    2337/     7E2 : BE                                  XCH P7_HI
    2337/     7E3 : A1                                  LD P0_LO
    2337/     7E4 : BF                                  XCH P7_LO
    2338/     7E5 : 47 D9               	JUN LD_P1_REG8P7
    2339/     7E7 :                     
    2340/     7E7 :                     ;;;----------------------------------------------------------------------------
    2341/     7E7 :                     ;;; LD_P1_REG8P1
    2342/     7E7 :                     ;;; P1 = REG8(P1)
    2343/     7E7 :                     ;;;----------------------------------------------------------------------------
    2344/     7E7 :                     LD_P1_REG8P1:
    2345/     7E7 : (MACRO)              	LD_P7_P1
    2345/     7E7 : A2                                  LD P1_HI
    2345/     7E8 : BE                                  XCH P7_HI
    2345/     7E9 : A3                                  LD P1_LO
    2345/     7EA : BF                                  XCH P7_LO
    2346/     7EB : 47 D9               	JUN LD_P1_REG8P7
    2347/     7ED :                     
    2348/     7ED :                     ;;;----------------------------------------------------------------------------
    2349/     7ED :                     ;;; LD_P1_REG8P2
    2350/     7ED :                     ;;; P1 = REG8(P2)
    2351/     7ED :                     ;;;----------------------------------------------------------------------------
    2352/     7ED :                     LD_P1_REG8P2:
    2353/     7ED : (MACRO)              	LD_P7_P2
    2353/     7ED : A4                                  LD P2_HI
    2353/     7EE : BE                                  XCH P7_HI
    2353/     7EF : A5                                  LD P2_LO
    2353/     7F0 : BF                                  XCH P7_LO
    2354/     7F1 : 47 D9               	JUN LD_P1_REG8P7
    2355/     7F3 :                     
    2356/     7F3 :                     ;;;----------------------------------------------------------------------------
    2357/     7F3 :                     ;;; LD_P1_REG8P3
    2358/     7F3 :                     ;;; P1 = REG8(P3)
    2359/     7F3 :                     ;;;----------------------------------------------------------------------------
    2360/     7F3 :                     LD_P1_REG8P3:
    2361/     7F3 : (MACRO)              	LD_P7_P3
    2361/     7F3 : A6                                  LD P3_HI
    2361/     7F4 : BE                                  XCH P7_HI
    2361/     7F5 : A7                                  LD P3_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/04/10 10:54:46


    2361/     7F6 : BF                                  XCH P7_LO
    2362/     7F7 : 47 D9               	JUN LD_P1_REG8P7
    2363/     7F9 :                     
    2364/     7F9 :                     ;;;----------------------------------------------------------------------------
    2365/     7F9 :                     ;;; PRINTHEX_REG16P1
    2366/     7F9 :                     ;;; PRINT REG16(P1)
    2367/     7F9 :                     ;;; destroy: P6, P7
    2368/     7F9 :                     ;;;----------------------------------------------------------------------------
    2369/     7F9 :                     PRINTHEX_REG16P1:
    2370/     7F9 : 5B 00               	JMS PUSH_P0
    2371/     7FB : (MACRO)              	LD_P0_P3
    2371/     7FB : A6                                  LD P3_HI
    2371/     7FC : B0                                  XCH P0_HI
    2371/     7FD : A7                                  LD P3_LO
    2371/     7FE : B1                                  XCH P0_LO
    2372/     7FF : 5B 00               	JMS PUSH_P0
    2373/     801 : 5B 12               	JMS PUSH_P1
    2374/     803 : 5B 24               	JMS PUSH_P2
    2375/     805 :                     	
    2376/     805 : 58 2B               	JMS LD_P2P3_REG16P1
    2377/     807 : A4                  	LD R4
    2378/     808 : 5C B4               	JMS PRINT_ACC		; print bit.FEDC
    2379/     80A : A5                  	LD R5
    2380/     80B : 5C B4               	JMS PRINT_ACC		; print bit.BA98
    2381/     80D : A6                  	LD R6
    2382/     80E : 5C B4               	JMS PRINT_ACC		; print bit.7654
    2383/     810 : A7                  	LD R7
    2384/     811 : 5C B4               	JMS PRINT_ACC		; print bit.3210
    2385/     813 :                     
    2386/     813 : 5B 50               	JMS POP_P2
    2387/     815 : 5B 43               	JMS POP_P1
    2388/     817 : 5B 36               	JMS POP_P0
    2389/     819 : (MACRO)              	LD_P3_P0
    2389/     819 : A0                                  LD P0_HI
    2389/     81A : B6                                  XCH P3_HI
    2389/     81B : A1                                  LD P0_LO
    2389/     81C : B7                                  XCH P3_LO
    2390/     81D : 5B 36               	JMS POP_P0
    2391/     81F : C0                  	BBL 0
    2392/     820 :                     
    2393/     820 :                     ;;;----------------------------------------------------------------------------
    2394/     820 :                     ;;; LD_REG16P6_REG16P7
    2395/     820 :                     ;;; REG16(P6) = REG16(P7)
    2396/     820 :                     ;;; destroy: P6, P7, CNT_J
    2397/     820 :                     ;;;----------------------------------------------------------------------------
    2398/     820 :                     LD_REG16P6_REG16P7:
    2399/     820 : DC                  	LDM loop(4)
    2400/     821 : BB                  	XCH CNT_J
    2401/     822 :                     LDREG16P6P7_LOOP:
    2402/     822 : 2F                  	SRC P7
    2403/     823 : E9                  	RDM
    2404/     824 : 2D                  	SRC P6
    2405/     825 : E0                  	WRM
    2406/     826 : 6F                  	INC P7_LO
    2407/     827 : 6D                  	INC P6_LO
    2408/     828 : 7B 22               	ISZ CNT_J, LDREG16P6P7_LOOP
    2409/     82A : C0                  	BBL 0
    2410/     82B :                     
    2411/     82B :                     ;;;----------------------------------------------------------------------------
    2412/     82B :                     ;;; LD_P2P3_REG16P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/04/10 10:54:46


    2413/     82B :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2414/     82B :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2415/     82B :                     ;;; destroy: P7
    2416/     82B :                     ;;;----------------------------------------------------------------------------
    2417/     82B :                     LD_P2P3_REG16P1:
    2418/     82B : (MACRO)              	LD_P7_P1
    2418/     82B : A2                                  LD P1_HI
    2418/     82C : BE                                  XCH P7_HI
    2418/     82D : A3                                  LD P1_LO
    2418/     82E : BF                                  XCH P7_LO
    2419/     82F : 2F                  	SRC P7
    2420/     830 : E9                  	RDM
    2421/     831 : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2422/     832 :                     
    2423/     832 : 6F                  	INC P7_LO
    2424/     833 : 2F                  	SRC P7
    2425/     834 : E9                  	RDM
    2426/     835 : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2427/     836 :                     	
    2428/     836 : 6F                  	INC P7_LO
    2429/     837 : 2F                  	SRC P7
    2430/     838 : E9                  	RDM
    2431/     839 : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2432/     83A :                     
    2433/     83A : 6F                  	INC P7_LO
    2434/     83B : 2F                  	SRC P7
    2435/     83C : E9                  	RDM
    2436/     83D : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2437/     83E :                     
    2438/     83E : C0                  	BBL 0
    2439/     83F :                     
    2440/     83F :                     ;;;----------------------------------------------------------------------------
    2441/     83F :                     ;;; INC_REG16P0
    2442/     83F :                     ;;; REG16(P0) = REG16(P0)+1
    2443/     83F :                     ;;; destroy: P7(R14, R15)
    2444/     83F :                     ;;;----------------------------------------------------------------------------
    2445/     83F :                     INC_REG16P0:
    2446/     83F : A1                  	LD R1
    2447/     840 : BF                  	XCH R15			; save R1 to R15
    2448/     841 :                     
    2449/     841 : DC                  	LDM loop(4)
    2450/     842 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2451/     843 :                     REG16_INC_LOOP:
    2452/     843 : 21                  	SRC P0
    2453/     844 : E9                  	RDM
    2454/     845 : F2                  	IAC 
    2455/     846 : E0                  	WRM
    2456/     847 : 1C 4C               	JCN NZ, REG16_INC_EXIT
    2457/     849 : 61                  	INC R1
    2458/     84A : 7E 43               	ISZ R14, REG16_INC_LOOP
    2459/     84C :                     
    2460/     84C :                     REG16_INC_EXIT:
    2461/     84C : AF                  	LD R15
    2462/     84D : B1                  	XCH R1			; restore R1
    2463/     84E : C0                  	BBL 0
    2464/     84F :                     
    2465/     84F :                     ;;;----------------------------------------------------------------------------
    2466/     84F :                     ;;; DEC_REG16P0
    2467/     84F :                     ;;; REG16(P0) = REG16(P0) - 1
    2468/     84F :                     ;;; destroy: P7(R14, R15)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/04/10 10:54:46


    2469/     84F :                     ;;;----------------------------------------------------------------------------
    2470/     84F :                     DEC_REG16P0:
    2471/     84F : A1                  	LD R1
    2472/     850 : BF                  	XCH R15			; save R1 to R15
    2473/     851 :                     
    2474/     851 : DC                  	LDM loop(4)
    2475/     852 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2476/     853 : F1                  	CLC
    2477/     854 :                     REG16_DEC_LOOP:
    2478/     854 : 21                  	SRC P0
    2479/     855 : E9                  	RDM
    2480/     856 : F8                  	DAC
    2481/     857 : E0                  	WRM
    2482/     858 : 12 5D               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2483/     85A : 61                  	INC R1
    2484/     85B : 7E 54               	ISZ R14, REG16_DEC_LOOP
    2485/     85D :                     REG16_DEC_EXIT:
    2486/     85D : AF                  	LD R15
    2487/     85E : B1                  	XCH R1			; restore R1
    2488/     85F : C0                  	BBL 0
    2489/     860 :                     
    2490/     860 :                     ;;;----------------------------------------------------------------------------
    2491/     860 :                     ;;; CMP_REG16P0_REG16P1
    2492/     860 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2493/     860 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
    2494/     860 :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2495/     860 :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2496/     860 :                     ;;; destroy: P6, P7, R5
    2497/     860 :                     ;;;----------------------------------------------------------------------------
    2498/     860 :                     CMP_REG16P0_REG16P1:
    2499/     860 : A1                  	LD R1
    2500/     861 : BF                  	XCH R15			; save R1 to R15
    2501/     862 : A3                  	LD R3
    2502/     863 : BD                  	XCH R13			; save R3 to R13
    2503/     864 : F0                  	CLB
    2504/     865 : BC                  	XCH R12			; R12 = 0
    2505/     866 : DC                  	LDM loop(4)
    2506/     867 : BE                  	XCH R14			; R14=12, 13, 14, 15
    2507/     868 : FA                  	STC
    2508/     869 :                     REG16_CMP_LOOP:
    2509/     869 : F3                  	CMC
    2510/     86A : 21                  	SRC P0
    2511/     86B : E9                  	RDM
    2512/     86C : 23                  	SRC P1
    2513/     86D : E8                  	SBM
    2514/     86E : 61                  	INC R1
    2515/     86F : 63                  	INC R3
    2516/     870 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2517/     871 : AB                  	LD R11
    2518/     872 : 14 76               	JCN Z, REG16_CMP_NEXT
    2519/     874 : D1                  	LDM 1
    2520/     875 : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2521/     876 :                     REG16_CMP_NEXT:
    2522/     876 : 7E 69               	ISZ R14, REG16_CMP_LOOP
    2523/     878 : AB                  	LD R11
    2524/     879 : F5                  	RAL
    2525/     87A : F3                  	CMC			; CY=~MSB
    2526/     87B :                     
    2527/     87B : AF                  	LD R15
    2528/     87C : B1                  	XCH R1			; restore R1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/04/10 10:54:46


    2529/     87D : AD                  	LD R13
    2530/     87E : B3                  	XCH R3			; restore R3
    2531/     87F :                     
    2532/     87F : AC                  	LD R12
    2533/     880 : 14 83               	JCN Z, REG16_CMP_EXIT0
    2534/     882 : C1                  	BBL 1
    2535/     883 :                     REG16_CMP_EXIT0:
    2536/     883 : C0                  	BBL 0
    2537/     884 :                     
    2538/     884 :                     ;;;----------------------------------------------------------------------------
    2539/     884 :                     ;;; ADD_REG16P0_REG16P1
    2540/     884 :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2541/     884 :                     ;;; destroy: P6, P7
    2542/     884 :                     ;;;----------------------------------------------------------------------------
    2543/     884 :                     ADD_REG16P0_REG16P1:
    2544/     884 : A1                  	LD R1
    2545/     885 : BF                  	XCH R15			; save R1 to R15
    2546/     886 : A3                  	LD R3
    2547/     887 : BD                  	XCH R13			; save R3 to R13
    2548/     888 :                     
    2549/     888 : DC                  	LDM loop(4)
    2550/     889 : BE                  	XCH R14
    2551/     88A : F1                  	CLC
    2552/     88B :                     REG16_ADD_LOOP:
    2553/     88B : 23                  	SRC P1
    2554/     88C : E9                  	RDM
    2555/     88D : 21                  	SRC P0
    2556/     88E : EB                  	ADM
    2557/     88F : E0                  	WRM
    2558/     890 : 61                  	INC R1
    2559/     891 : 63                  	INC R3
    2560/     892 : 7E 8B               	ISZ R14, REG16_ADD_LOOP
    2561/     894 :                     
    2562/     894 : AF                  	LD R15
    2563/     895 : B1                  	XCH R1			; restore R1
    2564/     896 : AD                  	LD R13
    2565/     897 : B3                  	XCH R3			; restore R3
    2566/     898 : C0                  	BBL 0
    2567/     899 :                     
    2568/     899 :                     ;;;----------------------------------------------------------------------------
    2569/     899 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2570/     899 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2571/     899 :                     ;;; and increment the pointer
    2572/     899 :                     ;;; ACC=0 get number succeed
    2573/     899 :                     ;;; ACC=1 no number, P1=first chalacter
    2574/     899 :                     ;;; destroy: P6, P7, P2, P3
    2575/     899 :                     ;;;----------------------------------------------------------------------------
    2576/     899 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2577/     899 : 5B 12               	JMS PUSH_P1
    2578/     89B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2579/     89D : 5C EE               	JMS ISHEX_P1
    2580/     89F : 1C A4               	JCN ZN, GETHEX_START
    2581/     8A1 :                     	;; the first character is not a number
    2582/     8A1 : 5B 43               	JMS POP_P1
    2583/     8A3 : C1                  	BBL 1
    2584/     8A4 :                     GETHEX_START:
    2585/     8A4 : 24 00               	FIM P2, 00H
    2586/     8A6 : 26 00               	FIM P3, 00H
    2587/     8A8 :                     GETHEX_LOOP:
    2588/     8A8 : 5D 19               	JMS CTOI_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/04/10 10:54:46


    2589/     8AA : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2590/     8AC : A3                  	LD P1_LO
    2591/     8AD : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2592/     8AE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2593/     8B0 : 5C EE               	JMS ISHEX_P1
    2594/     8B2 : 14 B6               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2595/     8B4 : 48 A8               	JUN GETHEX_LOOP
    2596/     8B6 :                     GETHEX_EXIT:
    2597/     8B6 : 5B 43               	JMS POP_P1
    2598/     8B8 : 47 60               	JUN LD_REG16P1_P2P3
    2599/     8BA :                     ;;;	BBL 0
    2600/     8BA :                     
    2601/     8BA :                     	
    2602/     8BA :                     ;;;----------------------------------------------------------------------------
    2603/     8BA :                     ;;; EMU_PRINT_REGISTERS
    2604/     8BA :                     ;;;----------------------------------------------------------------------------
    2605/     8BA :                     EMU_PRINT_REGISTERS:
    2606/     8BA : 20 90               	FIM P0, lo(STR_EMU_REG)
    2607/     8BC : 5E 00               	JMS PRINTSTR_P0
    2608/     8BE :                     
    2609/     8BE : 22 00               	FIM P1, REG8_A
    2610/     8C0 : 57 E7               	JMS LD_P1_REG8P1
    2611/     8C2 : 5C 85               	JMS PRINTHEX_P1
    2612/     8C4 : 5C 98               	JMS PRINT_SPC
    2613/     8C6 :                     
    2614/     8C6 : 56 48               	JMS GETFLAG_S
    2615/     8C8 : 5C B4               	JMS PRINT_ACC
    2616/     8CA : 56 3E               	JMS GETFLAG_Z
    2617/     8CC : 5C B4               	JMS PRINT_ACC
    2618/     8CE : 56 51               	JMS GETFLAG_C
    2619/     8D0 : 5C B4               	JMS PRINT_ACC
    2620/     8D2 : 5C 98               	JMS PRINT_SPC
    2621/     8D4 :                     
    2622/     8D4 : 22 0C               	FIM P1, REG16_BC
    2623/     8D6 : 57 F9               	JMS PRINTHEX_REG16P1
    2624/     8D8 : 5C 98               	JMS PRINT_SPC
    2625/     8DA :                     
    2626/     8DA : 22 08               	FIM P1, REG16_DE
    2627/     8DC : 57 F9               	JMS PRINTHEX_REG16P1
    2628/     8DE : 5C 98               	JMS PRINT_SPC
    2629/     8E0 :                     
    2630/     8E0 : 22 04               	FIM P1, REG16_HL
    2631/     8E2 : 57 F9               	JMS PRINTHEX_REG16P1
    2632/     8E4 : 5C 98               	JMS PRINT_SPC
    2633/     8E6 :                     
    2634/     8E6 : 22 18               	FIM P1, REG16_SP
    2635/     8E8 : 57 F9               	JMS PRINTHEX_REG16P1
    2636/     8EA : 5C 98               	JMS PRINT_SPC
    2637/     8EC :                     
    2638/     8EC : 22 14               	FIM P1, REG16_PC
    2639/     8EE : 57 F9               	JMS PRINTHEX_REG16P1
    2640/     8F0 : 5C 98               	JMS PRINT_SPC
    2641/     8F2 :                     
    2642/     8F2 : 20 1C               	FIM P0, REG16_ADDR
    2643/     8F4 : 22 14               	FIM P1, REG16_PC
    2644/     8F6 : 57 3C               	JMS LD_REG16P0_REG16P1
    2645/     8F8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2646/     8FA : 5C 85               	JMS PRINTHEX_P1
    2647/     8FC : 5C 98               	JMS PRINT_SPC
    2648/     8FE :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/04/10 10:54:46


    2649/     8FE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2650/     900 : 5C 85               	JMS PRINTHEX_P1
    2651/     902 : 5C 98               	JMS PRINT_SPC
    2652/     904 :                     
    2653/     904 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2654/     906 : 5C 85               	JMS PRINTHEX_P1
    2655/     908 : 5C 98               	JMS PRINT_SPC
    2656/     90A :                     
    2657/     90A : 20 0C               	FIM P0, REG16_BC
    2658/     90C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2659/     90E : 58 4F               	JMS DEC_REG16P0
    2660/     910 : 5C 85               	JMS PRINTHEX_P1
    2661/     912 : 5C 98               	JMS PRINT_SPC
    2662/     914 :                     	
    2663/     914 : 20 08               	FIM P0, REG16_DE
    2664/     916 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2665/     918 : 58 4F               	JMS DEC_REG16P0
    2666/     91A : 5C 85               	JMS PRINTHEX_P1
    2667/     91C : 5C 98               	JMS PRINT_SPC
    2668/     91E :                     
    2669/     91E : 20 04               	FIM P0, REG16_HL
    2670/     920 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2671/     922 : 58 4F               	JMS DEC_REG16P0
    2672/     924 : 5C 85               	JMS PRINTHEX_P1
    2673/     926 : 5C 98               	JMS PRINT_SPC
    2674/     928 :                     
    2675/     928 : 20 18               	FIM P0, REG16_SP
    2676/     92A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2677/     92C : 5C 85               	JMS PRINTHEX_P1
    2678/     92E : 5C 98               	JMS PRINT_SPC
    2679/     930 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2680/     932 : 5C 85               	JMS PRINTHEX_P1
    2681/     934 :                     ;;; 	JMS PRINT_SPC
    2682/     934 :                     
    2683/     934 : 58 4F               	JMS DEC_REG16P0
    2684/     936 : 58 4F               	JMS DEC_REG16P0
    2685/     938 :                     	
    2686/     938 : 4C A0               	JUN PRINT_CRLF
    2687/     93A :                     ;;;	BBL 0
    2688/     93A :                     
    2689/     93A :                     
    2690/     93A :                     	
    2691/     93A :                     ;;;----------------------------------------------------------------------------
    2692/     93A :                     ;;; EMULATE_OUT_P1
    2693/     93A :                     ;;; Emulate OUT instruction
    2694/     93A :                     ;;;----------------------------------------------------------------------------
    2695/     93A :                     EMULATE_OUT_P1:
    2696/     93A : 2E 01               	FIM P7, EMU_UARTRD
    2697/     93C : 5D 25               	JMS CMP_P1P7
    2698/     93E : 1C 42               	JCN ZN, EMU_OUT_P1_L1
    2699/     940 : 49 4B               	JUN EMU_OUT_UARTRD
    2700/     942 :                     EMU_OUT_P1_L1:
    2701/     942 : 2E 00               	FIM P7, EMU_UARTRC
    2702/     944 : 5D 25               	JMS CMP_P1P7
    2703/     946 : 1C 4A               	JCN ZN, EMU_OUT_P1_L2
    2704/     948 : 49 51               	JUN EMU_OUT_UARTRC
    2705/     94A :                     EMU_OUT_P1_L2:
    2706/     94A : C0                  	BBL 0
    2707/     94B :                     
    2708/     94B :                     EMU_OUT_UARTRD:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/04/10 10:54:46


    2709/     94B : 22 00               	FIM P1, REG8_A
    2710/     94D : 57 E7               	JMS LD_P1_REG8P1
    2711/     94F : 4C 5F               	JUN PUTCHAR_P1
    2712/     951 :                     ;;;	BBL 0
    2713/     951 :                     EMU_OUT_UARTRC:			; do nothing
    2714/     951 : C0                  	BBL 0
    2715/     952 :                     	
    2716/     952 :                     ;;;----------------------------------------------------------------------------
    2717/     952 :                     ;;; EMULATE_IN_P1
    2718/     952 :                     ;;; Emulate IN instruction
    2719/     952 :                     ;;;----------------------------------------------------------------------------
    2720/     952 :                     EMULATE_IN_P1:
    2721/     952 : 2E 01               	FIM P7, EMU_UARTRD
    2722/     954 : 5D 25               	JMS CMP_P1P7
    2723/     956 : 1C 5A               	JCN ZN, EMU_IN_P1_L1
    2724/     958 : 49 63               	JUN EMU_IN_UARTRD
    2725/     95A :                     EMU_IN_P1_L1:
    2726/     95A : 2E 00               	FIM P7, EMU_UARTRC
    2727/     95C : 5D 25               	JMS CMP_P1P7
    2728/     95E : 1C 62               	JCN ZN, EMU_IN_P1_L2
    2729/     960 : 49 83               	JUN EMU_IN_UARTRC
    2730/     962 :                     EMU_IN_P1_L2:
    2731/     962 : C0                  	BBL 0
    2732/     963 :                     
    2733/     963 :                     EMU_IN_UARTRD:
    2734/     963 : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2735/     965 : 57 D9               	JMS LD_P1_REG8P7
    2736/     967 :                     	
    2737/     967 : 5D 32               	JMS ISZEROORNOT_P1
    2738/     969 : 1C 6D               	JCN ZN, EMU_IN_UARTRD_SKIPGETCHAR
    2739/     96B : 5C 37               	JMS GETCHAR_P1
    2740/     96D :                     EMU_IN_UARTRD_SKIPGETCHAR:
    2741/     96D : 2E 1B               	FIM P7, 1BH		; ESC
    2742/     96F : 5D 25               	JMS CMP_P1P7
    2743/     971 : 14 7D               	JCN Z, EMU_IN_EXIT_TO_MONITOR
    2744/     973 :                     	
    2745/     973 : 20 00               	FIM P0, REG8_A
    2746/     975 : 57 C1               	JMS LD_REG8P0_P1
    2747/     977 :                     
    2748/     977 : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2749/     979 : 22 00               	FIM P1, 00H
    2750/     97B : 47 D1               	JUN LD_REG8P7_P1
    2751/     97D :                     ;;;	BBL 0
    2752/     97D :                     
    2753/     97D :                     EMU_IN_EXIT_TO_MONITOR:
    2754/     97D : 5C A0               	JMS PRINT_CRLF
    2755/     97F : 58 BA               	JMS EMU_PRINT_REGISTERS
    2756/     981 : 40 2D               	JUN CMD_LOOP
    2757/     983 :                     
    2758/     983 :                     ;;; if ~test button is on then wait for the button released,
    2759/     983 :                     ;;; and set flag to return "STOP" code on the next "IN URTRD" 
    2760/     983 :                     EMU_IN_UARTRC:
    2761/     983 : 11 8D               	JCN T, EMU_IN_UARTRC_EXIT
    2762/     985 : 19 85               	JCN TN, $
    2763/     987 : 20 20               	FIM P0, REG8_EMU_KEYBUF
    2764/     989 : 22 03               	FIM P1, EMU_IN_STOPCODE
    2765/     98B : 47 C1               	JUN LD_REG8P0_P1
    2766/     98D :                     	
    2767/     98D :                     EMU_IN_UARTRC_EXIT:
    2768/     98D : 20 00               	FIM P0, REG8_A
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/04/10 10:54:46


    2769/     98F : 22 FF               	FIM P1, EMU_IN_UARTRC_VALUE
    2770/     991 : 47 C1               	JUN LD_REG8P0_P1
    2771/     993 :                     ;;;	BBL 0
    2772/     993 :                     
    2773/     993 :                     
    2774/     993 :                     ;;;---------------------------------------------------------------------------
    2775/     993 :                     ;;; JIN_P2_CODE_80BF
    2776/     993 :                     ;;; Jump table for CODE 80H to BFH
    2777/     993 :                     ;;; P2=0F0H + CODE.bit(543)0
    2778/     993 :                     ;;;---------------------------------------------------------------------------
    2779/     9EF :                     	org 09EFH
    2780/     9EF :                     JIN_P2_CODE_80BF:
    2781/     9EF : 35                  	JIN P2
    2782/     9F0 :                     	org 09F0H
    2783/     9F0 : 44 91               	JUN ADI_P1		; 9F0: 80H<=87H
    2784/     9F2 : 44 DC               	JUN ACI_P1		; 9F2: 88H<=8FH
    2785/     9F4 : 45 0E               	JUN SUI_P1		; 9F4: 90H<=97H
    2786/     9F6 : 45 30               	JUN SBI_P1		; 9F6: 98H<=9FH
    2787/     9F8 : 45 82               	JUN ANI_P1		; 9F8: A0H<=A7H
    2788/     9FA : 45 B9               	JUN XRI_P1		; 9FA: A8H<=AFH
    2789/     9FC : 45 FE               	JUN ORI_P1		; 9FC: B0H<=B7H
    2790/     9FE : 46 2A               	JUN CPI_P1		; 9FE: B8H<=BFH
    2791/     A00 :                     ;;;---------------------------------------------------------------------------
    2792/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2793/     A00 :                     ;;;---------------------------------------------------------------------------
    2794/     A00 :                     	org 0A00H
    2795/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2796/     A00 : 33                  	JIN P1
    2797/     A01 : 00                  	NOP			; do not delete this NOP
    2798/     A02 : 42 8A               	JUN CODE_01H
    2799/     A04 : 42 96               	JUN CODE_02H
    2800/     A06 : 42 9E               	JUN CODE_03H
    2801/     A08 : 42 A2               	JUN CODE_04H
    2802/     A0A : 42 A6               	JUN CODE_05H
    2803/     A0C : 42 AA               	JUN CODE_06H
    2804/     A0E : 42 AE               	JUN CODE_07H
    2805/     A10 : 42 BE               	JUN CODE_08H
    2806/     A12 : 42 BF               	JUN CODE_09H
    2807/     A14 : 42 C7               	JUN CODE_0AH
    2808/     A16 : 42 D1               	JUN CODE_0BH
    2809/     A18 : 42 D5               	JUN CODE_0CH
    2810/     A1A : 42 D9               	JUN CODE_0DH
    2811/     A1C : 42 DD               	JUN CODE_0EH
    2812/     A1E : 42 E1               	JUN CODE_0FH
    2813/     A20 : 42 F1               	JUN CODE_10H
    2814/     A22 : 42 F2               	JUN CODE_11H
    2815/     A24 : 42 FE               	JUN CODE_12H
    2816/     A26 : 43 06               	JUN CODE_13H
    2817/     A28 : 43 0A               	JUN CODE_14H
    2818/     A2A : 43 0E               	JUN CODE_15H
    2819/     A2C : 43 12               	JUN CODE_16H
    2820/     A2E : 43 16               	JUN CODE_17H
    2821/     A30 : 43 26               	JUN CODE_18H
    2822/     A32 : 43 27               	JUN CODE_19H
    2823/     A34 : 43 2F               	JUN CODE_1AH
    2824/     A36 : 43 39               	JUN CODE_1BH
    2825/     A38 : 43 3D               	JUN CODE_1CH
    2826/     A3A : 43 41               	JUN CODE_1DH
    2827/     A3C : 43 45               	JUN CODE_1EH
    2828/     A3E : 43 49               	JUN CODE_1FH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/04/10 10:54:46


    2829/     A40 : 43 59               	JUN CODE_20H
    2830/     A42 : 43 5A               	JUN CODE_21H
    2831/     A44 : 43 66               	JUN CODE_22H
    2832/     A46 : 43 84               	JUN CODE_23H
    2833/     A48 : 43 88               	JUN CODE_24H
    2834/     A4A : 43 8C               	JUN CODE_25H
    2835/     A4C : 43 90               	JUN CODE_26H
    2836/     A4E : 43 94               	JUN CODE_27H
    2837/     A50 : 43 A1               	JUN CODE_28H
    2838/     A52 : 43 A2               	JUN CODE_29H
    2839/     A54 : 43 AA               	JUN CODE_2AH
    2840/     A56 : 43 C4               	JUN CODE_2BH
    2841/     A58 : 43 C8               	JUN CODE_2CH
    2842/     A5A : 43 CC               	JUN CODE_2DH
    2843/     A5C : 43 D0               	JUN CODE_2EH
    2844/     A5E : 43 D4               	JUN CODE_2FH
    2845/     A60 : 43 E0               	JUN CODE_30H
    2846/     A62 : 43 E1               	JUN CODE_31H
    2847/     A64 : 43 ED               	JUN CODE_32H
    2848/     A66 : 44 01               	JUN CODE_33H
    2849/     A68 : 44 05               	JUN CODE_34H
    2850/     A6A : 44 11               	JUN CODE_35H
    2851/     A6C : 44 1D               	JUN CODE_36H
    2852/     A6E : 44 23               	JUN CODE_37H
    2853/     A70 : 44 25               	JUN CODE_38H
    2854/     A72 : 44 26               	JUN CODE_39H
    2855/     A74 : 44 2E               	JUN CODE_3AH
    2856/     A76 : 44 42               	JUN CODE_3BH
    2857/     A78 : 44 46               	JUN CODE_3CH
    2858/     A7A : 44 4C               	JUN CODE_3DH
    2859/     A7C : 44 52               	JUN CODE_3EH
    2860/     A7E : 44 58               	JUN CODE_3FH
    2861/     A80 : 44 5D               	JUN CODE_C0H
    2862/     A82 : 44 61               	JUN CODE_C1H
    2863/     A84 : 44 67               	JUN CODE_C2H
    2864/     A86 : 44 77               	JUN CODE_C3H
    2865/     A88 : 44 85               	JUN CODE_C4H
    2866/     A8A : 44 89               	JUN CODE_C5H
    2867/     A8C : 44 8F               	JUN CODE_C6H
    2868/     A8E : 44 99               	JUN CODE_C7H
    2869/     A90 : 44 9F               	JUN CODE_C8H
    2870/     A92 : 44 A7               	JUN CODE_C9H
    2871/     A94 : 44 AD               	JUN CODE_CAH
    2872/     A96 : 44 B1               	JUN CODE_CBH
    2873/     A98 : 44 B2               	JUN CODE_CCH
    2874/     A9A : 44 C2               	JUN CODE_CDH
    2875/     A9C : 44 DA               	JUN CODE_CEH
    2876/     A9E : 44 EA               	JUN CODE_CFH
    2877/     AA0 : 44 F0               	JUN CODE_D0H
    2878/     AA2 : 44 F4               	JUN CODE_D1H
    2879/     AA4 : 44 FA               	JUN CODE_D2H
    2880/     AA6 : 44 FE               	JUN CODE_D3H
    2881/     AA8 : 45 02               	JUN CODE_D4H
    2882/     AAA : 45 06               	JUN CODE_D5H
    2883/     AAC : 45 0C               	JUN CODE_D6H
    2884/     AAE : 45 16               	JUN CODE_D7H
    2885/     AB0 : 45 1C               	JUN CODE_D8H
    2886/     AB2 : 45 20               	JUN CODE_D9H
    2887/     AB4 : 45 21               	JUN CODE_DAH
    2888/     AB6 : 45 25               	JUN CODE_DBH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/04/10 10:54:46


    2889/     AB8 : 45 29               	JUN CODE_DCH
    2890/     ABA : 45 2D               	JUN CODE_DDH
    2891/     ABC : 45 2E               	JUN CODE_DEH
    2892/     ABE : 45 3E               	JUN CODE_DFH
    2893/     AC0 : 45 44               	JUN CODE_E0H
    2894/     AC2 : 45 48               	JUN CODE_E1H
    2895/     AC4 : 45 4E               	JUN CODE_E2H
    2896/     AC6 : 45 52               	JUN CODE_E3H
    2897/     AC8 : 45 76               	JUN CODE_E4H
    2898/     ACA : 45 7A               	JUN CODE_E5H
    2899/     ACC : 45 80               	JUN CODE_E6H
    2900/     ACE : 45 92               	JUN CODE_E7H
    2901/     AD0 : 45 98               	JUN CODE_E8H
    2902/     AD2 : 45 9C               	JUN CODE_E9H
    2903/     AD4 : 45 A0               	JUN CODE_EAH
    2904/     AD6 : 45 A4               	JUN CODE_EBH
    2905/     AD8 : 45 B2               	JUN CODE_ECH
    2906/     ADA : 45 B6               	JUN CODE_EDH
    2907/     ADC : 45 B7               	JUN CODE_EEH
    2908/     ADE : 45 C9               	JUN CODE_EFH
    2909/     AE0 : 45 CF               	JUN CODE_F0H
    2910/     AE2 : 45 D3               	JUN CODE_F1H
    2911/     AE4 : 45 E1               	JUN CODE_F2H
    2912/     AE6 : 45 E5               	JUN CODE_F3H
    2913/     AE8 : 45 E6               	JUN CODE_F4H
    2914/     AEA : 45 EA               	JUN CODE_F5H
    2915/     AEC : 45 FC               	JUN CODE_F6H
    2916/     AEE : 46 0E               	JUN CODE_F7H
    2917/     AF0 : 46 14               	JUN CODE_F8H
    2918/     AF2 : 46 18               	JUN CODE_F9H
    2919/     AF4 : 46 1E               	JUN CODE_FAH
    2920/     AF6 : 46 22               	JUN CODE_FBH
    2921/     AF8 : 46 23               	JUN CODE_FCH
    2922/     AFA : 46 27               	JUN CODE_FDH
    2923/     AFC : 46 28               	JUN CODE_FEH
    2924/     AFE : 46 38               	JUN CODE_FFH
    2925/     B00 :                     
    2926/     B00 :                     	org 0B00H
    2927/     B00 :                     ;;;----------------------------------------------------------------------------
    2928/     B00 :                     ;;; PUSH_P0, P1, P2
    2929/     B00 :                     ;;; POP_P0, P1, P2
    2930/     B00 :                     ;;; Push and Pop an 8bit register pair
    2931/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2932/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    2933/     B00 :                     ;;; destroy P7, P6
    2934/     B00 :                     ;;;----------------------------------------------------------------------------
    2935/     B00 :                     
    2936/     B00 :                     PUSHP	macro ThisR0, ThisR1
    2937/     B00 :                     	LD SP_LO
    2938/     B00 :                     	DAC
    2939/     B00 :                     	XCH SP_LO		; --sp.3210
    2940/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    2941/     B00 :                     	LD SP_HI
    2942/     B00 :                     	DAC
    2943/     B00 :                     	XCH SP_HI		; --sp.7654
    2944/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    2945/     B00 :                     	SRC SP
    2946/     B00 :                     	LD ThisR0
    2947/     B00 :                     	WRM			; (sp)=R0
    2948/     B00 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/04/10 10:54:46


    2949/     B00 :                     	LD SP_LO
    2950/     B00 :                     	DAC
    2951/     B00 :                     	XCH SP_LO		; --sp.3210
    2952/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    2953/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    2954/     B00 :                     ;;;	LD SP_HI
    2955/     B00 :                     ;;;	DAC
    2956/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
    2957/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    2958/     B00 :                     	SRC SP
    2959/     B00 :                     	LD ThisR1
    2960/     B00 :                     	WRM			; (sp)=R1
    2961/     B00 :                     
    2962/     B00 :                     	BBL 0
    2963/     B00 :                     	endm
    2964/     B00 :                     ;;;----------------------------------------------------------------------------
    2965/     B00 :                     POPP	macro ThisR0, ThisR1
    2966/     B00 :                     	SRC SP
    2967/     B00 :                     	RDM
    2968/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    2969/     B00 :                     	INC SP_LO		; sp.3210++
    2970/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    2971/     B00 :                     	SRC SP
    2972/     B00 :                     	RDM
    2973/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    2974/     B00 :                     	INC SP_LO		; sp.3210++
    2975/     B00 :                     	LD SP_LO
    2976/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    2977/     B00 :                     	INC SP_HI		; sp.7654++
    2978/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    2979/     B00 :                     	BBL 0
    2980/     B00 :                     	endm
    2981/     B00 :                     ;;;----------------------------------------------------------------------------
    2982/     B00 :                     ;;;----------------------------------------------------------------------------
    2983/     B00 :                     ;;; Generate real codes from macros
    2984/     B00 :                     ;;;----------------------------------------------------------------------------
    2985/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    2985/     B00 : A9                          LD SP_LO
    2985/     B01 : F8                          DAC
    2985/     B02 : B9                          XCH SP_LO               ; --sp.3210
    2985/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    2985/     B05 : A8                          LD SP_HI
    2985/     B06 : F8                          DAC
    2985/     B07 : B8                          XCH SP_HI               ; --sp.7654
    2985/     B08 :                     PUSH_NOBORROW_R0_R1:
    2985/     B08 : 29                          SRC SP
    2985/     B09 : A0                          LD R0
    2985/     B0A : E0                          WRM                     ; (sp)=R0
    2985/     B0B :                     
    2985/     B0B : A9                          LD SP_LO
    2985/     B0C : F8                          DAC
    2985/     B0D : B9                          XCH SP_LO               ; --sp.3210
    2985/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    2985/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    2985/     B0E :                     ;;;     LD SP_HI
    2985/     B0E :                     ;;;     DAC
    2985/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    2985/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    2985/     B0E : 29                          SRC SP
    2985/     B0F : A1                          LD R1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/04/10 10:54:46


    2985/     B10 : E0                          WRM                     ; (sp)=R1
    2985/     B11 :                     
    2985/     B11 : C0                          BBL 0
    2986/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    2986/     B12 : A9                          LD SP_LO
    2986/     B13 : F8                          DAC
    2986/     B14 : B9                          XCH SP_LO               ; --sp.3210
    2986/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
    2986/     B17 : A8                          LD SP_HI
    2986/     B18 : F8                          DAC
    2986/     B19 : B8                          XCH SP_HI               ; --sp.7654
    2986/     B1A :                     PUSH_NOBORROW_R2_R3:
    2986/     B1A : 29                          SRC SP
    2986/     B1B : A2                          LD R2
    2986/     B1C : E0                          WRM                     ; (sp)=R0
    2986/     B1D :                     
    2986/     B1D : A9                          LD SP_LO
    2986/     B1E : F8                          DAC
    2986/     B1F : B9                          XCH SP_LO               ; --sp.3210
    2986/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    2986/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    2986/     B20 :                     ;;;     LD SP_HI
    2986/     B20 :                     ;;;     DAC
    2986/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    2986/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    2986/     B20 : 29                          SRC SP
    2986/     B21 : A3                          LD R3
    2986/     B22 : E0                          WRM                     ; (sp)=R1
    2986/     B23 :                     
    2986/     B23 : C0                          BBL 0
    2987/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    2987/     B24 : A9                          LD SP_LO
    2987/     B25 : F8                          DAC
    2987/     B26 : B9                          XCH SP_LO               ; --sp.3210
    2987/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
    2987/     B29 : A8                          LD SP_HI
    2987/     B2A : F8                          DAC
    2987/     B2B : B8                          XCH SP_HI               ; --sp.7654
    2987/     B2C :                     PUSH_NOBORROW_R4_R5:
    2987/     B2C : 29                          SRC SP
    2987/     B2D : A4                          LD R4
    2987/     B2E : E0                          WRM                     ; (sp)=R0
    2987/     B2F :                     
    2987/     B2F : A9                          LD SP_LO
    2987/     B30 : F8                          DAC
    2987/     B31 : B9                          XCH SP_LO               ; --sp.3210
    2987/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    2987/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    2987/     B32 :                     ;;;     LD SP_HI
    2987/     B32 :                     ;;;     DAC
    2987/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    2987/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    2987/     B32 : 29                          SRC SP
    2987/     B33 : A5                          LD R5
    2987/     B34 : E0                          WRM                     ; (sp)=R1
    2987/     B35 :                     
    2987/     B35 : C0                          BBL 0
    2988/     B36 : (MACRO)              POP_P0: POPP R0, R1
    2988/     B36 : 29                          SRC SP
    2988/     B37 : E9                          RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/04/10 10:54:46


    2988/     B38 : B1                          XCH R1              ; R1=(sp)
    2988/     B39 : 69                          INC SP_LO               ; sp.3210++
    2988/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    2988/     B3A : 29                          SRC SP
    2988/     B3B : E9                          RDM
    2988/     B3C : B0                          XCH R0              ; R0=(sp)
    2988/     B3D : 69                          INC SP_LO               ; sp.3210++
    2988/     B3E : A9                          LD SP_LO
    2988/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    2988/     B41 : 68                          INC SP_HI               ; sp.7654++
    2988/     B42 :                     POP_NOCARRY_R0_R1:
    2988/     B42 : C0                          BBL 0
    2989/     B43 : (MACRO)              POP_P1: POPP R2, R3
    2989/     B43 : 29                          SRC SP
    2989/     B44 : E9                          RDM
    2989/     B45 : B3                          XCH R3              ; R3=(sp)
    2989/     B46 : 69                          INC SP_LO               ; sp.3210++
    2989/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    2989/     B47 : 29                          SRC SP
    2989/     B48 : E9                          RDM
    2989/     B49 : B2                          XCH R2              ; R2=(sp)
    2989/     B4A : 69                          INC SP_LO               ; sp.3210++
    2989/     B4B : A9                          LD SP_LO
    2989/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    2989/     B4E : 68                          INC SP_HI               ; sp.7654++
    2989/     B4F :                     POP_NOCARRY_R2_R3:
    2989/     B4F : C0                          BBL 0
    2990/     B50 : (MACRO)              POP_P2: POPP R4, R5
    2990/     B50 : 29                          SRC SP
    2990/     B51 : E9                          RDM
    2990/     B52 : B5                          XCH R5              ; R5=(sp)
    2990/     B53 : 69                          INC SP_LO               ; sp.3210++
    2990/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    2990/     B54 : 29                          SRC SP
    2990/     B55 : E9                          RDM
    2990/     B56 : B4                          XCH R4              ; R4=(sp)
    2990/     B57 : 69                          INC SP_LO               ; sp.3210++
    2990/     B58 : A9                          LD SP_LO
    2990/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    2990/     B5B : 68                          INC SP_HI               ; sp.7654++
    2990/     B5C :                     POP_NOCARRY_R4_R5:
    2990/     B5C : C0                          BBL 0
    2991/     B5D :                     
    2992/     B5D :                     ;;;	org 0B00H
    2993/     B5D :                     ;;;---------------------------------------------------------------------------
    2994/     B5D :                     ;;; PM16
    2995/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    2996/     B5D :                     ;;; 
    2997/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    2998/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    2999/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    3000/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    3001/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    3002/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    3003/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    3004/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
    3005/     B5D :                     ;;; 
    3006/     B5D :                     ;;;    PM12(BA98.7654.3210)
    3007/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    3008/     B5D :                     ;;; 
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/04/10 10:54:46


    3009/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    3010/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    3011/     B5D :                     ;;;   (for debug with 256 x 16bank)
    3012/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    3013/     B5D :                     ;;;---------------------------------------------------------------------------
    3014/     B5D :                     ;;;---------------------------------------------------------------------------
    3015/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    3016/     B5D :                     ;;; P1 = PM16(REG(P0)++)
    3017/     B5D :                     ;;; destroy: P6, P7
    3018/     B5D :                     ;;;---------------------------------------------------------------------------
    3019/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    3020/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    3020/     B5D : A0                                  LD P0_HI
    3020/     B5E : BC                                  XCH P6_HI
    3020/     B5F : A1                                  LD P0_LO
    3020/     B60 : BD                                  XCH P6_LO
    3021/     B61 : 2D                  	SRC P6
    3022/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    3023/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3024/     B65 : 2F                  	SRC P7
    3025/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3026/     B67 :                     
    3027/     B67 : 6D                  	INC P6_LO
    3028/     B68 : 2D                  	SRC P6
    3029/     B69 : E9                  	RDM			; ACC=REG(P0).bit7654
    3030/     B6A : 2E 40               	FIM P7, CHIP_PMSELECT1
    3031/     B6C : 2F                  	SRC P7
    3032/     B6D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3033/     B6E :                     
    3034/     B6E : 6D                  	INC P6_LO
    3035/     B6F : 2D                  	SRC P6
    3036/     B70 : E9                  	RDM			; ACC=REG(P0).bitBA98
    3037/     B71 : B1                  	XCH P0_LO		; P0_LO=REG(P0).bitBA98
    3038/     B72 :                     	
    3039/     B72 : 6D                  	INC P6_LO
    3040/     B73 : 2D                  	SRC P6
    3041/     B74 : E9                  	RDM			; ACC=REG(P0).bitFEDC
    3042/     B75 : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitFEDC
    3043/     B76 :                     
    3044/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3045/     B78 :                     
    3046/     B78 : AC                  	LD P6_HI			; restore P0
    3047/     B79 : B0                  	XCH P0_HI
    3048/     B7A : AD                  	LD P6_LO
    3049/     B7B : F8                  	DAC
    3050/     B7C : F8                  	DAC
    3051/     B7D : F8                  	DAC
    3052/     B7E : B1                  	XCH P0_LO
    3053/     B7F : 48 3F               	JUN INC_REG16P0
    3054/     B81 :                     ;;;	BBL 0
    3055/     B81 :                     
    3056/     B81 :                     ;;;---------------------------------------------------------------------------
    3057/     B81 :                     ;;; LD_PM16REG16P0_P1
    3058/     B81 :                     ;;; PM16(REG(P0)) = P1
    3059/     B81 :                     ;;; 
    3060/     B81 :                     ;;; destroy: P6, P7
    3061/     B81 :                     ;;;---------------------------------------------------------------------------
    3062/     B81 :                     LD_PM16REG16P0_P1:
    3063/     B81 : 21                  	SRC P0
    3064/     B82 : E9                  	RDM			; ACC = bit3210 of REG(P0)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/04/10 10:54:46


    3065/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3066/     B85 : 2F                  	SRC P7			; ACC=REG(P0).bit3210
    3067/     B86 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3068/     B87 :                     
    3069/     B87 : 61                  	INC P0_LO
    3070/     B88 : 21                  	SRC P0
    3071/     B89 : E9                  	RDM			; ACC = bit7654 of REG(P0)
    3072/     B8A : 2E 40               	FIM P7, CHIP_PMSELECT1
    3073/     B8C : 2F                  	SRC P7
    3074/     B8D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3075/     B8E :                     
    3076/     B8E : 61                  	INC P0_LO
    3077/     B8F : 21                  	SRC P0
    3078/     B90 : E9                  	RDM			; ACC = bitBA98 of REG(P0)
    3079/     B91 : BD                  	XCH P6_LO		; P6_LO = REG(P0).bitBA98
    3080/     B92 :                     
    3081/     B92 : 61                  	INC P0_LO
    3082/     B93 : 21                  	SRC P0
    3083/     B94 : E9                  	RDM			; ACC = bitFEDC of REG(P0)
    3084/     B95 : BC                  	XCH P6_HI		; P6_HI = REG(P0).bitFEDC
    3085/     B96 :                     	
    3086/     B96 : 2D                  	SRC P6
    3087/     B97 : A3                  	LD P1_LO
    3088/     B98 : E3                  	WPM
    3089/     B99 : A2                  	LD P1_HI
    3090/     B9A : E3                  	WPM
    3091/     B9B :                     	
    3092/     B9B : A1                  	LD R1			; restore P0
    3093/     B9C : F8                  	DAC
    3094/     B9D : F8                  	DAC
    3095/     B9E : F8                  	DAC
    3096/     B9F : B1                  	XCH R1
    3097/     BA0 : C0                  	BBL 0
    3098/     BA1 :                     
    3099/     BA1 :                     ;;;----------------------------------------------------------------------------
    3100/     BA1 :                     ;;; Subroutines for program memory operation
    3101/     BA1 :                     ;;;----------------------------------------------------------------------------
    3102/     BA1 :                     ;;;---------------------------------------------------------------------------
    3103/     BA1 :                     ;;; PM_WRITE_P0_P1
    3104/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3105/     BA1 :                     ;;; (0F00H+P0) = P1
    3106/     BA1 :                     ;;; input: P0, P1
    3107/     BA1 :                     ;;; output: none
    3108/     BA1 :                     ;;;---------------------------------------------------------------------------
    3109/     BA1 :                     PM_WRITE_P0_P1:
    3110/     BA1 : 21                  	SRC P0
    3111/     BA2 : A3                  	LD P1_LO
    3112/     BA3 : E3                  	WPM			; write lower 4bit
    3113/     BA4 : A2                  	LD P1_HI
    3114/     BA5 : E3                  	WPM			; write higher 4bit
    3115/     BA6 : C0                  	BBL 0
    3116/     BA7 :                     
    3117/     BA7 :                     ;;;---------------------------------------------------------------------------
    3118/     BA7 :                     ;;; PM_WRITE_P6_P7
    3119/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3120/     BA7 :                     ;;; (0F00H+P6) = P7
    3121/     BA7 :                     ;;; input: P6, P7
    3122/     BA7 :                     ;;; output: none
    3123/     BA7 :                     ;;;---------------------------------------------------------------------------
    3124/     BA7 :                     PM_WRITE_P6_P7:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/04/10 10:54:46


    3125/     BA7 : 2D                  	SRC P6
    3126/     BA8 : AF                  	LD P7_LO
    3127/     BA9 : E3                  	WPM			; write lower 4bit
    3128/     BAA : AE                  	LD P7_HI
    3129/     BAB : E3                  	WPM			; write higher 4bit
    3130/     BAC : C0                  	BBL 0
    3131/     BAD :                     
    3132/     BAD :                     ;;;---------------------------------------------------------------------------
    3133/     BAD :                     ;;; PM_INIT_BANK
    3134/     BAD :                     ;;; initialization for program memory (RAM)
    3135/     BAD :                     ;;; Write a subroutne code for reading memory
    3136/     BAD :                     ;;; destroy: P6, P7
    3137/     BAD :                     ;;;---------------------------------------------------------------------------
    3138/     BAD :                     PM_INIT_BANK:	
    3139/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3140/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3141/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3142/     BB3 : 6D                  	INC P6_LO
    3143/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3144/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3145/     BB8 : C0                  	BBL 0
    3146/     BB9 :                     
    3147/     BB9 :                     ;;;---------------------------------------------------------------------------
    3148/     BB9 :                     ;;; PM_SELECTPMB_P1
    3149/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3150/     BB9 :                     ;;; destroy: P7
    3151/     BB9 :                     ;;;---------------------------------------------------------------------------
    3152/     BB9 :                     PM_SELECTPMB_P1:
    3153/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3154/     BBB : 2F                  	SRC P7
    3155/     BBC : A3                  	LD P1_LO
    3156/     BBD : E1                  	WMP
    3157/     BBE :                     
    3158/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3159/     BC0 : 2F                  	SRC P7
    3160/     BC1 : A2                  	LD P1_HI
    3161/     BC2 : E1                  	WMP
    3162/     BC3 : C0                  	BBL 0
    3163/     BC4 :                     ;;;----------------------------------------------------------------------------
    3164/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3165/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3166/     BC4 :                     ;;; The value of REG(P0) does not change
    3167/     BC4 :                     ;;;----------------------------------------------------------------------------
    3168/     BC4 :                     GETLINE_PM16REG16P0:
    3169/     BC4 : 5B 00               	JMS PUSH_P0
    3170/     BC6 : 5B 12               	JMS PUSH_P1
    3171/     BC8 :                     
    3172/     BC8 : 22 30               	FIM P1, REG16_MON_TMP
    3173/     BCA : 57 46               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3174/     BCC :                     
    3175/     BCC :                     GETLINE_LOOP:
    3176/     BCC : 5C 37               	JMS GETCHAR_P1		; P1 = getchar()
    3177/     BCE : 1C CC               	JCN ZN, GETLINE_LOOP	; ACC!=0 (stop bit error)
    3178/     BD0 :                     	
    3179/     BD0 : 5D 3A               	JMS ISCRLF_P1
    3180/     BD2 : 14 DA               	JCN Z, GETLINE_L1
    3181/     BD4 : 5C AC               	JMS PRINT_CR
    3182/     BD6 : 5C B0               	JMS PRINT_LF
    3183/     BD8 : 4B FE               	JUN GETLINE_EXIT
    3184/     BDA :                     GETLINE_L1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/04/10 10:54:46


    3185/     BDA : 2E 08               	FIM P7, 08H		; backspace
    3186/     BDC : 5D 25               	JMS CMP_P1P7
    3187/     BDE : 14 E2               	JCN Z, GETLINE_BS
    3188/     BE0 : 4B F6               	JUN GETLINE_INSERTCHAR
    3189/     BE2 :                     GETLINE_BS:
    3190/     BE2 : 22 30               	FIM P1, REG16_MON_TMP
    3191/     BE4 : 58 60               	JMS CMP_REG16P0_REG16P1
    3192/     BE6 : 1C EA               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3193/     BE8 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3194/     BEA :                     GETLINE_DO_BS:			; delete a character on the cursor
    3195/     BEA : 58 4F               	JMS DEC_REG16P0		; REG(P0)--
    3196/     BEC :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3197/     BEC : 22 08               	FIM P1, 08H
    3198/     BEE : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3199/     BF0 : 5C 98               	JMS PRINT_SPC		; put ' '
    3200/     BF2 : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3201/     BF4 :                     
    3202/     BF4 : 4B CC               	JUN GETLINE_LOOP
    3203/     BF6 :                     GETLINE_INSERTCHAR:
    3204/     BF6 : 5C 5F               	JMS PUTCHAR_P1
    3205/     BF8 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3206/     BFA : 58 3F               	JMS INC_REG16P0		; REG(P0)++
    3207/     BFC :                     	
    3208/     BFC : 4B CC               	JUN GETLINE_LOOP
    3209/     BFE :                     GETLINE_EXIT:
    3210/     BFE : 22 00               	FIM P1, 00H
    3211/     C00 : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3212/     C02 :                     
    3213/     C02 : 22 30               	FIM P1, REG16_MON_TMP
    3214/     C04 : 57 3C               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3215/     C06 : 5B 43               	JMS POP_P1		; restore P1
    3216/     C08 : 4B 36               	JUN POP_P0		; restore P0
    3217/     C0A :                     ;;;	BBL 0
    3218/     C0A :                     
    3219/     C0A :                     ;;;----------------------------------------------------------------------------
    3220/     C0A :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3221/     C0A :                     ;;; Print a string 
    3222/     C0A :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3223/     C0A :                     ;;; REG(INDEX) is incremented to
    3224/     C0A :                     ;;;	the end of the string
    3225/     C0A :                     ;;; 
    3226/     C0A :                     ;;; destroy: P6, P7
    3227/     C0A :                     ;;;----------------------------------------------------------------------------
    3228/     C0A :                     PRINTSTR_PM16REG16P0:
    3229/     C0A : 5B 12               	JMS PUSH_P1
    3230/     C0C :                     PRINTSTR_LOOP:
    3231/     C0C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3232/     C0E : 5D 32               	JMS ISZEROORNOT_P1
    3233/     C10 : 14 16               	JCN Z, PRINTSTR_EXIT
    3234/     C12 : 5C 5F               	JMS PUTCHAR_P1
    3235/     C14 : 4C 0C               	JUN PRINTSTR_LOOP
    3236/     C16 :                     PRINTSTR_EXIT:
    3237/     C16 : 4B 43               	JUN POP_P1
    3238/     C18 :                     ;;;	BBL 0
    3239/     C18 :                     
    3240/     C18 :                     ;;;----------------------------------------------------------------------------
    3241/     C18 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3242/     C18 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3243/     C18 :                     ;;; and increment the pointer
    3244/     C18 :                     ;;; output: P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/04/10 10:54:46


    3245/     C18 :                     ;;; ACC=0 get number success
    3246/     C18 :                     ;;; ACC=1 no number, P1=first character
    3247/     C18 :                     ;;; destroy: P6, P7
    3248/     C18 :                     ;;;----------------------------------------------------------------------------
    3249/     C18 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
    3250/     C18 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3251/     C1A : 5C EE               	JMS ISHEX_P1
    3252/     C1C : 1C 1F               	JCN ZN, GETHEXBYTE_L1
    3253/     C1E : C1                  	BBL 1			; no hex number and exit
    3254/     C1F :                     GETHEXBYTE_L1:	
    3255/     C1F : 5B 24               	JMS PUSH_P2
    3256/     C21 : 5D 19               	JMS CTOI_P1
    3257/     C23 : A3                  	LD  P1_LO
    3258/     C24 : B4                  	XCH P2_HI			; save for upper digit
    3259/     C25 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3260/     C27 : 5C EE               	JMS ISHEX_P1
    3261/     C29 : 14 31               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3262/     C2B : 5D 19               	JMS CTOI_P1
    3263/     C2D : A4                  	LD P2_HI
    3264/     C2E : B2                  	XCH P1_HI
    3265/     C2F : 4B 50               	JUN POP_P2
    3266/     C31 :                     ;;;	BBL 0
    3267/     C31 :                     GETHEXZBYTE_1DIGIT_EXIT:
    3268/     C31 : F0                  	CLB
    3269/     C32 : B2                  	XCH P1_HI
    3270/     C33 : A4                  	LD P2_HI
    3271/     C34 : B3                  	XCH P1_LO
    3272/     C35 : 4B 50               	JUN POP_P2
    3273/     C37 :                     ;;;	BBL 0
    3274/     C37 :                     	
    3275/     C37 :                     ;;;----------------------------------------------------------------------------
    3276/     C37 :                     ;;; I/O and some basic routines located in Page 0D00H
    3277/     C37 :                     ;;;----------------------------------------------------------------------------
    3278/     C37 :                     ;;;	org 0C00H
    3279/     C37 :                     ;;;---------------------------------------------------------------------------
    3280/     C37 :                     ;;; Software UART Routine
    3281/     C37 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3282/     C37 :                     ;;; defined in separated file
    3283/     C37 :                     ;;;---------------------------------------------------------------------------
    3284/     C37 :                     ;;; supported baudrates are 4800bps or 9600bps
    3285/     C37 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3286/     C37 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3287/     C37 :                     
    3288/     C37 : =2580H               	switch BAUDRATE
    3289/     C37 : =>FALSE              	case 4800
    3290/     C37 :                     	include "4800bps.inc"
    3291/     C37 : =>TRUE               	case 9600
    3292/     C37 :                     	include "9600bps.inc"
(1)    1/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C37 :                     ;;; getchar and putchar functions
(1)    3/     C37 :                     ;;; baud rate = 9600bps
(1)    4/     C37 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    6/     C37 :                     
(1)    7/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C37 :                     ;;; GETCHAR_P1
(1)    9/     C37 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C37 :                     ;;;
(1)   11/     C37 :                     ;;; Input: none
(1)   12/     C37 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 65 - 2023/04/10 10:54:46


(1)   13/     C37 :                     ;;; Working: P6, P7
(1)   14/     C37 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C37 :                     ;;; 
(1)   16/     C37 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C37 :                     ;;; 
(1)   18/     C37 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C37 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C37 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C37 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C37 :                     ;;;               |->phase delay
(1)   23/     C37 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C37 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C37 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C37 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C37 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C37 :                     
(1)   29/     C37 :                     GETCHAR_P1:
(1)   30/     C37 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C39 :                                                     ; 
(1)   32/     C39 : 19 39                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C3B : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3D : 7F 3D               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3F :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3F :                     GETCHAR_L1:
(1)   37/     C3F : 19 44               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C41 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C42 : 4C 47                       JUN GETCHAR_L3          ;<2>
(1)   40/     C44 :                     GETCHAR_L2:
(1)   41/     C44 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C45 : 00                          NOP                     ;[1]
(1)   43/     C46 : 00                          NOP                     ;[1]
(1)   44/     C47 :                     GETCHAR_L3:
(1)   45/     C47 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C48 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C49 : 7D 3F                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     C4B :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C4B : B3                  	XCH R3                  ;(1)
(1)   50/     C4C : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4E :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4E :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4E :                     GETCHAR_L4:
(1)   54/     C4E : 19 53               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C50 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     C51 : 4C 56                       JUN GETCHAR_L6          ;<2>
(1)   57/     C53 :                     GETCHAR_L5:
(1)   58/     C53 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C54 : 00                          NOP                     ;[1]
(1)   60/     C55 : 00                          NOP                     ;[1]
(1)   61/     C56 :                     GETCHAR_L6:
(1)   62/     C56 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C57 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C58 : 7D 4E                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C5A :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     C5A : B2                  	XCH R2                  ;(1)
(1)   67/     C5B :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C5B :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C5B :                     	;; check stop bit
(1)   70/     C5B : 19 5E                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5D : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5E :                     GETCHAR_OK:
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 66 - 2023/04/10 10:54:46


(1)   73/     C5E : C0                  	BBL 0
(1)   74/     C5F :                                     
(1)   75/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5F :                     ;;; PUTCHAR_P1
(1)   77/     C5F :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     C5F :                     ;;; 
(1)   79/     C5F :                     ;;; Input: P1(R2,R3)
(1)   80/     C5F :                     ;;; Output: ACC=0
(1)   81/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5F :                     ;;; P1 is not affected
(1)   84/     C5F :                     ;;; 
(1)   85/     C5F :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5F :                     ;;; 
(1)   87/     C5F :                     ;;; Input: P1(R2,R3)
(1)   88/     C5F :                     ;;; Output: ACC=0
(1)   89/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5F :                     ;;; 
(1)   93/     C5F :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5F :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5F :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5F :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5F :                     
(1)   99/     C5F :                     PUTCHAR_P1:
(1)  100/     C5F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5F :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5F :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5F : [100]                	endif
(1)  104/     C5F :                     	
(1)  105/     C5F : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C61 : 2F                  	SRC P7              ; set port address
(1)  107/     C62 :                     
(1)  108/     C62 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C64 : A3                          LD R3
(1)  110/     C65 : F1                          CLC                 ; start bit is 0
(1)  111/     C66 : F5                          RAL
(1)  112/     C67 :                                     
(1)  113/     C67 :                     PUTCHAR_L1:
(1)  114/     C67 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C68 : 00                          NOP                 ;(1)
(1)  116/     C69 : 00                          NOP                 ;(1)
(1)  117/     C6A : 00                          NOP                 ;(1)
(1)  118/     C6B : 00                          NOP                 ;(1)
(1)  119/     C6C : E1                          WMP                 ;(1)
(1)  120/     C6D : F6                          RAR                 ;(1)
(1)  121/     C6E : 7D 67                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C70 :                     	
(1)  123/     C70 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C72 : A2                          LD R2               ;(1)
(1)  125/     C73 : FA                          STC                 ;(1) stop bit is 1
(1)  126/     C74 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C75 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C76 :                     PUTCHAR_L2:
(1)  129/     C76 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C77 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C79 : 7F 79                       ISZ R15, $          ;(4)
(1)  132/     C7B : F6                          RAR                 ;(1)
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 67 - 2023/04/10 10:54:46


(1)  133/     C7C : 7D 76                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7E :                     	
(1)  135/     C7E : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7E :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7E :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     C7E : [135]                	endif
(1)  139/     C7E :                     	
(1)  140/     C7E : C0                          BBL 0
(1)  141/     C7F :                     
(1)  142/     C7F :                     
    3293/     C7F : [3288]               	endcase
    3294/     C7F :                     
    3295/     C7F :                     ;;;---------------------------------------------------------------------------
    3296/     C7F :                     ;;; INIT_SERIAL
    3297/     C7F :                     ;;; Initialize serial port
    3298/     C7F :                     ;;;---------------------------------------------------------------------------
    3299/     C7F :                     INIT_SERIAL:
    3300/     C7F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3301/     C7F :                     	LDM BANK_SERIAL	    ; bank of output port
    3302/     C7F :                     	DCL		    ; set port bank
    3303/     C7F : [3300]               	endif
    3304/     C7F :                     	
    3305/     C7F : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3306/     C81 : 2F                  	SRC P7		    ; set port address
    3307/     C82 : D1                  	LDM 1
    3308/     C83 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3309/     C84 :                     
    3310/     C84 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3311/     C84 :                     	LDM BANK_DEFAULT    
    3312/     C84 :                     	DCL		    ; restore bank to default
    3313/     C84 : [3310]               	endif
    3314/     C84 :                     	
    3315/     C84 : C0                  	BBL 0
    3316/     C85 :                     
    3317/     C85 :                     ;;;----------------------------------------------------------------------------
    3318/     C85 :                     ;;; PRINTHEX_P1
    3319/     C85 :                     ;;; Print 8bit register pair in HEX format
    3320/     C85 :                     ;;; PRINT HEX
    3321/     C85 :                     ;;; destroy: P6, P7
    3322/     C85 :                     ;;;----------------------------------------------------------------------------
    3323/     C85 :                     PRINTHEX_P1:
    3324/     C85 : 5B 00               	JMS PUSH_P0
    3325/     C87 : 5B 12               	JMS PUSH_P1
    3326/     C89 : (MACRO)              	LD_P0_P1
    3326/     C89 : A2                                  LD P1_HI
    3326/     C8A : B0                                  XCH P0_HI
    3326/     C8B : A3                                  LD P1_LO
    3326/     C8C : B1                                  XCH P0_LO
    3327/     C8D : A0                  	LD R0
    3328/     C8E : 5C B4               	JMS PRINT_ACC		; print upper 4bit
    3329/     C90 : A1                  	LD R1
    3330/     C91 : 5C B4               	JMS PRINT_ACC		; print lower 4bit
    3331/     C93 : 5B 43               	JMS POP_P1
    3332/     C95 : 5B 36               	JMS POP_P0
    3333/     C97 : C0                  	BBL 0
    3334/     C98 :                     
    3335/     C98 :                     ;;;---------------------------------------------------------------------------
    3336/     C98 :                     ;;; PRINT_SPC
    3337/     C98 :                     ;;; print " "
    3338/     C98 :                     ;;; destroy: ACC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 68 - 2023/04/10 10:54:46


    3339/     C98 :                     ;;; This routine consumes 2 PC stack
    3340/     C98 :                     ;;;---------------------------------------------------------------------------
    3341/     C98 :                     PRINT_SPC:
    3342/     C98 : 5B 12               	JMS PUSH_P1
    3343/     C9A : 22 20               	FIM P1, ' '
    3344/     C9C : 5C 5F               	JMS PUTCHAR_P1
    3345/     C9E : 4B 43               	JUN POP_P1
    3346/     CA0 :                     ;;;	BBL 0
    3347/     CA0 :                     
    3348/     CA0 :                     ;;;---------------------------------------------------------------------------
    3349/     CA0 :                     ;;; PRINT_CRLF
    3350/     CA0 :                     ;;; print "\r\n"
    3351/     CA0 :                     ;;; destroy: ACC
    3352/     CA0 :                     ;;; This routine consumes 2 PC stack
    3353/     CA0 :                     ;;;---------------------------------------------------------------------------
    3354/     CA0 :                     PRINT_CRLF:
    3355/     CA0 : 5B 12               	JMS PUSH_P1
    3356/     CA2 : 22 0D               	FIM P1, '\r'
    3357/     CA4 : 5C 5F               	JMS PUTCHAR_P1
    3358/     CA6 : 22 0A               	FIM P1, '\n'
    3359/     CA8 : 5C 5F               	JMS PUTCHAR_P1
    3360/     CAA : 4B 43               	JUN POP_P1
    3361/     CAC :                     ;;;	BBL 0
    3362/     CAC :                     
    3363/     CAC :                     ;;;---------------------------------------------------------------------------
    3364/     CAC :                     ;;; PRINT_CR
    3365/     CAC :                     ;;; print "\r"
    3366/     CAC :                     ;;; destroy: P1, ACC
    3367/     CAC :                     ;;; This routine consumes 1 PC stack
    3368/     CAC :                     ;;;---------------------------------------------------------------------------
    3369/     CAC :                     PRINT_CR:
    3370/     CAC : 22 0D               	FIM P1, '\r'
    3371/     CAE : 4C 5F               	JUN PUTCHAR_P1
    3372/     CB0 :                     
    3373/     CB0 :                     ;;;---------------------------------------------------------------------------
    3374/     CB0 :                     ;;; PRINT_LF
    3375/     CB0 :                     ;;; print "\n"
    3376/     CB0 :                     ;;; destroy: P1, ACC
    3377/     CB0 :                     ;;; This routine consumes 1 PC stack
    3378/     CB0 :                     ;;;---------------------------------------------------------------------------
    3379/     CB0 :                     PRINT_LF:
    3380/     CB0 : 22 0A               	FIM P1, '\n'
    3381/     CB2 : 4C 5F               	JUN PUTCHAR_P1
    3382/     CB4 :                     
    3383/     CB4 :                     ;;;---------------------------------------------------------------------------
    3384/     CB4 :                     ;;; PRINT_ACC
    3385/     CB4 :                     ;;; print contents of ACC('0'...'F') as a character
    3386/     CB4 :                     ;;; destroy: P1, P6, P7, ACC
    3387/     CB4 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3388/     CB4 :                     ;;;---------------------------------------------------------------------------
    3389/     CB4 :                     PRINT_ACC:
    3390/     CB4 : 22 30               	FIM P1, '0'
    3391/     CB6 : F1                  	CLC			; clear carry
    3392/     CB7 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3393/     CB8 : 1A BC               	JCN CN, PRINTACC_L1
    3394/     CBA : 62                  	INC P1_HI
    3395/     CBB : F2                  	IAC
    3396/     CBC :                     PRINTACC_L1:	
    3397/     CBC : B3                  	XCH P1_LO		; P1_LO<-ACC
    3398/     CBD : 4C 5F               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/04/10 10:54:46


    3399/     CBF :                     
    3400/     CBF :                     ;;;----------------------------------------------------------------------------
    3401/     CBF :                     ;;; INC_P1
    3402/     CBF :                     ;;; P1=P1+1
    3403/     CBF :                     ;;;----------------------------------------------------------------------------
    3404/     CBF :                     INC_P1:	
    3405/     CBF : 63                  	INC P1_LO
    3406/     CC0 : A3                  	LD P1_LO
    3407/     CC1 : 1C C4               	JCN ZN, INC_P1_EXIT
    3408/     CC3 : 62                  	INC P1_HI
    3409/     CC4 :                     INC_P1_EXIT:	
    3410/     CC4 : C0                  	BBL 0
    3411/     CC5 :                     
    3412/     CC5 :                     ;;;----------------------------------------------------------------------------
    3413/     CC5 :                     ;;; DEC_P1
    3414/     CC5 :                     ;;; P1=P1-1
    3415/     CC5 :                     ;;;----------------------------------------------------------------------------
    3416/     CC5 :                     DEC_P1:	
    3417/     CC5 : A3                  	LD P1_LO
    3418/     CC6 : F8                  	DAC
    3419/     CC7 : B3                  	XCH P1_LO
    3420/     CC8 : 12 CD               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3421/     CCA : A2                  	LD P1_HI		; decrement upper 4bit
    3422/     CCB : F8                  	DAC
    3423/     CCC : B2                  	XCH P1_HI
    3424/     CCD :                     DEC_P1_EXIT:	
    3425/     CCD : C0                  	BBL 0
    3426/     CCE :                     	
    3427/     CCE :                     ;;;----------------------------------------------------------------------------
    3428/     CCE :                     ;;; ISALPHA_P1
    3429/     CCE :                     ;;; check P1 is an alphabet as a ascii character
    3430/     CCE :                     ;;; return: ACC=0 if P1 is not an alphabet
    3431/     CCE :                     ;;;	    ACC=1 if P1 is an alphabet
    3432/     CCE :                     ;;; destroy: P7
    3433/     CCE :                     ;;;----------------------------------------------------------------------------
    3434/     CCE :                     ISALPHA_P1:
    3435/     CCE :                     ISALPHA_L1:
    3436/     CCE : 2E 41               	FIM P7, 'A'
    3437/     CD0 : 5D 25               	JMS CMP_P1P7
    3438/     CD2 : 12 D5               	JCN C, ISALPHA_L10
    3439/     CD4 : C0                  	BBL 0			; P1<'A'
    3440/     CD5 :                     ISALPHA_L10:
    3441/     CD5 : 2E 5B               	FIM P7, 'Z'+1
    3442/     CD7 : 5D 25               	JMS CMP_P1P7
    3443/     CD9 : 12 DC               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3444/     CDB : C1                  	BBL 1			; 'A'<=P1<='Z'
    3445/     CDC :                     ISALPHA_L2:
    3446/     CDC : 2E 61               	FIM P7, 'a'
    3447/     CDE : 5D 25               	JMS CMP_P1P7
    3448/     CE0 : 12 E3               	JCN C, ISALPHA_L20
    3449/     CE2 : C0                  	BBL 0			; P1<'a'
    3450/     CE3 :                     ISALPHA_L20:	
    3451/     CE3 : 2E 7B               	FIM P7, 'z'+1
    3452/     CE5 : 5D 25               	JMS CMP_P1P7
    3453/     CE7 : 12 EA               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3454/     CE9 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3455/     CEA :                     ISALPHA_FALSE:
    3456/     CEA : C0                  	BBL 0
    3457/     CEB :                     
    3458/     CEB :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/04/10 10:54:46


    3459/     CEB :                     ;;; ISHEX_P1
    3460/     CEB :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3461/     CEB :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3462/     CEB :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3463/     CEB :                     ;;; destroy: P7
    3464/     CEB :                     ;;;----------------------------------------------------------------------------
    3465/     CEB : 00                  	NOP
    3466/     CEC : 00                  	NOP
    3467/     CED : 00                  	NOP
    3468/     CEE :                     ISHEX_P1:
    3469/     CEE : 2E 30               	FIM P7, '0'
    3470/     CF0 : 5D 25               	JMS CMP_P1P7
    3471/     CF2 : 12 F5               	JCN C, ISHEX_L00
    3472/     CF4 : C0                  	BBL 0			; P1<'0'
    3473/     CF5 :                     ISHEX_L00:	
    3474/     CF5 : 2E 3A               	FIM P7, '9'+1
    3475/     CF7 : 5D 25               	JMS CMP_P1P7
    3476/     CF9 : 12 FC               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3477/     CFB : C1                  	BBL 1			; '0'<=P1<='9'
    3478/     CFC :                     ISHEX_L1:
    3479/     CFC : 2E 41               	FIM P7, 'A'
    3480/     CFE : 5D 25               	JMS CMP_P1P7
    3481/     D00 : 12 03               	JCN C, ISHEX_L10
    3482/     D02 : C0                  	BBL 0			; P1<'A'
    3483/     D03 :                     ISHEX_L10:
    3484/     D03 : 2E 47               	FIM P7, 'F'+1
    3485/     D05 : 5D 25               	JMS CMP_P1P7
    3486/     D07 : 12 0A               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3487/     D09 : C1                  	BBL 1			; 'A'<=P1<='F'
    3488/     D0A :                     ISHEX_L2:
    3489/     D0A : 2E 61               	FIM P7, 'a'
    3490/     D0C : 5D 25               	JMS CMP_P1P7
    3491/     D0E : 12 11               	JCN C, ISHEX_L20
    3492/     D10 : C0                  	BBL 0			; P1<'a'
    3493/     D11 :                     ISHEX_L20:	
    3494/     D11 : 2E 67               	FIM P7, 'f'+1
    3495/     D13 : 5D 25               	JMS CMP_P1P7
    3496/     D15 : 12 18               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3497/     D17 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3498/     D18 :                     ISHEX_FALSE:
    3499/     D18 : C0                  	BBL 0
    3500/     D19 :                     
    3501/     D19 :                     ;;;---------------------------------------------------------------------------
    3502/     D19 :                     ;;; CTOI_P1
    3503/     D19 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3504/     D19 :                     ;;; no error check
    3505/     D19 :                     ;;; input: P1(R2R3)
    3506/     D19 :                     ;;; output: P1_LO, (P1_HI=0)
    3507/     D19 :                     ;;;---------------------------------------------------------------------------
    3508/     D19 :                     CTOI_P1:
    3509/     D19 : F0                  	CLB
    3510/     D1A : D3                  	LDM 3
    3511/     D1B : 92                  	SUB P1_HI
    3512/     D1C : 14 22               	JCN Z, CTOI_09	; check upper 4bit
    3513/     D1E : F0                  	CLB
    3514/     D1F : D9                  	LDM 9
    3515/     D20 : 83                  	ADD P1_LO
    3516/     D21 : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3517/     D22 :                     CTOI_09:
    3518/     D22 : F0                  	CLB
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/04/10 10:54:46


    3519/     D23 : B2                  	XCH R2			; R2 = 0
    3520/     D24 : C0                  	BBL 0
    3521/     D25 :                     	
    3522/     D25 :                     ;;;---------------------------------------------------------------------------
    3523/     D25 :                     ;;; CMP_P1P7
    3524/     D25 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3525/     D25 :                     ;;; input: P1, P7
    3526/     D25 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3527/     D25 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3528/     D25 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3529/     D25 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3530/     D25 :                     ;;;---------------------------------------------------------------------------
    3531/     D25 :                     CMP_P1P7:
    3532/     D25 : F0                  	CLB
    3533/     D26 : A2                  	LD R2			
    3534/     D27 : 9E                  	SUB R14			;R2-R14
    3535/     D28 : 14 2B               	JCN Z, CMP17_L1		; jump if R2==R14
    3536/     D2A : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3537/     D2B :                     CMP17_L1:	
    3538/     D2B : F0                  	CLB
    3539/     D2C : A3                  	LD R3
    3540/     D2D : 9F                  	SUB R15			;R3-R15
    3541/     D2E : 14 31               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3542/     D30 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3543/     D31 :                     				; if P1>P7 then ACC=1, CY=1
    3544/     D31 :                     CMP17_EXIT01:
    3545/     D31 : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3546/     D32 :                     	
    3547/     D32 :                     ;;;---------------------------------------------------------------------------
    3548/     D32 :                      ;;; ISZEROORNOT_P1
    3549/     D32 :                     ;;; check P1 is zero or not
    3550/     D32 :                     ;;; Return 0 if P1 is 0
    3551/     D32 :                     ;;; return: ACC=0 if P1 == 0
    3552/     D32 :                     ;;;	    ACC=1 if P1 != 0
    3553/     D32 :                     ;;;---------------------------------------------------------------------------
    3554/     D32 :                     ISZEROORNOT_P1:
    3555/     D32 : A3                  	LD P1_LO
    3556/     D33 : 1C 39               	JCN ZN, ISZEROORNOT_EXIT1
    3557/     D35 : A2                  	LD P1_HI
    3558/     D36 : 1C 39               	JCN ZN, ISZEROORNOT_EXIT1
    3559/     D38 : C0                  	BBL 0
    3560/     D39 :                     ISZEROORNOT_EXIT1:
    3561/     D39 : C1                  	BBL 1
    3562/     D3A :                     
    3563/     D3A :                     ;;;---------------------------------------------------------------------------
    3564/     D3A :                     ;;; ISCRLF_P1
    3565/     D3A :                     ;;; check if P1=='\r' | P1=='\n'
    3566/     D3A :                     ;;; input: P0
    3567/     D3A :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3568/     D3A :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3569/     D3A :                     ;;;---------------------------------------------------------------------------
    3570/     D3A :                     ISCRLF_P1:
    3571/     D3A : A2                  	LD R2
    3572/     D3B : 1C 47               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3573/     D3D : F1                  	CLC
    3574/     D3E : DD                  	LDM '\r'
    3575/     D3F : 93                  	SUB R3
    3576/     D40 : 14 48               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3577/     D42 : F1                  	CLC
    3578/     D43 : DA                  	LDM '\n'
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/04/10 10:54:46


    3579/     D44 : 93                  	SUB R3
    3580/     D45 : 14 48               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3581/     D47 :                     ISCRLF_EXIT0:
    3582/     D47 : C0                  	BBL 0
    3583/     D48 :                     ISCRLF_EXIT1:
    3584/     D48 : C1                  	BBL 1
    3585/     D49 :                     
    3586/     D49 :                     ;;;---------------------------------------------------------------------------
    3587/     D49 :                     ;;; TOUPPER_P1
    3588/     D49 :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3589/     D49 :                     ;;;---------------------------------------------------------------------------
    3590/     D49 :                     TOUPPER_P1:
    3591/     D49 : 5C CE               	JMS ISALPHA_P1
    3592/     D4B : 14 54               	JCN Z, TOUPPER_P1_EXIT
    3593/     D4D : A2                  	LD P1_HI
    3594/     D4E : F6                  	RAR
    3595/     D4F : F6                  	RAR
    3596/     D50 : F1                  	CLC
    3597/     D51 : F5                  	RAL
    3598/     D52 : F5                  	RAL
    3599/     D53 : B2                  	XCH P1_HI
    3600/     D54 :                     TOUPPER_P1_EXIT:
    3601/     D54 : C0                  	BBL 0
    3602/     D55 :                     
    3603/     D55 :                     ;;;---------------------------------------------------------------------------
    3604/     D55 :                     ;;; PRINT_DATARAM_P0
    3605/     D55 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3606/     D55 :                     ;;;---------------------------------------------------------------------------
    3607/     D55 :                     PRINT_DATARAM_P0:
    3608/     D55 : A0                  	LD P0_HI		; PRINT ADDDR
    3609/     D56 : 5C B4               	JMS PRINT_ACC
    3610/     D58 : A1                  	LD P0_LO
    3611/     D59 : 5C B4               	JMS PRINT_ACC
    3612/     D5B : 22 3A               	FIM P1, ':'
    3613/     D5D : 5C 5F               	JMS PUTCHAR_P1
    3614/     D5F :                     CMDDD_L2:
    3615/     D5F : F0                  	CLB		; PRINT data characters
    3616/     D60 : 21                  	SRC P0		; set address
    3617/     D61 : E9                  	RDM		; read data memory
    3618/     D62 : 5C B4               	JMS PRINT_ACC
    3619/     D64 : 71 5F               	ISZ P0_LO, CMDDD_L2
    3620/     D66 :                     
    3621/     D66 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3622/     D68 : 5C 5F               	JMS PUTCHAR_P1
    3623/     D6A : 21                  	SRC P0		; set address
    3624/     D6B : EC                  	RD0
    3625/     D6C : B2                  	XCH P1_HI
    3626/     D6D : ED                  	RD1
    3627/     D6E : B3                  	XCH P1_LO
    3628/     D6F : 5C 85               	JMS PRINTHEX_P1
    3629/     D71 : 21                  	SRC P0		; set address
    3630/     D72 : EE                  	RD2
    3631/     D73 : B2                  	XCH P1_HI
    3632/     D74 : EF                  	RD3
    3633/     D75 : B3                  	XCH P1_LO
    3634/     D76 : 5C 85               	JMS PRINTHEX_P1
    3635/     D78 : 4C A0               	JUN PRINT_CRLF
    3636/     D7A :                     ;;;	BBL 0
    3637/     D7A :                     
    3638/     D7A :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/04/10 10:54:46


    3639/     D7A :                     ;;; Program Memory Test
    3640/     D7A :                     ;;; This command is optional
    3641/     D7A :                     ;;;---------------------------------------------------------------------------
    3642/     D7A : =>TRUE               	if ENABLE_MEMTEST
    3643/     D7A :                     COMMAND_T:
    3644/     D7A : DE                  	LDM loop(2)
    3645/     D7B : BA                  	XCH CNT_I
    3646/     D7C :                     CMDT_LOOP_RW:
    3647/     D7C : 20 30               	FIM P0, REG8_MON_TMP
    3648/     D7E : 22 00               	FIM P1, 00H
    3649/     D80 : 57 C1               	JMS LD_REG8P0_P1
    3650/     D82 :                     	
    3651/     D82 : 24 00               	FIM P2, loops(16, 16)
    3652/     D84 :                     CMDT_LOOPH
    3653/     D84 : (MACRO)              	LD_P1_P2
    3653/     D84 : A4                                  LD P2_HI
    3653/     D85 : B2                                  XCH P1_HI
    3653/     D86 : A5                                  LD P2_LO
    3653/     D87 : B3                                  XCH P1_LO
    3654/     D88 : 20 30               	FIM P0, REG8_MON_TMP
    3655/     D8A : 57 6C               	JMS ADD_REG8P0_P1
    3656/     D8C : 26 00               	FIM P3, loops(16, 16)
    3657/     D8E :                     CMDT_LOOPL:
    3658/     D8E : (MACRO)              	LD_P1_P3
    3658/     D8E : A6                                  LD P3_HI
    3658/     D8F : B2                                  XCH P1_HI
    3658/     D90 : A7                                  LD P3_LO
    3658/     D91 : B3                                  XCH P1_LO
    3659/     D92 : 20 30               	FIM P0, REG8_MON_TMP
    3660/     D94 : 57 6C               	JMS ADD_REG8P0_P1
    3661/     D96 :                     	
    3662/     D96 : (MACRO)              	LD_P1_P2
    3662/     D96 : A4                                  LD P2_HI
    3662/     D97 : B2                                  XCH P1_HI
    3662/     D98 : A5                                  LD P2_LO
    3662/     D99 : B3                                  XCH P1_LO
    3663/     D9A : 2E FE               	FIM P7, lo(PM_READ_P0_P1)
    3664/     D9C : 5D 25               	JMS CMP_P1P7
    3665/     D9E : 14 C9               	JCN Z, CMDT_NEXT	; skip for PM_READ routine
    3666/     DA0 : 2E FF               	FIM P7, lo(PM_READ_P0_P1+1)
    3667/     DA2 : 5D 25               	JMS CMP_P1P7
    3668/     DA4 : 14 C9               	JCN Z, CMDT_NEXT	; skip for PM_READ routine
    3669/     DA6 :                     
    3670/     DA6 : 20 2C               	FIM P0, REG16_MON_ADDR
    3671/     DA8 : 57 66               	JMS LD_REG16P0_P2P3
    3672/     DAA :                     
    3673/     DAA : F0                  	CLB
    3674/     DAB : DE                  	LDM loop(2)
    3675/     DAC : 9A                  	SUB CNT_I
    3676/     DAD : 14 C3               	JCN Z, CMDT_WRITE
    3677/     DAF :                     CMDT_READ:
    3678/     DAF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3679/     DB1 : 20 32               	FIM P0, REG8_MON_TMP2
    3680/     DB3 : 57 C1               	JMS LD_REG8P0_P1	; REG8(TMP2)=PM(REG_ADDR)
    3681/     DB5 : 2E 30               	FIM P7, REG8_MON_TMP
    3682/     DB7 : 57 D9               	JMS LD_P1_REG8P7	; P1 = REG8(TMP) (correct value) 
    3683/     DB9 : 57 8D               	JMS SUB_REG8P0_P1	; TMP2 = TMP2 - P1
    3684/     DBB : 57 E1               	JMS LD_P1_REG8P0	; P1 = TMP2
    3685/     DBD : 5D 32               	JMS ISZEROORNOT_P1
    3686/     DBF : 14 C9               	JCN Z, CMDT_NEXT	; check OK
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/04/10 10:54:46


    3687/     DC1 : 4D E3               	JUN CMDT_ERROR
    3688/     DC3 :                     CMDT_WRITE:
    3689/     DC3 : 2E 30               	FIM P7, REG8_MON_TMP
    3690/     DC5 : 57 D9               	JMS LD_P1_REG8P7
    3691/     DC7 : 5B 81               	JMS LD_PM16REG16P0_P1
    3692/     DC9 :                     CMDT_NEXT:
    3693/     DC9 : 77 8E               	ISZ P3_LO, CMDT_LOOPL
    3694/     DCB : 76 8E               	ISZ P3_HI, CMDT_LOOPL
    3695/     DCD : 22 0D               	FIM P1, '\r'
    3696/     DCF : 5C 5F               	JMS PUTCHAR_P1
    3697/     DD1 : (MACRO)              	LD_P1_P2
    3697/     DD1 : A4                                  LD P2_HI
    3697/     DD2 : B2                                  XCH P1_HI
    3697/     DD3 : A5                                  LD P2_LO
    3697/     DD4 : B3                                  XCH P1_LO
    3698/     DD5 : 5C 85               	JMS PRINTHEX_P1
    3699/     DD7 : 75 84               	ISZ P2_LO, CMDT_LOOPH
    3700/     DD9 : 74 84               	ISZ P2_HI, CMDT_LOOPH
    3701/     DDB :                     
    3702/     DDB : 5C A0               	JMS PRINT_CRLF
    3703/     DDD : 7A 7C               	ISZ CNT_I, CMDT_LOOP_RW
    3704/     DDF :                     
    3705/     DDF : 5C A0               	JMS PRINT_CRLF
    3706/     DE1 : 40 2D               	JUN CMD_LOOP
    3707/     DE3 :                     CMDT_ERROR:
    3708/     DE3 : 20 65               	FIM P0, lo(STR_ERROR_MEMTEST)
    3709/     DE5 : 5E 00               	JMS PRINTSTR_P0
    3710/     DE7 : 20 2C               	FIM P0, REG16_MON_ADDR
    3711/     DE9 : 22 2C               	FIM P1, REG16_MON_ADDR
    3712/     DEB : 58 4F               	JMS DEC_REG16P0
    3713/     DED : 57 F9               	JMS PRINTHEX_REG16P1
    3714/     DEF : 5C A0               	JMS PRINT_CRLF
    3715/     DF1 :                     
    3716/     DF1 : 40 2D               	JUN CMD_LOOP
    3717/     DF3 : [3642]               	endif			; ENABLE_MEMTEST
    3718/     DF3 :                     	
    3719/     DF3 :                     ;;;----------------------------------------------------------------------------
    3720/     DF3 :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3721/     DF3 :                     ;;; The string data sould be located in the same page as the print routine.
    3722/     DF3 :                     ;;;----------------------------------------------------------------------------
    3723/     E00 :                     	org 0E00H
    3724/     E00 :                     ;;;----------------------------------------------------------------------------
    3725/     E00 :                     ;;; PRINTSTR_P0
    3726/     E00 :                     ;;; Print a string with a delimiter 00H
    3727/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3728/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3729/     E00 :                     ;;;----------------------------------------------------------------------------
    3730/     E00 :                     PRINTSTR_P0:
    3731/     E00 : 5B 00               	JMS PUSH_P0
    3732/     E02 : 5B 12               	JMS PUSH_P1
    3733/     E04 :                     PRINTSTRP0_LOOP:
    3734/     E04 : 32                  	FIN P1			; P1=(P0)
    3735/     E05 : A2                  	LD P1_HI
    3736/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3737/     E08 : A3                  	LD P1_LO
    3738/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3739/     E0B :                     PRINTSTRP0_PUT:
    3740/     E0B : 5C 5F               	JMS PUTCHAR_P1		; putchar(P1)
    3741/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3742/     E0F : 60                  	INC P0_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/04/10 10:54:46


    3743/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3744/     E12 :                     PRINTSTRP0_EXIT:
    3745/     E12 : 5B 43               	JMS POP_P1
    3746/     E14 : 4B 36               	JUN POP_P0
    3747/     E16 :                     ;;;	BBL 0
    3748/     E16 :                     		
    3749/     E16 :                     	
    3750/     E16 :                     ;;;----------------------------------------------------------------------------
    3751/     E16 :                     ;;; MUL16_P2P3
    3752/     E16 :                     ;;; P2P3 = P2P3*16
    3753/     E16 :                     ;;;----------------------------------------------------------------------------
    3754/     E16 :                     MUL16_P2P3:	
    3755/     E16 : A5                  	LD R5
    3756/     E17 : B4                  	XCH R4			; 100'->1000'
    3757/     E18 : A6                  	LD R6
    3758/     E19 : B5                  	XCH R5			; 10'->100'
    3759/     E1A : A7                  	LD R7
    3760/     E1B : B6                  	XCH R6			; 1'->10'
    3761/     E1C : F0                  	CLB
    3762/     E1D : B7                  	XCH R7			; 0->1'
    3763/     E1E : C0                  	BBL 0
    3764/     E1F :                     
    3765/     E1F :                     ;;;----------------------------------------------------------------------------
    3766/     E1F :                     ;;; String data
    3767/     E1F :                     ;;;----------------------------------------------------------------------------
    3768/     E1F :                     ;;;----------------------------------------------------------------------------
    3769/     E1F :                     ;;; String data for monitor
    3770/     E1F :                     ;;;----------------------------------------------------------------------------
    3771/     E1F :                     STR_OMSG:
    3772/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
    3773/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3774/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3775/     E47 :                     
    3776/     E47 :                     STR_CMDERR:
    3777/     E47 : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3778/     E4B :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3779/     E4B : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              E51 : 41 43 45 0D 0A 00 
    3780/     E57 :                     STR_ERROR_LOADCOMMAND:
    3781/     E57 : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              E5D : 45 52 52 4F 52 0D 
              E63 : 0A 00             
    3782/     E65 :                     
    3783/     E65 : =>TRUE               	if ENABLE_MEMTEST
    3784/     E65 :                     STR_ERROR_MEMTEST:
    3785/     E65 : 4D 45 4D 45 52 52   	data "MEMERR\r\n", 0
              E6B : 0D 0A 00          
    3786/     E6E : [3783]               	endif
    3787/     E6E :                     ;;; strings for register command of 4004 monitor
    3788/     E6E :                     ;;; STR_REG0:
    3789/     E6E :                     ;;;	data "AC	SP1111\r\n", 0
    3790/     E6E :                     ;;; STR_REG1:
    3791/     E6E :                     ;;;	data "CY01234567890123\r\n", 0
    3792/     E6E :                     ;;; STR_DATAREG:
    3793/     E6E :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/04/10 10:54:46


    3794/     E6E :                     ;;;----------------------------------------------------------------------------
    3795/     E6E :                     ;;; String data for Emulator
    3796/     E6E :                     ;;;----------------------------------------------------------------------------
    3797/     E6E :                     STR_EMU_MESSAGE:
    3798/     E6E : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 1.0\r\n", 0
              E74 : 20 45 6D 75 6C 61 
              E7A : 74 6F 72 20 6F 6E 
              E80 : 20 34 30 30 34 20 
              E86 : 56 65 72 20 31 2E 
              E8C : 30 0D 0A 00       
    3799/     E90 :                     
    3800/     E90 :                     STR_EMU_REG:
    3801/     E90 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
              E96 : 20 20 42 43 20 20 
              E9C : 20 44 45 20 20 20 
              EA2 : 48 4C 20 20 20 53 
              EA8 : 50 20 20 20 50 43 
              EAE : 20 28 2B 30 20 2B 
              EB4 : 31 20 2B 32 29 42 
              EBA : 43 29 44 45 29 48 
              EC0 : 4C 29 53 50 20 2B 
              EC6 : 31 29 0D 0A 00    
    3802/     ECB :                     STR_EMU_HLT:
    3803/     ECB : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              ED1 : 0A 00             
    3804/     ED3 :                     
    3805/     ED3 :                     ;;;---------------------------------------------------------------------------
    3806/     ED3 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3807/     ED3 :                     ;;;---------------------------------------------------------------------------
    3808/     ED3 :                     ;;; READPM_P0
    3809/     ED3 :                     ;;; P1 = (P0)
    3810/     ED3 :                     ;;; input: P0
    3811/     ED3 :                     ;;; output: P1
    3812/     ED3 :                     ;;;---------------------------------------------------------------------------
    3813/     ED3 :                     ;;;	org 0F7EH
    3814/     ED3 :                     ;;; PM_READ_P0_P1:
    3815/     ED3 : 32                  	FIN P1
    3816/     ED4 : C0                  	BBL 0
    3817/     ED5 :                     
    3818/     ED5 :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/04/10 10:54:46


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4DC C |  ACI_P1_NOCARRY :               4E2 C |
 ADD_REG16P0_REG16P1 :          884 C |  ADD_REG8P0_P1 :                76C C |
 ADI_P1 :                       491 C |  AND67_L1 :                     68F C |
 AND67_L2 :                     69B C |  AND67_L3 :                     6A7 C |
 AND67_L4 :                     6B0 C |  AND_P1_P2 :                    6B1 C |
 AND_R6_R7 :                    685 C |  ANI_P1 :                       582 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  CALL_IF0 :                     4BB C |
 CALL_IF1 :                     4B4 C |  CALL_P2P3 :                    4CE C |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT0 :                 0 - |
 CHIP_PMSELECT1 :                40 - |  CHIP_RAM0 :                      0 - |
 CHIP_RAM1 :                     40 - | *CHIP_RAM2 :                     80 - |
 CHIP_RAM3 :                    0C0 - |  CHIP_SERIAL :                  0C0 - |
 CMDDD_L1 :                     11F C |  CMDDD_L2 :                    0D5F C |
 CMDDL_L0 :                     101 C |  CMDDL_L1 :                     109 C |
*CMDDL_NEXT :                   113 C |  CMDDP_EXIT :                   0ED C |
 CMDDP_L0 :                     0C3 C |  CMDDP_L1 :                     0DB C |
 CMDD_L1 :                      0A1 C |  CMDD_L2 :                      0A9 C |
 CMDD_L3 :                      0B1 C |  CMDH_EXIT :                    142 C |
 CMDH_SET :                     138 C |  CMDL_CONTINUE :                1A2 C |
 CMDL_ERROR :                   190 C |  CMDL_EXIT :                    1BA C |
 CMDL_L0 :                      162 C |  CMDL_L1 :                      16A C |
 CMDL_L2 :                      188 C |  CMDL_L3 :                      1AA C |
 CMDL_L5 :                      1B8 C |  CMDL_READLOOP :                19A C |
 CMDL_START :                   150 C |  CMDPMC_BANKLOOP :              1C4 C |
 CMDPMC_L1 :                    1CE C |  CMDT_ERROR :                  0DE3 C |
 CMDT_LOOPH :                  0D84 C |  CMDT_LOOPL :                  0D8E C |
 CMDT_LOOP_RW :                0D7C C |  CMDT_NEXT :                   0DC9 C |
*CMDT_READ :                   0DAF C |  CMDT_WRITE :                  0DC3 C |
 CMD_LOOP :                      2D C |  CMP17_EXIT01 :                0D31 C |
 CMP17_L1 :                    0D2B C |  CMP_P1P7 :                    0D25 C |
 CMP_REG16P0_REG16P1 :          860 C |  CODE_003F :                    209 C |
 CODE_007F :                    204 C |  CODE_00H :                     289 C |
 CODE_01H :                     28A C |  CODE_02H :                     296 C |
 CODE_03H :                     29E C |  CODE_04H :                     2A2 C |
 CODE_05H :                     2A6 C |  CODE_06H :                     2AA C |
 CODE_07H :                     2AE C |  CODE_08H :                     2BE C |
 CODE_09H :                     2BF C |  CODE_0AH :                     2C7 C |
 CODE_0BH :                     2D1 C |  CODE_0CH :                     2D5 C |
 CODE_0DH :                     2D9 C |  CODE_0EH :                     2DD C |
 CODE_0FH :                     2E1 C |  CODE_10H :                     2F1 C |
 CODE_11H :                     2F2 C |  CODE_12H :                     2FE C |
 CODE_13H :                     306 C |  CODE_14H :                     30A C |
 CODE_15H :                     30E C |  CODE_16H :                     312 C |
 CODE_17H :                     316 C |  CODE_18H :                     326 C |
 CODE_19H :                     327 C |  CODE_1AH :                     32F C |
 CODE_1BH :                     339 C |  CODE_1CH :                     33D C |
 CODE_1DH :                     341 C |  CODE_1EH :                     345 C |
 CODE_1FH :                     349 C |  CODE_20H :                     359 C |
 CODE_21H :                     35A C |  CODE_22H :                     366 C |
 CODE_23H :                     384 C |  CODE_24H :                     388 C |
 CODE_25H :                     38C C |  CODE_26H :                     390 C |
 CODE_27H :                     394 C |  CODE_28H :                     3A1 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/04/10 10:54:46


 CODE_29H :                     3A2 C |  CODE_2AH :                     3AA C |
 CODE_2BH :                     3C4 C |  CODE_2CH :                     3C8 C |
 CODE_2DH :                     3CC C |  CODE_2EH :                     3D0 C |
 CODE_2FH :                     3D4 C |  CODE_30H :                     3E0 C |
 CODE_31H :                     3E1 C |  CODE_32H :                     3ED C |
 CODE_33H :                     401 C |  CODE_34H :                     405 C |
 CODE_35H :                     411 C |  CODE_36H :                     41D C |
 CODE_37H :                     423 C |  CODE_38H :                     425 C |
 CODE_39H :                     426 C |  CODE_3AH :                     42E C |
 CODE_3BH :                     442 C |  CODE_3CH :                     446 C |
 CODE_3DH :                     44C C |  CODE_3EH :                     452 C |
 CODE_3FH :                     458 C |  CODE_407F :                    21F C |
 CODE_407F_MOV :                244 C |  CODE_76H :                     27B C |
 CODE_76H_EXIT :                287 C |  CODE_80BF :                    21F C |
 CODE_80BF_ARITH_LOGIC :        26C C |  CODE_80FF :                    21A C |
 CODE_C0FF :                    211 C |  CODE_C0H :                     45D C |
 CODE_C1H :                     461 C |  CODE_C2H :                     467 C |
 CODE_C3H :                     477 C |  CODE_C4H :                     485 C |
 CODE_C5H :                     489 C |  CODE_C6H :                     48F C |
 CODE_C7H :                     499 C |  CODE_C8H :                     49F C |
 CODE_C9H :                     4A7 C |  CODE_CAH :                     4AD C |
 CODE_CALL :                    4C2 C |  CODE_CBH :                     4B1 C |
 CODE_CCH :                     4B2 C |  CODE_CDH :                     4C2 C |
 CODE_CEH :                     4DA C |  CODE_CFH :                     4EA C |
 CODE_D0H :                     4F0 C |  CODE_D1H :                     4F4 C |
 CODE_D2H :                     4FA C |  CODE_D3H :                     4FE C |
 CODE_D4H :                     502 C |  CODE_D5H :                     506 C |
 CODE_D6H :                     50C C |  CODE_D7H :                     516 C |
 CODE_D8H :                     51C C |  CODE_D9H :                     520 C |
 CODE_DAH :                     521 C |  CODE_DBH :                     525 C |
 CODE_DCH :                     529 C |  CODE_DCR :                     44E C |
 CODE_DDH :                     52D C |  CODE_DEH :                     52E C |
 CODE_DFH :                     53E C |  CODE_E0H :                     544 C |
 CODE_E1H :                     548 C |  CODE_E2H :                     54E C |
 CODE_E3H :                     552 C |  CODE_E4H :                     576 C |
 CODE_E5H :                     57A C |  CODE_E6H :                     580 C |
 CODE_E7H :                     592 C |  CODE_E8H :                     598 C |
 CODE_E9H :                     59C C |  CODE_EAH :                     5A0 C |
 CODE_EBH :                     5A4 C |  CODE_ECH :                     5B2 C |
 CODE_EDH :                     5B6 C |  CODE_EEH :                     5B7 C |
 CODE_EFH :                     5C9 C |  CODE_F0H :                     5CF C |
 CODE_F1H :                     5D3 C |  CODE_F2H :                     5E1 C |
 CODE_F3H :                     5E5 C |  CODE_F4H :                     5E6 C |
 CODE_F5H :                     5EA C |  CODE_F6H :                     5FC C |
 CODE_F7H :                     60E C |  CODE_F8H :                     614 C |
 CODE_F9H :                     618 C |  CODE_FAH :                     61E C |
 CODE_FBH :                     622 C |  CODE_FCH :                     623 C |
 CODE_FDH :                     627 C |  CODE_FEH :                     628 C |
 CODE_FFH :                     638 C |  CODE_INR :                     448 C |
 CODE_JMP :                     477 C |  CODE_MOV_L1 :                  24C C |
 CODE_MOV_WRITE_M_TO_PM :       268 C |  CODE_MVI :                     454 C |
 CODE_NOT_NOP :                 211 C |  CODE_POP_REG8P2P3 :            5D7 C |
 CODE_PUSH_REG8P2P3 :           5EE C |  CODE_RET :                     4A7 C |
 COMMAND_C :                    1C2 C |  COMMAND_D :                     91 C |
 COMMAND_DD :                   115 C |  COMMAND_DL :                   0F7 C |
 COMMAND_DP :                   0B7 C |  COMMAND_E :                    1DC C |
 COMMAND_G :                    12E C |  COMMAND_H :                    130 C |
 COMMAND_L :                    150 C |  COMMAND_T :                   0D7A C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CPI_P1 :                       62A C |  CTOI_09 :                     0D22 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/04/10 10:54:46


 CTOI_P1 :                     0D19 C | *DATE :                "2023/04/10" - |
 DEC_P1 :                      0CC5 C |  DEC_P1_EXIT :                 0CCD C |
 DEC_REG16P0 :                  84F C |  DEC_REG8P1 :                   79E C |
 EMULATE_IN_P1 :                952 C |  EMULATE_OUT_P1 :               93A C |
 EMU_EXEC :                     1F4 C |  EMU_EXIT :                     1F8 C |
 EMU_IN_EXIT_TO_MONITOR :       97D C |  EMU_IN_P1_L1 :                 95A C |
 EMU_IN_P1_L2 :                 962 C |  EMU_IN_STOPCODE :                3 - |
 EMU_IN_UARTRC :                983 C |  EMU_IN_UARTRC_EXIT :           98D C |
 EMU_IN_UARTRC_VALUE :          0FF - |  EMU_IN_UARTRD :                963 C |
 EMU_IN_UARTRD_SKIPGETCHAR :    96D C |  EMU_LOOP :                     1E4 C |
 EMU_OUT_P1_L1 :                942 C |  EMU_OUT_P1_L2 :                94A C |
 EMU_OUT_UARTRC :               951 C |  EMU_OUT_UARTRD :               94B C |
 EMU_PRINT_REGISTERS :          8BA C | *EMU_START :                    1E0 C |
 EMU_UARTRC :                     0 - |  EMU_UARTRD :                     1 - |
 EMU_USE_FLAG_P :                 0 - |  ENABLE_MEMTEST :                 1 - |
 EXEC_CODE :                    1FA C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR_L1 :                  0C3F C |
 GETCHAR_L2 :                  0C44 C |  GETCHAR_L3 :                  0C47 C |
 GETCHAR_L4 :                  0C4E C |  GETCHAR_L5 :                  0C53 C |
 GETCHAR_L6 :                  0C56 C |  GETCHAR_OK :                  0C5E C |
 GETCHAR_P1 :                  0C37 C |  GETFLAG_C :                    651 C |
 GETFLAG_C_1 :                  659 C |  GETFLAG_P :                    65A C |
 GETFLAG_S :                    648 C |  GETFLAG_S_EXIT1 :              650 C |
 GETFLAG_Z :                    63E C |  GETFLAG_Z_EXIT1 :              647 C |
 GETHEXBYTE_L1 :               0C1F C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C18 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C31 C |  GETHEX_EXIT :                  8B6 C |
 GETHEX_LOOP :                  8A8 C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 899 C |
 GETHEX_START :                 8A4 C |  GETLINE_BS :                  0BE2 C |
 GETLINE_DO_BS :               0BEA C |  GETLINE_EXIT :                0BFE C |
 GETLINE_INSERTCHAR :          0BF6 C |  GETLINE_L1 :                  0BDA C |
*GETLINE_L1_NEXT :             0BEC C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                232 C |
 GETSRC_SAVE_SRCVALUE :         238 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBF C |  INC_P1_EXIT :                 0CC4 C |
 INC_REG16P0 :                  83F C |  INC_REG8P1 :                   77D C |
 INIT_SERIAL :                 0C7F C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CEA C | *ISALPHA_L1 :                  0CCE C |
 ISALPHA_L10 :                 0CD5 C |  ISALPHA_L2 :                  0CDC C |
 ISALPHA_L20 :                 0CE3 C |  ISALPHA_P1 :                  0CCE C |
 ISCRLF_EXIT0 :                0D47 C |  ISCRLF_EXIT1 :                0D48 C |
 ISCRLF_P1 :                   0D3A C |  ISHEX_FALSE :                 0D18 C |
 ISHEX_L00 :                   0CF5 C |  ISHEX_L1 :                    0CFC C |
 ISHEX_L10 :                   0D03 C |  ISHEX_L2 :                    0D0A C |
 ISHEX_L20 :                   0D11 C |  ISHEX_P1 :                    0CEE C |
 ISZEROORNOT_EXIT1 :           0D39 C |  ISZEROORNOT_P1 :              0D32 C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      469 C |  JMP_IF1 :                      470 C |
*L0 :                            3F C |  L1 :                            47 C |
 L10 :                           8B C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 L6_CONTINUOUS :                 7A C |  L6_SETMODE :                    7D C |
 L7 :                            83 C |  LDREG16P6P7_LOOP :             822 C |
 LD_P1_PM16REG16P0_INCREMENT : 0B5D C |  LD_P1_REG8P0 :                 7E1 C |
 LD_P1_REG8P1 :                 7E7 C |  LD_P1_REG8P2 :                 7ED C |
 LD_P1_REG8P3 :                 7F3 C |  LD_P1_REG8P7 :                 7D9 C |
 LD_P2P3_REG16P1 :              82B C |  LD_PM16REG16P0_P1 :           0B81 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/04/10 10:54:46


 LD_REG16P0_P2P3 :              766 C |  LD_REG16P0_REG16P1 :           73C C |
 LD_REG16P1_P2P3 :              760 C |  LD_REG16P1_REG16P0 :           746 C |
 LD_REG16P6_REG16P7 :           820 C |  LD_REG16P7_P2P3 :              750 C |
 LD_REG8P0_P1 :                 7C1 C | *LD_REG8P0_REG8P1 :             7AE C |
 LD_REG8P2_P1 :                 7CD C |  LD_REG8P3_P1 :                 7C7 C |
 LD_REG8P6_REG8P7 :             7B6 C |  LD_REG8P7_P1 :                 7D1 C |
*LISTON :                         1 - | *MACEXP :                         7 - |
*MAIN :                           0 C | *MOMCPU :                      4004 - |
*MOMCPUNAME :                "4004" - |  MUL16_P2P3 :                  0E16 C |
*NESTMAX :                      100 - |  OR67_L1 :                      71A C |
 OR67_L2 :                      726 C |  OR67_L3 :                      732 C |
 OR67_L4 :                      73B C |  ORI_P1 :                       5FE C |
 OR_P1_P2 :                     6FF C |  OR_R6_R7 :                     710 C |
*PADDING :                        1 - |  PM16_LINEBUF :               0FD00 - |
*PM16_MEMSTART :                  0 - |  PM_INIT_BANK :                0BAD C |
 PM_INIT_HLOOP :                  9 C |  PM_INIT_LLOOP :                 0B C |
 PM_RAM_START :                0F00 - |  PM_READ_P0_P1 :               0FFE - |
 PM_SELECTPMB_P1 :             0BB9 C |  PM_WRITE_P0_P1 :              0BA1 C |
 PM_WRITE_P6_P7 :              0BA7 C |  POP_P0 :                      0B36 C |
 POP_P1 :                      0B43 C |  POP_P2 :                      0B50 C |
 PRINTACC_L1 :                 0CBC C |  PRINTHEX_P1 :                 0C85 C |
 PRINTHEX_REG16P1 :             7F9 C |  PRINTSTRP0_EXIT :             0E12 C |
 PRINTSTRP0_LOOP :             0E04 C |  PRINTSTRP0_PUT :              0E0B C |
 PRINTSTR_EXIT :               0C16 C |  PRINTSTR_LOOP :               0C0C C |
 PRINTSTR_P0 :                 0E00 C |  PRINTSTR_PM16REG16P0 :        0C0A C |
 PRINT_ACC :                   0CB4 C |  PRINT_CR :                    0CAC C |
 PRINT_CRLF :                  0CA0 C |  PRINT_DATARAM_P0 :            0D55 C |
 PRINT_LF :                    0CB0 C |  PRINT_SPC :                   0C98 C |
 PUSH_P0 :                     0B00 C |  PUSH_P1 :                     0B12 C |
 PUSH_P2 :                     0B24 C |  PUTCHAR_L1 :                  0C67 C |
 PUTCHAR_L2 :                  0C76 C |  PUTCHAR_P1 :                  0C5F C |
 RAM23TYPE :               "4002-2" - |  REG16_ADDR :                    1C - |
 REG16_ADD_LOOP :               88B C |  REG16_BC :                      0C - |
 REG16_CMP_EXIT0 :              883 C |  REG16_CMP_LOOP :               869 C |
 REG16_CMP_NEXT :               876 C |  REG16_DE :                       8 - |
 REG16_DEC_EXIT :               85D C |  REG16_DEC_LOOP :               854 C |
 REG16_HL :                       4 - |  REG16_INC_EXIT :               84C C |
 REG16_INC_LOOP :               843 C |  REG16_MON_ADDR :                2C - |
 REG16_MON_INDEX :               28 - | *REG16_MON_PMBANK :              34 - |
 REG16_MON_TMP :                 30 - |  REG16_PC :                      14 - |
 REG16_SP :                      18 - | *REG16_STACK_40H :               40 - |
*REG16_STACK_7CH :               7C - |  REG4_EMU_STEP :                 24 - |
 REG4_FLAG_1P1C :                10 - |  REG4_FLAG_SZBH :                11 - |
 REG8_A :                         0 - |  REG8_ADDRH :                    1E - |
 REG8_ADDRL :                    1C - |  REG8_B :                        0E - |
 REG8_C :                        0C - |  REG8_D :                        0A - |
 REG8_DEC_EXIT :                7AD C |  REG8_E :                         8 - |
 REG8_EMU_KEYBUF :               20 - |  REG8_FLAG :                     10 - |
 REG8_H :                         6 - |  REG8_INC_EXIT :                78C C |
 REG8_L :                         4 - |  REG8_M :                         2 - |
 REG8_MON_MEMSPACE :             38 - | *REG8_MON_RESERVED :             3A - |
 REG8_MON_TMP :                  30 - |  REG8_MON_TMP2 :                 32 - |
 REG8_PCH :                      16 - |  REG8_PCL :                      14 - |
 REG8_SPH :                      1A - |  REG8_SPL :                      18 - |
 REG8_SRC :                      12 - | *RELAXED :                        0 - |
 RET_IF0 :                      4A4 C |  RET_IF1 :                      4A1 C |
 SBI_P1 :                       530 C |  SBI_P1_NOCARRY :               536 C |
 SETFLAG_C_0 :                  65D C |  SETFLAG_C_1 :                  666 C |
 SETFLAG_C_CY :                 65B C |  SETFLAG_ZSP_P1 :               675 C |
 SETFLAG_ZSP_REG8P0 :           66F C |  SETFLAG_ZSP_REG8P1 :           673 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/04/10 10:54:46


 STACK_INIT :                    80 - |  STR_CMDERR :                  0E47 C |
 STR_EMU_HLT :                 0ECB C |  STR_EMU_MESSAGE :             0E6E C |
 STR_EMU_REG :                 0E90 C |  STR_ERROR_LOADCOMMAND :       0E57 C |
 STR_ERROR_MEMTEST :           0E65 C |  STR_ERROR_UNKNOWN_MEMSPACE :  0E4B C |
 STR_OMSG :                    0E1F C |  STR_VFD_INIT :                0E42 C |
 SUB_REG8P0_P1 :                78D C |  SUI_P1 :                       50E C |
*TIME :                  "10:54:46" - |  TOUPPER_P1 :                  0D49 C |
 TOUPPER_P1_EXIT :             0D54 C | *TRUE :                           1 - |
*VERSION :                     142F - |  XOR67_L1 :                     6CC C |
 XOR67_L2 :                     6D8 C |  XOR67_L3 :                     6E4 C |
 XOR67_L4 :                     6ED C |  XOR_P1_P2 :                    6EE C |
 XOR_R6_R7 :                    6C2 C |  XRI_P1 :                       5B9 C |

    493 symbols
     39 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/04/10 10:54:46


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/04/10 10:54:46


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_ACC_REG4P7                        
LD_CNT_P1                             | LD_P0_P1                             
LD_P0_P3                              | LD_P1_CNT                            
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P2_P1                             
LD_P2_P3                              | LD_P3_P0                             
LD_P3_P1                              | LD_P3_P2                             
LD_P6_P0                              | LD_P6_P1                             
LD_P6_SP                              | LD_P7_P0                             
LD_P7_P1                              | LD_P7_P2                             
LD_P7_P3                              | LD_REG4P7_ACC                        
POPP                                  | PUSHP                                

     24 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 84 - 2023/04/10 10:54:46


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 85 - 2023/04/10 10:54:46


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4207 lines source file
   4517 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
