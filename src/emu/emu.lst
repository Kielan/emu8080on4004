 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/03/21 12:27:23


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/03/21
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/03/21 12:27:23


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     ;;;----------------------------------------------------------------------------
(1)   78/       0 :                     ;;; For debug
(1)   79/       0 :                     ;;;----------------------------------------------------------------------------
(1)   80/       0 :                     ;;;----------------------------------------------------------------------------
(1)   81/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)   82/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)   83/       0 :                     ;;;----------------------------------------------------------------------------
(1)   84/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)   85/       0 :                     	JMS PUSH_P1
(1)   86/       0 :                     	FIM P1, ch
(1)   87/       0 :                     	JMS PUTCHAR_P1
(1)   88/       0 :                     	JMS POP_P1
(1)   89/       0 :                     	endm
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     ;;; Register Pair Operations
(1)   92/       0 :                     ;;;----------------------------------------------------------------------------
(1)   93/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)   94/       0 :                     		LD P1_HI
(1)   95/       0 :                     		XCH P0_HI
(1)   96/       0 :                     		LD P1_LO
(1)   97/       0 :                     		XCH P0_LO
(1)   98/       0 :                     		endm
(1)   99/       0 :                     ;;;----------------------------------------------------------------------------
(1)  100/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  101/       0 :                     		LD P3_HI
(1)  102/       0 :                     		XCH P0_HI
(1)  103/       0 :                     		LD P3_LO
(1)  104/       0 :                     		XCH P0_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/03/21 12:27:23


(1)  105/       0 :                     		endm
(1)  106/       0 :                     ;;;----------------------------------------------------------------------------
(1)  107/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  108/       0 :                     		LD P0_HI
(1)  109/       0 :                     		XCH P1_HI
(1)  110/       0 :                     		LD P0_LO
(1)  111/       0 :                     		XCH P1_LO
(1)  112/       0 :                     		endm
(1)  113/       0 :                     ;;;----------------------------------------------------------------------------
(1)  114/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  115/       0 :                     		LD P2_HI
(1)  116/       0 :                     		XCH P1_HI
(1)  117/       0 :                     		LD P2_LO
(1)  118/       0 :                     		XCH P1_LO
(1)  119/       0 :                     		endm
(1)  120/       0 :                     ;;;----------------------------------------------------------------------------
(1)  121/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  122/       0 :                     		LD P3_HI
(1)  123/       0 :                     		XCH P1_HI
(1)  124/       0 :                     		LD P3_LO
(1)  125/       0 :                     		XCH P1_LO
(1)  126/       0 :                     		endm
(1)  127/       0 :                     ;;;----------------------------------------------------------------------------
(1)  128/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  129/       0 :                     		LD P1_HI
(1)  130/       0 :                     		XCH P2_HI
(1)  131/       0 :                     		LD P1_LO
(1)  132/       0 :                     		XCH P2_LO
(1)  133/       0 :                     		endm
(1)  134/       0 :                     ;;;----------------------------------------------------------------------------
(1)  135/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  136/       0 :                     		LD P3_HI
(1)  137/       0 :                     		XCH P2_HI
(1)  138/       0 :                     		LD P3_LO
(1)  139/       0 :                     		XCH P2_LO
(1)  140/       0 :                     		endm
(1)  141/       0 :                     ;;;----------------------------------------------------------------------------
(1)  142/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  143/       0 :                     		LD P0_HI
(1)  144/       0 :                     		XCH P3_HI
(1)  145/       0 :                     		LD P0_LO
(1)  146/       0 :                     		XCH P3_LO
(1)  147/       0 :                     		endm
(1)  148/       0 :                     ;;;----------------------------------------------------------------------------
(1)  149/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  150/       0 :                     		LD P1_HI
(1)  151/       0 :                     		XCH P3_HI
(1)  152/       0 :                     		LD P1_LO
(1)  153/       0 :                     		XCH P3_LO
(1)  154/       0 :                     		endm
(1)  155/       0 :                     ;;;----------------------------------------------------------------------------
(1)  156/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  157/       0 :                     		LD P2_HI
(1)  158/       0 :                     		XCH P3_HI
(1)  159/       0 :                     		LD P2_LO
(1)  160/       0 :                     		XCH P3_LO
(1)  161/       0 :                     		endm
(1)  162/       0 :                     ;;;----------------------------------------------------------------------------
(1)  163/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  164/       0 :                     		LD P0_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/03/21 12:27:23


(1)  165/       0 :                     		XCH P6_HI
(1)  166/       0 :                     		LD P0_LO
(1)  167/       0 :                     		XCH P6_LO
(1)  168/       0 :                     		endm
(1)  169/       0 :                     ;;;----------------------------------------------------------------------------
(1)  170/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  171/       0 :                     		LD P1_HI
(1)  172/       0 :                     		XCH P6_HI
(1)  173/       0 :                     		LD P1_LO
(1)  174/       0 :                     		XCH P6_LO
(1)  175/       0 :                     		endm
(1)  176/       0 :                     ;;;----------------------------------------------------------------------------
(1)  177/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  178/       0 :                     		LD SP_HI
(1)  179/       0 :                     		XCH P6_HI
(1)  180/       0 :                     		LD SP_LO
(1)  181/       0 :                     		XCH P6_LO
(1)  182/       0 :                     		endm
(1)  183/       0 :                     ;;;----------------------------------------------------------------------------
(1)  184/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  185/       0 :                     		LD P0_HI
(1)  186/       0 :                     		XCH P7_HI
(1)  187/       0 :                     		LD P0_LO
(1)  188/       0 :                     		XCH P7_LO
(1)  189/       0 :                     		endm
(1)  190/       0 :                     ;;;----------------------------------------------------------------------------
(1)  191/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  192/       0 :                     		LD P1_HI
(1)  193/       0 :                     		XCH P7_HI
(1)  194/       0 :                     		LD P1_LO
(1)  195/       0 :                     		XCH P7_LO
(1)  196/       0 :                     		endm
(1)  197/       0 :                     ;;;----------------------------------------------------------------------------
(1)  198/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  199/       0 :                     		LD P2_HI
(1)  200/       0 :                     		XCH P7_HI
(1)  201/       0 :                     		LD P2_LO
(1)  202/       0 :                     		XCH P7_LO
(1)  203/       0 :                     		endm
(1)  204/       0 :                     ;;;----------------------------------------------------------------------------
(1)  205/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  206/       0 :                     		LD P3_HI
(1)  207/       0 :                     		XCH P7_HI
(1)  208/       0 :                     		LD P3_LO
(1)  209/       0 :                     		XCH P7_LO
(1)  210/       0 :                     		endm
(1)  211/       0 :                     ;;;----------------------------------------------------------------------------
(1)  212/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  213/       0 :                     		LD P1_HI
(1)  214/       0 :                     		XCH CNT_HI
(1)  215/       0 :                     		LD P1_LO
(1)  216/       0 :                     		XCH CNT_LO
(1)  217/       0 :                     		endm
(1)  218/       0 :                     ;;;----------------------------------------------------------------------------
(1)  219/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  220/       0 :                     		LD CNT_HI
(1)  221/       0 :                     		XCH P1_HI
(1)  222/       0 :                     		LD CNT_LO
(1)  223/       0 :                     		XCH P1_LO
(1)  224/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/03/21 12:27:23


(1)  225/       0 :                     ;;;----------------------------------------------------------------------------
(1)  226/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     
      23/       0 :                     ;;;---------------------------------------------------------------------------
      24/       0 :                     ;;; Emulator compile configuration
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 : =0H                  EMU_STEPMODE = 0
      27/       0 :                     ;; don't use DAA and FLAG_P because it takes much cost to implement them
      28/       0 : =0H                  EMU_USE_DAA = 0		; don't use DAA
      29/       0 :                     ;;; EMU_USE_DAA = 1	; use DAA
      30/       0 : =0H                  EMU_USE_FLAG_P = 0	; don't use P FLAG
      31/       0 :                     ;;; EMU_USE_FLAG_P = 1	; use P FLAG
      32/       0 :                     
      33/       0 :                     SETFLAG_SUB_0 macro
      34/       0 :                     	if EMU_USE_DAA
      35/       0 :                     	JMS DAA_SETFLAG_SUB_0
      36/       0 :                     	endif
      37/       0 :                     	endm
      38/       0 :                     SETFLAG_SUB_1 macro
      39/       0 :                     	if EMU_USE_DAA
      40/       0 :                     	JMS DAA_SETFLAG_SUB_1
      41/       0 :                     	endif
      42/       0 :                     	endm
      43/       0 :                     ;;;---------------------------------------------------------------------------
      44/       0 :                     ;;; Emulator port configuration
      45/       0 :                     ;;;---------------------------------------------------------------------------
      46/       0 : =0H                  EMU_UARTRC	equ	00H	; for tinybasic-1.0
      47/       0 : =1H                  EMU_UARTRD	equ	01H	; for tynybasic-1.0
      48/       0 : =22H                 EMU_IN_UARTRC_VALUE	equ 22H	; for tynybasic-1.0
      49/       0 :                     
      50/       0 :                     ;;;---------------------------------------------------------------------------
      51/       0 :                     ;;; Hardware Configuration
      52/       0 :                     ;;;---------------------------------------------------------------------------
      53/       0 :                     
      54/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      55/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      56/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      57/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      58/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      59/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      60/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      61/       0 :                     
      62/       0 :                     ;;; Chip type of RAM2 and RAM3
      63/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      64/       0 :                     
      65/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      66/       0 : =0H                  BANK_RAM0	equ 0
      67/       0 : =0H                  CHIP_RAM0	equ 00H
      68/       0 : =0H                  BANK_RAM1	equ 0
      69/       0 : =40H                 CHIP_RAM1	equ 40H
      70/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      71/       0 : =0H                  BANK_RAM2	equ 0
      72/       0 : =80H                 CHIP_RAM2	equ 80H
      73/       0 : =0H                  BANK_RAM3	equ 0
      74/       0 : =0C0H                CHIP_RAM3	equ 0C0H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/03/21 12:27:23


      75/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      76/       0 :                     BANK_RAM2	equ 1
      77/       0 :                     CHIP_RAM2	equ 00H
      78/       0 :                     BANK_RAM3	equ 1
      79/       0 :                     CHIP_RAM3	equ 40H
      80/       0 : [70]                 	endif
      81/       0 :                     
      82/       0 :                     ;;; Default Bank
      83/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      84/       0 :                     ;;; to omit DCL as much as possible.
      85/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      86/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      87/       0 :                     		
      88/       0 :                     ;;; Output port for serial interface
      89/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      90/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      91/       0 :                     
      92/       0 :                     ;;; Output port for program memory bank selection
      93/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      94/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      95/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      96/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      97/       0 :                     
      98/       0 :                     	
      99/       0 :                     ;;; Program Memory RAM area
     100/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
     101/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
     102/       0 :                     				; "FIN P1 and BBL 0"
     103/       0 :                     	
     104/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
     105/       0 : =0H                  PM16_MEMSTART	equ 0000H
     106/       0 : =0D00H               PM16_LINEBUF	equ 0D00H
     107/       0 :                     
     108/       0 :                     ;;; for 256 x 16 x16 PM space
     109/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
     110/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
     111/       0 :                     
     112/       0 :                     ;;;---------------------------------------------------------------------------
     113/       0 :                     ;;; Data RAM Register Configuration
     114/       0 :                     ;;;---------------------------------------------------------------------------
     115/       0 :                     ;;; RAM0
     116/       0 :                     ;;; 
     117/       0 :                     ;;; 8080 register code DDD or SSS
     118/       0 :                     ;;; 0 1 2 3 4 5 6 7
     119/       0 :                     ;;; B C D E H L M A
     120/       0 :                     ;;; 
     121/       0 :                     ;;;  ADDRESS=~(xxx)<<1
     122/       0 :                     	
     123/       0 : =0H                  REG8_A		equ 00H	;
     124/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     125/       0 : =4H                  REG8_L		equ 04H	;
     126/       0 : =6H                  REG8_H		equ 06H	;
     127/       0 : =8H                  REG8_E		equ 08H	;
     128/       0 : =0AH                 REG8_D		equ 0AH	;
     129/       0 : =0CH                 REG8_C		equ 0CH	;
     130/       0 : =0EH                 REG8_B		equ 0EH	;
     131/       0 :                     
     132/       0 : =10H                 REG8_FLAG	equ 10H ;
     133/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     134/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/03/21 12:27:23


     135/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     136/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     137/       0 :                     
     138/       0 :                     		;; lower byte is the first
     139/       0 : =0CH                 REG16_BC	equ REG8_C
     140/       0 : =8H                  REG16_DE	equ REG8_E
     141/       0 : =4H                  REG16_HL	equ REG8_L
     142/       0 :                     
     143/       0 : =14H                 REG8_PCL	equ REG16_PC
     144/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     145/       0 : =18H                 REG8_SPL	equ REG16_SP
     146/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     147/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     148/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     149/       0 :                     	
     150/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     151/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     152/       0 :                     
     153/       0 : =20H                 REG16_MON_INDEX	equ 20H	;
     154/       0 : =24H                 REG16_MON_ADDR	equ 24H	;
     155/       0 : =28H                 REG16_MON_TMP	equ 28H	;
     156/       0 : =2CH                 REG8_MON_MEMSPACE	equ 2CH	; 'D', 'P', 'L' = (Data, Physical, Logical)
     157/       0 : =2EH                 REG8_MON_RESERVED	equ 2EH	; (reserved)
     158/       0 : =30H                 REG16_MON_PMBANK	equ 30H	;
     159/       0 :                     
     160/       0 :                     ;;; RAM1
     161/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     162/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     163/       0 :                     
     164/       0 : =80H                 STACK_INIT	equ 80H
     165/       0 :                     
     166/       0 :                     ;;; RAM2
     167/       0 :                     ;;; RAM3
     168/       0 :                     	
     169/       0 :                     ;;;---------------------------------------------------------------------------
     170/       0 :                     ;;; Program Start
     171/       0 :                     ;;;---------------------------------------------------------------------------
     172/       0 :                     	org 0000H		; beginning of Program Memory
     173/       0 :                     
     174/       0 :                     ;;;---------------------------------------------------------------------------
     175/       0 :                     ;;; Mail Loop for Monitor Program
     176/       0 :                     ;;;---------------------------------------------------------------------------
     177/       0 :                     MAIN:
     178/       0 : 00                  	NOP
     179/       1 : F0                  	CLB
     180/       2 :                     
     181/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     182/       2 :                     	LDM BANK_DEFAULT
     183/       2 : [181]                	endif
     184/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     185/       2 :                     	;; except when in use for another banks.
     186/       2 : FD                  	DCL
     187/       3 :                     
     188/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     189/       5 : 5C 7D               	JMS INIT_SERIAL		; Initialize Serial Port
     190/       7 :                     
     191/       7 :                     
     192/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     193/       7 : D0                  	LDM loop(16)
     194/       8 : B2                  	XCH P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/03/21 12:27:23


     195/       9 :                     PM_INIT_HLOOP:
     196/       9 : D0                  	LDM loop(16)
     197/       A : B3                  	XCH P1_LO
     198/       B :                     PM_INIT_LLOOP:
     199/       B : 5B B9               	JMS PM_SELECTPMB_P1
     200/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     201/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     202/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     203/      13 :                     
     204/      13 : 22 00               	FIM P1, 00H
     205/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     206/      17 :                     	
     207/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     208/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     209/      19 : 5E 00               	JMS PRINTSTR_P0
     210/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     211/      1D : 5E 00               	JMS PRINTSTR_P0
     212/      1F :                     
     213/      1F : 20 2C               	FIM P0, REG8_MON_MEMSPACE
     214/      21 : 22 44               	FIM P1, 'D'
     215/      23 : 57 8A               	JMS LD_REG8P0_P1	; set memspace 'D'
     216/      25 :                     	
     217/      25 :                     	;; init emulator PC
     218/      25 : 20 14               	FIM P0, REG16_PC
     219/      27 : 24 00               	FIM P2, 00H
     220/      29 : 26 00               	FIM P3, 00H
     221/      2B : 57 2F               	JMS LD_REG16P0_P2P3	; PC=0000H
     222/      2D :                     
     223/      2D :                     CMD_LOOP:
     224/      2D : 22 5D               	FIM P1, ']'		; prompt
     225/      2F : 5C 5D               	JMS PUTCHAR_P1
     226/      31 :                     
     227/      31 : 20 20               	FIM P0, REG16_MON_INDEX
     228/      33 : 24 0D               	FIM P2, up(PM16_LINEBUF)
     229/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     230/      37 : 57 2F               	JMS LD_REG16P0_P2P3
     231/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
     232/      3B :                     
     233/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     234/      3D : 5D 44               	JMS TOUPPER_P1
     235/      3F :                     L0:
     236/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     237/      41 : 5D 20               	JMS CMP_P1P7
     238/      43 : 1C 47               	JCN ZN, L1
     239/      45 : 40 F6               	JUN COMMAND_H
     240/      47 :                     L1:
     241/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     242/      49 : 5D 20               	JMS CMP_P1P7
     243/      4B : 1C 4F               	JCN ZN, L2
     244/      4D : 40 79               	JUN COMMAND_D
     245/      4F :                     L2:
     246/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     247/      4F :                     ;;;	JMS CMP_P1P7
     248/      4F :                     ;;;	JCN ZN, L3
     249/      4F :                     ;;;	JUN COMMAND_S
     250/      4F :                     L3:
     251/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     252/      51 : 5D 20               	JMS CMP_P1P7
     253/      53 : 1C 57               	JCN ZN, L4
     254/      55 : 41 34               	JUN COMMAND_L
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/03/21 12:27:23


     255/      57 :                     L4:
     256/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     257/      59 : 5D 20               	JMS CMP_P1P7
     258/      5B : 1C 5F               	JCN ZN, L5
     259/      5D : 41 A6               	JUN COMMAND_C
     260/      5F :                     L5:
     261/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     262/      61 : 5D 20               	JMS CMP_P1P7
     263/      63 : 1C 67               	JCN ZN, L6
     264/      65 : 40 F4               	JUN COMMAND_G
     265/      67 :                     L6:
     266/      67 : 2E 45               	FIM P7, 'E'		; 8080 Emulator
     267/      69 : 5D 20               	JMS CMP_P1P7
     268/      6B : 1C 73               	JCN ZN, L10
     269/      6D :                     
     270/      6D : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     271/      6F : 58 62               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     272/      71 :                     
     273/      71 : 41 C0               	JUN COMMAND_E
     274/      73 :                     L10:
     275/      73 : 20 AC               	FIM P0, lo(STR_CMDERR)
     276/      75 : 5E 00               	JMS PRINTSTR_P0
     277/      77 :                     
     278/      77 : 40 2D               	JUN CMD_LOOP
     279/      79 :                     
     280/      79 :                     ;;;---------------------------------------------------------------------------
     281/      79 :                     ;;; COMMAND_D
     282/      79 :                     ;;; Dump Memory
     283/      79 :                     ;;;---------------------------------------------------------------------------
     284/      79 :                     COMMAND_D:
     285/      79 : 22 24               	FIM P1, REG16_MON_ADDR
     286/      7B : 58 62               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     287/      7D :                     	
     288/      7D : 2E 2C               	FIM P7, REG8_MON_MEMSPACE
     289/      7F : 57 A2               	JMS LD_P1_REG8P7
     290/      81 :                     	
     291/      81 : 2E 44               	FIM P7, 'D'
     292/      83 : 5D 20               	JMS CMP_P1P7
     293/      85 : 1C 89               	JCN ZN, CMDD_L1
     294/      87 : 40 9F               	JUN COMMAND_DD
     295/      89 :                     CMDD_L1:
     296/      89 : 2E 50               	FIM P7, 'P'
     297/      8B : 5D 20               	JMS CMP_P1P7
     298/      8D : 1C 91               	JCN ZN, CMDD_L2
     299/      8F : 40 B8               	JUN COMMAND_DP
     300/      91 :                     CMDD_L2:
     301/      91 : 2E 4C               	FIM P7, 'L'
     302/      93 : 5D 20               	JMS CMP_P1P7
     303/      95 : 1C 99               	JCN ZN, CMDD_L3
     304/      97 : 41 16               	JUN COMMAND_DL
     305/      99 :                     CMDD_L3:
     306/      99 : 20 B0               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     307/      9B : 5E 00               	JMS PRINTSTR_P0
     308/      9D : 40 2D               	JUN CMD_LOOP
     309/      9F :                     
     310/      9F :                     ;;;---------------------------------------------------------------------------
     311/      9F :                     ;;; COMMAND_DD
     312/      9F :                     ;;; Dump Data RAM
     313/      9F :                     ;;; input:
     314/      9F :                     ;;; REG16_MON_ADDR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/03/21 12:27:23


     315/      9F :                     ;;; RAM0=00H-3FH
     316/      9F :                     ;;; RAM1=40H-7FH
     317/      9F :                     ;;; RAM2=80H-BFH
     318/      9F :                     ;;; RAM3=C0H-FFH
     319/      9F :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     320/      9F :                     ;;;---------------------------------------------------------------------------
     321/      9F :                     COMMAND_DD:
     322/      9F : 2E 24               	FIM P7, REG16_MON_ADDR
     323/      A1 : 57 A2               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     324/      A3 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     324/      A3 : A2                                  LD P1_HI
     324/      A4 : B0                                  XCH P0_HI
     324/      A5 : A3                                  LD P1_LO
     324/      A6 : B1                                  XCH P0_LO
     325/      A7 :                     
     326/      A7 :                     	;; PRINT 4 registers
     327/      A7 : DC                  	LDM loop(4)		; PRINT 4 regs
     328/      A8 : BA                  	XCH CNT_I		; I=loop(4)
     329/      A9 :                     	;; PRINT 16 characters
     330/      A9 :                     CMDDD_L1:
     331/      A9 : 5D 50               	JMS PRINT_DATARAM_P0
     332/      AB : 60                  	INC P0_HI
     333/      AC : 7A A9               	ISZ CNT_I, CMDDD_L1
     334/      AE :                     
     335/      AE : (MACRO)              	LD_P1_P0
     335/      AE : A0                                  LD P0_HI
     335/      AF : B2                                  XCH P1_HI
     335/      B0 : A1                                  LD P0_LO
     335/      B1 : B3                                  XCH P1_LO
     336/      B2 : 20 24               	FIM P0, REG16_MON_ADDR
     337/      B4 : 57 8A               	JMS LD_REG8P0_P1
     338/      B6 :                     
     339/      B6 : 40 2D               	JUN CMD_LOOP		; return to command loop
     340/      B8 :                     	
     341/      B8 :                     ;;;---------------------------------------------------------------------------
     342/      B8 :                     ;;; COMMAND_DP
     343/      B8 :                     ;;; Dump Physical Memory
     344/      B8 :                     ;;;	BANK=ADDR.FEDCBA98
     345/      B8 :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     346/      B8 :                     ;;;---------------------------------------------------------------------------
     347/      B8 :                     COMMAND_DP:
     348/      B8 : 22 24               	FIM P1, REG16_MON_ADDR
     349/      BA : 57 F4               	JMS LD_P2P3_REG16P1
     350/      BC :                     
     351/      BC : (MACRO)              	LD_P1_P2
     351/      BC : A4                                  LD P2_HI
     351/      BD : B2                                  XCH P1_HI
     351/      BE : A5                                  LD P2_LO
     351/      BF : B3                                  XCH P1_LO
     352/      C0 : 5B B9               	JMS PM_SELECTPMB_P1
     353/      C2 :                     	
     354/      C2 : D8                  	LDM loop(8)
     355/      C3 : BA                  	XCH CNT_I
     356/      C4 :                     CMDDP_L0:
     357/      C4 : (MACRO)              	LD_P1_P2
     357/      C4 : A4                                  LD P2_HI
     357/      C5 : B2                                  XCH P1_HI
     357/      C6 : A5                                  LD P2_LO
     357/      C7 : B3                                  XCH P1_LO
     358/      C8 : 5C 83               	JMS PRINTHEX_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/03/21 12:27:23


     359/      CA : 22 3A               	FIM P1, ':'
     360/      CC : 5C 5D               	JMS PUTCHAR_P1
     361/      CE : 22 46               	FIM P1, 'F'
     362/      D0 : 5C 5D               	JMS PUTCHAR_P1
     363/      D2 : (MACRO)              	LD_P1_P3
     363/      D2 : A6                                  LD P3_HI
     363/      D3 : B2                                  XCH P1_HI
     363/      D4 : A7                                  LD P3_LO
     363/      D5 : B3                                  XCH P1_LO
     364/      D6 : 5C 83               	JMS PRINTHEX_P1
     365/      D8 : 22 3A               	FIM P1, ':'
     366/      DA : 5C 5D               	JMS PUTCHAR_P1
     367/      DC :                     
     368/      DC :                     CMDDP_L1:	
     369/      DC : (MACRO)              	LD_P0_P3
     369/      DC : A6                                  LD P3_HI
     369/      DD : B0                                  XCH P0_HI
     369/      DE : A7                                  LD P3_LO
     369/      DF : B1                                  XCH P0_LO
     370/      E0 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     371/      E2 : 5C 83               	JMS PRINTHEX_P1
     372/      E4 :                     
     373/      E4 : 77 DC               	ISZ P3_LO, CMDDP_L1
     374/      E6 : 5C 9E               	JMS PRINT_CRLF
     375/      E8 : 66                  	INC P3_HI
     376/      E9 : A6                  	LD P3_HI
     377/      EA : 14 EE               	JCN Z, CMDDP_EXIT
     378/      EC : 7A C4               	ISZ CNT_I, CMDDP_L0
     379/      EE :                     CMDDP_EXIT:	
     380/      EE : 20 24               	FIM P0, REG16_MON_ADDR
     381/      F0 : 57 2F               	JMS LD_REG16P0_P2P3
     382/      F2 :                     
     383/      F2 : 40 2D               	JUN CMD_LOOP		; return to command loop
     384/      F4 :                     
     385/      F4 :                     ;;;---------------------------------------------------------------------------
     386/      F4 :                     ;;; COMMAND_G
     387/      F4 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     388/      F4 :                     ;;;---------------------------------------------------------------------------
     389/      F4 :                     COMMAND_G:
     390/      F4 : 4F 00               	JUN PM_RAM_START
     391/      F6 :                     
     392/      F6 :                     ;;;---------------------------------------------------------------------------
     393/      F6 :                     ;;; COMMAND_H
     394/      F6 :                     ;;; Select Memory Space and address
     395/      F6 :                     ;;; 'D' = Data Memory
     396/      F6 :                     ;;; 'P' = Physical Program Memory
     397/      F6 :                     ;;; 'L' = Logical Program Memory
     398/      F6 :                     ;;;---------------------------------------------------------------------------
     399/      F6 :                     COMMAND_H:
     400/      F6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     401/      F8 : 5D 2D               	JMS ISZEROORNOT_P1
     402/      FA : 1C FE               	JCN ZN, CMDH_SET
     403/      FC : 41 08               	JUN CMDH_EXIT
     404/      FE :                     CMDH_SET:
     405/      FE : 5D 44               	JMS TOUPPER_P1
     406/     100 : 24 2C               	FIM P2, REG8_MON_MEMSPACE
     407/     102 : 57 96               	JMS LD_REG8P2_P1
     408/     104 : 22 24               	FIM P1, REG16_MON_ADDR
     409/     106 : 58 62               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     410/     108 :                     CMDH_EXIT:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/03/21 12:27:23


     411/     108 : 2E 2C               	FIM P7, REG8_MON_MEMSPACE
     412/     10A : 57 A2               	JMS LD_P1_REG8P7
     413/     10C : 5C 5D               	JMS PUTCHAR_P1
     414/     10E : 22 24               	FIM P1, REG16_MON_ADDR
     415/     110 : 57 C2               	JMS PRINTHEX_REG16P1
     416/     112 : 5C 9E               	JMS PRINT_CRLF
     417/     114 : 40 2D               	JUN CMD_LOOP
     418/     116 :                     
     419/     116 :                     ;;;---------------------------------------------------------------------------
     420/     116 :                     ;;; COMMAND_DL
     421/     116 :                     ;;; Dump Logical Memory
     422/     116 :                     ;;;---------------------------------------------------------------------------
     423/     116 :                     COMMAND_DL:
     424/     116 : 20 24               	FIM P0, REG16_MON_ADDR
     425/     118 : 57 AA               	JMS LD_P1_REG8P0
     426/     11A : (MACRO)              	LD_CNT_P1
     426/     11A : A2                                  LD P1_HI
     426/     11B : BA                                  XCH CNT_HI
     426/     11C : A3                                  LD P1_LO
     426/     11D : BB                                  XCH CNT_LO
     427/     11E : D8                  	LDM loop(8)
     428/     11F : BA                  	XCH CNT_I
     429/     120 :                     CMDDL_L0:
     430/     120 : 22 24               	FIM P1, REG16_MON_ADDR
     431/     122 : 57 C2               	JMS PRINTHEX_REG16P1
     432/     124 : 22 3A               	FIM P1, ':'
     433/     126 : 5C 5D               	JMS PUTCHAR_P1
     434/     128 :                     CMDDL_L1:	
     435/     128 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     436/     12A : 5C 83               	JMS PRINTHEX_P1
     437/     12C :                     
     438/     12C : 7B 28               	ISZ CNT_J, CMDDL_L1
     439/     12E : 5C 9E               	JMS PRINT_CRLF
     440/     130 : 7A 20               	ISZ CNT_I, CMDDL_L0
     441/     132 :                     CMDDL_NEXT:
     442/     132 : 40 2D               	JUN CMD_LOOP		; return to command loop
     443/     134 :                     
     444/     134 :                     	
     445/     134 :                     ;;;---------------------------------------------------------------------------
     446/     134 :                     ;;; COMMAND_L
     447/     134 :                     ;;; Load to Logical Memory
     448/     134 :                     ;;; Intel Hex format, no checksum check
     449/     134 :                     ;;; data lengh must be 0to10H/line
     450/     134 :                     ;;;---------------------------------------------------------------------------
     451/     134 :                     COMMAND_L:
     452/     134 :                     CMDL_START:
     453/     134 : 20 20               	FIM P0, REG16_MON_INDEX
     454/     136 : 24 0D               	FIM P2, up(PM16_LINEBUF)
     455/     138 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     456/     13A : 57 2F               	JMS LD_REG16P0_P2P3
     457/     13C : 5B C4               	JMS GETLINE_PM16REG16P0
     458/     13E :                     
     459/     13E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     460/     140 : 5D 2D               	JMS ISZEROORNOT_P1
     461/     142 : 1C 46               	JCN ZN, CMDL_L0
     462/     144 : 41 9E               	JUN CMDL_EXIT
     463/     146 :                     CMDL_L0:
     464/     146 : 2E 3A               	FIM P7, ':'
     465/     148 : 5D 20               	JMS CMP_P1P7
     466/     14A : 14 4E               	JCN Z, CMDL_L1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/03/21 12:27:23


     467/     14C : 41 74               	JUN CMDL_ERROR
     468/     14E :                     CMDL_L1:
     469/     14E : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     470/     150 : (MACRO)              	LD_CNT_P1				; count
     470/     150 : A2                                  LD P1_HI
     470/     151 : BA                                  XCH CNT_HI
     470/     152 : A3                                  LD P1_LO
     470/     153 : BB                                  XCH CNT_LO
     471/     154 :                     
     472/     154 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     473/     156 : (MACRO)              	LD_P2_P1
     473/     156 : A2                                  LD P1_HI
     473/     157 : B4                                  XCH P2_HI
     473/     158 : A3                                  LD P1_LO
     473/     159 : B5                                  XCH P2_LO
     474/     15A : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     475/     15C : (MACRO)              	LD_P3_P1
     475/     15C : A2                                  LD P1_HI
     475/     15D : B6                                  XCH P3_HI
     475/     15E : A3                                  LD P1_LO
     475/     15F : B7                                  XCH P3_LO
     476/     160 : 22 24               	FIM P1, REG16_MON_ADDR
     477/     162 : 57 29               	JMS LD_REG16P1_P2P3
     478/     164 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     479/     166 : 5D 2D               	JMS ISZEROORNOT_P1
     480/     168 : 1C 6C               	JCN ZN, CMDL_L2
     481/     16A : 41 7E               	JUN CMDL_READLOOP
     482/     16C :                     CMDL_L2:
     483/     16C : 2E 01               	FIM P7, 01H
     484/     16E : 5D 20               	JMS CMP_P1P7
     485/     170 : 1C 74               	JCN ZN, CMDL_ERROR
     486/     172 : 41 9E               	JUN CMDL_EXIT
     487/     174 :                     CMDL_ERROR:
     488/     174 : 58 18               	JMS DEC_REG16P0
     489/     176 : 5C 08               	JMS PRINTSTR_PM16REG16P0
     490/     178 : 20 BC               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     491/     17A : 5E 00               	JMS PRINTSTR_P0
     492/     17C : 40 2D               	JUN CMD_LOOP
     493/     17E :                     CMDL_READLOOP:
     494/     17E : AB                  	LD CNT_LO
     495/     17F : 1C 86               	JCN ZN, CMDL_CONTINUE
     496/     181 : AA                  	LD CNT_HI
     497/     182 : 1C 86               	JCN ZN, CMDL_CONTINUE
     498/     184 : 41 34               	JUN  CMDL_START		; continue to read next line
     499/     186 :                     CMDL_CONTINUE:
     500/     186 : 20 20               	FIM P0, REG16_MON_INDEX
     501/     188 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     502/     18A : 14 8E               	JCN Z, CMDL_L3
     503/     18C : 41 34               	JUN CMDL_START		; continue to read next line
     504/     18E :                     CMDL_L3:
     505/     18E : 20 24               	FIM P0, REG16_MON_ADDR
     506/     190 : 5B 81               	JMS LD_PM16REG16P0_P1
     507/     192 : 58 08               	JMS INC_REG16P0
     508/     194 : AB                  	LD CNT_LO
     509/     195 : F8                  	DAC
     510/     196 : BB                  	XCH CNT_LO
     511/     197 : 12 9C               	JCN C, CMDL_L5		; no borrow then skip
     512/     199 : AA                  	LD CNT_HI
     513/     19A : F8                  	DAC
     514/     19B : BA                  	XCH CNT_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/03/21 12:27:23


     515/     19C :                     CMDL_L5:
     516/     19C : 41 7E               	JUN CMDL_READLOOP
     517/     19E :                     CMDL_EXIT:
     518/     19E :                     	;; set memory space to logical
     519/     19E : 20 2C               	FIM P0, REG8_MON_MEMSPACE
     520/     1A0 : 22 4C               	FIM P1, 'L'
     521/     1A2 : 57 8A               	JMS LD_REG8P0_P1
     522/     1A4 : 40 2D               	JUN CMD_LOOP
     523/     1A6 :                     	
     524/     1A6 :                     ;;;---------------------------------------------------------------------------
     525/     1A6 :                     ;;; COMMAND_C
     526/     1A6 :                     ;;; Clear Program Memory
     527/     1A6 :                     ;;;---------------------------------------------------------------------------
     528/     1A6 :                     COMMAND_C:
     529/     1A6 : 2A F0               	FIM CNT, loops(1, 16)
     530/     1A8 :                     ;;;	FIM CNT, loops(16, 16)
     531/     1A8 :                     CMDPMC_BANKLOOP:
     532/     1A8 : (MACRO)              	LD_P1_CNT
     532/     1A8 : AA                                  LD CNT_HI
     532/     1A9 : B2                                  XCH P1_HI
     532/     1AA : AB                                  LD CNT_LO
     532/     1AB : B3                                  XCH P1_LO
     533/     1AC : 5B B9               	JMS PM_SELECTPMB_P1
     534/     1AE : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     535/     1B0 : 22 00               	FIM P1, 00H		; data to fill
     536/     1B2 :                     CMDPMC_L1:
     537/     1B2 : 5B A1               	JMS PM_WRITE_P0_P1
     538/     1B4 : 71 B2               	ISZ R1, CMDPMC_L1
     539/     1B6 : 70 B2               	ISZ R0, CMDPMC_L1
     540/     1B8 :                     
     541/     1B8 : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     542/     1BA : 7B A8               	ISZ CNT_J, CMDPMC_BANKLOOP
     543/     1BC : 7A A8               	ISZ CNT_I, CMDPMC_BANKLOOP
     544/     1BE :                     
     545/     1BE :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     546/     1BE :                     	
     547/     1BE : 40 2D               	JUN CMD_LOOP		; return to command loop
     548/     1C0 :                     
     549/     1C0 :                     ;;;	org 0200H
     550/     1C0 :                     ;;;---------------------------------------------------------------------------
     551/     1C0 :                     ;;; 8080 emulator main loop
     552/     1C0 :                     ;;;---------------------------------------------------------------------------
     553/     1C0 :                     COMMAND_E:
     554/     1C0 :                     EMU_START:
     555/     1C0 : 20 47               	FIM P0, lo(STR_EMU_MESSAGE)
     556/     1C2 : 5E 00               	JMS PRINTSTR_P0
     557/     1C4 :                     
     558/     1C4 :                     EMU_LOOP:
     559/     1C4 : =>FALSE              	if EMU_STEPMODE
     560/     1C4 :                     	JMS EMU_PRINTREGISTERS
     561/     1C4 :                     	JMS GETCHAR_P1
     562/     1C4 :                     	FIM P7, '.'
     563/     1C4 :                     	JMS CMP_P1P7
     564/     1C4 :                     	JCN Z, EMU_EXIT
     565/     1C4 : [559]                	endif			; EMU_STEPMODE
     566/     1C4 :                     	
     567/     1C4 : 51 CA               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     568/     1C6 :                     			; but it can return here by BBL from various routines
     569/     1C6 :                     			; in contrast JUN consumes 2 bytes
     570/     1C6 : 41 C4               	JUN EMU_LOOP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/03/21 12:27:23


     571/     1C8 :                     EMU_EXIT:
     572/     1C8 : 40 2D               	JUN CMD_LOOP
     573/     1CA :                     
     574/     1CA :                     ;;;---------------------------------------------------------------------------
     575/     1CA :                     ;;; EXEC_CODE
     576/     1CA :                     ;;;---------------------------------------------------------------------------
     577/     1CA :                     EXEC_CODE:
     578/     1CA : 20 14               	FIM P0, REG16_PC
     579/     1CC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     580/     1CE :                     
     581/     1CE : A2                  	LD P1_HI		;
     582/     1CF : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     583/     1D0 : 1A D4               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     584/     1D2 : 41 EA               	JUN CODE_80FF		; 80H<=CODE<=FFH
     585/     1D4 :                     
     586/     1D4 :                     ;;;---------------------------------------------------------------------------
     587/     1D4 :                     CODE_007F:			; 00H<=CODE<=7FH
     588/     1D4 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     589/     1D5 : 1A D9               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     590/     1D7 : 41 F3               	JUN CODE_407F		; 40H<=CODE<=7FH
     591/     1D9 :                     ;;;---------------------------------------------------------------------------
     592/     1D9 :                     CODE_003F:			; 00H<=CODE<=3FH
     593/     1D9 : A3                  	LD P1_LO
     594/     1DA : 1C E1               	JCN NZ,CODE_NOT_NOP
     595/     1DC : A2                  	LD P1_HI
     596/     1DD : 1C E1               	JCN NZ,CODE_NOT_NOP
     597/     1DF : 42 51               	JUN CODE_00H		; NOP
     598/     1E1 :                     CODE_NOT_NOP:
     599/     1E1 :                     CODE_C0FF:
     600/     1E1 :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     601/     1E1 :                     	; prepare for jump table
     602/     1E1 :                     	; P1=P1<<1 and jump to dispatch table
     603/     1E1 : A3                  	LD P1_LO
     604/     1E2 : F1                  	CLC
     605/     1E3 : F5                  	RAL
     606/     1E4 : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     607/     1E5 : A2                  	LD P1_HI
     608/     1E6 : F5                  	RAL
     609/     1E7 : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     610/     1E8 : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     611/     1EA :                     ;;;---------------------------------------------------------------------------
     612/     1EA :                     CODE_80FF:			; 80H<=P1<=FFH
     613/     1EA : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     614/     1EB : 1A F3               	JCN CN, CODE_80BF
     615/     1ED : 41 E1               	JUN CODE_C0FF		; C0H<=P1<=FFH
     616/     1EF :                     
     617/     1EF : 00                  	NOP
     618/     1F0 : 00                  	NOP
     619/     1F1 : 00                  	NOP
     620/     1F2 : 00                  	NOP
     621/     1F3 :                     ;;;---------------------------------------------------------------------------
     622/     1F3 :                     CODE_407F:			; 40H<=P1<=7FH
     623/     1F3 :                     CODE_80BF:			; 80H<=P1<=BFH
     624/     1F3 :                     ;;;---------------------------------------------------------------------------
     625/     1F3 :                     ;;; Common procedure for 40H<=CODE<=BFH
     626/     1F3 :                     ;;; save source value to REG(SRC)
     627/     1F3 :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     628/     1F3 :                     ;;; 8080 register code SSS
     629/     1F3 :                     ;;; 0 1 2 3 4 5 6 7
     630/     1F3 :                     ;;; B C D E H L M A
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/03/21 12:27:23


     631/     1F3 :                     ;;; ADDRESS=~(xxx)<<1
     632/     1F3 :                     ;;;---------------------------------------------------------------------------
     633/     1F3 : 5B 12               	JMS PUSH_P1
     634/     1F5 :                     	;; set source register address to P1
     635/     1F5 : F0                  	CLB
     636/     1F6 : B2                  	XCH P1_HI		; P1_HI=0000
     637/     1F7 : A3                  	LD P1_LO
     638/     1F8 : F4                  	CMA
     639/     1F9 : F1                  	CLC
     640/     1FA : F5                  	RAL
     641/     1FB : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     642/     1FC :                     
     643/     1FC : A3                  	LD P1_LO
     644/     1FD :                     
     645/     1FD : D2                   	LDM REG8_M		; check if SRCREG==M or not
     646/     1FE : F1                  	CLC
     647/     1FF : 93                  	SUB P1_LO
     648/     200 : 14 06               	JCN Z, GETSRC_LOAD_M
     649/     202 :                     
     650/     202 : 57 B0               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     651/     204 : 42 0C                       JUN GETSRC_SAVE_SRCVALUE
     652/     206 :                     
     653/     206 :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     654/     206 : 20 04               	FIM P0, REG16_HL
     655/     208 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     656/     20A : 58 18               	JMS DEC_REG16P0
     657/     20C :                     
     658/     20C :                     GETSRC_SAVE_SRCVALUE:
     659/     20C :                     	;; set source register value to P1
     660/     20C : 20 12               	FIM P0, REG8_SRC
     661/     20E : 57 8A               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     662/     210 :                     
     663/     210 : 5B 43               	JMS POP_P1
     664/     212 : A2                  	LD P1_HI
     665/     213 : F5                  	RAL
     666/     214 : 1A 18               	JCN CN, CODE_407F_MOV	; execute MOV
     667/     216 : 42 40               	JUN CODE_80BF_ARITH_LOGIC
     668/     218 :                     
     669/     218 :                     ;;;---------------------------------------------------------------------------
     670/     218 :                     ;;; Execute MOV code
     671/     218 :                     ;;; source value is already stored to REG8(SRC)
     672/     218 :                     ;;;---------------------------------------------------------------------------
     673/     218 :                     CODE_407F_MOV:
     674/     218 : 2E 76               	FIM P7, 76H		; check HLT
     675/     21A : 5D 20               	JMS CMP_P1P7
     676/     21C : 1C 20               	JCN ZN, CODE_MOV_L1
     677/     21E : 42 4F               	JUN CODE_76H		; HLT
     678/     220 :                     
     679/     220 :                     CODE_MOV_L1:
     680/     220 :                     	;; set destination REGISTER address to P2
     681/     220 : 24 00               	FIM P2, 00H
     682/     222 : A2                  	LD P1_HI
     683/     223 : F5                  	RAL
     684/     224 : F5                  	RAL
     685/     225 : F1                  	CLC
     686/     226 : F6                  	RAR
     687/     227 : F6                  	RAR
     688/     228 : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     689/     229 : A3                  	LD P1_LO
     690/     22A : F5                  	RAL			; CY=bit(3)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/03/21 12:27:23


     691/     22B : A5                  	LD P2_LO
     692/     22C : F5                  	RAL
     693/     22D : F4                  	CMA
     694/     22E : F5                  	RAL
     695/     22F : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     696/     230 :                     
     697/     230 : 22 12               	FIM P1, REG8_SRC
     698/     232 : 57 B0               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     699/     234 :                     
     700/     234 :                     				; write SRC value to DST
     701/     234 : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     702/     235 : F1                  	CLC
     703/     236 : 95                  	SUB P2_LO		; check DST(P2) is M or not
     704/     237 : 14 3C               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     705/     239 :                     
     706/     239 : 57 96               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     707/     23B : C0                  	BBL 0
     708/     23C :                     
     709/     23C :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
     710/     23C : 20 04               	FIM P0, REG16_HL
     711/     23E : 4B 81               	JUN LD_PM16REG16P0_P1
     712/     240 :                     ;;; 	BBL 0
     713/     240 :                     
     714/     240 :                     
     715/     240 :                     ;;;---------------------------------------------------------------------------
     716/     240 :                     CODE_80BF_ARITH_LOGIC:
     717/     240 :                     	; prepare P2 for jump table
     718/     240 :                     	; P2=0F0H + CODE.bit(543)0
     719/     240 : 24 F0               	FIM P2, 0F0H		; P2=0F0H
     720/     242 : A3                  	LD P1_LO		; ACC=CODE(3210)
     721/     243 : F5                  	RAL			; CY=CODE.bit(3)
     722/     244 : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     723/     245 : F5                  	RAL			; ACC=CODE.bit(6543)
     724/     246 : F1                  	CLC			; CY=0
     725/     247 : F5                  	RAL			; ACC=CODE.bit(543).0
     726/     248 : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     727/     249 :                     
     728/     249 : 2E 12               	FIM P7, REG8_SRC
     729/     24B : 57 A2               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     730/     24D :                     
     731/     24D : 49 EF               	JUN JIN_P2_CODE_80BF
     732/     24F :                     
     733/     24F :                     ;;;---------------------------------------------------------------------------
     734/     24F :                     ;;; Emulate individual codes
     735/     24F :                     ;;;---------------------------------------------------------------------------
     736/     24F :                     CODE_76H:			; HLT
     737/     24F : =>FALSE              	if (EMU_STEPMODE != 0)
     738/     24F :                     	FIM P0, lo(STR
     739/     24F :                     	JMS PRINTSTR_P0
     740/     24F :                     	JMS EMU_PRINTREGISTERS
     741/     24F : [737]                	endif
     742/     24F : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     743/     251 :                     
     744/     251 :                     CODE_00H:			; NOP
     745/     251 : C0                  	BBL 0
     746/     252 :                     
     747/     252 :                     CODE_01H:			; LXI B,B3B2
     748/     252 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     749/     254 : 24 0C               	FIM P2, REG8_C
     750/     256 : 57 96               	JMS LD_REG8P2_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/03/21 12:27:23


     751/     258 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     752/     25A : 24 0E               	FIM P2, REG8_B
     753/     25C : 47 96               	JUN LD_REG8P2_P1
     754/     25E :                     
     755/     25E :                     CODE_02H:			; STAX B
     756/     25E : 2E 00               	FIM P7, REG8_A
     757/     260 : 57 A2               	JMS LD_P1_REG8P7
     758/     262 : 20 0C               	FIM P0, REG16_BC
     759/     264 : 4B 81               	JUN LD_PM16REG16P0_P1
     760/     266 :                     
     761/     266 :                     CODE_03H:			; INX B
     762/     266 : 20 0C               	FIM P0, REG16_BC
     763/     268 : 48 08               	JUN INC_REG16P0
     764/     26A :                     
     765/     26A :                     CODE_04H:			; INR B
     766/     26A : 22 0E               	FIM P1, REG8_B
     767/     26C : 44 11               	JUN CODE_INR
     768/     26E :                     	
     769/     26E :                     CODE_05H:			; DCR B
     770/     26E : 22 0E               	FIM P1, REG8_B
     771/     270 : 44 17               	JUN CODE_DCR
     772/     272 :                     
     773/     272 :                     CODE_06H:			; MVI B,B2
     774/     272 : 24 0E               	FIM P2, REG8_B
     775/     274 : 44 1D               	JUN CODE_MVI
     776/     276 :                     ;;; 	BBL 0
     777/     276 :                     
     778/     276 :                     CODE_07H:			; RLC
     779/     276 : 20 00               	FIM P0, REG8_A
     780/     278 : 57 AA               	JMS LD_P1_REG8P0
     781/     27A : A2                  	LD P1_HI
     782/     27B : F5                  	RAL			; CY=bit(7)
     783/     27C : A3                  	LD P1_LO
     784/     27D : F5                  	RAL
     785/     27E : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     786/     27F : A2                  	LD P1_HI
     787/     280 : F5                  	RAL
     788/     281 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     789/     282 : 56 24               	JMS SETFLAG_C_CY
     790/     284 : 47 8A               	JUN LD_REG8P0_P1
     791/     286 :                     ;;;	BBL 0
     792/     286 :                     
     793/     286 :                     CODE_08H:			; ...
     794/     286 : C0                  	BBL 0
     795/     287 :                     	
     796/     287 :                     CODE_09H:			; DAD B
     797/     287 : (MACRO)              	SETFLAG_SUB_0
     797/     287 : =>FALSE                      if EMU_USE_DAA
     797/     287 :                             JMS DAA_SETFLAG_SUB_0
     797/     287 : [797]                        endif
     798/     287 : 20 04               	FIM P0, REG16_HL
     799/     289 : 22 0C               	FIM P1, REG16_BC
     800/     28B : 58 4D               	JMS ADD_REG16P0_REG16P1
     801/     28D : 46 24               	JUN SETFLAG_C_CY
     802/     28F :                     ;;; 	BBL 0
     803/     28F :                     
     804/     28F :                     CODE_0AH:			; LDAX B
     805/     28F : 20 0C               	FIM P0, REG16_BC
     806/     291 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     807/     293 : 58 18               	JMS DEC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/03/21 12:27:23


     808/     295 :                     	
     809/     295 : 24 00               	FIM P2, REG8_A
     810/     297 : 47 96               	JUN LD_REG8P2_P1
     811/     299 :                     ;;; 	BBL 0
     812/     299 :                     
     813/     299 :                     CODE_0BH:			; DCX B
     814/     299 : 20 0C               	FIM P0, REG16_BC
     815/     29B : 48 18               	JUN DEC_REG16P0
     816/     29D :                     ;;; 	BBL 0
     817/     29D :                     	
     818/     29D :                     CODE_0CH:			; INR C
     819/     29D : 22 0C               	FIM P1, REG8_C
     820/     29F : 44 11               	JUN CODE_INR
     821/     2A1 :                     ;;; 	BBL 0
     822/     2A1 :                     
     823/     2A1 :                     CODE_0DH:			; DCR C
     824/     2A1 : 22 0C               	FIM P1, REG8_C
     825/     2A3 : 44 17               	JUN CODE_DCR
     826/     2A5 :                     ;;; 	BBL 0
     827/     2A5 :                     
     828/     2A5 :                     CODE_0EH:			; MVI C,B2
     829/     2A5 : 24 0C               	FIM P2, REG8_C
     830/     2A7 : 44 1D               	JUN CODE_MVI
     831/     2A9 :                     ;;; 	BBL 0
     832/     2A9 :                     
     833/     2A9 :                     CODE_0FH:			; RRC
     834/     2A9 : 20 00               	FIM P0, REG8_A
     835/     2AB : 57 AA               	JMS LD_P1_REG8P0
     836/     2AD : A3                  	LD P1_LO
     837/     2AE : F6                  	RAR			; CY=bit(0)
     838/     2AF : A2                  	LD P1_HI
     839/     2B0 : F6                  	RAR
     840/     2B1 : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     841/     2B2 : A3                  	LD P1_LO
     842/     2B3 : F6                  	RAR
     843/     2B4 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     844/     2B5 : 56 24               	JMS SETFLAG_C_CY
     845/     2B7 : 47 8A               	JUN LD_REG8P0_P1
     846/     2B9 :                     ;;; 	BBL 0
     847/     2B9 :                     
     848/     2B9 :                     CODE_10H:			; ...
     849/     2B9 : C0                  	BBL 0
     850/     2BA :                     
     851/     2BA :                     CODE_11H:			; LXI D,B3B2
     852/     2BA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     853/     2BC : 24 08               	FIM P2, REG8_E
     854/     2BE : 57 96               	JMS LD_REG8P2_P1
     855/     2C0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     856/     2C2 : 24 0A               	FIM P2, REG8_D
     857/     2C4 : 47 96               	JUN LD_REG8P2_P1
     858/     2C6 :                     
     859/     2C6 :                     CODE_12H:			; STAX D
     860/     2C6 : 2E 00               	FIM P7, REG8_A
     861/     2C8 : 57 A2               	JMS LD_P1_REG8P7
     862/     2CA : 20 08               	FIM P0, REG16_DE
     863/     2CC : 4B 81               	JUN LD_PM16REG16P0_P1
     864/     2CE :                     	
     865/     2CE :                     CODE_13H:			; INX D
     866/     2CE : 20 08               	FIM P0, REG16_DE
     867/     2D0 : 48 08               	JUN INC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/03/21 12:27:23


     868/     2D2 :                     
     869/     2D2 :                     CODE_14H:			; INR D
     870/     2D2 : 22 0A               	FIM P1, REG8_D
     871/     2D4 : 44 11               	JUN CODE_INR
     872/     2D6 :                     
     873/     2D6 :                     CODE_15H:			; DCR D
     874/     2D6 : 22 0A               	FIM P1, REG8_D
     875/     2D8 : 44 17               	JUN CODE_DCR
     876/     2DA :                     ;;; 	BBL 0
     877/     2DA :                     
     878/     2DA :                     CODE_16H:			; MVI D,B2
     879/     2DA : 24 0A               	FIM P2, REG8_D
     880/     2DC : 44 1D               	JUN CODE_MVI
     881/     2DE :                     ;;; 	BBL 0
     882/     2DE :                     
     883/     2DE :                     CODE_17H:			; RAL
     884/     2DE : 20 00               	FIM P0, REG8_A
     885/     2E0 : 57 AA               	JMS LD_P1_REG8P0	; P1=ACC
     886/     2E2 : 56 1A               	JMS GETFLAG_C		; CY=FLAG_C
     887/     2E4 :                     ;;; 	RAR			; can be omitted because CY is already C
     888/     2E4 : A3                  	LD P1_LO
     889/     2E5 : F5                  	RAL
     890/     2E6 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     891/     2E7 : A2                  	LD P1_HI
     892/     2E8 : F5                  	RAL
     893/     2E9 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     894/     2EA : 56 24               	JMS SETFLAG_C_CY
     895/     2EC : 47 8A               	JUN LD_REG8P0_P1
     896/     2EE :                     ;;;	BBL 0
     897/     2EE :                     	
     898/     2EE :                     CODE_18H:			; ...
     899/     2EE : C0                  	BBL 0
     900/     2EF :                     
     901/     2EF :                     CODE_19H:			; DAD D
     902/     2EF : (MACRO)              	SETFLAG_SUB_0
     902/     2EF : =>FALSE                      if EMU_USE_DAA
     902/     2EF :                             JMS DAA_SETFLAG_SUB_0
     902/     2EF : [902]                        endif
     903/     2EF : 20 04               	FIM P0, REG16_HL
     904/     2F1 : 22 08               	FIM P1, REG16_DE
     905/     2F3 : 58 4D               	JMS ADD_REG16P0_REG16P1
     906/     2F5 : 46 24               	JUN SETFLAG_C_CY
     907/     2F7 :                     ;;;	BBL 0
     908/     2F7 :                     	
     909/     2F7 :                     CODE_1AH:			; LDAX D
     910/     2F7 : 20 08               	FIM P0, REG16_DE
     911/     2F9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     912/     2FB : 58 18               	JMS DEC_REG16P0
     913/     2FD :                     	
     914/     2FD : 24 00               	FIM P2, REG8_A
     915/     2FF : 47 96               	JUN LD_REG8P2_P1
     916/     301 :                     ;;;	BBL 0
     917/     301 :                     
     918/     301 :                     CODE_1BH:			; DCX D
     919/     301 : 20 08               	FIM P0, REG16_DE
     920/     303 : 48 18               	JUN DEC_REG16P0
     921/     305 :                     ;;;	BBL 0
     922/     305 :                     
     923/     305 :                     CODE_1CH:			; INR E
     924/     305 : 22 08               	FIM P1, REG8_E
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/03/21 12:27:23


     925/     307 : 44 11               	JUN CODE_INR
     926/     309 :                     ;;;	BBL 0
     927/     309 :                     
     928/     309 :                     CODE_1DH:			; DCR E
     929/     309 : 22 08               	FIM P1, REG8_E
     930/     30B : 44 17               	JUN CODE_DCR
     931/     30D :                     ;;;	BBL 0
     932/     30D :                     
     933/     30D :                     CODE_1EH:			; MVI E,B2
     934/     30D : 24 08               	FIM P2, REG8_E
     935/     30F : 44 1D               	JUN CODE_MVI
     936/     311 :                     ;;;	BBL 0
     937/     311 :                     
     938/     311 :                     CODE_1FH:			; RAR
     939/     311 : 20 00               	FIM P0, REG8_A
     940/     313 : 57 AA               	JMS LD_P1_REG8P0	; P1=ACC
     941/     315 : 56 1A               	JMS GETFLAG_C		; CY=FLAG_C
     942/     317 :                     ;;; 	RAR			; can be omitted because CY is already C
     943/     317 : A2                  	LD P1_HI
     944/     318 : F6                  	RAR
     945/     319 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
     946/     31A : A3                  	LD P1_LO
     947/     31B : F6                  	RAR
     948/     31C : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     949/     31D : 56 24               	JMS SETFLAG_C_CY
     950/     31F : 47 8A               	JUN LD_REG8P0_P1
     951/     321 :                     ;;;	BBL 0
     952/     321 :                     
     953/     321 :                     CODE_20H:			; ...
     954/     321 : C0                  	BBL 0
     955/     322 :                     
     956/     322 :                     CODE_21H:			; LXI H,B3B2
     957/     322 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     958/     324 : 24 04               	FIM P2, REG8_L
     959/     326 : 57 96               	JMS LD_REG8P2_P1
     960/     328 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     961/     32A : 24 06               	FIM P2, REG8_H
     962/     32C : 47 96               	JUN LD_REG8P2_P1
     963/     32E :                     ;;;	BBL 0
     964/     32E :                     
     965/     32E :                     CODE_22H:			; SHLD,B3B2
     966/     32E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     967/     330 : 24 1C               	FIM P2, REG8_ADDRL
     968/     332 : 57 96               	JMS LD_REG8P2_P1
     969/     334 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     970/     336 : 24 1E               	FIM P2, REG8_ADDRH
     971/     338 : 57 96               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
     972/     33A :                     
     973/     33A : 2E 04               	FIM P7, REG8_L
     974/     33C : 57 A2               	JMS LD_P1_REG8P7
     975/     33E : 20 1C               	FIM P0, REG16_ADDR
     976/     340 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
     977/     342 : 58 08               	JMS INC_REG16P0		; REG(ADDR)++
     978/     344 :                     	
     979/     344 : 2E 06               	FIM P7, REG8_H
     980/     346 : 57 A2               	JMS LD_P1_REG8P7
     981/     348 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
     982/     34A : 48 08               	JUN INC_REG16P0		; REG(ADDR)++ and return
     983/     34C :                     ;;;	BBL 0
     984/     34C :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/03/21 12:27:23


     985/     34C :                     	
     986/     34C :                     CODE_23H:			; INX H
     987/     34C : 20 04               	FIM P0, REG16_HL
     988/     34E : 48 08               	JUN INC_REG16P0
     989/     350 :                     ;;;	BBL 0
     990/     350 :                     
     991/     350 :                     CODE_24H:			; INR H
     992/     350 : 22 06               	FIM P1, REG8_H
     993/     352 : 44 11               	JUN CODE_INR
     994/     354 :                     ;;;	BBL 0
     995/     354 :                     
     996/     354 :                     CODE_25H:			; DCR H
     997/     354 : 22 06               	FIM P1, REG8_H
     998/     356 : 44 17               	JUN CODE_DCR
     999/     358 :                     ;;;	BBL 0
    1000/     358 :                     
    1001/     358 :                     CODE_26H:			; MVI H,B2
    1002/     358 : 24 06               	FIM P2, REG8_H
    1003/     35A : 44 1D               	JUN CODE_MVI
    1004/     35C :                     ;;;	BBL 0
    1005/     35C :                     
    1006/     35C :                     CODE_27H:			; DAA
    1007/     35C :                     				; This is not properly implemeted
    1008/     35C :                     				; due to the lack of CY4 flag
    1009/     35C : 20 00               	FIM P0, REG8_A
    1010/     35E : 57 AA               	JMS LD_P1_REG8P0
    1011/     360 : A3                  	LD P1_LO
    1012/     361 : FB                  	DAA
    1013/     362 : B3                  	XCH P1_LO
    1014/     363 : D0                  	LDM 0
    1015/     364 : 82                  	ADD P1_HI
    1016/     365 : B2                  	XCH P1_HI
    1017/     366 : FB                  	DAA
    1018/     367 : B2                  	XCH P1_HI
    1019/     368 :                     	
    1020/     368 : 47 8A               	JUN LD_REG8P0_P1
    1021/     36A :                     ;;;	BBL 0
    1022/     36A :                     
    1023/     36A :                     CODE_28H:			; ...
    1024/     36A : C0                  	BBL 0
    1025/     36B :                     
    1026/     36B :                     CODE_29H:			; DAD H
    1027/     36B : (MACRO)              	SETFLAG_SUB_0
    1027/     36B : =>FALSE                      if EMU_USE_DAA
    1027/     36B :                             JMS DAA_SETFLAG_SUB_0
    1027/     36B : [1027]                       endif
    1028/     36B : 20 04               	FIM P0, REG16_HL
    1029/     36D : 22 04               	FIM P1, REG16_HL
    1030/     36F : 58 4D               	JMS ADD_REG16P0_REG16P1
    1031/     371 : 46 24               	JUN SETFLAG_C_CY
    1032/     373 :                     ;;;	BBL 0
    1033/     373 :                     
    1034/     373 :                     CODE_2AH:			; LHLD,B3B2
    1035/     373 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1036/     375 : 24 1C               	FIM P2, REG8_ADDRL
    1037/     377 : 57 96               	JMS LD_REG8P2_P1
    1038/     379 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1039/     37B : 24 1E               	FIM P2, REG8_ADDRH
    1040/     37D : 57 96               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1041/     37F :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/03/21 12:27:23


    1042/     37F : 20 1C               	FIM P0, REG16_ADDR
    1043/     381 : 24 04               	FIM P2, REG8_L
    1044/     383 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1045/     385 : 57 96               	JMS LD_REG8P2_P1
    1046/     387 :                     
    1047/     387 : 24 06               	FIM P2, REG8_H
    1048/     389 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1049/     38B : 47 96               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1050/     38D :                     ;;;	BBL 0
    1051/     38D :                     
    1052/     38D :                     CODE_2BH:			; DCX H
    1053/     38D : 20 04               	FIM P0, REG16_HL
    1054/     38F : 48 18               	JUN DEC_REG16P0
    1055/     391 :                     ;;;	BBL 0
    1056/     391 :                     
    1057/     391 :                     CODE_2CH:			; INR L
    1058/     391 : 22 04               	FIM P1, REG8_L
    1059/     393 : 44 11               	JUN CODE_INR
    1060/     395 :                     ;;;	BBL 0
    1061/     395 :                     
    1062/     395 :                     CODE_2DH:			; DCR L
    1063/     395 : 22 04               	FIM P1, REG8_L
    1064/     397 : 44 17               	JUN CODE_DCR
    1065/     399 :                     ;;;	BBL 0
    1066/     399 :                     
    1067/     399 :                     CODE_2EH:			; MVI L,B2
    1068/     399 : 24 04               	FIM P2, REG8_L
    1069/     39B : 44 1D               	JUN CODE_MVI
    1070/     39D :                     ;;;	BBL 0
    1071/     39D :                     
    1072/     39D :                     CODE_2FH:			; CMA
    1073/     39D : 20 00               	FIM P0, REG8_A		; A=~A
    1074/     39F : 57 AA               	JMS LD_P1_REG8P0
    1075/     3A1 : A3                  	LD P1_LO
    1076/     3A2 : F4                  	CMA
    1077/     3A3 : B3                  	XCH P1_LO
    1078/     3A4 :                     
    1079/     3A4 : A2                  	LD P1_HI
    1080/     3A5 : F4                  	CMA
    1081/     3A6 : B2                  	XCH P1_HI
    1082/     3A7 : 47 8A               	JUN LD_REG8P0_P1
    1083/     3A9 :                     ;;;	BBL 0
    1084/     3A9 :                     	
    1085/     3A9 :                     CODE_30H:			; ...
    1086/     3A9 : C0                  	BBL 0
    1087/     3AA :                     
    1088/     3AA :                     CODE_31H:			; LXI SP, B3B2
    1089/     3AA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1090/     3AC : 24 18               	FIM P2, REG8_SPL
    1091/     3AE : 57 96               	JMS LD_REG8P2_P1
    1092/     3B0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1093/     3B2 : 24 1A               	FIM P2, REG8_SPH
    1094/     3B4 : 47 96               	JUN LD_REG8P2_P1
    1095/     3B6 :                     ;;;	BBL 0
    1096/     3B6 :                     
    1097/     3B6 :                     CODE_32H:			; STA B3B2
    1098/     3B6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1099/     3B8 : 24 1C               	FIM P2, REG8_ADDRL
    1100/     3BA : 57 96               	JMS LD_REG8P2_P1
    1101/     3BC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/03/21 12:27:23


    1102/     3BE : 24 1E               	FIM P2, REG8_ADDRH
    1103/     3C0 : 57 96               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1104/     3C2 :                     
    1105/     3C2 : 2E 00               	FIM P7, REG8_A
    1106/     3C4 : 57 A2               	JMS LD_P1_REG8P7	; P1=A
    1107/     3C6 : 20 1C               	FIM P0, REG16_ADDR
    1108/     3C8 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1109/     3CA :                     ;;;	BBL 0
    1110/     3CA :                     	
    1111/     3CA :                     CODE_33H:			; INX SP
    1112/     3CA : 20 18               	FIM P0, REG16_SP
    1113/     3CC : 48 08               	JUN INC_REG16P0
    1114/     3CE :                     ;;;	BBL 0
    1115/     3CE :                     
    1116/     3CE :                     CODE_34H:			; INR M
    1117/     3CE : (MACRO)              	SETFLAG_SUB_0
    1117/     3CE : =>FALSE                      if EMU_USE_DAA
    1117/     3CE :                             JMS DAA_SETFLAG_SUB_0
    1117/     3CE : [1117]                       endif
    1118/     3CE : 20 04               	FIM P0, REG16_HL
    1119/     3D0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1120/     3D2 : 58 18               	JMS DEC_REG16P0
    1121/     3D4 :                     	
    1122/     3D4 : 5C BD               	JMS INC_P1
    1123/     3D6 : 5B 81               	JMS LD_PM16REG16P0_P1
    1124/     3D8 :                     
    1125/     3D8 : 46 3E               	JUN SETFLAG_ZSP_P1
    1126/     3DA :                     ;;;	BBL 0
    1127/     3DA :                     
    1128/     3DA :                     CODE_35H:			; DCR M
    1129/     3DA : (MACRO)              	SETFLAG_SUB_1
    1129/     3DA : =>FALSE                      if EMU_USE_DAA
    1129/     3DA :                             JMS DAA_SETFLAG_SUB_1
    1129/     3DA : [1129]                       endif
    1130/     3DA : 20 04               	FIM P0, REG16_HL
    1131/     3DC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1132/     3DE : 58 18               	JMS DEC_REG16P0
    1133/     3E0 :                     	
    1134/     3E0 : 5C C3               	JMS DEC_P1
    1135/     3E2 : 5B 81               	JMS LD_PM16REG16P0_P1
    1136/     3E4 :                     
    1137/     3E4 : 46 3E               	JUN SETFLAG_ZSP_P1
    1138/     3E6 :                     ;;;	BBL 0
    1139/     3E6 :                     	
    1140/     3E6 :                     CODE_36H:			; MVI M, B2
    1141/     3E6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1142/     3E8 : 20 04               	FIM P0, REG16_HL
    1143/     3EA : 4B 81               	JUN LD_PM16REG16P0_P1
    1144/     3EC :                     ;;;	BBL 0
    1145/     3EC :                     	
    1146/     3EC :                     CODE_37H:			; STC
    1147/     3EC : 46 2F               	JUN SETFLAG_C_1
    1148/     3EE :                     ;;;	BBL 0
    1149/     3EE :                     
    1150/     3EE :                     CODE_38H:			; ...
    1151/     3EE : C0                  	BBL 0
    1152/     3EF :                     
    1153/     3EF :                     CODE_39H:			; DAD SP
    1154/     3EF : (MACRO)              	SETFLAG_SUB_0
    1154/     3EF : =>FALSE                      if EMU_USE_DAA
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/03/21 12:27:23


    1154/     3EF :                             JMS DAA_SETFLAG_SUB_0
    1154/     3EF : [1154]                       endif
    1155/     3EF : 20 04               	FIM P0, REG16_HL
    1156/     3F1 : 22 18               	FIM P1, REG16_SP
    1157/     3F3 : 58 4D               	JMS ADD_REG16P0_REG16P1
    1158/     3F5 : 46 24               	JUN SETFLAG_C_CY
    1159/     3F7 :                     ;;;	BBL 0
    1160/     3F7 :                     
    1161/     3F7 :                     CODE_3AH:			; LDA B2B3
    1162/     3F7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1163/     3F9 : 24 1C               	FIM P2, REG8_ADDRL
    1164/     3FB : 57 96               	JMS LD_REG8P2_P1
    1165/     3FD : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1166/     3FF : 24 1E               	FIM P2, REG8_ADDRH
    1167/     401 : 57 96               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1168/     403 :                     
    1169/     403 : 20 1C               	FIM P0, REG16_ADDR
    1170/     405 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1171/     407 : 24 00               	FIM P2, REG8_A
    1172/     409 : 47 96               	JUN LD_REG8P2_P1	; P1=A and return
    1173/     40B :                     ;;;	BBL 0
    1174/     40B :                     
    1175/     40B :                     CODE_3BH:			; DCX SP
    1176/     40B : 20 18               	FIM P0, REG16_SP
    1177/     40D : 48 18               	JUN DEC_REG16P0
    1178/     40F :                     ;;;	BBL 0
    1179/     40F :                     
    1180/     40F :                     CODE_3CH:			; INR A
    1181/     40F : 22 00               	FIM P1, REG8_A
    1182/     411 :                     CODE_INR:
    1183/     411 : (MACRO)              	SETFLAG_SUB_0
    1183/     411 : =>FALSE                      if EMU_USE_DAA
    1183/     411 :                             JMS DAA_SETFLAG_SUB_0
    1183/     411 : [1183]                       endif
    1184/     411 : 57 46               	JMS INC_REG8P1
    1185/     413 : 46 3C               	JUN SETFLAG_ZSP_REG8P1
    1186/     415 :                     ;;;	BBL 0
    1187/     415 :                     
    1188/     415 :                     CODE_3DH:			; DCR A
    1189/     415 : 22 00               	FIM P1, REG8_A
    1190/     417 :                     CODE_DCR:
    1191/     417 : (MACRO)              	SETFLAG_SUB_1
    1191/     417 : =>FALSE                      if EMU_USE_DAA
    1191/     417 :                             JMS DAA_SETFLAG_SUB_1
    1191/     417 : [1191]                       endif
    1192/     417 : 57 67               	JMS DEC_REG8P1
    1193/     419 : 46 3C               	JUN SETFLAG_ZSP_REG8P1
    1194/     41B :                     ;;;	BBL 0
    1195/     41B :                     
    1196/     41B :                     CODE_3EH:			; MVI A,B2
    1197/     41B : 24 00               	FIM P2, REG8_A
    1198/     41D :                     CODE_MVI:
    1199/     41D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1200/     41F : 47 96               	JUN LD_REG8P2_P1
    1201/     421 :                     ;;;	BBL 0
    1202/     421 :                     
    1203/     421 :                     CODE_3FH:			; CMC
    1204/     421 : 56 1A               	JMS GETFLAG_C
    1205/     423 :                     ;;; 	RAR			; can be omitted because CY is already C
    1206/     423 : F3                  	CMC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/03/21 12:27:23


    1207/     424 : 46 24               	JUN SETFLAG_C_CY
    1208/     426 :                     ;;;	BBL 0
    1209/     426 :                     
    1210/     426 :                     CODE_C0H:			; RNZ
    1211/     426 : 56 07               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1212/     428 : 44 6D               	JUN RET_IF0		; return if Z flag == 0
    1213/     42A :                     	;;;	BBL 0
    1214/     42A :                     
    1215/     42A :                     CODE_C1H:			; POP B
    1216/     42A : 24 0E               	FIM P2, REG8_B
    1217/     42C : 26 0C               	FIM P3, REG8_C
    1218/     42E : 45 A0               	JUN CODE_POP_REG8P2P3
    1219/     430 :                     ;;;	BBL 0
    1220/     430 :                     
    1221/     430 :                     CODE_C2H:			; JNZ
    1222/     430 : 56 07               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1223/     432 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1224/     432 :                     ;;; this jump can be omitted
    1225/     432 :                     JMP_IF0:
    1226/     432 : 14 40               	JCN Z, CODE_JMP
    1227/     434 : 58 08               	JMS INC_REG16P0		; PC+=2
    1228/     436 : 58 08               	JMS INC_REG16P0
    1229/     438 : C0                  	BBL 0
    1230/     439 :                     JMP_IF1:
    1231/     439 : 1C 40               	JCN ZN, CODE_JMP
    1232/     43B : 58 08               	JMS INC_REG16P0		; PC+=2
    1233/     43D : 58 08               	JMS INC_REG16P0
    1234/     43F : C0                  	BBL 0
    1235/     440 :                     
    1236/     440 :                     CODE_C3H:			; JMP B3B2
    1237/     440 :                     CODE_JMP:
    1238/     440 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1239/     442 : (MACRO)              	LD_P3_P1
    1239/     442 : A2                                  LD P1_HI
    1239/     443 : B6                                  XCH P3_HI
    1239/     444 : A3                                  LD P1_LO
    1239/     445 : B7                                  XCH P3_LO
    1240/     446 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1241/     448 : (MACRO)              	LD_P2_P1
    1241/     448 : A2                                  LD P1_HI
    1241/     449 : B4                                  XCH P2_HI
    1241/     44A : A3                                  LD P1_LO
    1241/     44B : B5                                  XCH P2_LO
    1242/     44C :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1243/     44C : 47 2F               	JUN LD_REG16P0_P2P3
    1244/     44E :                     ;;;	BBL 0
    1245/     44E :                     
    1246/     44E :                     CODE_C4H:			; CNZ
    1247/     44E : 56 07               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1248/     450 : 44 84               	JUN CALL_IF0		; call if Z==0
    1249/     452 :                     ;;;	BBL 0
    1250/     452 :                     
    1251/     452 :                     CODE_C5H:			; PUSH B
    1252/     452 : 24 0E               	FIM P2, REG8_B
    1253/     454 : 26 0C               	FIM P3, REG8_C
    1254/     456 : 45 B7               	JUN CODE_PUSH_REG8P2P3
    1255/     458 :                     ;;;	BBL 0
    1256/     458 :                     
    1257/     458 :                     CODE_C6H:			; ADI B2
    1258/     458 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/03/21 12:27:23


    1259/     45A :                     ADI_P1:
    1260/     45A : (MACRO)              	SETFLAG_SUB_0
    1260/     45A : =>FALSE                      if EMU_USE_DAA
    1260/     45A :                             JMS DAA_SETFLAG_SUB_0
    1260/     45A : [1260]                       endif
    1261/     45A : 20 00               	FIM P0, REG8_A
    1262/     45C : 57 35               	JMS ADD_REG8P0_P1
    1263/     45E : 56 24               	JMS SETFLAG_C_CY
    1264/     460 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1265/     462 :                     ;;;	BBL 0
    1266/     462 :                     	
    1267/     462 :                     CODE_C7H:			; RST 0
    1268/     462 : 24 00               	FIM P2, up(0<<3)
    1269/     464 : 26 00               	FIM P3, lo(0<<3)
    1270/     466 : 44 97               	JUN CALL_P2P3
    1271/     468 :                     ;;;	BBL 0
    1272/     468 :                     	
    1273/     468 :                     CODE_C8H:			; RZ
    1274/     468 : 56 07               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1275/     46A :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1276/     46A :                     ;;; this jump can be omitted
    1277/     46A :                     RET_IF1:
    1278/     46A : 1C 70               	JCN ZN, CODE_RET
    1279/     46C : C0                  	BBL 0
    1280/     46D :                     RET_IF0:
    1281/     46D : 14 70               	JCN Z, CODE_RET
    1282/     46F : C0                  	BBL 0
    1283/     470 :                     CODE_C9H:			; RET
    1284/     470 :                     CODE_RET:	
    1285/     470 : 24 16               	FIM P2, REG8_PCH
    1286/     472 : 26 14               	FIM P3, REG8_PCL
    1287/     474 : 45 A0               	JUN CODE_POP_REG8P2P3
    1288/     476 :                     ;;;	BBL 0
    1289/     476 :                     	
    1290/     476 :                     CODE_CAH:			; JZ
    1291/     476 : 56 07               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1292/     478 : 44 39               	JUN JMP_IF1		; jump if Z==1
    1293/     47A :                     ;;;	BBL 0
    1294/     47A :                     
    1295/     47A :                     CODE_CBH:			; ...
    1296/     47A : C0                  	BBL 0
    1297/     47B :                     
    1298/     47B :                     CODE_CCH:			; CZ
    1299/     47B : 56 07               	JMS GETFLAG_Z
    1300/     47D :                     CALL_IF1:
    1301/     47D : 1C 8B               	JCN ZN, CODE_CALL
    1302/     47F : 58 08               	JMS INC_REG16P0		; PC+=2
    1303/     481 : 58 08               	JMS INC_REG16P0
    1304/     483 : C0                  	BBL 0
    1305/     484 :                     CALL_IF0:	
    1306/     484 : 14 8B               	JCN Z, CODE_CALL
    1307/     486 : 58 08               	JMS INC_REG16P0		; PC+=2
    1308/     488 : 58 08               	JMS INC_REG16P0
    1309/     48A : C0                  	BBL 0
    1310/     48B :                     
    1311/     48B :                     CODE_CDH:			; CALL B3B2
    1312/     48B :                     CODE_CALL:
    1313/     48B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1314/     48D : (MACRO)              	LD_P3_P1
    1314/     48D : A2                                  LD P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/03/21 12:27:23


    1314/     48E : B6                                  XCH P3_HI
    1314/     48F : A3                                  LD P1_LO
    1314/     490 : B7                                  XCH P3_LO
    1315/     491 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1316/     493 : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1316/     493 : A2                                  LD P1_HI
    1316/     494 : B4                                  XCH P2_HI
    1316/     495 : A3                                  LD P1_LO
    1316/     496 : B5                                  XCH P2_LO
    1317/     497 :                     
    1318/     497 :                     CALL_P2P3:
    1319/     497 : 22 1C               	FIM P1, REG16_ADDR
    1320/     499 : 57 0F               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
    1321/     49B :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1322/     49B : 57 2F               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1323/     49D :                     	
    1324/     49D :                     	;; PUSH PC
    1325/     49D : 24 1E               	FIM P2, REG8_ADDRH
    1326/     49F : 26 1C               	FIM P3, REG8_ADDRL
    1327/     4A1 : 45 B7               	JUN CODE_PUSH_REG8P2P3
    1328/     4A3 :                     ;;; 	BBL 0
    1329/     4A3 :                     
    1330/     4A3 :                     CODE_CEH:			; ACI B2
    1331/     4A3 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1332/     4A5 :                     ACI_P1:
    1333/     4A5 : (MACRO)              	SETFLAG_SUB_0
    1333/     4A5 : =>FALSE                      if EMU_USE_DAA
    1333/     4A5 :                             JMS DAA_SETFLAG_SUB_0
    1333/     4A5 : [1333]                       endif
    1334/     4A5 : 56 1A               	JMS GETFLAG_C
    1335/     4A7 : 14 AB               	JCN Z, ACI_P1_NOCARRY
    1336/     4A9 : 5C BD               	JMS INC_P1
    1337/     4AB :                     ACI_P1_NOCARRY:	
    1338/     4AB : 20 00               	FIM P0, REG8_A
    1339/     4AD : 57 35               	JMS ADD_REG8P0_P1
    1340/     4AF : 56 24               	JMS SETFLAG_C_CY
    1341/     4B1 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1342/     4B3 :                     ;;;	BBL 0
    1343/     4B3 :                     	
    1344/     4B3 :                     CODE_CFH:			; RST 1
    1345/     4B3 : 24 00               	FIM P2, up(1<<3)
    1346/     4B5 : 26 08               	FIM P3, lo(1<<3)
    1347/     4B7 : 44 97               	JUN CALL_P2P3
    1348/     4B9 :                     	
    1349/     4B9 :                     CODE_D0H:			; RNC
    1350/     4B9 : 56 1A               	JMS GETFLAG_C		;
    1351/     4BB : 44 6D               	JUN RET_IF0		;
    1352/     4BD :                     ;;;	BBL 0
    1353/     4BD :                     
    1354/     4BD :                     CODE_D1H:			; POP D
    1355/     4BD : 24 0A               	FIM P2, REG8_D
    1356/     4BF : 26 08               	FIM P3, REG8_E
    1357/     4C1 : 45 A0               	JUN CODE_POP_REG8P2P3
    1358/     4C3 :                     ;;;	BBL 0
    1359/     4C3 :                     
    1360/     4C3 :                     CODE_D2H:			; JNC
    1361/     4C3 : 56 1A               	JMS GETFLAG_C
    1362/     4C5 : 44 32               	JUN JMP_IF0
    1363/     4C7 :                     ;;;	BBL 0
    1364/     4C7 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/03/21 12:27:23


    1365/     4C7 :                     CODE_D3H:			; OUT B2
    1366/     4C7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1367/     4C9 : 48 83               	JUN EMULATE_OUT_P1
    1368/     4CB :                     ;;;	BBL 0
    1369/     4CB :                     	
    1370/     4CB :                     CODE_D4H:			; CNC
    1371/     4CB : 56 1A               	JMS GETFLAG_C
    1372/     4CD : 44 84               	JUN CALL_IF0
    1373/     4CF :                     ;;;	BBL 0
    1374/     4CF :                     
    1375/     4CF :                     CODE_D5H:			; PUSH D
    1376/     4CF : 24 0A               	FIM P2, REG8_D
    1377/     4D1 : 26 08               	FIM P3, REG8_E
    1378/     4D3 : 45 B7               	JUN CODE_PUSH_REG8P2P3
    1379/     4D5 :                     ;;;	BBL 0
    1380/     4D5 :                     
    1381/     4D5 :                     CODE_D6H:			; SUI B2
    1382/     4D5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1383/     4D7 :                     SUI_P1:
    1384/     4D7 : (MACRO)              	SETFLAG_SUB_1
    1384/     4D7 : =>FALSE                      if EMU_USE_DAA
    1384/     4D7 :                             JMS DAA_SETFLAG_SUB_1
    1384/     4D7 : [1384]                       endif
    1385/     4D7 : 20 00               	FIM P0, REG8_A
    1386/     4D9 : 57 56               	JMS SUB_REG8P0_P1
    1387/     4DB : 56 24               	JMS SETFLAG_C_CY
    1388/     4DD : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1389/     4DF :                     ;;;	BBL 0
    1390/     4DF :                     	
    1391/     4DF :                     CODE_D7H:			; RST 2
    1392/     4DF : 24 00               	FIM P2, up(2<<3)
    1393/     4E1 : 26 10               	FIM P3, lo(2<<3)
    1394/     4E3 : 44 97               	JUN CALL_P2P3
    1395/     4E5 :                     ;;;	BBL 0
    1396/     4E5 :                     	
    1397/     4E5 :                     CODE_D8H:			; RC
    1398/     4E5 : 56 1A               	JMS GETFLAG_C
    1399/     4E7 : 44 6A               	JUN RET_IF1
    1400/     4E9 :                     ;;;	BBL 0
    1401/     4E9 :                     
    1402/     4E9 :                     CODE_D9H:			; ...
    1403/     4E9 : C0                  	BBL 0
    1404/     4EA :                     
    1405/     4EA :                     CODE_DAH:			; JC
    1406/     4EA : 56 1A               	JMS GETFLAG_C
    1407/     4EC : 44 39               	JUN JMP_IF1
    1408/     4EE :                     ;;;	BBL 0
    1409/     4EE :                     
    1410/     4EE :                     CODE_DBH:			; IN
    1411/     4EE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1412/     4F0 : 48 9B               	JUN EMULATE_IN_P1
    1413/     4F2 :                     ;;;	BBL 0
    1414/     4F2 :                     
    1415/     4F2 :                     CODE_DCH:			; CC
    1416/     4F2 : 56 1A               	JMS GETFLAG_C
    1417/     4F4 : 44 7D               	JUN CALL_IF1
    1418/     4F6 :                     
    1419/     4F6 :                     CODE_DDH:			; ...
    1420/     4F6 : C0                  	BBL 0
    1421/     4F7 :                     CODE_DEH:			; SBI B2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/03/21 12:27:23


    1422/     4F7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1423/     4F9 :                     SBI_P1:
    1424/     4F9 : (MACRO)              	SETFLAG_SUB_1
    1424/     4F9 : =>FALSE                      if EMU_USE_DAA
    1424/     4F9 :                             JMS DAA_SETFLAG_SUB_1
    1424/     4F9 : [1424]                       endif
    1425/     4F9 : 56 1A               	JMS GETFLAG_C
    1426/     4FB : 14 FF               	JCN Z, SBI_P1_NOCARRY
    1427/     4FD : 5C BD               	JMS INC_P1
    1428/     4FF :                     SBI_P1_NOCARRY:
    1429/     4FF : 20 00               	FIM P0, REG8_A
    1430/     501 : 57 56               	JMS SUB_REG8P0_P1
    1431/     503 : 56 24               	JMS SETFLAG_C_CY
    1432/     505 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1433/     507 :                     ;;; 	BBL 0
    1434/     507 :                     
    1435/     507 :                     CODE_DFH:			; RST 3
    1436/     507 : 24 00               	FIM P2, up(3<<3)
    1437/     509 : 26 18               	FIM P3, lo(3<<3)
    1438/     50B : 44 97               	JUN CALL_P2P3
    1439/     50D :                     
    1440/     50D :                     CODE_E0H:			; RPO
    1441/     50D : 56 23               	JMS GETFLAG_P
    1442/     50F : 44 6D               	JUN RET_IF0
    1443/     511 :                     	
    1444/     511 :                     CODE_E1H:			; POP H
    1445/     511 : 24 06               	FIM P2, REG8_H
    1446/     513 : 26 04               	FIM P3, REG8_L
    1447/     515 : 45 A0               	JUN CODE_POP_REG8P2P3
    1448/     517 :                     
    1449/     517 :                     CODE_E2H:			; JPO
    1450/     517 : 56 23               	JMS GETFLAG_P
    1451/     519 : 44 32               	JUN JMP_IF0
    1452/     51B :                     
    1453/     51B :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1454/     51B :                     	;; POP to ADDR
    1455/     51B : 24 1E               	FIM P2, REG8_ADDRH
    1456/     51D : 26 1C               	FIM P3, REG8_ADDRL
    1457/     51F : 20 18               	FIM P0, REG16_SP
    1458/     521 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1459/     523 : 57 90               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1460/     525 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1461/     527 : 57 96               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1462/     529 :                     
    1463/     529 :                     	;; PUSH HL
    1464/     529 : 24 06               	FIM P2, REG8_H
    1465/     52B : 26 04               	FIM P3, REG8_L
    1466/     52D : 57 B6               	JMS LD_P1_REG8P2	; P1=REG(H)
    1467/     52F : 58 18               	JMS DEC_REG16P0		; REG(SP)--
    1468/     531 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1469/     533 :                     
    1470/     533 : 57 BC               	JMS LD_P1_REG8P3	; P1=REG(L)
    1471/     535 : 58 18               	JMS DEC_REG16P0		; REG(SP)--
    1472/     537 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1473/     539 :                     
    1474/     539 :                     	;; HL = ADDR
    1475/     539 : 2C 04               	FIM P6, REG16_HL
    1476/     53B : 2E 1C               	FIM P7, REG16_ADDR
    1477/     53D : 47 E9               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1478/     53F :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/03/21 12:27:23


    1479/     53F :                     CODE_E4H:			; CPO
    1480/     53F : 56 23               	JMS GETFLAG_P
    1481/     541 : 44 84               	JUN CALL_IF0
    1482/     543 :                     
    1483/     543 :                     CODE_E5H:			; PUSH H
    1484/     543 : 24 06               	FIM P2, REG8_H
    1485/     545 : 26 04               	FIM P3, REG8_L
    1486/     547 : 45 B7               	JUN CODE_PUSH_REG8P2P3
    1487/     549 :                     
    1488/     549 :                     CODE_E6H:			; ANI B2
    1489/     549 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1490/     54B :                     ANI_P1:
    1491/     54B : (MACRO)              	LD_P2_P1		; P2=B2
    1491/     54B : A2                                  LD P1_HI
    1491/     54C : B4                                  XCH P2_HI
    1491/     54D : A3                                  LD P1_LO
    1491/     54E : B5                                  XCH P2_LO
    1492/     54F : 20 00               	FIM P0, REG8_A
    1493/     551 : 57 AA               	JMS LD_P1_REG8P0	; P1=A
    1494/     553 : 56 7A               	JMS AND_P1_P2		; P1=A&P2
    1495/     555 : 57 8A               	JMS LD_REG8P0_P1	; A= P1
    1496/     557 : 56 26               	JMS SETFLAG_C_0
    1497/     559 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1498/     55B :                     	
    1499/     55B :                     CODE_E7H:			; RST 4
    1500/     55B : 24 00               	FIM P2, up(4<<3)
    1501/     55D : 26 20               	FIM P3, lo(4<<3)
    1502/     55F : 44 97               	JUN CALL_P2P3
    1503/     561 :                     
    1504/     561 :                     CODE_E8H:			; RPE
    1505/     561 : 56 23               	JMS GETFLAG_P
    1506/     563 : 44 6A               	JUN RET_IF1
    1507/     565 :                     
    1508/     565 :                     CODE_E9H:			; PCHL
    1509/     565 : 22 04               	FIM P1, REG16_HL
    1510/     567 : 47 05               	JUN LD_REG16P0_REG16P1
    1511/     569 :                     	
    1512/     569 :                     CODE_EAH:			; JPE
    1513/     569 : 56 23               	JMS GETFLAG_P
    1514/     56B : 44 39               	JUN JMP_IF1
    1515/     56D :                     
    1516/     56D :                     CODE_EBH:			; XCHG
    1517/     56D : 20 1C               	FIM P0, REG16_ADDR
    1518/     56F : 22 04               	FIM P1, REG16_HL
    1519/     571 : 57 05               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1520/     573 : 20 08               	FIM P0, REG16_DE
    1521/     575 : 57 0F               	JMS LD_REG16P1_REG16P0	; HL=DE
    1522/     577 : 22 1C               	FIM P1, REG16_ADDR
    1523/     579 : 47 05               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1524/     57B :                     	
    1525/     57B :                     CODE_ECH:			; CPE
    1526/     57B : 56 23               	JMS GETFLAG_P
    1527/     57D : 44 7D               	JUN CALL_IF1
    1528/     57F :                     
    1529/     57F :                     CODE_EDH:			; ...
    1530/     57F : C0                  	BBL 0
    1531/     580 :                     
    1532/     580 :                     CODE_EEH:			; XRI B2
    1533/     580 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1534/     582 :                     XRI_P1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/03/21 12:27:23


    1535/     582 : (MACRO)              	LD_P2_P1		; P2=B2
    1535/     582 : A2                                  LD P1_HI
    1535/     583 : B4                                  XCH P2_HI
    1535/     584 : A3                                  LD P1_LO
    1535/     585 : B5                                  XCH P2_LO
    1536/     586 : 20 00               	FIM P0, REG8_A
    1537/     588 : 57 AA               	JMS LD_P1_REG8P0	; P1=A
    1538/     58A : 56 B7               	JMS XOR_P1_P2
    1539/     58C : 57 8A               	JMS LD_REG8P0_P1	; A= A ^ P2
    1540/     58E : 56 26               	JMS SETFLAG_C_0
    1541/     590 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1542/     592 :                     	
    1543/     592 :                     CODE_EFH:			; RST 5
    1544/     592 : 24 00               	FIM P2, up(5<<3)
    1545/     594 : 26 28               	FIM P3, lo(5<<3)
    1546/     596 : 44 97               	JUN CALL_P2P3
    1547/     598 :                     
    1548/     598 :                     CODE_F0H:			; RP
    1549/     598 : 56 11               	JMS GETFLAG_S
    1550/     59A : 44 6D               	JUN RET_IF0
    1551/     59C :                     	
    1552/     59C :                     CODE_F1H:			; POP PSW
    1553/     59C : 24 00               	FIM P2, REG8_A
    1554/     59E : 26 10               	FIM P3, REG8_FLAG
    1555/     5A0 :                     CODE_POP_REG8P2P3:
    1556/     5A0 : 20 18               	FIM P0, REG16_SP
    1557/     5A2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1558/     5A4 : 57 90               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1559/     5A6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1560/     5A8 : 47 96               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1561/     5AA :                     	
    1562/     5AA :                     CODE_F2H:			; JP
    1563/     5AA : 56 11               	JMS GETFLAG_S
    1564/     5AC : 44 32               	JUN JMP_IF0
    1565/     5AE :                     
    1566/     5AE :                     CODE_F3H:			; DI
    1567/     5AE :                     				; Interrupt is not implemented
    1568/     5AE : C0                  	BBL 0
    1569/     5AF :                     
    1570/     5AF :                     CODE_F4H:			; CP
    1571/     5AF : 56 11               	JMS GETFLAG_S
    1572/     5B1 : 44 84               	JUN CALL_IF0
    1573/     5B3 :                     
    1574/     5B3 :                     CODE_F5H:			; PUSH PSW
    1575/     5B3 : 24 00               	FIM P2, REG8_A
    1576/     5B5 : 26 10               	FIM P3, REG8_FLAG
    1577/     5B7 :                     CODE_PUSH_REG8P2P3:
    1578/     5B7 : 20 18               	FIM P0, REG16_SP
    1579/     5B9 :                     				; higher byte is the first
    1580/     5B9 : 57 B6               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1581/     5BB : 58 18               	JMS DEC_REG16P0		; REG(SP)--
    1582/     5BD : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1583/     5BF :                     
    1584/     5BF : 57 BC               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1585/     5C1 : 58 18               	JMS DEC_REG16P0		; REG(SP)--
    1586/     5C3 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1587/     5C5 :                     
    1588/     5C5 :                     CODE_F6H:			; ORI
    1589/     5C5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1590/     5C7 :                     ORI_P1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/03/21 12:27:23


    1591/     5C7 : (MACRO)              	LD_P2_P1		; P2=B2
    1591/     5C7 : A2                                  LD P1_HI
    1591/     5C8 : B4                                  XCH P2_HI
    1591/     5C9 : A3                                  LD P1_LO
    1591/     5CA : B5                                  XCH P2_LO
    1592/     5CB : 20 00               	FIM P0, REG8_A
    1593/     5CD : 57 AA               	JMS LD_P1_REG8P0	; P1=A
    1594/     5CF : 56 F4               	JMS OR_P1_P2
    1595/     5D1 : 57 8A               	JMS LD_REG8P0_P1	; P1= A | P2
    1596/     5D3 : 56 26               	JMS SETFLAG_C_0
    1597/     5D5 : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1598/     5D7 :                     	
    1599/     5D7 :                     CODE_F7H:			; RST 6
    1600/     5D7 : 24 00               	FIM P2, up(6<<3)
    1601/     5D9 : 26 30               	FIM P3, lo(6<<3)
    1602/     5DB : 44 97               	JUN CALL_P2P3
    1603/     5DD :                     
    1604/     5DD :                     CODE_F8H:			; RM
    1605/     5DD : 56 11               	JMS GETFLAG_S
    1606/     5DF : 44 6A               	JUN RET_IF1
    1607/     5E1 :                     
    1608/     5E1 :                     CODE_F9H:			; SPHL
    1609/     5E1 : 2C 18               	FIM P6, REG16_SP
    1610/     5E3 : 2E 04               	FIM P7, REG16_HL
    1611/     5E5 : 47 E9               	JUN LD_REG16P6_REG16P7
    1612/     5E7 :                     
    1613/     5E7 :                     CODE_FAH:			; JM
    1614/     5E7 : 56 11               	JMS GETFLAG_S
    1615/     5E9 : 44 39               	JUN JMP_IF1
    1616/     5EB :                     
    1617/     5EB :                     CODE_FBH:			; EI
    1618/     5EB :                     				; Interrupt is not implemented
    1619/     5EB : C0                  	BBL 0
    1620/     5EC :                     
    1621/     5EC :                     CODE_FCH:			; CM
    1622/     5EC : 56 11               	JMS GETFLAG_S
    1623/     5EE : 44 7D               	JUN CALL_IF1
    1624/     5F0 :                     
    1625/     5F0 :                     CODE_FDH:			; ...
    1626/     5F0 : C0                  	BBL 0
    1627/     5F1 :                     
    1628/     5F1 :                     CODE_FEH:			; CPI
    1629/     5F1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1630/     5F3 :                     CPI_P1:
    1631/     5F3 : (MACRO)              	SETFLAG_SUB_1
    1631/     5F3 : =>FALSE                      if EMU_USE_DAA
    1631/     5F3 :                             JMS DAA_SETFLAG_SUB_1
    1631/     5F3 : [1631]                       endif
    1632/     5F3 : 2C 12               	FIM P6, REG8_SRC
    1633/     5F5 : 2E 00               	FIM P7, REG8_A
    1634/     5F7 : 57 7F               	JMS LD_REG8P6_REG8P7
    1635/     5F9 : 20 12               	FIM P0, REG8_SRC
    1636/     5FB : 57 56               	JMS SUB_REG8P0_P1
    1637/     5FD : 56 24               	JMS SETFLAG_C_CY
    1638/     5FF : 46 38               	JUN SETFLAG_ZSP_REG8P0
    1639/     601 :                     ;;; 	BBL 0
    1640/     601 :                     CODE_FFH:			; RST 7
    1641/     601 : 24 00               	FIM P2, up(7<<3)
    1642/     603 : 26 38               	FIM P3, lo(7<<3)
    1643/     605 : 44 97               	JUN CALL_P2P3
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/03/21 12:27:23


    1644/     607 :                     
    1645/     607 :                     ;;;---------------------------------------------------------------------------
    1646/     607 :                     ;;; FLAG routines
    1647/     607 :                     ;;;---------------------------------------------------------------------------
    1648/     607 :                     
    1649/     607 :                     ;;;---------------------------------------------------------------------------
    1650/     607 :                     ;;; GETFLAG_Z
    1651/     607 :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1652/     607 :                     ;;;---------------------------------------------------------------------------
    1653/     607 :                     GETFLAG_Z:
    1654/     607 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1655/     609 : 2F                  	SRC P7
    1656/     60A : E9                  	RDM
    1657/     60B : F5                  	RAL
    1658/     60C : F5                  	RAL
    1659/     60D : 12 10               	JCN C, GETFLAG_Z_EXIT1
    1660/     60F : C0                  	BBL 0
    1661/     610 :                     GETFLAG_Z_EXIT1:
    1662/     610 : C1                  	BBL 1
    1663/     611 :                     
    1664/     611 :                     ;;;---------------------------------------------------------------------------
    1665/     611 :                     ;;; GETFLAG_S
    1666/     611 :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1667/     611 :                     ;;;---------------------------------------------------------------------------
    1668/     611 :                     GETFLAG_S:
    1669/     611 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1670/     613 : 2F                  	SRC P7
    1671/     614 : E9                  	RDM
    1672/     615 : F5                  	RAL
    1673/     616 : 12 19               	JCN C, GETFLAG_S_EXIT1
    1674/     618 : C0                  	BBL 0
    1675/     619 :                     GETFLAG_S_EXIT1:
    1676/     619 : C1                  	BBL 1
    1677/     61A :                     
    1678/     61A :                     ;;;---------------------------------------------------------------------------
    1679/     61A :                     ;;; GETFLAG_C
    1680/     61A :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1681/     61A :                     ;;;---------------------------------------------------------------------------
    1682/     61A :                     GETFLAG_C:
    1683/     61A : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1684/     61C : 2F                  	SRC P7
    1685/     61D : E9                  	RDM
    1686/     61E : F6                  	RAR
    1687/     61F : 12 22               	JCN C, GETFLAG_C_1
    1688/     621 : C0                  	BBL 0
    1689/     622 :                     GETFLAG_C_1:	
    1690/     622 : C1                  	BBL 1
    1691/     623 :                     
    1692/     623 :                     ;;;---------------------------------------------------------------------------
    1693/     623 :                     ;;; GETFLAG_P
    1694/     623 :                     ;;; Flag P is loded to ACC
    1695/     623 :                     ;;; ACC=FLAG_P
    1696/     623 :                     ;;; This routine is compiled if EMU_USE_FLAG_P, 
    1697/     623 :                     ;;; otherwise FLAG_P is always 0.
    1698/     623 :                     ;;;---------------------------------------------------------------------------
    1699/     623 :                     GETFLAG_P:
    1700/     623 : =>FALSE              	if EMU_USE_FLAG_P
    1701/     623 :                     	FIM P7, REG4_FLAG_1P1C
    1702/     623 :                     	SRC P7
    1703/     623 :                     	RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/03/21 12:27:23


    1704/     623 :                     	RAL
    1705/     623 :                     	RAL
    1706/     623 :                     	JCN CN, GETFLAG_P_0
    1707/     623 :                     	BBL 1
    1708/     623 :                     GETFLAG_P_0:
    1709/     623 : [1700]               	endif 			; EMU_USE_FLAG_P
    1710/     623 : C0                  	BBL 0
    1711/     624 :                     	
    1712/     624 :                     ;;;---------------------------------------------------------------------------
    1713/     624 :                     ;;; DAA_SETFLAG_SUB_0
    1714/     624 :                     ;;; DAA_SETFLAG_SUB_1
    1715/     624 :                     ;;; FLAG_SUB is compiled only if EMU_USE_DAA
    1716/     624 :                     ;;;---------------------------------------------------------------------------
    1717/     624 :                     
    1718/     624 : =>FALSE              	if EMU_USE_DAA
    1719/     624 :                     DAA_SETFLAG_SUB_0:
    1720/     624 :                     	FIM P7, REG4_FLAG_SZBH
    1721/     624 :                     	SRC P7
    1722/     624 :                     	RDM
    1723/     624 :                     	RAR
    1724/     624 :                     	RAR
    1725/     624 :                     	CLC
    1726/     624 :                     RAL_RAL_WRM_BBL0:
    1727/     624 :                     	RAL
    1728/     624 :                     	RAL
    1729/     624 :                     	WRM
    1730/     624 :                     	BBL 0
    1731/     624 :                     
    1732/     624 :                     DAA_SETFLAG_SUB_1:
    1733/     624 :                     	FIM P7, REG4_FLAG_SZBH
    1734/     624 :                     	SRC P7
    1735/     624 :                     	RDM
    1736/     624 :                     	RAR
    1737/     624 :                     	RAR
    1738/     624 :                     	STC
    1739/     624 :                     	JUN RAL_RAL_WRM_BBL0
    1740/     624 :                     ;;; 	RAL
    1741/     624 :                     ;;; 	RAL
    1742/     624 :                     ;;; 	WRM
    1743/     624 :                     ;;; 	BBL 0
    1744/     624 : [1718]               	endif		; EMU_USE_DAA
    1745/     624 :                     	
    1746/     624 :                     ;;;---------------------------------------------------------------------------
    1747/     624 :                     ;;; SETFLAG_C_{CY, 0, 1}
    1748/     624 :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1749/     624 :                     ;;;---------------------------------------------------------------------------
    1750/     624 :                     SETFLAG_C_CY:
    1751/     624 : 12 2F               	JCN C, SETFLAG_C_1
    1752/     626 :                     SETFLAG_C_0:
    1753/     626 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1754/     628 : 2F                  	SRC P7
    1755/     629 : E9                  	RDM
    1756/     62A : F6                  	RAR
    1757/     62B : F1                  	CLC
    1758/     62C : F5                  	RAL
    1759/     62D : E0                  	WRM
    1760/     62E : C0                  	BBL 0
    1761/     62F :                     SETFLAG_C_1:
    1762/     62F : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1763/     631 : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/03/21 12:27:23


    1764/     632 : E9                  	RDM
    1765/     633 : F6                  	RAR
    1766/     634 : FA                  	STC
    1767/     635 : F5                  	RAL
    1768/     636 : E0                  	WRM
    1769/     637 : C0                  	BBL 0
    1770/     638 :                     
    1771/     638 :                     ;;;---------------------------------------------------------------------------
    1772/     638 :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1773/     638 :                     ;;; 
    1774/     638 :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1775/     638 :                     ;;; P flag is compiled if EMU_USE_FLAG_P (not implemented yet).
    1776/     638 :                     ;;;---------------------------------------------------------------------------
    1777/     638 :                     SETFLAG_ZSP_REG8P0:
    1778/     638 : 57 AA               	JMS LD_P1_REG8P0
    1779/     63A : 46 3E               	JUN SETFLAG_ZSP_P1
    1780/     63C :                     
    1781/     63C :                     SETFLAG_ZSP_REG8P1:
    1782/     63C : 57 B0               	JMS LD_P1_REG8P1
    1783/     63E :                     
    1784/     63E :                     SETFLAG_ZSP_P1:
    1785/     63E : A2                  	LD P1_HI		; ACC=Sxxx
    1786/     63F : F5                  	RAL			; CY=S
    1787/     640 : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1788/     641 :                     	
    1789/     641 : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
    1790/     642 :                     
    1791/     642 :                     	;; set Z FLAG
    1792/     642 : 5D 2D               	JMS ISZEROORNOT_P1
    1793/     644 : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1794/     645 : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1795/     646 : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1796/     647 : F6                  	RAR			; ACC=ZBHx (CY=S)
    1797/     648 : F6                  	RAR			; ACC=SZBH (BH=00)
    1798/     649 :                     
    1799/     649 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1800/     64B : 2F                  	SRC P7
    1801/     64C : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1802/     64D :                     
    1803/     64D : =>FALSE              	if EMU_USE_FLAG_P
    1804/     64D :                     	;; Set P flag
    1805/     64D :                     ;;; table implementation may be faster
    1806/     64D :                     ;;;              0123456789ABCDEF
    1807/     64D :                     ;;; 4bit table =(0110100110010110)
    1808/     64D :                     ;;; org 09D0H
    1809/     64D :                     ;;; PARITY4TABLE:
    1810/     64D :                     ;;; data 0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0
    1811/     64D :                     ;;; GETPARITY_R1:
    1812/     64D :                     ;;; FIN P2
    1813/     64D :                     ;;; LD P2_LO
    1814/     64D :                     ;;; XCH_R1
    1815/     64D :                     ;;; BBL 0
    1816/     64D :                     ;;; 
    1817/     64D :                     ;;; FIM P0, lo(PARITY4TABLE)
    1818/     64D :                     ;;; LD P1_H
    1819/     64D :                     ;;; XCH R1
    1820/     64D :                     ;;; JMS GETPARITY_R1
    1821/     64D :                     ;;; LD R1
    1822/     64D :                     ;;; XCH P1_H
    1823/     64D :                     ;;; LD P1_L
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/03/21 12:27:23


    1824/     64D :                     ;;; XCH R1
    1825/     64D :                     ;;; JMS GETPARITY_R1
    1826/     64D :                     ;;; LD R1
    1827/     64D :                     ;;; ADD P1_H
    1828/     64D :                     ;;; RAR       ; here CY=PARITY
    1829/     64D :                     	
    1830/     64D :                     	CLB
    1831/     64D :                     	XCH CNT_I		; I=0
    1832/     64D :                     	LD_P1_P2		; restore P1
    1833/     64D :                     	LD P1_HI
    1834/     64D :                     	RAL
    1835/     64D :                     	JCN CN,PFLAG_CNT1
    1836/     64D :                     	INC CNT_I
    1837/     64D :                     PFLAG_CNT1:
    1838/     64D :                     	RAL
    1839/     64D :                     	JCN CN,PFLAG_CNT2
    1840/     64D :                     	INC CNT_I
    1841/     64D :                     PFLAG_CNT2:
    1842/     64D :                     	RAL
    1843/     64D :                     	JCN CN,PFLAG_CNT3
    1844/     64D :                     	INC CNT_I
    1845/     64D :                     PFLAG_CNT3:
    1846/     64D :                     	RAL
    1847/     64D :                     	JCN CN,PFLAG_CNT4
    1848/     64D :                     	INC CNT_I
    1849/     64D :                     PFLAG_CNT4:
    1850/     64D :                     	LD P1_LO
    1851/     64D :                     	RAL
    1852/     64D :                     	JCN CN,PFLAG_CNT5
    1853/     64D :                     	INC CNT_I
    1854/     64D :                     PFLAG_CNT5:
    1855/     64D :                     	RAL
    1856/     64D :                     	JCN CN,PFLAG_CNT6
    1857/     64D :                     	INC CNT_I
    1858/     64D :                     PFLAG_CNT6:
    1859/     64D :                     	RAL
    1860/     64D :                     	JCN CN,PFLAG_CNT7
    1861/     64D :                     	INC CNT_I
    1862/     64D :                     PFLAG_CNT7:
    1863/     64D :                     	RAL
    1864/     64D :                     	JCN CN,PFLAG_CNT8
    1865/     64D :                     	INC CNT_I
    1866/     64D :                     PFLAG_CNT8:
    1867/     64D :                     	FIM P7, REG4_FLAG_1P1C
    1868/     64D :                     	SRC P7
    1869/     64D :                     	RDM
    1870/     64D :                     	RAL
    1871/     64D :                     	RAL
    1872/     64D :                     	WRM
    1873/     64D :                     
    1874/     64D :                     	LD CNT_I
    1875/     64D :                     	RAR
    1876/     64D :                     	CMC
    1877/     64D :                     
    1878/     64D :                     	RDM
    1879/     64D :                     	RAR
    1880/     64D :                     	RAR
    1881/     64D : [1803]               	endif			; EMU_USE_FLAG_P
    1882/     64D : C0                  	BBL 0	
    1883/     64E :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/03/21 12:27:23


    1884/     64E :                     ;;;---------------------------------------------------------------------------
    1885/     64E :                     ;;; Logical operators
    1886/     64E :                     ;;; and, or, xor
    1887/     64E :                     ;;; destroy: P3(R6, R7)
    1888/     64E :                     ;;;---------------------------------------------------------------------------
    1889/     64E :                     
    1890/     64E :                     ;;;---------------------------------------------------------------------------
    1891/     64E :                     ;;; AND_R6_R7
    1892/     64E :                     ;;; R6 = R6 & R7
    1893/     64E :                     ;;;---------------------------------------------------------------------------
    1894/     64E :                     AND_R6_R7:
    1895/     64E : F0                  	CLB
    1896/     64F : A7                  	LD R7
    1897/     650 : F6                  	RAR
    1898/     651 : 12 58               	JCN C, AND67_L1	; jump if R7.bit0==1
    1899/     653 : A6                  	LD R6
    1900/     654 : F6                  	RAR
    1901/     655 : F1                  	CLC
    1902/     656 : F5                  	RAL
    1903/     657 : B6                  	XCH R6		; R6.bit0=0
    1904/     658 :                     AND67_L1:
    1905/     658 : A7                  	LD R7
    1906/     659 : F6                  	RAR
    1907/     65A : F6                  	RAR
    1908/     65B : 12 64               	JCN C, AND67_L2	; jump if R7.bit1==1
    1909/     65D : A6                  	LD R6
    1910/     65E : F6                  	RAR
    1911/     65F : F6                  	RAR
    1912/     660 : F1                  	CLC
    1913/     661 : F5                  	RAL
    1914/     662 : F5                  	RAL
    1915/     663 : B6                  	XCH R6		; R6.bit1=0
    1916/     664 :                     AND67_L2:
    1917/     664 : A7                  	LD R7
    1918/     665 : F5                  	RAL
    1919/     666 : F5                  	RAL
    1920/     667 : 12 70               	JCN C, AND67_L3	; jump if R7.bit2==1
    1921/     669 : A6                  	LD R6
    1922/     66A : F5                  	RAL
    1923/     66B : F5                  	RAL
    1924/     66C : F1                  	CLC
    1925/     66D : F6                  	RAR
    1926/     66E : F6                  	RAR
    1927/     66F : B6                  	XCH R6		; R6.bit2=0
    1928/     670 :                     AND67_L3:
    1929/     670 : A7                  	LD R7
    1930/     671 : F5                  	RAL
    1931/     672 : 12 79               	JCN C, AND67_L4	; jump if R7.bit3==1
    1932/     674 : A6                  	LD R6
    1933/     675 : F5                  	RAL
    1934/     676 : F1                  	CLC
    1935/     677 : F6                  	RAR
    1936/     678 : B6                  	XCH R6		; R6.bit3=0
    1937/     679 :                     AND67_L4:
    1938/     679 :                     	
    1939/     679 : C0                  	BBL 0
    1940/     67A :                     
    1941/     67A :                     ;;;---------------------------------------------------------------------------
    1942/     67A :                     ;;; AND_P1_P2
    1943/     67A :                     ;;; P1 = P1 & P2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/03/21 12:27:23


    1944/     67A :                     ;;;---------------------------------------------------------------------------
    1945/     67A :                     AND_P1_P2:
    1946/     67A : A3                  	LD P1_LO
    1947/     67B : B6                  	XCH R6
    1948/     67C : A5                  	LD P2_LO
    1949/     67D : B7                  	XCH R7
    1950/     67E : 56 4E               	JMS AND_R6_R7
    1951/     680 : A6                  	LD R6
    1952/     681 : B3                  	XCH P1_LO
    1953/     682 :                     	
    1954/     682 : A2                  	LD P1_HI
    1955/     683 : B6                  	XCH R6
    1956/     684 : A4                  	LD P2_HI
    1957/     685 : B7                  	XCH R7
    1958/     686 : 56 4E               	JMS AND_R6_R7
    1959/     688 : A6                  	LD R6
    1960/     689 : B2                  	XCH P1_HI
    1961/     68A : C0                  	BBL 0
    1962/     68B :                     
    1963/     68B :                     ;;;---------------------------------------------------------------------------
    1964/     68B :                     ;;; XOR_R6_R7
    1965/     68B :                     ;;; R6 = R6 ^ R7
    1966/     68B :                     ;;;---------------------------------------------------------------------------
    1967/     68B :                     XOR_R6_R7:
    1968/     68B : F0                  	CLB
    1969/     68C : A7                  	LD R7
    1970/     68D : F6                  	RAR
    1971/     68E : 1A 95               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    1972/     690 : A6                  	LD R6
    1973/     691 : F6                  	RAR
    1974/     692 : F3                  	CMC
    1975/     693 : F5                  	RAL
    1976/     694 : B6                  	XCH R6			; cmp R6.bit0
    1977/     695 :                     XOR67_L1:
    1978/     695 : A7                  	LD R7
    1979/     696 : F6                  	RAR
    1980/     697 : F6                  	RAR
    1981/     698 : 1A A1               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    1982/     69A : A6                  	LD R6
    1983/     69B : F6                  	RAR
    1984/     69C : F6                  	RAR
    1985/     69D : F3                  	CMC
    1986/     69E : F5                  	RAL
    1987/     69F : F5                  	RAL
    1988/     6A0 : B6                  	XCH R6			; cmp R6.bit1
    1989/     6A1 :                     XOR67_L2:
    1990/     6A1 : A7                  	LD R7
    1991/     6A2 : F5                  	RAL
    1992/     6A3 : F5                  	RAL
    1993/     6A4 : 1A AD               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    1994/     6A6 : A6                  	LD R6
    1995/     6A7 : F5                  	RAL
    1996/     6A8 : F5                  	RAL
    1997/     6A9 : F3                  	CMC
    1998/     6AA : F6                  	RAR
    1999/     6AB : F6                  	RAR
    2000/     6AC : B6                  	XCH R6			; cmp R6.bit2
    2001/     6AD :                     XOR67_L3:
    2002/     6AD : A7                  	LD R7
    2003/     6AE : F5                  	RAL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/03/21 12:27:23


    2004/     6AF : 1A B6               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    2005/     6B1 : A6                  	LD R6
    2006/     6B2 : F5                  	RAL
    2007/     6B3 : F3                  	CMC
    2008/     6B4 : F6                  	RAR
    2009/     6B5 : B6                  	XCH R6			; cmp R6.bit3
    2010/     6B6 :                     XOR67_L4:
    2011/     6B6 : C0                  	BBL 0
    2012/     6B7 :                     
    2013/     6B7 :                     ;;;---------------------------------------------------------------------------
    2014/     6B7 :                     ;;; XOR_P1_P2
    2015/     6B7 :                     ;;; P1 = P1 ^ P2
    2016/     6B7 :                     ;;;---------------------------------------------------------------------------
    2017/     6B7 :                     XOR_P1_P2:
    2018/     6B7 : A3                  	LD P1_LO
    2019/     6B8 : B6                  	XCH R6
    2020/     6B9 : A5                  	LD P2_LO
    2021/     6BA : B7                  	XCH R7
    2022/     6BB : 56 8B               	JMS XOR_R6_R7
    2023/     6BD : A6                  	LD R6
    2024/     6BE : B3                  	XCH P1_LO
    2025/     6BF :                     	
    2026/     6BF : A2                  	LD P1_HI
    2027/     6C0 : B6                  	XCH R6
    2028/     6C1 : A4                  	LD P2_HI
    2029/     6C2 : B7                  	XCH R7
    2030/     6C3 : 56 8B               	JMS XOR_R6_R7
    2031/     6C5 : A6                  	LD R6
    2032/     6C6 : B2                  	XCH P1_HI
    2033/     6C7 : C0                  	BBL 0
    2034/     6C8 :                     
    2035/     6C8 :                     ;;;---------------------------------------------------------------------------
    2036/     6C8 :                     ;;; OR_R6_R7
    2037/     6C8 :                     ;;; R6 = R6 | R7
    2038/     6C8 :                     ;;;---------------------------------------------------------------------------
    2039/     6C8 :                     OR_R6_R7:
    2040/     6C8 : F0                  	CLB
    2041/     6C9 : A7                  	LD R7
    2042/     6CA : F6                  	RAR
    2043/     6CB : 1A D2               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2044/     6CD : A6                  	LD R6
    2045/     6CE : F6                  	RAR
    2046/     6CF : FA                  	STC
    2047/     6D0 : F5                  	RAL
    2048/     6D1 : B6                  	XCH R6			; cmp R6.bit0
    2049/     6D2 :                     OR67_L1:
    2050/     6D2 : A7                  	LD R7
    2051/     6D3 : F6                  	RAR
    2052/     6D4 : F6                  	RAR
    2053/     6D5 : 1A DE               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2054/     6D7 : A6                  	LD R6
    2055/     6D8 : F6                  	RAR
    2056/     6D9 : F6                  	RAR
    2057/     6DA : FA                  	STC
    2058/     6DB : F5                  	RAL
    2059/     6DC : F5                  	RAL
    2060/     6DD : B6                  	XCH R6			; cmp R6.bit1
    2061/     6DE :                     OR67_L2:
    2062/     6DE : A7                  	LD R7
    2063/     6DF : F5                  	RAL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/03/21 12:27:23


    2064/     6E0 : F5                  	RAL
    2065/     6E1 : 1A EA               	JCN CN, OR67_L3	; jump if R7.bit2==0
    2066/     6E3 : A6                  	LD R6
    2067/     6E4 : F5                  	RAL
    2068/     6E5 : F5                  	RAL
    2069/     6E6 : FA                  	STC
    2070/     6E7 : F6                  	RAR
    2071/     6E8 : F6                  	RAR
    2072/     6E9 : B6                  	XCH R6			; cmp R6.bit2
    2073/     6EA :                     OR67_L3:
    2074/     6EA : A7                  	LD R7
    2075/     6EB : F5                  	RAL
    2076/     6EC : 1A F3               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2077/     6EE : A6                  	LD R6
    2078/     6EF : F5                  	RAL
    2079/     6F0 : FA                  	STC
    2080/     6F1 : F6                  	RAR
    2081/     6F2 : B6                  	XCH R6			; cmp R6.bit3
    2082/     6F3 :                     OR67_L4:
    2083/     6F3 : C0                  	BBL 0
    2084/     6F4 :                     
    2085/     6F4 :                     ;;;---------------------------------------------------------------------------
    2086/     6F4 :                     ;;; OR_P1_P2
    2087/     6F4 :                     ;;; P1 = P1 | P2
    2088/     6F4 :                     ;;;---------------------------------------------------------------------------
    2089/     6F4 :                     OR_P1_P2:
    2090/     6F4 : A3                  	LD P1_LO
    2091/     6F5 : B6                  	XCH R6
    2092/     6F6 : A5                  	LD P2_LO
    2093/     6F7 : B7                  	XCH R7
    2094/     6F8 : 56 C8               	JMS OR_R6_R7
    2095/     6FA : A6                  	LD R6
    2096/     6FB : B3                  	XCH P1_LO
    2097/     6FC :                     	
    2098/     6FC : A2                  	LD P1_HI
    2099/     6FD : B6                  	XCH R6
    2100/     6FE : A4                  	LD P2_HI
    2101/     6FF : B7                  	XCH R7
    2102/     700 : 56 C8               	JMS OR_R6_R7
    2103/     702 : A6                  	LD R6
    2104/     703 : B2                  	XCH P1_HI
    2105/     704 : C0                  	BBL 0
    2106/     705 :                     
    2107/     705 :                     ;;;	org 0900H
    2108/     705 :                     ;;;----------------------------------------------------------------------------
    2109/     705 :                     ;;; Subroutines for REG16 (16bit registars)
    2110/     705 :                     ;;;----------------------------------------------------------------------------
    2111/     705 :                     	
    2112/     705 :                     	
    2113/     705 :                     ;;;----------------------------------------------------------------------------
    2114/     705 :                     ;;; LD_REG16P0_REG16P1
    2115/     705 :                     ;;; REG16(P0) = REG16(P1)
    2116/     705 :                     ;;; destroy: P6, P7
    2117/     705 :                     ;;;----------------------------------------------------------------------------
    2118/     705 :                     LD_REG16P0_REG16P1:
    2119/     705 : (MACRO)              	LD_P6_P0
    2119/     705 : A0                                  LD P0_HI
    2119/     706 : BC                                  XCH P6_HI
    2119/     707 : A1                                  LD P0_LO
    2119/     708 : BD                                  XCH P6_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/03/21 12:27:23


    2120/     709 : (MACRO)              	LD_P7_P1
    2120/     709 : A2                                  LD P1_HI
    2120/     70A : BE                                  XCH P7_HI
    2120/     70B : A3                                  LD P1_LO
    2120/     70C : BF                                  XCH P7_LO
    2121/     70D : 47 E9               	JUN LD_REG16P6_REG16P7
    2122/     70F :                     
    2123/     70F :                     ;;;----------------------------------------------------------------------------
    2124/     70F :                     ;;; LD_REG16P1_REG16P0
    2125/     70F :                     ;;; REG16(P1) = REG16(P0)
    2126/     70F :                     ;;; destroy: P6, P7
    2127/     70F :                     ;;;----------------------------------------------------------------------------
    2128/     70F :                     LD_REG16P1_REG16P0:
    2129/     70F : (MACRO)              	LD_P6_P1
    2129/     70F : A2                                  LD P1_HI
    2129/     710 : BC                                  XCH P6_HI
    2129/     711 : A3                                  LD P1_LO
    2129/     712 : BD                                  XCH P6_LO
    2130/     713 : (MACRO)              	LD_P7_P0
    2130/     713 : A0                                  LD P0_HI
    2130/     714 : BE                                  XCH P7_HI
    2130/     715 : A1                                  LD P0_LO
    2130/     716 : BF                                  XCH P7_LO
    2131/     717 : 47 E9               	JUN LD_REG16P6_REG16P7
    2132/     719 :                     
    2133/     719 :                     ;;;----------------------------------------------------------------------------
    2134/     719 :                     ;;; LD_REG16P7_P2P3
    2135/     719 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2136/     719 :                     ;;; destroy P7
    2137/     719 :                     ;;;----------------------------------------------------------------------------
    2138/     719 :                     LD_REG16P7_P2P3:
    2139/     719 : 2F                  	SRC P7
    2140/     71A : A7                  	LD P3_LO
    2141/     71B : E0                  	WRM
    2142/     71C :                     
    2143/     71C : 6F                  	INC P7_LO
    2144/     71D : 2F                  	SRC P7
    2145/     71E : A6                  	LD P3_HI
    2146/     71F : E0                  	WRM
    2147/     720 :                     
    2148/     720 : 6F                  	INC P7_LO
    2149/     721 : 2F                  	SRC P7
    2150/     722 : A5                  	LD P2_LO
    2151/     723 : E0                  	WRM
    2152/     724 :                     
    2153/     724 : 6F                  	INC P7_LO
    2154/     725 : 2F                  	SRC P7
    2155/     726 : A4                  	LD P2_HI
    2156/     727 : E0                  	WRM
    2157/     728 :                     
    2158/     728 : C0                  	BBL 0
    2159/     729 :                     
    2160/     729 :                     ;;;----------------------------------------------------------------------------
    2161/     729 :                     ;;; LD_REG16P1_P2P3
    2162/     729 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2163/     729 :                     ;;; destroy P7
    2164/     729 :                     ;;;----------------------------------------------------------------------------
    2165/     729 :                     LD_REG16P1_P2P3:
    2166/     729 : (MACRO)              	LD_P7_P1
    2166/     729 : A2                                  LD P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/03/21 12:27:23


    2166/     72A : BE                                  XCH P7_HI
    2166/     72B : A3                                  LD P1_LO
    2166/     72C : BF                                  XCH P7_LO
    2167/     72D : 47 19               	JUN LD_REG16P7_P2P3
    2168/     72F :                     
    2169/     72F :                     ;;;----------------------------------------------------------------------------
    2170/     72F :                     ;;; LD_REG16P0_P2P3
    2171/     72F :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2172/     72F :                     ;;; destroy P7
    2173/     72F :                     ;;;----------------------------------------------------------------------------
    2174/     72F :                     LD_REG16P0_P2P3:
    2175/     72F : (MACRO)              	LD_P7_P0
    2175/     72F : A0                                  LD P0_HI
    2175/     730 : BE                                  XCH P7_HI
    2175/     731 : A1                                  LD P0_LO
    2175/     732 : BF                                  XCH P7_LO
    2176/     733 : 47 19               	JUN LD_REG16P7_P2P3
    2177/     735 :                     
    2178/     735 :                     ;;;----------------------------------------------------------------------------
    2179/     735 :                     ;;; ADD_REG8P0_P1
    2180/     735 :                     ;;; REG8(P0) = REG16(P0)+P1
    2181/     735 :                     ;;; destroy: P7(R14, R15)
    2182/     735 :                     ;;;----------------------------------------------------------------------------
    2183/     735 :                     ADD_REG8P0_P1:
    2184/     735 : (MACRO)              	LD_P7_P0
    2184/     735 : A0                                  LD P0_HI
    2184/     736 : BE                                  XCH P7_HI
    2184/     737 : A1                                  LD P0_LO
    2184/     738 : BF                                  XCH P7_LO
    2185/     739 : 2F                  	SRC P7
    2186/     73A : E9                  	RDM
    2187/     73B : A3                  	LD P1_LO
    2188/     73C : F1                  	CLC
    2189/     73D : EB                  	ADM
    2190/     73E : E0                  	WRM
    2191/     73F : 6F                  	INC P7_LO
    2192/     740 : 2F                  	SRC P7
    2193/     741 : E9                  	RDM
    2194/     742 : A2                  	LD P1_HI
    2195/     743 : EB                  	ADM
    2196/     744 : E0                  	WRM
    2197/     745 : C0                  	BBL 0
    2198/     746 :                     
    2199/     746 :                     ;;;----------------------------------------------------------------------------
    2200/     746 :                     ;;; INC_REG8P1
    2201/     746 :                     ;;; REG8(P1) = REG16(P1)+1
    2202/     746 :                     ;;; CY is set if overflow
    2203/     746 :                     ;;; destroy: P7(R14, R15)
    2204/     746 :                     ;;;----------------------------------------------------------------------------
    2205/     746 :                     INC_REG8P1:
    2206/     746 : (MACRO)              	LD_P7_P1
    2206/     746 : A2                                  LD P1_HI
    2206/     747 : BE                                  XCH P7_HI
    2206/     748 : A3                                  LD P1_LO
    2206/     749 : BF                                  XCH P7_LO
    2207/     74A :                     	
    2208/     74A : 2F                  	SRC P7
    2209/     74B : E9                  	RDM
    2210/     74C : F2                  	IAC 
    2211/     74D : E0                  	WRM			; REG(P0).lower++
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/03/21 12:27:23


    2212/     74E : 1C 55               	JCN NZ, REG8_INC_EXIT
    2213/     750 : 6F                  	INC P7_LO
    2214/     751 : 2F                  	SRC P7
    2215/     752 : E9                  	RDM
    2216/     753 : F2                  	IAC 
    2217/     754 : E0                  	WRM			; REG(P0).higher++
    2218/     755 :                     REG8_INC_EXIT:
    2219/     755 : C0                  	BBL 0
    2220/     756 :                     
    2221/     756 :                     ;;;----------------------------------------------------------------------------
    2222/     756 :                     ;;; SUB_REG8P0_P1
    2223/     756 :                     ;;; REG8(P0) = REG8(P0)-P1
    2224/     756 :                     ;;; destroy: P7(R14, R15)
    2225/     756 :                     ;;;----------------------------------------------------------------------------
    2226/     756 :                     SUB_REG8P0_P1:
    2227/     756 : (MACRO)              	LD_P7_P0
    2227/     756 : A0                                  LD P0_HI
    2227/     757 : BE                                  XCH P7_HI
    2227/     758 : A1                                  LD P0_LO
    2227/     759 : BF                                  XCH P7_LO
    2228/     75A : 2F                  	SRC P7
    2229/     75B : E9                  	RDM
    2230/     75C : F1                  	CLC
    2231/     75D : 93                  	SUB P1_LO
    2232/     75E : E0                  	WRM
    2233/     75F : F3                  	CMC
    2234/     760 :                     
    2235/     760 : 6F                  	INC P7_LO
    2236/     761 : 2F                  	SRC P7
    2237/     762 : E9                  	RDM
    2238/     763 : 92                  	SUB P1_HI
    2239/     764 : E0                  	WRM
    2240/     765 : F3                  	CMC
    2241/     766 :                     
    2242/     766 : C0                  	BBL 0	
    2243/     767 :                     
    2244/     767 :                     ;;;----------------------------------------------------------------------------
    2245/     767 :                     ;;; DEC_REG8P1
    2246/     767 :                     ;;; REG8(P1) = REG16(P1)+1
    2247/     767 :                     ;;; destroy: P7(R14, R15)
    2248/     767 :                     ;;;----------------------------------------------------------------------------
    2249/     767 :                     DEC_REG8P1:
    2250/     767 : (MACRO)              	LD_P7_P1
    2250/     767 : A2                                  LD P1_HI
    2250/     768 : BE                                  XCH P7_HI
    2250/     769 : A3                                  LD P1_LO
    2250/     76A : BF                                  XCH P7_LO
    2251/     76B :                     	
    2252/     76B : 2F                  	SRC P7
    2253/     76C : E9                  	RDM
    2254/     76D : F8                  	DAC 
    2255/     76E : E0                  	WRM			; REG(P0).lower--
    2256/     76F : 12 76               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2257/     771 : 6F                  	INC P7_LO
    2258/     772 : 2F                  	SRC P7
    2259/     773 : E9                  	RDM
    2260/     774 : F8                  	DAC 
    2261/     775 : E0                  	WRM			; REG(P0).higher--
    2262/     776 :                     REG8_DEC_EXIT:
    2263/     776 : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/03/21 12:27:23


    2264/     777 :                     
    2265/     777 :                     ;;;----------------------------------------------------------------------------
    2266/     777 :                     ;;; LD_REG8P0_REG8P1
    2267/     777 :                     ;;; REG8(P0)=REG8(P1)
    2268/     777 :                     ;;; destroy: P6, P7
    2269/     777 :                     ;;;----------------------------------------------------------------------------
    2270/     777 :                     LD_REG8P0_REG8P1:
    2271/     777 : (MACRO)              	LD_P6_P0
    2271/     777 : A0                                  LD P0_HI
    2271/     778 : BC                                  XCH P6_HI
    2271/     779 : A1                                  LD P0_LO
    2271/     77A : BD                                  XCH P6_LO
    2272/     77B : (MACRO)              	LD_P7_P1
    2272/     77B : A2                                  LD P1_HI
    2272/     77C : BE                                  XCH P7_HI
    2272/     77D : A3                                  LD P1_LO
    2272/     77E : BF                                  XCH P7_LO
    2273/     77F :                     LD_REG8P6_REG8P7:
    2274/     77F : 2F                  	SRC P7
    2275/     780 : E9                  	RDM
    2276/     781 : 2D                  	SRC P6
    2277/     782 : E0                  	WRM
    2278/     783 : 6F                  	INC P7_LO
    2279/     784 : 6D                  	INC P6_LO
    2280/     785 : 2F                  	SRC P7
    2281/     786 : E9                  	RDM
    2282/     787 : 2D                  	SRC P6
    2283/     788 : E0                  	WRM
    2284/     789 :                     
    2285/     789 : C0                  	BBL 0
    2286/     78A :                     
    2287/     78A :                     
    2288/     78A :                     
    2289/     78A :                     ;;;----------------------------------------------------------------------------
    2290/     78A :                     ;;; LD_REG8P0_P1
    2291/     78A :                     ;;; REG8(P0)=P1
    2292/     78A :                     ;;;----------------------------------------------------------------------------
    2293/     78A :                     LD_REG8P0_P1:
    2294/     78A : (MACRO)              	LD_P7_P0
    2294/     78A : A0                                  LD P0_HI
    2294/     78B : BE                                  XCH P7_HI
    2294/     78C : A1                                  LD P0_LO
    2294/     78D : BF                                  XCH P7_LO
    2295/     78E : 47 9A                	JUN LD_REG8P7_P1
    2296/     790 :                     
    2297/     790 :                     ;;;----------------------------------------------------------------------------
    2298/     790 :                     ;;; LD_REG8P3_P1
    2299/     790 :                     ;;; REG8(P3)=P1
    2300/     790 :                     ;;;----------------------------------------------------------------------------
    2301/     790 :                     LD_REG8P3_P1:
    2302/     790 : (MACRO)              	LD_P7_P3
    2302/     790 : A6                                  LD P3_HI
    2302/     791 : BE                                  XCH P7_HI
    2302/     792 : A7                                  LD P3_LO
    2302/     793 : BF                                  XCH P7_LO
    2303/     794 : 47 9A                	JUN LD_REG8P7_P1
    2304/     796 :                     
    2305/     796 :                     ;;;----------------------------------------------------------------------------
    2306/     796 :                     ;;; LD_REG8P2_P1
    2307/     796 :                     ;;; REG8(P2) = P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/03/21 12:27:23


    2308/     796 :                     ;;;----------------------------------------------------------------------------
    2309/     796 :                     LD_REG8P2_P1:
    2310/     796 : (MACRO)              	LD_P7_P2
    2310/     796 : A4                                  LD P2_HI
    2310/     797 : BE                                  XCH P7_HI
    2310/     798 : A5                                  LD P2_LO
    2310/     799 : BF                                  XCH P7_LO
    2311/     79A :                     ;;; 	JUN LD_REG8P7_P1
    2312/     79A :                     ;;;----------------------------------------------------------------------------
    2313/     79A :                     ;;; LD_REG8P7_P1
    2314/     79A :                     ;;; REG8(P7)=P1
    2315/     79A :                     ;;; destroy: P7
    2316/     79A :                     ;;;----------------------------------------------------------------------------
    2317/     79A :                     LD_REG8P7_P1:
    2318/     79A : 2F                  	SRC P7
    2319/     79B : A3                  	LD P1_LO
    2320/     79C : E0                  	WRM
    2321/     79D :                     
    2322/     79D : 6F                  	INC P7_LO
    2323/     79E : 2F                  	SRC P7
    2324/     79F : A2                  	LD P1_HI
    2325/     7A0 : E0                  	WRM
    2326/     7A1 :                     
    2327/     7A1 : C0                  	BBL 0
    2328/     7A2 :                     	
    2329/     7A2 :                     ;;;----------------------------------------------------------------------------
    2330/     7A2 :                     ;;; LD_P1_REG8P7
    2331/     7A2 :                     ;;; P1 = REG8(P7)
    2332/     7A2 :                     ;;;----------------------------------------------------------------------------
    2333/     7A2 :                     LD_P1_REG8P7:
    2334/     7A2 : 2F                  	SRC P7
    2335/     7A3 : E9                  	RDM
    2336/     7A4 : B3                  	XCH P1_LO
    2337/     7A5 :                     
    2338/     7A5 : 6F                  	INC P7_LO		; P7_LO++
    2339/     7A6 : 2F                  	SRC P7
    2340/     7A7 : E9                  	RDM
    2341/     7A8 : B2                  	XCH P1_HI
    2342/     7A9 : C0                  	BBL 0
    2343/     7AA :                     
    2344/     7AA :                     ;;;----------------------------------------------------------------------------
    2345/     7AA :                     ;;; LD_P1_REG8P0
    2346/     7AA :                     ;;; P1 = REG8(P0)
    2347/     7AA :                     ;;;----------------------------------------------------------------------------
    2348/     7AA :                     LD_P1_REG8P0:
    2349/     7AA : (MACRO)              	LD_P7_P0
    2349/     7AA : A0                                  LD P0_HI
    2349/     7AB : BE                                  XCH P7_HI
    2349/     7AC : A1                                  LD P0_LO
    2349/     7AD : BF                                  XCH P7_LO
    2350/     7AE : 47 A2               	JUN LD_P1_REG8P7
    2351/     7B0 :                     
    2352/     7B0 :                     ;;;----------------------------------------------------------------------------
    2353/     7B0 :                     ;;; LD_P1_REG8P1
    2354/     7B0 :                     ;;; P1 = REG8(P1)
    2355/     7B0 :                     ;;;----------------------------------------------------------------------------
    2356/     7B0 :                     LD_P1_REG8P1:
    2357/     7B0 : (MACRO)              	LD_P7_P1
    2357/     7B0 : A2                                  LD P1_HI
    2357/     7B1 : BE                                  XCH P7_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/03/21 12:27:23


    2357/     7B2 : A3                                  LD P1_LO
    2357/     7B3 : BF                                  XCH P7_LO
    2358/     7B4 : 47 A2               	JUN LD_P1_REG8P7
    2359/     7B6 :                     
    2360/     7B6 :                     ;;;----------------------------------------------------------------------------
    2361/     7B6 :                     ;;; LD_P1_REG8P2
    2362/     7B6 :                     ;;; P1 = REG8(P2)
    2363/     7B6 :                     ;;;----------------------------------------------------------------------------
    2364/     7B6 :                     LD_P1_REG8P2:
    2365/     7B6 : (MACRO)              	LD_P7_P2
    2365/     7B6 : A4                                  LD P2_HI
    2365/     7B7 : BE                                  XCH P7_HI
    2365/     7B8 : A5                                  LD P2_LO
    2365/     7B9 : BF                                  XCH P7_LO
    2366/     7BA : 47 A2               	JUN LD_P1_REG8P7
    2367/     7BC :                     
    2368/     7BC :                     ;;;----------------------------------------------------------------------------
    2369/     7BC :                     ;;; LD_P1_REG8P3
    2370/     7BC :                     ;;; P1 = REG8(P3)
    2371/     7BC :                     ;;;----------------------------------------------------------------------------
    2372/     7BC :                     LD_P1_REG8P3:
    2373/     7BC : (MACRO)              	LD_P7_P3
    2373/     7BC : A6                                  LD P3_HI
    2373/     7BD : BE                                  XCH P7_HI
    2373/     7BE : A7                                  LD P3_LO
    2373/     7BF : BF                                  XCH P7_LO
    2374/     7C0 : 47 A2               	JUN LD_P1_REG8P7
    2375/     7C2 :                     
    2376/     7C2 :                     ;;;----------------------------------------------------------------------------
    2377/     7C2 :                     ;;; PRINTHEX_REG16P1
    2378/     7C2 :                     ;;; PRINT REG16(P1)
    2379/     7C2 :                     ;;; destroy: P6, P7
    2380/     7C2 :                     ;;;----------------------------------------------------------------------------
    2381/     7C2 :                     PRINTHEX_REG16P1:
    2382/     7C2 : 5B 00               	JMS PUSH_P0
    2383/     7C4 : (MACRO)              	LD_P0_P3
    2383/     7C4 : A6                                  LD P3_HI
    2383/     7C5 : B0                                  XCH P0_HI
    2383/     7C6 : A7                                  LD P3_LO
    2383/     7C7 : B1                                  XCH P0_LO
    2384/     7C8 : 5B 00               	JMS PUSH_P0
    2385/     7CA : 5B 12               	JMS PUSH_P1
    2386/     7CC : 5B 24               	JMS PUSH_P2
    2387/     7CE :                     	
    2388/     7CE : 57 F4               	JMS LD_P2P3_REG16P1
    2389/     7D0 : A4                  	LD R4
    2390/     7D1 : 5C B2               	JMS PRINT_ACC		; print bit.FEDC
    2391/     7D3 : A5                  	LD R5
    2392/     7D4 : 5C B2               	JMS PRINT_ACC		; print bit.BA98
    2393/     7D6 : A6                  	LD R6
    2394/     7D7 : 5C B2               	JMS PRINT_ACC		; print bit.7654
    2395/     7D9 : A7                  	LD R7
    2396/     7DA : 5C B2               	JMS PRINT_ACC		; print bit.3210
    2397/     7DC :                     
    2398/     7DC : 5B 50               	JMS POP_P2
    2399/     7DE : 5B 43               	JMS POP_P1
    2400/     7E0 : 5B 36               	JMS POP_P0
    2401/     7E2 : (MACRO)              	LD_P3_P0
    2401/     7E2 : A0                                  LD P0_HI
    2401/     7E3 : B6                                  XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/03/21 12:27:23


    2401/     7E4 : A1                                  LD P0_LO
    2401/     7E5 : B7                                  XCH P3_LO
    2402/     7E6 : 5B 36               	JMS POP_P0
    2403/     7E8 : C0                  	BBL 0
    2404/     7E9 :                     
    2405/     7E9 :                     ;;;----------------------------------------------------------------------------
    2406/     7E9 :                     ;;; LD_REG16P6_REG16P7
    2407/     7E9 :                     ;;; REG16(P6) = REG16(P7)
    2408/     7E9 :                     ;;; destroy: P6, P7, CNT_J
    2409/     7E9 :                     ;;;----------------------------------------------------------------------------
    2410/     7E9 :                     LD_REG16P6_REG16P7:
    2411/     7E9 : DC                  	LDM loop(4)
    2412/     7EA : BB                  	XCH CNT_J
    2413/     7EB :                     LDREG16P6P7_LOOP:
    2414/     7EB : 2F                  	SRC P7
    2415/     7EC : E9                  	RDM
    2416/     7ED : 2D                  	SRC P6
    2417/     7EE : E0                  	WRM
    2418/     7EF : 6F                  	INC P7_LO
    2419/     7F0 : 6D                  	INC P6_LO
    2420/     7F1 : 7B EB               	ISZ CNT_J, LDREG16P6P7_LOOP
    2421/     7F3 : C0                  	BBL 0
    2422/     7F4 :                     
    2423/     7F4 :                     ;;;----------------------------------------------------------------------------
    2424/     7F4 :                     ;;; LD_P2P3_REG16P1
    2425/     7F4 :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2426/     7F4 :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2427/     7F4 :                     ;;; destroy: P7
    2428/     7F4 :                     ;;;----------------------------------------------------------------------------
    2429/     7F4 :                     LD_P2P3_REG16P1:
    2430/     7F4 : (MACRO)              	LD_P7_P1
    2430/     7F4 : A2                                  LD P1_HI
    2430/     7F5 : BE                                  XCH P7_HI
    2430/     7F6 : A3                                  LD P1_LO
    2430/     7F7 : BF                                  XCH P7_LO
    2431/     7F8 : 2F                  	SRC P7
    2432/     7F9 : E9                  	RDM
    2433/     7FA : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2434/     7FB :                     
    2435/     7FB : 6F                  	INC P7_LO
    2436/     7FC : 2F                  	SRC P7
    2437/     7FD : E9                  	RDM
    2438/     7FE : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2439/     7FF :                     	
    2440/     7FF : 6F                  	INC P7_LO
    2441/     800 : 2F                  	SRC P7
    2442/     801 : E9                  	RDM
    2443/     802 : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2444/     803 :                     
    2445/     803 : 6F                  	INC P7_LO
    2446/     804 : 2F                  	SRC P7
    2447/     805 : E9                  	RDM
    2448/     806 : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2449/     807 :                     
    2450/     807 : C0                  	BBL 0
    2451/     808 :                     
    2452/     808 :                     ;;;----------------------------------------------------------------------------
    2453/     808 :                     ;;; INC_REG16P0
    2454/     808 :                     ;;; REG16(P0) = REG16(P0)+1
    2455/     808 :                     ;;; destroy: P7(R14, R15)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/03/21 12:27:23


    2456/     808 :                     ;;;----------------------------------------------------------------------------
    2457/     808 :                     INC_REG16P0:
    2458/     808 : A1                  	LD R1
    2459/     809 : BF                  	XCH R15			; save R1 to R15
    2460/     80A :                     
    2461/     80A : DC                  	LDM loop(4)
    2462/     80B : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2463/     80C :                     REG16_INC_LOOP:
    2464/     80C : 21                  	SRC P0
    2465/     80D : E9                  	RDM
    2466/     80E : F2                  	IAC 
    2467/     80F : E0                  	WRM
    2468/     810 : 1C 15               	JCN NZ, REG16_INC_EXIT
    2469/     812 : 61                  	INC R1
    2470/     813 : 7E 0C               	ISZ R14, REG16_INC_LOOP
    2471/     815 :                     
    2472/     815 :                     REG16_INC_EXIT:
    2473/     815 : AF                  	LD R15
    2474/     816 : B1                  	XCH R1			; restore R1
    2475/     817 : C0                  	BBL 0
    2476/     818 :                     
    2477/     818 :                     ;;;----------------------------------------------------------------------------
    2478/     818 :                     ;;; DEC_REG16P0
    2479/     818 :                     ;;; REG16(P0) = REG16(P0) - 1
    2480/     818 :                     ;;; destroy: P7(R14, R15)
    2481/     818 :                     ;;;----------------------------------------------------------------------------
    2482/     818 :                     DEC_REG16P0:
    2483/     818 : A1                  	LD R1
    2484/     819 : BF                  	XCH R15			; save R1 to R15
    2485/     81A :                     
    2486/     81A : DC                  	LDM loop(4)
    2487/     81B : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2488/     81C : F1                  	CLC
    2489/     81D :                     REG16_DEC_LOOP:
    2490/     81D : 21                  	SRC P0
    2491/     81E : E9                  	RDM
    2492/     81F : F8                  	DAC
    2493/     820 : E0                  	WRM
    2494/     821 : 12 26               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2495/     823 : 61                  	INC R1
    2496/     824 : 7E 1D               	ISZ R14, REG16_DEC_LOOP
    2497/     826 :                     REG16_DEC_EXIT:
    2498/     826 : AF                  	LD R15
    2499/     827 : B1                  	XCH R1			; restore R1
    2500/     828 : C0                  	BBL 0
    2501/     829 :                     
    2502/     829 :                     ;;;----------------------------------------------------------------------------
    2503/     829 :                     ;;; CMP_REG16P0_REG16P1
    2504/     829 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2505/     829 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
    2506/     829 :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2507/     829 :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2508/     829 :                     ;;; destroy: P6, P7, R5
    2509/     829 :                     ;;;----------------------------------------------------------------------------
    2510/     829 :                     CMP_REG16P0_REG16P1:
    2511/     829 : A1                  	LD R1
    2512/     82A : BF                  	XCH R15			; save R1 to R15
    2513/     82B : A3                  	LD R3
    2514/     82C : BD                  	XCH R13			; save R3 to R13
    2515/     82D : F0                  	CLB
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/03/21 12:27:23


    2516/     82E : BC                  	XCH R12			; R12 = 0
    2517/     82F : DC                  	LDM loop(4)
    2518/     830 : BE                  	XCH R14			; R14=12, 13, 14, 15
    2519/     831 : FA                  	STC
    2520/     832 :                     REG16_CMP_LOOP:
    2521/     832 : F3                  	CMC
    2522/     833 : 21                  	SRC P0
    2523/     834 : E9                  	RDM
    2524/     835 : 23                  	SRC P1
    2525/     836 : E8                  	SBM
    2526/     837 : 61                  	INC R1
    2527/     838 : 63                  	INC R3
    2528/     839 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2529/     83A : AB                  	LD R11
    2530/     83B : 14 3F               	JCN Z, REG16_CMP_NEXT
    2531/     83D : D1                  	LDM 1
    2532/     83E : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2533/     83F :                     REG16_CMP_NEXT:
    2534/     83F : 7E 32               	ISZ R14, REG16_CMP_LOOP
    2535/     841 : AB                  	LD R11
    2536/     842 : F5                  	RAL
    2537/     843 : F3                  	CMC			; CY=~MSB
    2538/     844 :                     
    2539/     844 : AF                  	LD R15
    2540/     845 : B1                  	XCH R1			; restore R1
    2541/     846 : AD                  	LD R13
    2542/     847 : B3                  	XCH R3			; restore R3
    2543/     848 :                     
    2544/     848 : AC                  	LD R12
    2545/     849 : 14 4C               	JCN Z, REG16_CMP_EXIT0
    2546/     84B : C1                  	BBL 1
    2547/     84C :                     REG16_CMP_EXIT0:
    2548/     84C : C0                  	BBL 0
    2549/     84D :                     
    2550/     84D :                     ;;;----------------------------------------------------------------------------
    2551/     84D :                     ;;; ADD_REG16P0_REG16P1
    2552/     84D :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2553/     84D :                     ;;; destroy: P6, P7
    2554/     84D :                     ;;;----------------------------------------------------------------------------
    2555/     84D :                     ADD_REG16P0_REG16P1:
    2556/     84D : A1                  	LD R1
    2557/     84E : BF                  	XCH R15			; save R1 to R15
    2558/     84F : A3                  	LD R3
    2559/     850 : BD                  	XCH R13			; save R3 to R13
    2560/     851 :                     
    2561/     851 : DC                  	LDM loop(4)
    2562/     852 : BE                  	XCH R14
    2563/     853 : F1                  	CLC
    2564/     854 :                     REG16_ADD_LOOP:
    2565/     854 : 23                  	SRC P1
    2566/     855 : E9                  	RDM
    2567/     856 : 21                  	SRC P0
    2568/     857 : EB                  	ADM
    2569/     858 : E0                  	WRM
    2570/     859 : 61                  	INC R1
    2571/     85A : 63                  	INC R3
    2572/     85B : 7E 54               	ISZ R14, REG16_ADD_LOOP
    2573/     85D :                     
    2574/     85D : AF                  	LD R15
    2575/     85E : B1                  	XCH R1			; restore R1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/03/21 12:27:23


    2576/     85F : AD                  	LD R13
    2577/     860 : B3                  	XCH R3			; restore R3
    2578/     861 : C0                  	BBL 0
    2579/     862 :                     
    2580/     862 :                     ;;;----------------------------------------------------------------------------
    2581/     862 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2582/     862 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2583/     862 :                     ;;; and increment the pointer
    2584/     862 :                     ;;; ACC=0 get number succeed
    2585/     862 :                     ;;; ACC=1 no number, P1=first chalacter
    2586/     862 :                     ;;; destroy: P6, P7, P2, P3
    2587/     862 :                     ;;;----------------------------------------------------------------------------
    2588/     862 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2589/     862 : 5B 12               	JMS PUSH_P1
    2590/     864 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2591/     866 : 5C E9               	JMS ISHEX_P1
    2592/     868 : 1C 6D               	JCN ZN, GETHEX_START
    2593/     86A :                     	;; the first character is not a number
    2594/     86A : 5B 43               	JMS POP_P1
    2595/     86C : C1                  	BBL 1
    2596/     86D :                     GETHEX_START:
    2597/     86D : 24 00               	FIM P2, 00H
    2598/     86F : 26 00               	FIM P3, 00H
    2599/     871 :                     GETHEX_LOOP:
    2600/     871 : 5D 14               	JMS CTOI_P1
    2601/     873 : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2602/     875 : A3                  	LD P1_LO
    2603/     876 : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2604/     877 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2605/     879 : 5C E9               	JMS ISHEX_P1
    2606/     87B : 14 7F               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2607/     87D : 48 71               	JUN GETHEX_LOOP
    2608/     87F :                     GETHEX_EXIT:
    2609/     87F : 5B 43               	JMS POP_P1
    2610/     881 : 47 29               	JUN LD_REG16P1_P2P3
    2611/     883 :                     ;;;	BBL 0
    2612/     883 :                     
    2613/     883 :                     ;;;----------------------------------------------------------------------------
    2614/     883 :                     ;;; EMULATE_OUT_P1
    2615/     883 :                     ;;; Emulate OUT instruction
    2616/     883 :                     ;;;----------------------------------------------------------------------------
    2617/     883 :                     EMULATE_OUT_P1:
    2618/     883 : 2E 01               	FIM P7, EMU_UARTRD
    2619/     885 : 5D 20               	JMS CMP_P1P7
    2620/     887 : 1C 8B               	JCN ZN, EMU_OUT_P1_L1
    2621/     889 : 48 94               	JUN EMU_OUT_UARTRD
    2622/     88B :                     EMU_OUT_P1_L1:
    2623/     88B : 2E 00               	FIM P7, EMU_UARTRC
    2624/     88D : 5D 20               	JMS CMP_P1P7
    2625/     88F : 1C 93               	JCN ZN, EMU_OUT_P1_L2
    2626/     891 : 48 9A               	JUN EMU_OUT_UARTRC
    2627/     893 :                     EMU_OUT_P1_L2:
    2628/     893 : C0                  	BBL 0
    2629/     894 :                     
    2630/     894 :                     EMU_OUT_UARTRD:
    2631/     894 : 22 00               	FIM P1, REG8_A
    2632/     896 : 57 B0               	JMS LD_P1_REG8P1
    2633/     898 : 4C 5D               	JUN PUTCHAR_P1
    2634/     89A :                     ;;;	BBL 0
    2635/     89A :                     EMU_OUT_UARTRC:			; do nothing
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/03/21 12:27:23


    2636/     89A : C0                  	BBL 0
    2637/     89B :                     	
    2638/     89B :                     ;;;----------------------------------------------------------------------------
    2639/     89B :                     ;;; EMULATE_IN_P1
    2640/     89B :                     ;;; Emulate IN instruction
    2641/     89B :                     ;;;----------------------------------------------------------------------------
    2642/     89B :                     EMULATE_IN_P1:
    2643/     89B : 2E 01               	FIM P7, EMU_UARTRD
    2644/     89D : 5D 20               	JMS CMP_P1P7
    2645/     89F : 1C A3               	JCN ZN, EMU_IN_P1_L1
    2646/     8A1 : 48 AC               	JUN EMU_IN_UARTRD
    2647/     8A3 :                     EMU_IN_P1_L1:
    2648/     8A3 : 2E 00               	FIM P7, EMU_UARTRC
    2649/     8A5 : 5D 20               	JMS CMP_P1P7
    2650/     8A7 : 1C AB               	JCN ZN, EMU_IN_P1_L2
    2651/     8A9 : 48 B8               	JUN EMU_IN_UARTRC
    2652/     8AB :                     EMU_IN_P1_L2:
    2653/     8AB : C0                  	BBL 0
    2654/     8AC :                     
    2655/     8AC :                     EMU_IN_UARTRD:
    2656/     8AC : 5C 35               	JMS GETCHAR_P1
    2657/     8AE : 2E 1B               	FIM P7, 1BH		; ESC
    2658/     8B0 : 5D 20               	JMS CMP_P1P7
    2659/     8B2 : 14 BE               	JCN Z, EMU_IN_EXIT
    2660/     8B4 :                     	
    2661/     8B4 : 20 00               	FIM P0, REG8_A
    2662/     8B6 : 47 8A               	JUN LD_REG8P0_P1
    2663/     8B8 :                     ;;;	BBL 0
    2664/     8B8 :                     
    2665/     8B8 :                     EMU_IN_UARTRC:
    2666/     8B8 : 20 00               	FIM P0, REG8_A
    2667/     8BA : 22 22               	FIM P1, EMU_IN_UARTRC_VALUE
    2668/     8BC : 47 8A               	JUN LD_REG8P0_P1
    2669/     8BE :                     ;;;	BBL 0
    2670/     8BE :                     
    2671/     8BE :                     EMU_IN_EXIT:
    2672/     8BE : 5C 9E               	JMS PRINT_CRLF
    2673/     8C0 : 58 C4               	JMS EMU_PRINTREGISTERS
    2674/     8C2 : 40 2D               	JUN CMD_LOOP
    2675/     8C4 :                     	
    2676/     8C4 :                     ;;;----------------------------------------------------------------------------
    2677/     8C4 :                     ;;; EMU_PRINTREGISTERS
    2678/     8C4 :                     ;;;----------------------------------------------------------------------------
    2679/     8C4 :                     EMU_PRINTREGISTERS:
    2680/     8C4 : 20 69               	FIM P0, lo(STR_EMU_REG)
    2681/     8C6 : 5E 00               	JMS PRINTSTR_P0
    2682/     8C8 :                     
    2683/     8C8 : 22 00               	FIM P1, REG8_A
    2684/     8CA : 57 B0               	JMS LD_P1_REG8P1
    2685/     8CC : 5C 83               	JMS PRINTHEX_P1
    2686/     8CE : 5C 96               	JMS PRINT_SPC
    2687/     8D0 :                     
    2688/     8D0 : 56 11               	JMS GETFLAG_S
    2689/     8D2 : 5C B2               	JMS PRINT_ACC
    2690/     8D4 : 56 07               	JMS GETFLAG_Z
    2691/     8D6 : 5C B2               	JMS PRINT_ACC
    2692/     8D8 : 56 1A               	JMS GETFLAG_C
    2693/     8DA : 5C B2               	JMS PRINT_ACC
    2694/     8DC : 5C 96               	JMS PRINT_SPC
    2695/     8DE :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/03/21 12:27:23


    2696/     8DE : 22 0C               	FIM P1, REG16_BC
    2697/     8E0 : 57 C2               	JMS PRINTHEX_REG16P1
    2698/     8E2 : 5C 96               	JMS PRINT_SPC
    2699/     8E4 :                     
    2700/     8E4 : 22 08               	FIM P1, REG16_DE
    2701/     8E6 : 57 C2               	JMS PRINTHEX_REG16P1
    2702/     8E8 : 5C 96               	JMS PRINT_SPC
    2703/     8EA :                     
    2704/     8EA : 22 04               	FIM P1, REG16_HL
    2705/     8EC : 57 C2               	JMS PRINTHEX_REG16P1
    2706/     8EE : 5C 96               	JMS PRINT_SPC
    2707/     8F0 :                     
    2708/     8F0 : 22 18               	FIM P1, REG16_SP
    2709/     8F2 : 57 C2               	JMS PRINTHEX_REG16P1
    2710/     8F4 : 5C 96               	JMS PRINT_SPC
    2711/     8F6 :                     
    2712/     8F6 : 22 14               	FIM P1, REG16_PC
    2713/     8F8 : 57 C2               	JMS PRINTHEX_REG16P1
    2714/     8FA : 5C 96               	JMS PRINT_SPC
    2715/     8FC :                     
    2716/     8FC : 20 1C               	FIM P0, REG16_ADDR
    2717/     8FE : 22 14               	FIM P1, REG16_PC
    2718/     900 : 57 05               	JMS LD_REG16P0_REG16P1
    2719/     902 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2720/     904 : 5C 83               	JMS PRINTHEX_P1
    2721/     906 : 5C 96               	JMS PRINT_SPC
    2722/     908 :                     
    2723/     908 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2724/     90A : 5C 83               	JMS PRINTHEX_P1
    2725/     90C : 5C 96               	JMS PRINT_SPC
    2726/     90E :                     
    2727/     90E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2728/     910 : 5C 83               	JMS PRINTHEX_P1
    2729/     912 : 5C 96               	JMS PRINT_SPC
    2730/     914 :                     
    2731/     914 : 20 0C               	FIM P0, REG16_BC
    2732/     916 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2733/     918 : 58 18               	JMS DEC_REG16P0
    2734/     91A : 5C 83               	JMS PRINTHEX_P1
    2735/     91C : 5C 96               	JMS PRINT_SPC
    2736/     91E :                     	
    2737/     91E : 20 08               	FIM P0, REG16_DE
    2738/     920 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2739/     922 : 58 18               	JMS DEC_REG16P0
    2740/     924 : 5C 83               	JMS PRINTHEX_P1
    2741/     926 : 5C 96               	JMS PRINT_SPC
    2742/     928 :                     
    2743/     928 : 20 04               	FIM P0, REG16_HL
    2744/     92A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2745/     92C : 58 18               	JMS DEC_REG16P0
    2746/     92E : 5C 83               	JMS PRINTHEX_P1
    2747/     930 : 5C 96               	JMS PRINT_SPC
    2748/     932 :                     
    2749/     932 : 20 18               	FIM P0, REG16_SP
    2750/     934 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2751/     936 : 5C 83               	JMS PRINTHEX_P1
    2752/     938 : 5C 96               	JMS PRINT_SPC
    2753/     93A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2754/     93C : 5C 83               	JMS PRINTHEX_P1
    2755/     93E :                     ;;; 	JMS PRINT_SPC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/03/21 12:27:23


    2756/     93E :                     
    2757/     93E : 58 18               	JMS DEC_REG16P0
    2758/     940 : 58 18               	JMS DEC_REG16P0
    2759/     942 :                     	
    2760/     942 : 4C 9E               	JUN PRINT_CRLF
    2761/     944 :                     ;;;	BBL 0
    2762/     944 :                     
    2763/     944 :                     
    2764/     944 :                     	
    2765/     944 :                     ;;;---------------------------------------------------------------------------
    2766/     944 :                     ;;; JIN_P2_CODE_80BF
    2767/     944 :                     ;;; Jump table for CODE 80H to BFH
    2768/     944 :                     ;;; P2=0F0H + CODE.bit(543)0
    2769/     944 :                     ;;;---------------------------------------------------------------------------
    2770/     9EF :                     	org 09EFH
    2771/     9EF :                     JIN_P2_CODE_80BF:
    2772/     9EF : 35                  	JIN P2
    2773/     9F0 :                     	org 09F0H
    2774/     9F0 : 44 5A               	JUN ADI_P1		; 9F0: 80H<=87H
    2775/     9F2 : 44 A5               	JUN ACI_P1		; 9F2: 88H<=8FH
    2776/     9F4 : 44 D7               	JUN SUI_P1		; 9F4: 90H<=97H
    2777/     9F6 : 44 F9               	JUN SBI_P1		; 9F6: 98H<=9FH
    2778/     9F8 : 45 4B               	JUN ANI_P1		; 9F8: A0H<=A7H
    2779/     9FA : 45 82               	JUN XRI_P1		; 9FA: A8H<=AFH
    2780/     9FC : 45 C7               	JUN ORI_P1		; 9FC: B0H<=B7H
    2781/     9FE : 45 F3               	JUN CPI_P1		; 9FE: B8H<=BFH
    2782/     A00 :                     ;;;---------------------------------------------------------------------------
    2783/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2784/     A00 :                     ;;;---------------------------------------------------------------------------
    2785/     A00 :                     	org 0A00H
    2786/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2787/     A00 : 33                  	JIN P1
    2788/     A01 : 00                  	NOP			; do not delete this NOP
    2789/     A02 : 42 52               	JUN CODE_01H
    2790/     A04 : 42 5E               	JUN CODE_02H
    2791/     A06 : 42 66               	JUN CODE_03H
    2792/     A08 : 42 6A               	JUN CODE_04H
    2793/     A0A : 42 6E               	JUN CODE_05H
    2794/     A0C : 42 72               	JUN CODE_06H
    2795/     A0E : 42 76               	JUN CODE_07H
    2796/     A10 : 42 86               	JUN CODE_08H
    2797/     A12 : 42 87               	JUN CODE_09H
    2798/     A14 : 42 8F               	JUN CODE_0AH
    2799/     A16 : 42 99               	JUN CODE_0BH
    2800/     A18 : 42 9D               	JUN CODE_0CH
    2801/     A1A : 42 A1               	JUN CODE_0DH
    2802/     A1C : 42 A5               	JUN CODE_0EH
    2803/     A1E : 42 A9               	JUN CODE_0FH
    2804/     A20 : 42 B9               	JUN CODE_10H
    2805/     A22 : 42 BA               	JUN CODE_11H
    2806/     A24 : 42 C6               	JUN CODE_12H
    2807/     A26 : 42 CE               	JUN CODE_13H
    2808/     A28 : 42 D2               	JUN CODE_14H
    2809/     A2A : 42 D6               	JUN CODE_15H
    2810/     A2C : 42 DA               	JUN CODE_16H
    2811/     A2E : 42 DE               	JUN CODE_17H
    2812/     A30 : 42 EE               	JUN CODE_18H
    2813/     A32 : 42 EF               	JUN CODE_19H
    2814/     A34 : 42 F7               	JUN CODE_1AH
    2815/     A36 : 43 01               	JUN CODE_1BH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/03/21 12:27:23


    2816/     A38 : 43 05               	JUN CODE_1CH
    2817/     A3A : 43 09               	JUN CODE_1DH
    2818/     A3C : 43 0D               	JUN CODE_1EH
    2819/     A3E : 43 11               	JUN CODE_1FH
    2820/     A40 : 43 21               	JUN CODE_20H
    2821/     A42 : 43 22               	JUN CODE_21H
    2822/     A44 : 43 2E               	JUN CODE_22H
    2823/     A46 : 43 4C               	JUN CODE_23H
    2824/     A48 : 43 50               	JUN CODE_24H
    2825/     A4A : 43 54               	JUN CODE_25H
    2826/     A4C : 43 58               	JUN CODE_26H
    2827/     A4E : 43 5C               	JUN CODE_27H
    2828/     A50 : 43 6A               	JUN CODE_28H
    2829/     A52 : 43 6B               	JUN CODE_29H
    2830/     A54 : 43 73               	JUN CODE_2AH
    2831/     A56 : 43 8D               	JUN CODE_2BH
    2832/     A58 : 43 91               	JUN CODE_2CH
    2833/     A5A : 43 95               	JUN CODE_2DH
    2834/     A5C : 43 99               	JUN CODE_2EH
    2835/     A5E : 43 9D               	JUN CODE_2FH
    2836/     A60 : 43 A9               	JUN CODE_30H
    2837/     A62 : 43 AA               	JUN CODE_31H
    2838/     A64 : 43 B6               	JUN CODE_32H
    2839/     A66 : 43 CA               	JUN CODE_33H
    2840/     A68 : 43 CE               	JUN CODE_34H
    2841/     A6A : 43 DA               	JUN CODE_35H
    2842/     A6C : 43 E6               	JUN CODE_36H
    2843/     A6E : 43 EC               	JUN CODE_37H
    2844/     A70 : 43 EE               	JUN CODE_38H
    2845/     A72 : 43 EF               	JUN CODE_39H
    2846/     A74 : 43 F7               	JUN CODE_3AH
    2847/     A76 : 44 0B               	JUN CODE_3BH
    2848/     A78 : 44 0F               	JUN CODE_3CH
    2849/     A7A : 44 15               	JUN CODE_3DH
    2850/     A7C : 44 1B               	JUN CODE_3EH
    2851/     A7E : 44 21               	JUN CODE_3FH
    2852/     A80 : 44 26               	JUN CODE_C0H
    2853/     A82 : 44 2A               	JUN CODE_C1H
    2854/     A84 : 44 30               	JUN CODE_C2H
    2855/     A86 : 44 40               	JUN CODE_C3H
    2856/     A88 : 44 4E               	JUN CODE_C4H
    2857/     A8A : 44 52               	JUN CODE_C5H
    2858/     A8C : 44 58               	JUN CODE_C6H
    2859/     A8E : 44 62               	JUN CODE_C7H
    2860/     A90 : 44 68               	JUN CODE_C8H
    2861/     A92 : 44 70               	JUN CODE_C9H
    2862/     A94 : 44 76               	JUN CODE_CAH
    2863/     A96 : 44 7A               	JUN CODE_CBH
    2864/     A98 : 44 7B               	JUN CODE_CCH
    2865/     A9A : 44 8B               	JUN CODE_CDH
    2866/     A9C : 44 A3               	JUN CODE_CEH
    2867/     A9E : 44 B3               	JUN CODE_CFH
    2868/     AA0 : 44 B9               	JUN CODE_D0H
    2869/     AA2 : 44 BD               	JUN CODE_D1H
    2870/     AA4 : 44 C3               	JUN CODE_D2H
    2871/     AA6 : 44 C7               	JUN CODE_D3H
    2872/     AA8 : 44 CB               	JUN CODE_D4H
    2873/     AAA : 44 CF               	JUN CODE_D5H
    2874/     AAC : 44 D5               	JUN CODE_D6H
    2875/     AAE : 44 DF               	JUN CODE_D7H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/03/21 12:27:23


    2876/     AB0 : 44 E5               	JUN CODE_D8H
    2877/     AB2 : 44 E9               	JUN CODE_D9H
    2878/     AB4 : 44 EA               	JUN CODE_DAH
    2879/     AB6 : 44 EE               	JUN CODE_DBH
    2880/     AB8 : 44 F2               	JUN CODE_DCH
    2881/     ABA : 44 F6               	JUN CODE_DDH
    2882/     ABC : 44 F7               	JUN CODE_DEH
    2883/     ABE : 45 07               	JUN CODE_DFH
    2884/     AC0 : 45 0D               	JUN CODE_E0H
    2885/     AC2 : 45 11               	JUN CODE_E1H
    2886/     AC4 : 45 17               	JUN CODE_E2H
    2887/     AC6 : 45 1B               	JUN CODE_E3H
    2888/     AC8 : 45 3F               	JUN CODE_E4H
    2889/     ACA : 45 43               	JUN CODE_E5H
    2890/     ACC : 45 49               	JUN CODE_E6H
    2891/     ACE : 45 5B               	JUN CODE_E7H
    2892/     AD0 : 45 61               	JUN CODE_E8H
    2893/     AD2 : 45 65               	JUN CODE_E9H
    2894/     AD4 : 45 69               	JUN CODE_EAH
    2895/     AD6 : 45 6D               	JUN CODE_EBH
    2896/     AD8 : 45 7B               	JUN CODE_ECH
    2897/     ADA : 45 7F               	JUN CODE_EDH
    2898/     ADC : 45 80               	JUN CODE_EEH
    2899/     ADE : 45 92               	JUN CODE_EFH
    2900/     AE0 : 45 98               	JUN CODE_F0H
    2901/     AE2 : 45 9C               	JUN CODE_F1H
    2902/     AE4 : 45 AA               	JUN CODE_F2H
    2903/     AE6 : 45 AE               	JUN CODE_F3H
    2904/     AE8 : 45 AF               	JUN CODE_F4H
    2905/     AEA : 45 B3               	JUN CODE_F5H
    2906/     AEC : 45 C5               	JUN CODE_F6H
    2907/     AEE : 45 D7               	JUN CODE_F7H
    2908/     AF0 : 45 DD               	JUN CODE_F8H
    2909/     AF2 : 45 E1               	JUN CODE_F9H
    2910/     AF4 : 45 E7               	JUN CODE_FAH
    2911/     AF6 : 45 EB               	JUN CODE_FBH
    2912/     AF8 : 45 EC               	JUN CODE_FCH
    2913/     AFA : 45 F0               	JUN CODE_FDH
    2914/     AFC : 45 F1               	JUN CODE_FEH
    2915/     AFE : 46 01               	JUN CODE_FFH
    2916/     B00 :                     
    2917/     B00 :                     	org 0B00H
    2918/     B00 :                     ;;;----------------------------------------------------------------------------
    2919/     B00 :                     ;;; PUSH_P0, P1, P2
    2920/     B00 :                     ;;; POP_P0, P1, P2
    2921/     B00 :                     ;;; Push and Pop an 8bit register pair
    2922/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2923/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    2924/     B00 :                     ;;; destroy P7, P6
    2925/     B00 :                     ;;;----------------------------------------------------------------------------
    2926/     B00 :                     
    2927/     B00 :                     PUSHP	macro ThisR0, ThisR1
    2928/     B00 :                     	LD SP_LO
    2929/     B00 :                     	DAC
    2930/     B00 :                     	XCH SP_LO		; --sp.3210
    2931/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    2932/     B00 :                     	LD SP_HI
    2933/     B00 :                     	DAC
    2934/     B00 :                     	XCH SP_HI		; --sp.7654
    2935/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/03/21 12:27:23


    2936/     B00 :                     	SRC SP
    2937/     B00 :                     	LD ThisR0
    2938/     B00 :                     	WRM			; (sp)=R0
    2939/     B00 :                     
    2940/     B00 :                     	LD SP_LO
    2941/     B00 :                     	DAC
    2942/     B00 :                     	XCH SP_LO		; --sp.3210
    2943/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    2944/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    2945/     B00 :                     ;;;	LD SP_HI
    2946/     B00 :                     ;;;	DAC
    2947/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
    2948/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    2949/     B00 :                     	SRC SP
    2950/     B00 :                     	LD ThisR1
    2951/     B00 :                     	WRM			; (sp)=R1
    2952/     B00 :                     
    2953/     B00 :                     	BBL 0
    2954/     B00 :                     	endm
    2955/     B00 :                     ;;;----------------------------------------------------------------------------
    2956/     B00 :                     POPP	macro ThisR0, ThisR1
    2957/     B00 :                     	SRC SP
    2958/     B00 :                     	RDM
    2959/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    2960/     B00 :                     	INC SP_LO		; sp.3210++
    2961/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    2962/     B00 :                     	SRC SP
    2963/     B00 :                     	RDM
    2964/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    2965/     B00 :                     	INC SP_LO		; sp.3210++
    2966/     B00 :                     	LD SP_LO
    2967/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    2968/     B00 :                     	INC SP_HI		; sp.7654++
    2969/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    2970/     B00 :                     	BBL 0
    2971/     B00 :                     	endm
    2972/     B00 :                     ;;;----------------------------------------------------------------------------
    2973/     B00 :                     ;;;----------------------------------------------------------------------------
    2974/     B00 :                     ;;; Generate real codes from macros
    2975/     B00 :                     ;;;----------------------------------------------------------------------------
    2976/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    2976/     B00 : A9                          LD SP_LO
    2976/     B01 : F8                          DAC
    2976/     B02 : B9                          XCH SP_LO               ; --sp.3210
    2976/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    2976/     B05 : A8                          LD SP_HI
    2976/     B06 : F8                          DAC
    2976/     B07 : B8                          XCH SP_HI               ; --sp.7654
    2976/     B08 :                     PUSH_NOBORROW_R0_R1:
    2976/     B08 : 29                          SRC SP
    2976/     B09 : A0                          LD R0
    2976/     B0A : E0                          WRM                     ; (sp)=R0
    2976/     B0B :                     
    2976/     B0B : A9                          LD SP_LO
    2976/     B0C : F8                          DAC
    2976/     B0D : B9                          XCH SP_LO               ; --sp.3210
    2976/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    2976/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    2976/     B0E :                     ;;;     LD SP_HI
    2976/     B0E :                     ;;;     DAC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/03/21 12:27:23


    2976/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    2976/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    2976/     B0E : 29                          SRC SP
    2976/     B0F : A1                          LD R1
    2976/     B10 : E0                          WRM                     ; (sp)=R1
    2976/     B11 :                     
    2976/     B11 : C0                          BBL 0
    2977/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    2977/     B12 : A9                          LD SP_LO
    2977/     B13 : F8                          DAC
    2977/     B14 : B9                          XCH SP_LO               ; --sp.3210
    2977/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
    2977/     B17 : A8                          LD SP_HI
    2977/     B18 : F8                          DAC
    2977/     B19 : B8                          XCH SP_HI               ; --sp.7654
    2977/     B1A :                     PUSH_NOBORROW_R2_R3:
    2977/     B1A : 29                          SRC SP
    2977/     B1B : A2                          LD R2
    2977/     B1C : E0                          WRM                     ; (sp)=R0
    2977/     B1D :                     
    2977/     B1D : A9                          LD SP_LO
    2977/     B1E : F8                          DAC
    2977/     B1F : B9                          XCH SP_LO               ; --sp.3210
    2977/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    2977/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    2977/     B20 :                     ;;;     LD SP_HI
    2977/     B20 :                     ;;;     DAC
    2977/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    2977/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    2977/     B20 : 29                          SRC SP
    2977/     B21 : A3                          LD R3
    2977/     B22 : E0                          WRM                     ; (sp)=R1
    2977/     B23 :                     
    2977/     B23 : C0                          BBL 0
    2978/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    2978/     B24 : A9                          LD SP_LO
    2978/     B25 : F8                          DAC
    2978/     B26 : B9                          XCH SP_LO               ; --sp.3210
    2978/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
    2978/     B29 : A8                          LD SP_HI
    2978/     B2A : F8                          DAC
    2978/     B2B : B8                          XCH SP_HI               ; --sp.7654
    2978/     B2C :                     PUSH_NOBORROW_R4_R5:
    2978/     B2C : 29                          SRC SP
    2978/     B2D : A4                          LD R4
    2978/     B2E : E0                          WRM                     ; (sp)=R0
    2978/     B2F :                     
    2978/     B2F : A9                          LD SP_LO
    2978/     B30 : F8                          DAC
    2978/     B31 : B9                          XCH SP_LO               ; --sp.3210
    2978/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    2978/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    2978/     B32 :                     ;;;     LD SP_HI
    2978/     B32 :                     ;;;     DAC
    2978/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    2978/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    2978/     B32 : 29                          SRC SP
    2978/     B33 : A5                          LD R5
    2978/     B34 : E0                          WRM                     ; (sp)=R1
    2978/     B35 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/03/21 12:27:23


    2978/     B35 : C0                          BBL 0
    2979/     B36 : (MACRO)              POP_P0: POPP R0, R1
    2979/     B36 : 29                          SRC SP
    2979/     B37 : E9                          RDM
    2979/     B38 : B1                          XCH R1              ; R1=(sp)
    2979/     B39 : 69                          INC SP_LO               ; sp.3210++
    2979/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    2979/     B3A : 29                          SRC SP
    2979/     B3B : E9                          RDM
    2979/     B3C : B0                          XCH R0              ; R0=(sp)
    2979/     B3D : 69                          INC SP_LO               ; sp.3210++
    2979/     B3E : A9                          LD SP_LO
    2979/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    2979/     B41 : 68                          INC SP_HI               ; sp.7654++
    2979/     B42 :                     POP_NOCARRY_R0_R1:
    2979/     B42 : C0                          BBL 0
    2980/     B43 : (MACRO)              POP_P1: POPP R2, R3
    2980/     B43 : 29                          SRC SP
    2980/     B44 : E9                          RDM
    2980/     B45 : B3                          XCH R3              ; R3=(sp)
    2980/     B46 : 69                          INC SP_LO               ; sp.3210++
    2980/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    2980/     B47 : 29                          SRC SP
    2980/     B48 : E9                          RDM
    2980/     B49 : B2                          XCH R2              ; R2=(sp)
    2980/     B4A : 69                          INC SP_LO               ; sp.3210++
    2980/     B4B : A9                          LD SP_LO
    2980/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    2980/     B4E : 68                          INC SP_HI               ; sp.7654++
    2980/     B4F :                     POP_NOCARRY_R2_R3:
    2980/     B4F : C0                          BBL 0
    2981/     B50 : (MACRO)              POP_P2: POPP R4, R5
    2981/     B50 : 29                          SRC SP
    2981/     B51 : E9                          RDM
    2981/     B52 : B5                          XCH R5              ; R5=(sp)
    2981/     B53 : 69                          INC SP_LO               ; sp.3210++
    2981/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    2981/     B54 : 29                          SRC SP
    2981/     B55 : E9                          RDM
    2981/     B56 : B4                          XCH R4              ; R4=(sp)
    2981/     B57 : 69                          INC SP_LO               ; sp.3210++
    2981/     B58 : A9                          LD SP_LO
    2981/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    2981/     B5B : 68                          INC SP_HI               ; sp.7654++
    2981/     B5C :                     POP_NOCARRY_R4_R5:
    2981/     B5C : C0                          BBL 0
    2982/     B5D :                     
    2983/     B5D :                     ;;;	org 0B00H
    2984/     B5D :                     ;;;---------------------------------------------------------------------------
    2985/     B5D :                     ;;; PM16
    2986/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    2987/     B5D :                     ;;; 
    2988/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    2989/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    2990/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    2991/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    2992/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    2993/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    2994/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    2995/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/03/21 12:27:23


    2996/     B5D :                     ;;; 
    2997/     B5D :                     ;;;    PM12(BA98.7654.3210)
    2998/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    2999/     B5D :                     ;;; 
    3000/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    3001/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    3002/     B5D :                     ;;;   (for debug with 256 x 16bank)
    3003/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    3004/     B5D :                     ;;;---------------------------------------------------------------------------
    3005/     B5D :                     ;;;---------------------------------------------------------------------------
    3006/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    3007/     B5D :                     ;;; P1 = PM16(REG(P0)++)
    3008/     B5D :                     ;;; destroy: P6, P7
    3009/     B5D :                     ;;;---------------------------------------------------------------------------
    3010/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    3011/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    3011/     B5D : A0                                  LD P0_HI
    3011/     B5E : BC                                  XCH P6_HI
    3011/     B5F : A1                                  LD P0_LO
    3011/     B60 : BD                                  XCH P6_LO
    3012/     B61 : 2D                  	SRC P6
    3013/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    3014/     B63 :                     
    3015/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3016/     B65 : 2F                  	SRC P7
    3017/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3018/     B67 :                     
    3019/     B67 : 6D                  	INC P6_LO
    3020/     B68 : 2D                  	SRC P6
    3021/     B69 : E9                  	RDM
    3022/     B6A : B1                  	XCH P0_LO		; P0_LO=REG(P0).bit7654
    3023/     B6B :                     	
    3024/     B6B : 6D                  	INC P6_LO
    3025/     B6C : 2D                  	SRC P6
    3026/     B6D : E9                  	RDM
    3027/     B6E : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitBA98
    3028/     B6F :                     
    3029/     B6F : 6D                  	INC P6_LO
    3030/     B70 : 2D                  	SRC P6
    3031/     B71 : E9                  	RDM
    3032/     B72 :                     
    3033/     B72 : 2E 40               	FIM P7, CHIP_PMSELECT1
    3034/     B74 : 2F                  	SRC P7
    3035/     B75 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    3036/     B76 :                     
    3037/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3038/     B78 :                     
    3039/     B78 : AC                  	LD P6_HI			; restore P0
    3040/     B79 : B0                  	XCH P0_HI
    3041/     B7A : AD                  	LD P6_LO
    3042/     B7B : F8                  	DAC
    3043/     B7C : F8                  	DAC
    3044/     B7D : F8                  	DAC
    3045/     B7E : B1                  	XCH P0_LO
    3046/     B7F : 48 08               	JUN INC_REG16P0
    3047/     B81 :                     ;;;	BBL 0
    3048/     B81 :                     
    3049/     B81 :                     ;;;---------------------------------------------------------------------------
    3050/     B81 :                     ;;; LD_PM16REG16P0_P1
    3051/     B81 :                     ;;; PM16(REG(P0)) = P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/03/21 12:27:23


    3052/     B81 :                     ;;; 
    3053/     B81 :                     ;;; destroy: P7
    3054/     B81 :                     ;;;---------------------------------------------------------------------------
    3055/     B81 :                     LD_PM16REG16P0_P1:
    3056/     B81 : 21                  	SRC P0
    3057/     B82 : E9                  	RDM			; bit3210 of REG(P0)
    3058/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3059/     B85 : 2F                  	SRC P7
    3060/     B86 : E1                  	WMP			; set bank to REG(P0).bit3210
    3061/     B87 :                     
    3062/     B87 :                     
    3063/     B87 : 61                  	INC P0_LO
    3064/     B88 : 21                  	SRC P0
    3065/     B89 : E9                  	RDM			; bit7654 of REG(P0)
    3066/     B8A : BD                  	XCH P6_LO		; R13 = REG(P0).bit7654
    3067/     B8B :                     
    3068/     B8B : 61                  	INC P0_LO
    3069/     B8C : 21                  	SRC P0
    3070/     B8D : E9                  	RDM
    3071/     B8E : BC                  	XCH P6_HI		; R12 = REG(P0).bitBA98
    3072/     B8F :                     	
    3073/     B8F : 61                  	INC P0_LO
    3074/     B90 : 21                  	SRC P0
    3075/     B91 : E9                  	RDM
    3076/     B92 :                     
    3077/     B92 : 2E 40               	FIM P7, CHIP_PMSELECT1
    3078/     B94 : 2F                  	SRC P7
    3079/     B95 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    3080/     B96 :                     
    3081/     B96 : 2D                  	SRC P6
    3082/     B97 : A3                  	LD P1_LO
    3083/     B98 : E3                  	WPM
    3084/     B99 : A2                  	LD P1_HI
    3085/     B9A : E3                  	WPM
    3086/     B9B :                     	
    3087/     B9B : A1                  	LD R1			; restore P0
    3088/     B9C : F8                  	DAC
    3089/     B9D : F8                  	DAC
    3090/     B9E : F8                  	DAC
    3091/     B9F : B1                  	XCH R1
    3092/     BA0 : C0                  	BBL 0
    3093/     BA1 :                     
    3094/     BA1 :                     ;;;----------------------------------------------------------------------------
    3095/     BA1 :                     ;;; Subroutines for program memory operation
    3096/     BA1 :                     ;;;----------------------------------------------------------------------------
    3097/     BA1 :                     ;;;---------------------------------------------------------------------------
    3098/     BA1 :                     ;;; PM_WRITE_P0_P1
    3099/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3100/     BA1 :                     ;;; (0F00H+P0) = P1
    3101/     BA1 :                     ;;; input: P0, P1
    3102/     BA1 :                     ;;; output: none
    3103/     BA1 :                     ;;;---------------------------------------------------------------------------
    3104/     BA1 :                     PM_WRITE_P0_P1:
    3105/     BA1 : 21                  	SRC P0
    3106/     BA2 : A3                  	LD P1_LO
    3107/     BA3 : E3                  	WPM			; write lower 4bit
    3108/     BA4 : A2                  	LD P1_HI
    3109/     BA5 : E3                  	WPM			; write higher 4bit
    3110/     BA6 : C0                  	BBL 0
    3111/     BA7 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/03/21 12:27:23


    3112/     BA7 :                     ;;;---------------------------------------------------------------------------
    3113/     BA7 :                     ;;; PM_WRITE_P6_P7
    3114/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3115/     BA7 :                     ;;; (0F00H+P6) = P7
    3116/     BA7 :                     ;;; input: P6, P7
    3117/     BA7 :                     ;;; output: none
    3118/     BA7 :                     ;;;---------------------------------------------------------------------------
    3119/     BA7 :                     PM_WRITE_P6_P7:
    3120/     BA7 : 2D                  	SRC P6
    3121/     BA8 : AF                  	LD P7_LO
    3122/     BA9 : E3                  	WPM			; write lower 4bit
    3123/     BAA : AE                  	LD P7_HI
    3124/     BAB : E3                  	WPM			; write higher 4bit
    3125/     BAC : C0                  	BBL 0
    3126/     BAD :                     
    3127/     BAD :                     ;;;---------------------------------------------------------------------------
    3128/     BAD :                     ;;; PM_INIT_BANK
    3129/     BAD :                     ;;; initialization for program memory (RAM)
    3130/     BAD :                     ;;; Write a subroutne code for reading memory
    3131/     BAD :                     ;;; destroy: P6, P7
    3132/     BAD :                     ;;;---------------------------------------------------------------------------
    3133/     BAD :                     PM_INIT_BANK:	
    3134/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3135/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3136/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3137/     BB3 : 6D                  	INC P6_LO
    3138/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3139/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3140/     BB8 : C0                  	BBL 0
    3141/     BB9 :                     
    3142/     BB9 :                     ;;;---------------------------------------------------------------------------
    3143/     BB9 :                     ;;; PM_SELECTPMB_P1
    3144/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3145/     BB9 :                     ;;; destroy: P7
    3146/     BB9 :                     ;;;---------------------------------------------------------------------------
    3147/     BB9 :                     PM_SELECTPMB_P1:
    3148/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3149/     BBB : 2F                  	SRC P7
    3150/     BBC : A3                  	LD P1_LO
    3151/     BBD : E1                  	WMP
    3152/     BBE :                     
    3153/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3154/     BC0 : 2F                  	SRC P7
    3155/     BC1 : A2                  	LD P1_HI
    3156/     BC2 : E1                  	WMP
    3157/     BC3 : C0                  	BBL 0
    3158/     BC4 :                     ;;;----------------------------------------------------------------------------
    3159/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3160/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3161/     BC4 :                     ;;; The value of REG(P0) does not change
    3162/     BC4 :                     ;;;----------------------------------------------------------------------------
    3163/     BC4 :                     GETLINE_PM16REG16P0:
    3164/     BC4 : 5B 00               	JMS PUSH_P0
    3165/     BC6 : 5B 12               	JMS PUSH_P1
    3166/     BC8 :                     
    3167/     BC8 : 22 28               	FIM P1, REG16_MON_TMP
    3168/     BCA : 57 0F               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3169/     BCC :                     
    3170/     BCC :                     GETLINE_LOOP:
    3171/     BCC : 5C 35               	JMS GETCHAR_P1		; P1 = getchar()
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/03/21 12:27:23


    3172/     BCE :                     
    3173/     BCE : 5D 35               	JMS ISCRLF_P1
    3174/     BD0 : 14 D8               	JCN Z, GETLINE_L1
    3175/     BD2 : 5C AA               	JMS PRINT_CR
    3176/     BD4 : 5C AE               	JMS PRINT_LF
    3177/     BD6 : 4B FC               	JUN GETLINE_EXIT
    3178/     BD8 :                     GETLINE_L1:
    3179/     BD8 : 2E 08               	FIM P7, 08H		; backspace
    3180/     BDA : 5D 20               	JMS CMP_P1P7
    3181/     BDC : 14 E0               	JCN Z, GETLINE_BS
    3182/     BDE : 4B F4               	JUN GETLINE_INSERTCHAR
    3183/     BE0 :                     GETLINE_BS:
    3184/     BE0 : 22 28               	FIM P1, REG16_MON_TMP
    3185/     BE2 : 58 29               	JMS CMP_REG16P0_REG16P1
    3186/     BE4 : 1C E8               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3187/     BE6 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3188/     BE8 :                     GETLINE_DO_BS:			; delete a character on the cursor
    3189/     BE8 : 58 18               	JMS DEC_REG16P0		; REG(P0)--
    3190/     BEA :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3191/     BEA : 22 08               	FIM P1, 08H
    3192/     BEC : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3193/     BEE : 5C 96               	JMS PRINT_SPC		; put ' '
    3194/     BF0 : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3195/     BF2 :                     
    3196/     BF2 : 4B CC               	JUN GETLINE_LOOP
    3197/     BF4 :                     GETLINE_INSERTCHAR:
    3198/     BF4 : 5C 5D               	JMS PUTCHAR_P1
    3199/     BF6 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3200/     BF8 : 58 08               	JMS INC_REG16P0		; REG(P0)++
    3201/     BFA :                     	
    3202/     BFA : 4B CC               	JUN GETLINE_LOOP
    3203/     BFC :                     GETLINE_EXIT:
    3204/     BFC : 22 00               	FIM P1, 00H
    3205/     BFE : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3206/     C00 :                     
    3207/     C00 : 22 28               	FIM P1, REG16_MON_TMP
    3208/     C02 : 57 05               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3209/     C04 : 5B 43               	JMS POP_P1		; restore P1
    3210/     C06 : 4B 36               	JUN POP_P0		; restore P0
    3211/     C08 :                     ;;;	BBL 0
    3212/     C08 :                     
    3213/     C08 :                     ;;;----------------------------------------------------------------------------
    3214/     C08 :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3215/     C08 :                     ;;; Print a string 
    3216/     C08 :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3217/     C08 :                     ;;; REG(INDEX) is incremented to
    3218/     C08 :                     ;;;	the end of the string
    3219/     C08 :                     ;;; 
    3220/     C08 :                     ;;; destroy: P6, P7
    3221/     C08 :                     ;;;----------------------------------------------------------------------------
    3222/     C08 :                     PRINTSTR_PM16REG16P0:
    3223/     C08 : 5B 12               	JMS PUSH_P1
    3224/     C0A :                     PRINTSTR_LOOP:
    3225/     C0A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3226/     C0C : 5D 2D               	JMS ISZEROORNOT_P1
    3227/     C0E : 14 14               	JCN Z, PRINTSTR_EXIT
    3228/     C10 : 5C 5D               	JMS PUTCHAR_P1
    3229/     C12 : 4C 0A               	JUN PRINTSTR_LOOP
    3230/     C14 :                     PRINTSTR_EXIT:
    3231/     C14 : 4B 43               	JUN POP_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/03/21 12:27:23


    3232/     C16 :                     ;;;	BBL 0
    3233/     C16 :                     
    3234/     C16 :                     ;;;----------------------------------------------------------------------------
    3235/     C16 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3236/     C16 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3237/     C16 :                     ;;; and increment the pointer
    3238/     C16 :                     ;;; output: P1
    3239/     C16 :                     ;;; ACC=0 get number success
    3240/     C16 :                     ;;; ACC=1 no number, P1=first character
    3241/     C16 :                     ;;; destroy: P6, P7
    3242/     C16 :                     ;;;----------------------------------------------------------------------------
    3243/     C16 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
    3244/     C16 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3245/     C18 : 5C E9               	JMS ISHEX_P1
    3246/     C1A : 1C 1D               	JCN ZN, GETHEXBYTE_L1
    3247/     C1C : C1                  	BBL 1			; no hex number and exit
    3248/     C1D :                     GETHEXBYTE_L1:	
    3249/     C1D : 5B 24               	JMS PUSH_P2
    3250/     C1F : 5D 14               	JMS CTOI_P1
    3251/     C21 : A3                  	LD  P1_LO
    3252/     C22 : B4                  	XCH P2_HI			; save for upper digit
    3253/     C23 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3254/     C25 : 5C E9               	JMS ISHEX_P1
    3255/     C27 : 14 2F               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3256/     C29 : 5D 14               	JMS CTOI_P1
    3257/     C2B : A4                  	LD P2_HI
    3258/     C2C : B2                  	XCH P1_HI
    3259/     C2D : 4B 50               	JUN POP_P2
    3260/     C2F :                     ;;;	BBL 0
    3261/     C2F :                     GETHEXZBYTE_1DIGIT_EXIT:
    3262/     C2F : F0                  	CLB
    3263/     C30 : B2                  	XCH P1_HI
    3264/     C31 : A4                  	LD P2_HI
    3265/     C32 : B3                  	XCH P1_LO
    3266/     C33 : 4B 50               	JUN POP_P2
    3267/     C35 :                     ;;;	BBL 0
    3268/     C35 :                     	
    3269/     C35 :                     ;;;----------------------------------------------------------------------------
    3270/     C35 :                     ;;; I/O and some basic routines located in Page 0D00H
    3271/     C35 :                     ;;;----------------------------------------------------------------------------
    3272/     C35 :                     ;;;	org 0C00H
    3273/     C35 :                     ;;;---------------------------------------------------------------------------
    3274/     C35 :                     ;;; Software UART Routine
    3275/     C35 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3276/     C35 :                     ;;; defined in separated file
    3277/     C35 :                     ;;;---------------------------------------------------------------------------
    3278/     C35 :                     ;;; supported baudrates are 4800bps or 9600bps
    3279/     C35 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3280/     C35 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3281/     C35 :                     
    3282/     C35 : =2580H               	switch BAUDRATE
    3283/     C35 : =>FALSE              	case 4800
    3284/     C35 :                     	include "4800bps.inc"
    3285/     C35 : =>TRUE               	case 9600
    3286/     C35 :                     	include "9600bps.inc"
(1)    1/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C35 :                     ;;; getchar and putchar functions
(1)    3/     C35 :                     ;;; baud rate = 9600bps
(1)    4/     C35 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C35 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 65 - 2023/03/21 12:27:23


(1)    6/     C35 :                     
(1)    7/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C35 :                     ;;; GETCHAR_P1
(1)    9/     C35 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C35 :                     ;;;
(1)   11/     C35 :                     ;;; Input: none
(1)   12/     C35 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     C35 :                     ;;; Working: P6, P7
(1)   14/     C35 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C35 :                     ;;; 
(1)   16/     C35 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C35 :                     ;;; 
(1)   18/     C35 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C35 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C35 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C35 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C35 :                     ;;;               |->phase delay
(1)   23/     C35 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C35 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C35 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C35 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C35 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C35 :                     
(1)   29/     C35 :                     GETCHAR_P1:
(1)   30/     C35 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C37 :                                                     ; 
(1)   32/     C37 : 19 37                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C39 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3B : 7F 3B               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3D :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3D :                     GETCHAR_L1:
(1)   37/     C3D : 19 42               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C3F : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C40 : 4C 45                       JUN GETCHAR_L3          ;<2>
(1)   40/     C42 :                     GETCHAR_L2:
(1)   41/     C42 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C43 : 00                          NOP                     ;[1]
(1)   43/     C44 : 00                          NOP                     ;[1]
(1)   44/     C45 :                     GETCHAR_L3:
(1)   45/     C45 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C46 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C47 : 7D 3D                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     C49 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C49 : B3                  	XCH R3                  ;(1)
(1)   50/     C4A : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4C :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4C :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4C :                     GETCHAR_L4:
(1)   54/     C4C : 19 51               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C4E : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     C4F : 4C 54                       JUN GETCHAR_L6          ;<2>
(1)   57/     C51 :                     GETCHAR_L5:
(1)   58/     C51 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C52 : 00                          NOP                     ;[1]
(1)   60/     C53 : 00                          NOP                     ;[1]
(1)   61/     C54 :                     GETCHAR_L6:
(1)   62/     C54 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C55 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C56 : 7D 4C                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C58 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 66 - 2023/03/21 12:27:23


(1)   66/     C58 : B2                  	XCH R2                  ;(1)
(1)   67/     C59 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C59 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C59 :                     	;; check stop bit
(1)   70/     C59 : 19 5C                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5B : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5C :                     GETCHAR_OK:
(1)   73/     C5C : C0                  	BBL 0
(1)   74/     C5D :                                     
(1)   75/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5D :                     ;;; PUTCHAR_P1
(1)   77/     C5D :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     C5D :                     ;;; 
(1)   79/     C5D :                     ;;; Input: P1(R2,R3)
(1)   80/     C5D :                     ;;; Output: ACC=0
(1)   81/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5D :                     ;;; P1 is not affected
(1)   84/     C5D :                     ;;; 
(1)   85/     C5D :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5D :                     ;;; 
(1)   87/     C5D :                     ;;; Input: P1(R2,R3)
(1)   88/     C5D :                     ;;; Output: ACC=0
(1)   89/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5D :                     ;;; 
(1)   93/     C5D :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5D :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5D :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5D :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5D :                     
(1)   99/     C5D :                     PUTCHAR_P1:
(1)  100/     C5D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5D :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5D :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5D : [100]                	endif
(1)  104/     C5D :                     	
(1)  105/     C5D : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C5F : 2F                  	SRC P7              ; set port address
(1)  107/     C60 :                     
(1)  108/     C60 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C62 : A3                          LD R3
(1)  110/     C63 : F1                          CLC                 ; start bit is 0
(1)  111/     C64 : F5                          RAL
(1)  112/     C65 :                                     
(1)  113/     C65 :                     PUTCHAR_L1:
(1)  114/     C65 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C66 : 00                          NOP                 ;(1)
(1)  116/     C67 : 00                          NOP                 ;(1)
(1)  117/     C68 : 00                          NOP                 ;(1)
(1)  118/     C69 : 00                          NOP                 ;(1)
(1)  119/     C6A : E1                          WMP                 ;(1)
(1)  120/     C6B : F6                          RAR                 ;(1)
(1)  121/     C6C : 7D 65                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C6E :                     	
(1)  123/     C6E : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C70 : A2                          LD R2               ;(1)
(1)  125/     C71 : FA                          STC                 ;(1) stop bit is 1
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 67 - 2023/03/21 12:27:23


(1)  126/     C72 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C73 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C74 :                     PUTCHAR_L2:
(1)  129/     C74 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C75 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C77 : 7F 77                       ISZ R15, $          ;(4)
(1)  132/     C79 : F6                          RAR                 ;(1)
(1)  133/     C7A : 7D 74                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7C :                     	
(1)  135/     C7C : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7C :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7C :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     C7C : [135]                	endif
(1)  139/     C7C :                     	
(1)  140/     C7C : C0                          BBL 0
(1)  141/     C7D :                     
(1)  142/     C7D :                     
    3287/     C7D : [3282]               	endcase
    3288/     C7D :                     
    3289/     C7D :                     ;;;---------------------------------------------------------------------------
    3290/     C7D :                     ;;; INIT_SERIAL
    3291/     C7D :                     ;;; Initialize serial port
    3292/     C7D :                     ;;;---------------------------------------------------------------------------
    3293/     C7D :                     INIT_SERIAL:
    3294/     C7D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3295/     C7D :                     	LDM BANK_SERIAL	    ; bank of output port
    3296/     C7D :                     	DCL		    ; set port bank
    3297/     C7D : [3294]               	endif
    3298/     C7D :                     	
    3299/     C7D : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3300/     C7F : 2F                  	SRC P7		    ; set port address
    3301/     C80 : D1                  	LDM 1
    3302/     C81 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3303/     C82 :                     
    3304/     C82 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3305/     C82 :                     	LDM BANK_DEFAULT    
    3306/     C82 :                     	DCL		    ; restore bank to default
    3307/     C82 : [3304]               	endif
    3308/     C82 :                     	
    3309/     C82 : C0                  	BBL 0
    3310/     C83 :                     
    3311/     C83 :                     ;;;----------------------------------------------------------------------------
    3312/     C83 :                     ;;; PRINTHEX_P1
    3313/     C83 :                     ;;; Print 8bit register pair in HEX format
    3314/     C83 :                     ;;; PRINT HEX
    3315/     C83 :                     ;;; destroy: P6, P7
    3316/     C83 :                     ;;;----------------------------------------------------------------------------
    3317/     C83 :                     PRINTHEX_P1:
    3318/     C83 : 5B 00               	JMS PUSH_P0
    3319/     C85 : 5B 12               	JMS PUSH_P1
    3320/     C87 : (MACRO)              	LD_P0_P1
    3320/     C87 : A2                                  LD P1_HI
    3320/     C88 : B0                                  XCH P0_HI
    3320/     C89 : A3                                  LD P1_LO
    3320/     C8A : B1                                  XCH P0_LO
    3321/     C8B : A0                  	LD R0
    3322/     C8C : 5C B2               	JMS PRINT_ACC		; print upper 4bit
    3323/     C8E : A1                  	LD R1
    3324/     C8F : 5C B2               	JMS PRINT_ACC		; print lower 4bit
    3325/     C91 : 5B 43               	JMS POP_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 68 - 2023/03/21 12:27:23


    3326/     C93 : 5B 36               	JMS POP_P0
    3327/     C95 : C0                  	BBL 0
    3328/     C96 :                     
    3329/     C96 :                     ;;;---------------------------------------------------------------------------
    3330/     C96 :                     ;;; PRINT_SPC
    3331/     C96 :                     ;;; print " "
    3332/     C96 :                     ;;; destroy: ACC
    3333/     C96 :                     ;;; This routine consumes 2 PC stack
    3334/     C96 :                     ;;;---------------------------------------------------------------------------
    3335/     C96 :                     PRINT_SPC:
    3336/     C96 : 5B 12               	JMS PUSH_P1
    3337/     C98 : 22 20               	FIM P1, ' '
    3338/     C9A : 5C 5D               	JMS PUTCHAR_P1
    3339/     C9C : 4B 43               	JUN POP_P1
    3340/     C9E :                     ;;;	BBL 0
    3341/     C9E :                     
    3342/     C9E :                     ;;;---------------------------------------------------------------------------
    3343/     C9E :                     ;;; PRINT_CRLF
    3344/     C9E :                     ;;; print "\r\n"
    3345/     C9E :                     ;;; destroy: ACC
    3346/     C9E :                     ;;; This routine consumes 2 PC stack
    3347/     C9E :                     ;;;---------------------------------------------------------------------------
    3348/     C9E :                     PRINT_CRLF:
    3349/     C9E : 5B 12               	JMS PUSH_P1
    3350/     CA0 : 22 0D               	FIM P1, '\r'
    3351/     CA2 : 5C 5D               	JMS PUTCHAR_P1
    3352/     CA4 : 22 0A               	FIM P1, '\n'
    3353/     CA6 : 5C 5D               	JMS PUTCHAR_P1
    3354/     CA8 : 4B 43               	JUN POP_P1
    3355/     CAA :                     ;;;	BBL 0
    3356/     CAA :                     
    3357/     CAA :                     ;;;---------------------------------------------------------------------------
    3358/     CAA :                     ;;; PRINT_CR
    3359/     CAA :                     ;;; print "\r"
    3360/     CAA :                     ;;; destroy: P1, ACC
    3361/     CAA :                     ;;; This routine consumes 1 PC stack
    3362/     CAA :                     ;;;---------------------------------------------------------------------------
    3363/     CAA :                     PRINT_CR:
    3364/     CAA : 22 0D               	FIM P1, '\r'
    3365/     CAC : 4C 5D               	JUN PUTCHAR_P1
    3366/     CAE :                     
    3367/     CAE :                     ;;;---------------------------------------------------------------------------
    3368/     CAE :                     ;;; PRINT_LF
    3369/     CAE :                     ;;; print "\n"
    3370/     CAE :                     ;;; destroy: P1, ACC
    3371/     CAE :                     ;;; This routine consumes 1 PC stack
    3372/     CAE :                     ;;;---------------------------------------------------------------------------
    3373/     CAE :                     PRINT_LF:
    3374/     CAE : 22 0A               	FIM P1, '\n'
    3375/     CB0 : 4C 5D               	JUN PUTCHAR_P1
    3376/     CB2 :                     
    3377/     CB2 :                     ;;;---------------------------------------------------------------------------
    3378/     CB2 :                     ;;; PRINT_ACC
    3379/     CB2 :                     ;;; print contents of ACC('0'...'F') as a character
    3380/     CB2 :                     ;;; destroy: P1, P6, P7, ACC
    3381/     CB2 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3382/     CB2 :                     ;;;---------------------------------------------------------------------------
    3383/     CB2 :                     PRINT_ACC:
    3384/     CB2 : 22 30               	FIM P1, '0'
    3385/     CB4 : F1                  	CLC			; clear carry
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/03/21 12:27:23


    3386/     CB5 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3387/     CB6 : 1A BA               	JCN CN, PRINTACC_L1
    3388/     CB8 : 62                  	INC P1_HI
    3389/     CB9 : F2                  	IAC
    3390/     CBA :                     PRINTACC_L1:	
    3391/     CBA : B3                  	XCH P1_LO		; P1_LO<-ACC
    3392/     CBB : 4C 5D               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3393/     CBD :                     
    3394/     CBD :                     ;;;----------------------------------------------------------------------------
    3395/     CBD :                     ;;; INC_P1
    3396/     CBD :                     ;;; P1=P1+1
    3397/     CBD :                     ;;;----------------------------------------------------------------------------
    3398/     CBD :                     INC_P1:	
    3399/     CBD : 63                  	INC P1_LO
    3400/     CBE : A3                  	LD P1_LO
    3401/     CBF : 1C C2               	JCN ZN, INC_P1_EXIT
    3402/     CC1 : 62                  	INC P1_HI
    3403/     CC2 :                     INC_P1_EXIT:	
    3404/     CC2 : C0                  	BBL 0
    3405/     CC3 :                     
    3406/     CC3 :                     ;;;----------------------------------------------------------------------------
    3407/     CC3 :                     ;;; DEC_P1
    3408/     CC3 :                     ;;; P1=P1-1
    3409/     CC3 :                     ;;;----------------------------------------------------------------------------
    3410/     CC3 :                     DEC_P1:	
    3411/     CC3 : A3                  	LD P1_LO
    3412/     CC4 : F8                  	DAC
    3413/     CC5 : B3                  	XCH P1_LO
    3414/     CC6 : 12 CB               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3415/     CC8 : A2                  	LD P1_HI		; decrement upper 4bit
    3416/     CC9 : F8                  	DAC
    3417/     CCA : B2                  	XCH P1_HI
    3418/     CCB :                     DEC_P1_EXIT:	
    3419/     CCB : C0                  	BBL 0
    3420/     CCC :                     	
    3421/     CCC :                     ;;;----------------------------------------------------------------------------
    3422/     CCC :                     ;;; ISALPHA_P1
    3423/     CCC :                     ;;; check P1 is an alphabet as a ascii character
    3424/     CCC :                     ;;; return: ACC=0 if P1 is not an alphabet
    3425/     CCC :                     ;;;	    ACC=1 if P1 is an alphabet
    3426/     CCC :                     ;;; destroy: P7
    3427/     CCC :                     ;;;----------------------------------------------------------------------------
    3428/     CCC :                     ISALPHA_P1:
    3429/     CCC :                     ISALPHA_L1:
    3430/     CCC : 2E 41               	FIM P7, 'A'
    3431/     CCE : 5D 20               	JMS CMP_P1P7
    3432/     CD0 : 12 D3               	JCN C, ISALPHA_L10
    3433/     CD2 : C0                  	BBL 0			; P1<'A'
    3434/     CD3 :                     ISALPHA_L10:
    3435/     CD3 : 2E 5B               	FIM P7, 'Z'+1
    3436/     CD5 : 5D 20               	JMS CMP_P1P7
    3437/     CD7 : 12 DA               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3438/     CD9 : C1                  	BBL 1			; 'A'<=P1<='Z'
    3439/     CDA :                     ISALPHA_L2:
    3440/     CDA : 2E 61               	FIM P7, 'a'
    3441/     CDC : 5D 20               	JMS CMP_P1P7
    3442/     CDE : 12 E1               	JCN C, ISALPHA_L20
    3443/     CE0 : C0                  	BBL 0			; P1<'a'
    3444/     CE1 :                     ISALPHA_L20:	
    3445/     CE1 : 2E 7B               	FIM P7, 'z'+1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/03/21 12:27:23


    3446/     CE3 : 5D 20               	JMS CMP_P1P7
    3447/     CE5 : 12 E8               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3448/     CE7 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3449/     CE8 :                     ISALPHA_FALSE:
    3450/     CE8 : C0                  	BBL 0
    3451/     CE9 :                     
    3452/     CE9 :                     ;;;----------------------------------------------------------------------------
    3453/     CE9 :                     ;;; ISHEX_P1
    3454/     CE9 :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3455/     CE9 :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3456/     CE9 :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3457/     CE9 :                     ;;; destroy: P7
    3458/     CE9 :                     ;;;----------------------------------------------------------------------------
    3459/     CE9 :                     ISHEX_P1:
    3460/     CE9 : 2E 30               	FIM P7, '0'
    3461/     CEB : 5D 20               	JMS CMP_P1P7
    3462/     CED : 12 F0               	JCN C, ISHEX_L00
    3463/     CEF : C0                  	BBL 0			; P1<'0'
    3464/     CF0 :                     ISHEX_L00:	
    3465/     CF0 : 2E 3A               	FIM P7, '9'+1
    3466/     CF2 : 5D 20               	JMS CMP_P1P7
    3467/     CF4 : 12 F7               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3468/     CF6 : C1                  	BBL 1			; '0'<=P1<='9'
    3469/     CF7 :                     ISHEX_L1:
    3470/     CF7 : 2E 41               	FIM P7, 'A'
    3471/     CF9 : 5D 20               	JMS CMP_P1P7
    3472/     CFB : 12 FE               	JCN C, ISHEX_L10
    3473/     CFD : C0                  	BBL 0			; P1<'A'
    3474/     CFE :                     ISHEX_L10:
    3475/     CFE : 2E 47               	FIM P7, 'F'+1
    3476/     D00 : 5D 20               	JMS CMP_P1P7
    3477/     D02 : 12 05               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3478/     D04 : C1                  	BBL 1			; 'A'<=P1<='F'
    3479/     D05 :                     ISHEX_L2:
    3480/     D05 : 2E 61               	FIM P7, 'a'
    3481/     D07 : 5D 20               	JMS CMP_P1P7
    3482/     D09 : 12 0C               	JCN C, ISHEX_L20
    3483/     D0B : C0                  	BBL 0			; P1<'a'
    3484/     D0C :                     ISHEX_L20:	
    3485/     D0C : 2E 67               	FIM P7, 'f'+1
    3486/     D0E : 5D 20               	JMS CMP_P1P7
    3487/     D10 : 12 13               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3488/     D12 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3489/     D13 :                     ISHEX_FALSE:
    3490/     D13 : C0                  	BBL 0
    3491/     D14 :                     
    3492/     D14 :                     ;;;---------------------------------------------------------------------------
    3493/     D14 :                     ;;; CTOI_P1
    3494/     D14 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3495/     D14 :                     ;;; no error check
    3496/     D14 :                     ;;; input: P1(R2R3)
    3497/     D14 :                     ;;; output: P1_LO, (P1_HI=0)
    3498/     D14 :                     ;;;---------------------------------------------------------------------------
    3499/     D14 :                     CTOI_P1:
    3500/     D14 : F0                  	CLB
    3501/     D15 : D3                  	LDM 3
    3502/     D16 : 92                  	SUB P1_HI
    3503/     D17 : 14 1D               	JCN Z, CTOI_09	; check upper 4bit
    3504/     D19 : F0                  	CLB
    3505/     D1A : D9                  	LDM 9
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/03/21 12:27:23


    3506/     D1B : 83                  	ADD P1_LO
    3507/     D1C : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3508/     D1D :                     CTOI_09:
    3509/     D1D : F0                  	CLB
    3510/     D1E : B2                  	XCH R2			; R2 = 0
    3511/     D1F : C0                  	BBL 0
    3512/     D20 :                     	
    3513/     D20 :                     ;;;---------------------------------------------------------------------------
    3514/     D20 :                     ;;; CMP_P1P7
    3515/     D20 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3516/     D20 :                     ;;; input: P1, P7
    3517/     D20 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3518/     D20 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3519/     D20 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3520/     D20 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3521/     D20 :                     ;;;---------------------------------------------------------------------------
    3522/     D20 :                     CMP_P1P7:
    3523/     D20 : F0                  	CLB
    3524/     D21 : A2                  	LD R2			
    3525/     D22 : 9E                  	SUB R14			;R2-R14
    3526/     D23 : 14 26               	JCN Z, CMP17_L1		; jump if R2==R14
    3527/     D25 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3528/     D26 :                     CMP17_L1:	
    3529/     D26 : F0                  	CLB
    3530/     D27 : A3                  	LD R3
    3531/     D28 : 9F                  	SUB R15			;R3-R15
    3532/     D29 : 14 2C               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3533/     D2B : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3534/     D2C :                     				; if P1>P7 then ACC=1, CY=1
    3535/     D2C :                     CMP17_EXIT01:
    3536/     D2C : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3537/     D2D :                     	
    3538/     D2D :                     ;;;---------------------------------------------------------------------------
    3539/     D2D :                      ;;; ISZEROORNOT_P1
    3540/     D2D :                     ;;; check P1 is zero or not
    3541/     D2D :                     ;;; Return 0 if P1 is 0
    3542/     D2D :                     ;;; return: ACC=0 if P1 == 0
    3543/     D2D :                     ;;;	    ACC=1 if P1 != 0
    3544/     D2D :                     ;;;---------------------------------------------------------------------------
    3545/     D2D :                     ISZEROORNOT_P1:
    3546/     D2D : A3                  	LD P1_LO
    3547/     D2E : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3548/     D30 : A2                  	LD P1_HI
    3549/     D31 : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3550/     D33 : C0                  	BBL 0
    3551/     D34 :                     ISZEROORNOT_EXIT1:
    3552/     D34 : C1                  	BBL 1
    3553/     D35 :                     
    3554/     D35 :                     ;;;---------------------------------------------------------------------------
    3555/     D35 :                     ;;; ISCRLF_P1
    3556/     D35 :                     ;;; check if P1=='\r' | P1=='\n'
    3557/     D35 :                     ;;; input: P0
    3558/     D35 :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3559/     D35 :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3560/     D35 :                     ;;;---------------------------------------------------------------------------
    3561/     D35 :                     ISCRLF_P1:
    3562/     D35 : A2                  	LD R2
    3563/     D36 : 1C 42               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3564/     D38 : F1                  	CLC
    3565/     D39 : DD                  	LDM '\r'
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/03/21 12:27:23


    3566/     D3A : 93                  	SUB R3
    3567/     D3B : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3568/     D3D : F1                  	CLC
    3569/     D3E : DA                  	LDM '\n'
    3570/     D3F : 93                  	SUB R3
    3571/     D40 : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3572/     D42 :                     ISCRLF_EXIT0:
    3573/     D42 : C0                  	BBL 0
    3574/     D43 :                     ISCRLF_EXIT1:
    3575/     D43 : C1                  	BBL 1
    3576/     D44 :                     
    3577/     D44 :                     ;;;---------------------------------------------------------------------------
    3578/     D44 :                     ;;; TOUPPER_P1
    3579/     D44 :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3580/     D44 :                     ;;;---------------------------------------------------------------------------
    3581/     D44 :                     TOUPPER_P1:
    3582/     D44 : 5C CC               	JMS ISALPHA_P1
    3583/     D46 : 14 4F               	JCN Z, TOUPPER_P1_EXIT
    3584/     D48 : A2                  	LD P1_HI
    3585/     D49 : F6                  	RAR
    3586/     D4A : F6                  	RAR
    3587/     D4B : F1                  	CLC
    3588/     D4C : F5                  	RAL
    3589/     D4D : F5                  	RAL
    3590/     D4E : B2                  	XCH P1_HI
    3591/     D4F :                     TOUPPER_P1_EXIT:
    3592/     D4F : C0                  	BBL 0
    3593/     D50 :                     
    3594/     D50 :                     ;;;---------------------------------------------------------------------------
    3595/     D50 :                     ;;; PRINT_DATARAM_P0
    3596/     D50 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3597/     D50 :                     ;;;---------------------------------------------------------------------------
    3598/     D50 :                     PRINT_DATARAM_P0:
    3599/     D50 : A0                  	LD P0_HI		; PRINT ADDDR
    3600/     D51 : 5C B2               	JMS PRINT_ACC
    3601/     D53 : A1                  	LD P0_LO
    3602/     D54 : 5C B2               	JMS PRINT_ACC
    3603/     D56 : 22 3A               	FIM P1, ':'
    3604/     D58 : 5C 5D               	JMS PUTCHAR_P1
    3605/     D5A :                     CMDDD_L2:
    3606/     D5A : F0                  	CLB		; PRINT data characters
    3607/     D5B : 21                  	SRC P0		; set address
    3608/     D5C : E9                  	RDM		; read data memory
    3609/     D5D : 5C B2               	JMS PRINT_ACC
    3610/     D5F : 71 5A               	ISZ P0_LO, CMDDD_L2
    3611/     D61 :                     
    3612/     D61 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3613/     D63 : 5C 5D               	JMS PUTCHAR_P1
    3614/     D65 : 21                  	SRC P0		; set address
    3615/     D66 : EC                  	RD0
    3616/     D67 : B2                  	XCH P1_HI
    3617/     D68 : ED                  	RD1
    3618/     D69 : B3                  	XCH P1_LO
    3619/     D6A : 5C 83               	JMS PRINTHEX_P1
    3620/     D6C : 21                  	SRC P0		; set address
    3621/     D6D : EE                  	RD2
    3622/     D6E : B2                  	XCH P1_HI
    3623/     D6F : EF                  	RD3
    3624/     D70 : B3                  	XCH P1_LO
    3625/     D71 : 5C 83               	JMS PRINTHEX_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/03/21 12:27:23


    3626/     D73 : 4C 9E               	JUN PRINT_CRLF
    3627/     D75 :                     ;;;	BBL 0
    3628/     D75 :                     
    3629/     D75 :                     ;;;----------------------------------------------------------------------------
    3630/     D75 :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3631/     D75 :                     ;;; The string data sould be located in the same page as the print routine.
    3632/     D75 :                     ;;;----------------------------------------------------------------------------
    3633/     E00 :                     	org 0E00H
    3634/     E00 :                     ;;;----------------------------------------------------------------------------
    3635/     E00 :                     ;;; PRINTSTR_P0
    3636/     E00 :                     ;;; Print a string with a delimiter 00H
    3637/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3638/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3639/     E00 :                     ;;;----------------------------------------------------------------------------
    3640/     E00 :                     PRINTSTR_P0:
    3641/     E00 : 5B 00               	JMS PUSH_P0
    3642/     E02 : 5B 12               	JMS PUSH_P1
    3643/     E04 :                     PRINTSTRP0_LOOP:
    3644/     E04 : 32                  	FIN P1			; P1=(P0)
    3645/     E05 : A2                  	LD P1_HI
    3646/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3647/     E08 : A3                  	LD P1_LO
    3648/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3649/     E0B :                     PRINTSTRP0_PUT:
    3650/     E0B : 5C 5D               	JMS PUTCHAR_P1		; putchar(P1)
    3651/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3652/     E0F : 60                  	INC P0_HI
    3653/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3654/     E12 :                     PRINTSTRP0_EXIT:
    3655/     E12 : 5B 43               	JMS POP_P1
    3656/     E14 : 4B 36               	JUN POP_P0
    3657/     E16 :                     ;;;	BBL 0
    3658/     E16 :                     		
    3659/     E16 :                     	
    3660/     E16 :                     ;;;----------------------------------------------------------------------------
    3661/     E16 :                     ;;; MUL16_P2P3
    3662/     E16 :                     ;;; P2P3 = P2P3*16
    3663/     E16 :                     ;;;----------------------------------------------------------------------------
    3664/     E16 :                     MUL16_P2P3:	
    3665/     E16 : A5                  	LD R5
    3666/     E17 : B4                  	XCH R4			; 100'->1000'
    3667/     E18 : A6                  	LD R6
    3668/     E19 : B5                  	XCH R5			; 10'->100'
    3669/     E1A : A7                  	LD R7
    3670/     E1B : B6                  	XCH R6			; 1'->10'
    3671/     E1C : F0                  	CLB
    3672/     E1D : B7                  	XCH R7			; 0->1'
    3673/     E1E : C0                  	BBL 0
    3674/     E1F :                     
    3675/     E1F :                     ;;;----------------------------------------------------------------------------
    3676/     E1F :                     ;;; String data
    3677/     E1F :                     ;;;----------------------------------------------------------------------------
    3678/     E1F :                     
    3679/     E1F :                     STR_OMSG:
    3680/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/03/21 12:27:23


    3681/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3682/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3683/     E47 :                     STR_EMU_MESSAGE:
    3684/     E47 : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 1.0\r\n", 0
              E4D : 20 45 6D 75 6C 61 
              E53 : 74 6F 72 20 6F 6E 
              E59 : 20 34 30 30 34 20 
              E5F : 56 65 72 20 31 2E 
              E65 : 30 0D 0A 00       
    3685/     E69 :                     
    3686/     E69 :                     STR_EMU_REG:
    3687/     E69 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
              E6F : 20 20 42 43 20 20 
              E75 : 20 44 45 20 20 20 
              E7B : 48 4C 20 20 20 53 
              E81 : 50 20 20 20 50 43 
              E87 : 20 28 2B 30 20 2B 
              E8D : 31 20 2B 32 29 42 
              E93 : 43 29 44 45 29 48 
              E99 : 4C 29 53 50 20 2B 
              E9F : 31 29 0D 0A 00    
    3688/     EA4 :                     STR_EMU_HLT:
    3689/     EA4 : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              EAA : 0A 00             
    3690/     EAC :                     ;;; strings for register command of 4004 monitor
    3691/     EAC :                     ;;; STR_REG0:
    3692/     EAC :                     ;;;	data "AC	SP1111\r\n", 0
    3693/     EAC :                     ;;; STR_REG1:
    3694/     EAC :                     ;;;	data "CY01234567890123\r\n", 0
    3695/     EAC :                     ;;; STR_DATAREG:
    3696/     EAC :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
    3697/     EAC :                     
    3698/     EAC :                     STR_CMDERR:
    3699/     EAC : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3700/     EB0 :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3701/     EB0 : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              EB6 : 41 43 45 0D 0A 00 
    3702/     EBC :                     STR_ERROR_LOADCOMMAND:
    3703/     EBC : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              EC2 : 45 52 52 4F 52 0D 
              EC8 : 0A 00             
    3704/     ECA :                     
    3705/     ECA :                     ;;;---------------------------------------------------------------------------
    3706/     ECA :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3707/     ECA :                     ;;;---------------------------------------------------------------------------
    3708/     ECA :                     ;;; READPM_P0
    3709/     ECA :                     ;;; P1 = (P0)
    3710/     ECA :                     ;;; input: P0
    3711/     ECA :                     ;;; output: P1
    3712/     ECA :                     ;;;---------------------------------------------------------------------------
    3713/     ECA :                     ;;;	org 0F7EH
    3714/     ECA :                     ;;; PM_READ_P0_P1:
    3715/     ECA : 32                  	FIN P1
    3716/     ECB : C0                  	BBL 0
    3717/     ECC :                     
    3718/     ECC :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/03/21 12:27:23


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4A5 C |  ACI_P1_NOCARRY :               4AB C |
 ADD_REG16P0_REG16P1 :          84D C |  ADD_REG8P0_P1 :                735 C |
 ADI_P1 :                       45A C |  AND67_L1 :                     658 C |
 AND67_L2 :                     664 C |  AND67_L3 :                     670 C |
 AND67_L4 :                     679 C |  AND_P1_P2 :                    67A C |
 AND_R6_R7 :                    64E C |  ANI_P1 :                       54B C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  CALL_IF0 :                     484 C |
 CALL_IF1 :                     47D C |  CALL_P2P3 :                    497 C |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT0 :                 0 - |
 CHIP_PMSELECT1 :                40 - |  CHIP_RAM0 :                      0 - |
 CHIP_RAM1 :                     40 - | *CHIP_RAM2 :                     80 - |
 CHIP_RAM3 :                    0C0 - |  CHIP_SERIAL :                  0C0 - |
 CMDDD_L1 :                     0A9 C |  CMDDD_L2 :                    0D5A C |
 CMDDL_L0 :                     120 C |  CMDDL_L1 :                     128 C |
*CMDDL_NEXT :                   132 C |  CMDDP_EXIT :                   0EE C |
 CMDDP_L0 :                     0C4 C |  CMDDP_L1 :                     0DC C |
 CMDD_L1 :                       89 C |  CMDD_L2 :                       91 C |
 CMDD_L3 :                       99 C |  CMDH_EXIT :                    108 C |
 CMDH_SET :                     0FE C |  CMDL_CONTINUE :                186 C |
 CMDL_ERROR :                   174 C |  CMDL_EXIT :                    19E C |
 CMDL_L0 :                      146 C |  CMDL_L1 :                      14E C |
 CMDL_L2 :                      16C C |  CMDL_L3 :                      18E C |
 CMDL_L5 :                      19C C |  CMDL_READLOOP :                17E C |
 CMDL_START :                   134 C |  CMDPMC_BANKLOOP :              1A8 C |
 CMDPMC_L1 :                    1B2 C |  CMD_LOOP :                      2D C |
 CMP17_EXIT01 :                0D2C C |  CMP17_L1 :                    0D26 C |
 CMP_P1P7 :                    0D20 C |  CMP_REG16P0_REG16P1 :          829 C |
 CODE_003F :                    1D9 C |  CODE_007F :                    1D4 C |
 CODE_00H :                     251 C |  CODE_01H :                     252 C |
 CODE_02H :                     25E C |  CODE_03H :                     266 C |
 CODE_04H :                     26A C |  CODE_05H :                     26E C |
 CODE_06H :                     272 C |  CODE_07H :                     276 C |
 CODE_08H :                     286 C |  CODE_09H :                     287 C |
 CODE_0AH :                     28F C |  CODE_0BH :                     299 C |
 CODE_0CH :                     29D C |  CODE_0DH :                     2A1 C |
 CODE_0EH :                     2A5 C |  CODE_0FH :                     2A9 C |
 CODE_10H :                     2B9 C |  CODE_11H :                     2BA C |
 CODE_12H :                     2C6 C |  CODE_13H :                     2CE C |
 CODE_14H :                     2D2 C |  CODE_15H :                     2D6 C |
 CODE_16H :                     2DA C |  CODE_17H :                     2DE C |
 CODE_18H :                     2EE C |  CODE_19H :                     2EF C |
 CODE_1AH :                     2F7 C |  CODE_1BH :                     301 C |
 CODE_1CH :                     305 C |  CODE_1DH :                     309 C |
 CODE_1EH :                     30D C |  CODE_1FH :                     311 C |
 CODE_20H :                     321 C |  CODE_21H :                     322 C |
 CODE_22H :                     32E C |  CODE_23H :                     34C C |
 CODE_24H :                     350 C |  CODE_25H :                     354 C |
 CODE_26H :                     358 C |  CODE_27H :                     35C C |
 CODE_28H :                     36A C |  CODE_29H :                     36B C |
 CODE_2AH :                     373 C |  CODE_2BH :                     38D C |
 CODE_2CH :                     391 C |  CODE_2DH :                     395 C |
 CODE_2EH :                     399 C |  CODE_2FH :                     39D C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/03/21 12:27:23


 CODE_30H :                     3A9 C |  CODE_31H :                     3AA C |
 CODE_32H :                     3B6 C |  CODE_33H :                     3CA C |
 CODE_34H :                     3CE C |  CODE_35H :                     3DA C |
 CODE_36H :                     3E6 C |  CODE_37H :                     3EC C |
 CODE_38H :                     3EE C |  CODE_39H :                     3EF C |
 CODE_3AH :                     3F7 C |  CODE_3BH :                     40B C |
 CODE_3CH :                     40F C |  CODE_3DH :                     415 C |
 CODE_3EH :                     41B C |  CODE_3FH :                     421 C |
 CODE_407F :                    1F3 C |  CODE_407F_MOV :                218 C |
 CODE_76H :                     24F C |  CODE_80BF :                    1F3 C |
 CODE_80BF_ARITH_LOGIC :        240 C |  CODE_80FF :                    1EA C |
 CODE_C0FF :                    1E1 C |  CODE_C0H :                     426 C |
 CODE_C1H :                     42A C |  CODE_C2H :                     430 C |
 CODE_C3H :                     440 C |  CODE_C4H :                     44E C |
 CODE_C5H :                     452 C |  CODE_C6H :                     458 C |
 CODE_C7H :                     462 C |  CODE_C8H :                     468 C |
 CODE_C9H :                     470 C |  CODE_CAH :                     476 C |
 CODE_CALL :                    48B C |  CODE_CBH :                     47A C |
 CODE_CCH :                     47B C |  CODE_CDH :                     48B C |
 CODE_CEH :                     4A3 C |  CODE_CFH :                     4B3 C |
 CODE_D0H :                     4B9 C |  CODE_D1H :                     4BD C |
 CODE_D2H :                     4C3 C |  CODE_D3H :                     4C7 C |
 CODE_D4H :                     4CB C |  CODE_D5H :                     4CF C |
 CODE_D6H :                     4D5 C |  CODE_D7H :                     4DF C |
 CODE_D8H :                     4E5 C |  CODE_D9H :                     4E9 C |
 CODE_DAH :                     4EA C |  CODE_DBH :                     4EE C |
 CODE_DCH :                     4F2 C |  CODE_DCR :                     417 C |
 CODE_DDH :                     4F6 C |  CODE_DEH :                     4F7 C |
 CODE_DFH :                     507 C |  CODE_E0H :                     50D C |
 CODE_E1H :                     511 C |  CODE_E2H :                     517 C |
 CODE_E3H :                     51B C |  CODE_E4H :                     53F C |
 CODE_E5H :                     543 C |  CODE_E6H :                     549 C |
 CODE_E7H :                     55B C |  CODE_E8H :                     561 C |
 CODE_E9H :                     565 C |  CODE_EAH :                     569 C |
 CODE_EBH :                     56D C |  CODE_ECH :                     57B C |
 CODE_EDH :                     57F C |  CODE_EEH :                     580 C |
 CODE_EFH :                     592 C |  CODE_F0H :                     598 C |
 CODE_F1H :                     59C C |  CODE_F2H :                     5AA C |
 CODE_F3H :                     5AE C |  CODE_F4H :                     5AF C |
 CODE_F5H :                     5B3 C |  CODE_F6H :                     5C5 C |
 CODE_F7H :                     5D7 C |  CODE_F8H :                     5DD C |
 CODE_F9H :                     5E1 C |  CODE_FAH :                     5E7 C |
 CODE_FBH :                     5EB C |  CODE_FCH :                     5EC C |
 CODE_FDH :                     5F0 C |  CODE_FEH :                     5F1 C |
 CODE_FFH :                     601 C |  CODE_INR :                     411 C |
 CODE_JMP :                     440 C |  CODE_MOV_L1 :                  220 C |
 CODE_MOV_WRITE_M_TO_PM :       23C C |  CODE_MVI :                     41D C |
 CODE_NOT_NOP :                 1E1 C |  CODE_POP_REG8P2P3 :            5A0 C |
 CODE_PUSH_REG8P2P3 :           5B7 C |  CODE_RET :                     470 C |
 COMMAND_C :                    1A6 C |  COMMAND_D :                     79 C |
 COMMAND_DD :                    9F C |  COMMAND_DL :                   116 C |
 COMMAND_DP :                   0B8 C |  COMMAND_E :                    1C0 C |
 COMMAND_G :                    0F4 C |  COMMAND_H :                    0F6 C |
 COMMAND_L :                    134 C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CPI_P1 :                       5F3 C |
 CTOI_09 :                     0D1D C |  CTOI_P1 :                     0D14 C |
*DATE :                "2023/03/21" - |  DEC_P1 :                      0CC3 C |
 DEC_P1_EXIT :                 0CCB C |  DEC_REG16P0 :                  818 C |
 DEC_REG8P1 :                   767 C |  EMULATE_IN_P1 :                89B C |
 EMULATE_OUT_P1 :               883 C | *EMU_EXIT :                     1C8 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/03/21 12:27:23


 EMU_IN_EXIT :                  8BE C |  EMU_IN_P1_L1 :                 8A3 C |
 EMU_IN_P1_L2 :                 8AB C |  EMU_IN_UARTRC :                8B8 C |
 EMU_IN_UARTRC_VALUE :           22 - |  EMU_IN_UARTRD :                8AC C |
 EMU_LOOP :                     1C4 C |  EMU_OUT_P1_L1 :                88B C |
 EMU_OUT_P1_L2 :                893 C |  EMU_OUT_UARTRC :               89A C |
 EMU_OUT_UARTRD :               894 C |  EMU_PRINTREGISTERS :           8C4 C |
*EMU_START :                    1C0 C |  EMU_STEPMODE :                   0 - |
 EMU_UARTRC :                     0 - |  EMU_UARTRD :                     1 - |
 EMU_USE_DAA :                    0 - |  EMU_USE_FLAG_P :                 0 - |
 EXEC_CODE :                    1CA C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR_L1 :                  0C3D C |
 GETCHAR_L2 :                  0C42 C |  GETCHAR_L3 :                  0C45 C |
 GETCHAR_L4 :                  0C4C C |  GETCHAR_L5 :                  0C51 C |
 GETCHAR_L6 :                  0C54 C |  GETCHAR_OK :                  0C5C C |
 GETCHAR_P1 :                  0C35 C |  GETFLAG_C :                    61A C |
 GETFLAG_C_1 :                  622 C |  GETFLAG_P :                    623 C |
 GETFLAG_S :                    611 C |  GETFLAG_S_EXIT1 :              619 C |
 GETFLAG_Z :                    607 C |  GETFLAG_Z_EXIT1 :              610 C |
 GETHEXBYTE_L1 :               0C1D C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C16 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C2F C |  GETHEX_EXIT :                  87F C |
 GETHEX_LOOP :                  871 C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 862 C |
 GETHEX_START :                 86D C |  GETLINE_BS :                  0BE0 C |
 GETLINE_DO_BS :               0BE8 C |  GETLINE_EXIT :                0BFC C |
 GETLINE_INSERTCHAR :          0BF4 C |  GETLINE_L1 :                  0BD8 C |
*GETLINE_L1_NEXT :             0BEA C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                206 C |
 GETSRC_SAVE_SRCVALUE :         20C C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBD C |  INC_P1_EXIT :                 0CC2 C |
 INC_REG16P0 :                  808 C |  INC_REG8P1 :                   746 C |
 INIT_SERIAL :                 0C7D C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CE8 C | *ISALPHA_L1 :                  0CCC C |
 ISALPHA_L10 :                 0CD3 C |  ISALPHA_L2 :                  0CDA C |
 ISALPHA_L20 :                 0CE1 C |  ISALPHA_P1 :                  0CCC C |
 ISCRLF_EXIT0 :                0D42 C |  ISCRLF_EXIT1 :                0D43 C |
 ISCRLF_P1 :                   0D35 C |  ISHEX_FALSE :                 0D13 C |
 ISHEX_L00 :                   0CF0 C |  ISHEX_L1 :                    0CF7 C |
 ISHEX_L10 :                   0CFE C |  ISHEX_L2 :                    0D05 C |
 ISHEX_L20 :                   0D0C C |  ISHEX_P1 :                    0CE9 C |
 ISZEROORNOT_EXIT1 :           0D34 C |  ISZEROORNOT_P1 :              0D2D C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      432 C |  JMP_IF1 :                      439 C |
*L0 :                            3F C |  L1 :                            47 C |
 L10 :                           73 C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 LDREG16P6P7_LOOP :             7EB C |  LD_P1_PM16REG16P0_INCREMENT : 0B5D C |
 LD_P1_REG8P0 :                 7AA C |  LD_P1_REG8P1 :                 7B0 C |
 LD_P1_REG8P2 :                 7B6 C |  LD_P1_REG8P3 :                 7BC C |
 LD_P1_REG8P7 :                 7A2 C |  LD_P2P3_REG16P1 :              7F4 C |
 LD_PM16REG16P0_P1 :           0B81 C |  LD_REG16P0_P2P3 :              72F C |
 LD_REG16P0_REG16P1 :           705 C |  LD_REG16P1_P2P3 :              729 C |
 LD_REG16P1_REG16P0 :           70F C |  LD_REG16P6_REG16P7 :           7E9 C |
 LD_REG16P7_P2P3 :              719 C |  LD_REG8P0_P1 :                 78A C |
*LD_REG8P0_REG8P1 :             777 C |  LD_REG8P2_P1 :                 796 C |
 LD_REG8P3_P1 :                 790 C |  LD_REG8P6_REG8P7 :             77F C |
 LD_REG8P7_P1 :                 79A C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MAIN :                           0 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/03/21 12:27:23


*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                  0E16 C | *NESTMAX :                      100 - |
 OR67_L1 :                      6D2 C |  OR67_L2 :                      6DE C |
 OR67_L3 :                      6EA C |  OR67_L4 :                      6F3 C |
 ORI_P1 :                       5C7 C |  OR_P1_P2 :                     6F4 C |
 OR_R6_R7 :                     6C8 C | *PADDING :                        1 - |
 PM16_LINEBUF :                0D00 - | *PM16_MEMSTART :                  0 - |
 PM_INIT_BANK :                0BAD C |  PM_INIT_HLOOP :                  9 C |
 PM_INIT_LLOOP :                 0B C |  PM_RAM_START :                0F00 - |
 PM_READ_P0_P1 :               0FFE - |  PM_SELECTPMB_P1 :             0BB9 C |
 PM_WRITE_P0_P1 :              0BA1 C |  PM_WRITE_P6_P7 :              0BA7 C |
 POP_P0 :                      0B36 C |  POP_P1 :                      0B43 C |
 POP_P2 :                      0B50 C |  PRINTACC_L1 :                 0CBA C |
 PRINTHEX_P1 :                 0C83 C |  PRINTHEX_REG16P1 :             7C2 C |
 PRINTSTRP0_EXIT :             0E12 C |  PRINTSTRP0_LOOP :             0E04 C |
 PRINTSTRP0_PUT :              0E0B C |  PRINTSTR_EXIT :               0C14 C |
 PRINTSTR_LOOP :               0C0A C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM16REG16P0 :        0C08 C |  PRINT_ACC :                   0CB2 C |
 PRINT_CR :                    0CAA C |  PRINT_CRLF :                  0C9E C |
 PRINT_DATARAM_P0 :            0D50 C |  PRINT_LF :                    0CAE C |
 PRINT_SPC :                   0C96 C |  PUSH_P0 :                     0B00 C |
 PUSH_P1 :                     0B12 C |  PUSH_P2 :                     0B24 C |
 PUTCHAR_L1 :                  0C65 C |  PUTCHAR_L2 :                  0C74 C |
 PUTCHAR_P1 :                  0C5D C |  RAM23TYPE :               "4002-2" - |
 REG16_ADDR :                    1C - |  REG16_ADD_LOOP :               854 C |
 REG16_BC :                      0C - |  REG16_CMP_EXIT0 :              84C C |
 REG16_CMP_LOOP :               832 C |  REG16_CMP_NEXT :               83F C |
 REG16_DE :                       8 - |  REG16_DEC_EXIT :               826 C |
 REG16_DEC_LOOP :               81D C |  REG16_HL :                       4 - |
 REG16_INC_EXIT :               815 C |  REG16_INC_LOOP :               80C C |
 REG16_MON_ADDR :                24 - |  REG16_MON_INDEX :               20 - |
*REG16_MON_PMBANK :              30 - |  REG16_MON_TMP :                 28 - |
 REG16_PC :                      14 - |  REG16_SP :                      18 - |
*REG16_STACK_40H :               40 - | *REG16_STACK_7CH :               7C - |
 REG4_FLAG_1P1C :                10 - |  REG4_FLAG_SZBH :                11 - |
 REG8_A :                         0 - |  REG8_ADDRH :                    1E - |
 REG8_ADDRL :                    1C - |  REG8_B :                        0E - |
 REG8_C :                        0C - |  REG8_D :                        0A - |
 REG8_DEC_EXIT :                776 C |  REG8_E :                         8 - |
 REG8_FLAG :                     10 - |  REG8_H :                         6 - |
 REG8_INC_EXIT :                755 C |  REG8_L :                         4 - |
 REG8_M :                         2 - |  REG8_MON_MEMSPACE :             2C - |
*REG8_MON_RESERVED :             2E - |  REG8_PCH :                      16 - |
 REG8_PCL :                      14 - |  REG8_SPH :                      1A - |
 REG8_SPL :                      18 - |  REG8_SRC :                      12 - |
*RELAXED :                        0 - |  RET_IF0 :                      46D C |
 RET_IF1 :                      46A C |  SBI_P1 :                       4F9 C |
 SBI_P1_NOCARRY :               4FF C |  SETFLAG_C_0 :                  626 C |
 SETFLAG_C_1 :                  62F C |  SETFLAG_C_CY :                 624 C |
 SETFLAG_ZSP_P1 :               63E C |  SETFLAG_ZSP_REG8P0 :           638 C |
 SETFLAG_ZSP_REG8P1 :           63C C |  STACK_INIT :                    80 - |
 STR_CMDERR :                  0EAC C | *STR_EMU_HLT :                 0EA4 C |
 STR_EMU_MESSAGE :             0E47 C |  STR_EMU_REG :                 0E69 C |
 STR_ERROR_LOADCOMMAND :       0EBC C |  STR_ERROR_UNKNOWN_MEMSPACE :  0EB0 C |
 STR_OMSG :                    0E1F C |  STR_VFD_INIT :                0E42 C |
 SUB_REG8P0_P1 :                756 C |  SUI_P1 :                       4D7 C |
*TIME :                  "12:27:23" - |  TOUPPER_P1 :                  0D44 C |
 TOUPPER_P1_EXIT :             0D4F C | *TRUE :                           1 - |
*VERSION :                     142F - |  XOR67_L1 :                     695 C |
 XOR67_L2 :                     6A1 C |  XOR67_L3 :                     6AD C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/03/21 12:27:23


 XOR67_L4 :                     6B6 C |  XOR_P1_P2 :                    6B7 C |
 XOR_R6_R7 :                    68B C |  XRI_P1 :                       582 C |

    473 symbols
     40 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/03/21 12:27:23


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/03/21 12:27:23


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_CNT_P1                            
LD_P0_P1                              | LD_P0_P3                             
LD_P1_CNT                             | LD_P1_P0                             
LD_P1_P2                              | LD_P1_P3                             
LD_P2_P1                              | LD_P2_P3                             
LD_P3_P0                              | LD_P3_P1                             
LD_P3_P2                              | LD_P6_P0                             
LD_P6_P1                              | LD_P6_SP                             
LD_P7_P0                              | LD_P7_P1                             
LD_P7_P2                              | LD_P7_P3                             
POPP                                  | PUSHP                                
SETFLAG_SUB_0                         | SETFLAG_SUB_1                        

     24 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/03/21 12:27:23


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/03/21 12:27:23


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4087 lines source file
   4414 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
