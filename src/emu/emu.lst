 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/03/22 17:52:17


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/03/21
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/03/22 17:52:17


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     ;;;----------------------------------------------------------------------------
(1)   79/       0 :                     ;;; LD_REG4P7_ACC
(1)   80/       0 :                     ;;; REG4(P7)=ACC
(1)   81/       0 :                     ;;;----------------------------------------------------------------------------
(1)   82/       0 :                     LD_REG4P7_ACC macro
(1)   83/       0 :                     	SRC P7
(1)   84/       0 :                     	WRM
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     ;;;----------------------------------------------------------------------------
(1)   88/       0 :                     ;;; LD_ACC_REG4P7
(1)   89/       0 :                     ;;; REG4(P7)=ACC
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     LD_ACC_REG4P7 macro
(1)   92/       0 :                     	SRC P7
(1)   93/       0 :                     	RDM
(1)   94/       0 :                     	endm
(1)   95/       0 :                     
(1)   96/       0 :                     ;;;----------------------------------------------------------------------------
(1)   97/       0 :                     ;;; Register Pair Operations
(1)   98/       0 :                     ;;;----------------------------------------------------------------------------
(1)   99/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)  100/       0 :                     		LD P1_HI
(1)  101/       0 :                     		XCH P0_HI
(1)  102/       0 :                     		LD P1_LO
(1)  103/       0 :                     		XCH P0_LO
(1)  104/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/03/22 17:52:17


(1)  105/       0 :                     ;;;----------------------------------------------------------------------------
(1)  106/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  107/       0 :                     		LD P3_HI
(1)  108/       0 :                     		XCH P0_HI
(1)  109/       0 :                     		LD P3_LO
(1)  110/       0 :                     		XCH P0_LO
(1)  111/       0 :                     		endm
(1)  112/       0 :                     ;;;----------------------------------------------------------------------------
(1)  113/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  114/       0 :                     		LD P0_HI
(1)  115/       0 :                     		XCH P1_HI
(1)  116/       0 :                     		LD P0_LO
(1)  117/       0 :                     		XCH P1_LO
(1)  118/       0 :                     		endm
(1)  119/       0 :                     ;;;----------------------------------------------------------------------------
(1)  120/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  121/       0 :                     		LD P2_HI
(1)  122/       0 :                     		XCH P1_HI
(1)  123/       0 :                     		LD P2_LO
(1)  124/       0 :                     		XCH P1_LO
(1)  125/       0 :                     		endm
(1)  126/       0 :                     ;;;----------------------------------------------------------------------------
(1)  127/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  128/       0 :                     		LD P3_HI
(1)  129/       0 :                     		XCH P1_HI
(1)  130/       0 :                     		LD P3_LO
(1)  131/       0 :                     		XCH P1_LO
(1)  132/       0 :                     		endm
(1)  133/       0 :                     ;;;----------------------------------------------------------------------------
(1)  134/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  135/       0 :                     		LD P1_HI
(1)  136/       0 :                     		XCH P2_HI
(1)  137/       0 :                     		LD P1_LO
(1)  138/       0 :                     		XCH P2_LO
(1)  139/       0 :                     		endm
(1)  140/       0 :                     ;;;----------------------------------------------------------------------------
(1)  141/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  142/       0 :                     		LD P3_HI
(1)  143/       0 :                     		XCH P2_HI
(1)  144/       0 :                     		LD P3_LO
(1)  145/       0 :                     		XCH P2_LO
(1)  146/       0 :                     		endm
(1)  147/       0 :                     ;;;----------------------------------------------------------------------------
(1)  148/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  149/       0 :                     		LD P0_HI
(1)  150/       0 :                     		XCH P3_HI
(1)  151/       0 :                     		LD P0_LO
(1)  152/       0 :                     		XCH P3_LO
(1)  153/       0 :                     		endm
(1)  154/       0 :                     ;;;----------------------------------------------------------------------------
(1)  155/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  156/       0 :                     		LD P1_HI
(1)  157/       0 :                     		XCH P3_HI
(1)  158/       0 :                     		LD P1_LO
(1)  159/       0 :                     		XCH P3_LO
(1)  160/       0 :                     		endm
(1)  161/       0 :                     ;;;----------------------------------------------------------------------------
(1)  162/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  163/       0 :                     		LD P2_HI
(1)  164/       0 :                     		XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/03/22 17:52:17


(1)  165/       0 :                     		LD P2_LO
(1)  166/       0 :                     		XCH P3_LO
(1)  167/       0 :                     		endm
(1)  168/       0 :                     ;;;----------------------------------------------------------------------------
(1)  169/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  170/       0 :                     		LD P0_HI
(1)  171/       0 :                     		XCH P6_HI
(1)  172/       0 :                     		LD P0_LO
(1)  173/       0 :                     		XCH P6_LO
(1)  174/       0 :                     		endm
(1)  175/       0 :                     ;;;----------------------------------------------------------------------------
(1)  176/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  177/       0 :                     		LD P1_HI
(1)  178/       0 :                     		XCH P6_HI
(1)  179/       0 :                     		LD P1_LO
(1)  180/       0 :                     		XCH P6_LO
(1)  181/       0 :                     		endm
(1)  182/       0 :                     ;;;----------------------------------------------------------------------------
(1)  183/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  184/       0 :                     		LD SP_HI
(1)  185/       0 :                     		XCH P6_HI
(1)  186/       0 :                     		LD SP_LO
(1)  187/       0 :                     		XCH P6_LO
(1)  188/       0 :                     		endm
(1)  189/       0 :                     ;;;----------------------------------------------------------------------------
(1)  190/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  191/       0 :                     		LD P0_HI
(1)  192/       0 :                     		XCH P7_HI
(1)  193/       0 :                     		LD P0_LO
(1)  194/       0 :                     		XCH P7_LO
(1)  195/       0 :                     		endm
(1)  196/       0 :                     ;;;----------------------------------------------------------------------------
(1)  197/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  198/       0 :                     		LD P1_HI
(1)  199/       0 :                     		XCH P7_HI
(1)  200/       0 :                     		LD P1_LO
(1)  201/       0 :                     		XCH P7_LO
(1)  202/       0 :                     		endm
(1)  203/       0 :                     ;;;----------------------------------------------------------------------------
(1)  204/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  205/       0 :                     		LD P2_HI
(1)  206/       0 :                     		XCH P7_HI
(1)  207/       0 :                     		LD P2_LO
(1)  208/       0 :                     		XCH P7_LO
(1)  209/       0 :                     		endm
(1)  210/       0 :                     ;;;----------------------------------------------------------------------------
(1)  211/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  212/       0 :                     		LD P3_HI
(1)  213/       0 :                     		XCH P7_HI
(1)  214/       0 :                     		LD P3_LO
(1)  215/       0 :                     		XCH P7_LO
(1)  216/       0 :                     		endm
(1)  217/       0 :                     ;;;----------------------------------------------------------------------------
(1)  218/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  219/       0 :                     		LD P1_HI
(1)  220/       0 :                     		XCH CNT_HI
(1)  221/       0 :                     		LD P1_LO
(1)  222/       0 :                     		XCH CNT_LO
(1)  223/       0 :                     		endm
(1)  224/       0 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/03/22 17:52:17


(1)  225/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  226/       0 :                     		LD CNT_HI
(1)  227/       0 :                     		XCH P1_HI
(1)  228/       0 :                     		LD CNT_LO
(1)  229/       0 :                     		XCH P1_LO
(1)  230/       0 :                     		endm
(1)  231/       0 :                     ;;;----------------------------------------------------------------------------
(1)  232/       0 :                     
(1)  233/       0 :                     ;;;----------------------------------------------------------------------------
(1)  234/       0 :                     ;;; For debug
(1)  235/       0 :                     ;;;----------------------------------------------------------------------------
(1)  236/       0 :                     ;;;----------------------------------------------------------------------------
(1)  237/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)  238/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)  239/       0 :                     ;;;----------------------------------------------------------------------------
(1)  240/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)  241/       0 :                     	JMS PUSH_P1
(1)  242/       0 :                     	FIM P1, ch
(1)  243/       0 :                     	JMS PUTCHAR_P1
(1)  244/       0 :                     	JMS POP_P1
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     
      23/       0 :                     ;;;---------------------------------------------------------------------------
      24/       0 :                     ;;; Emulator compile configuration
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 :                     ;; don't use DAA and FLAG_P because it takes much cost to implement them
      27/       0 : =0H                  EMU_USE_DAA = 0		; don't use DAA
      28/       0 :                     ;;; EMU_USE_DAA = 1	; use DAA
      29/       0 : =0H                  EMU_USE_FLAG_P = 0	; don't use P FLAG
      30/       0 :                     ;;; EMU_USE_FLAG_P = 1	; use P FLAG
      31/       0 :                     
      32/       0 :                     SETFLAG_SUB_0 macro
      33/       0 :                     	if EMU_USE_DAA
      34/       0 :                     	JMS DAA_SETFLAG_SUB_0
      35/       0 :                     	endif
      36/       0 :                     	endm
      37/       0 :                     SETFLAG_SUB_1 macro
      38/       0 :                     	if EMU_USE_DAA
      39/       0 :                     	JMS DAA_SETFLAG_SUB_1
      40/       0 :                     	endif
      41/       0 :                     	endm
      42/       0 :                     ;;;---------------------------------------------------------------------------
      43/       0 :                     ;;; Emulator port configuration
      44/       0 :                     ;;;---------------------------------------------------------------------------
      45/       0 : =0H                  EMU_UARTRC	equ	00H	; for tinybasic-1.0
      46/       0 : =1H                  EMU_UARTRD	equ	01H	; for tynybasic-1.0
      47/       0 :                     ;;;	EMU_IN_UARTRC_VALUE	equ 22H	; for tynybasic-1.0
      48/       0 : =0FFH                EMU_IN_UARTRC_VALUE	equ 0FFH	;
      49/       0 :                     
      50/       0 :                     ;;;---------------------------------------------------------------------------
      51/       0 :                     ;;; Hardware Configuration
      52/       0 :                     ;;;---------------------------------------------------------------------------
      53/       0 :                     
      54/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/03/22 17:52:17


      55/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      56/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      57/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      58/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      59/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      60/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      61/       0 :                     
      62/       0 :                     ;;; Chip type of RAM2 and RAM3
      63/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      64/       0 :                     
      65/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      66/       0 : =0H                  BANK_RAM0	equ 0
      67/       0 : =0H                  CHIP_RAM0	equ 00H
      68/       0 : =0H                  BANK_RAM1	equ 0
      69/       0 : =40H                 CHIP_RAM1	equ 40H
      70/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      71/       0 : =0H                  BANK_RAM2	equ 0
      72/       0 : =80H                 CHIP_RAM2	equ 80H
      73/       0 : =0H                  BANK_RAM3	equ 0
      74/       0 : =0C0H                CHIP_RAM3	equ 0C0H
      75/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      76/       0 :                     BANK_RAM2	equ 1
      77/       0 :                     CHIP_RAM2	equ 00H
      78/       0 :                     BANK_RAM3	equ 1
      79/       0 :                     CHIP_RAM3	equ 40H
      80/       0 : [70]                 	endif
      81/       0 :                     
      82/       0 :                     ;;; Default Bank
      83/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      84/       0 :                     ;;; to omit DCL as much as possible.
      85/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      86/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      87/       0 :                     		
      88/       0 :                     ;;; Output port for serial interface
      89/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      90/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      91/       0 :                     
      92/       0 :                     ;;; Output port for program memory bank selection
      93/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      94/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      95/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      96/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      97/       0 :                     
      98/       0 :                     	
      99/       0 :                     ;;; Program Memory RAM area
     100/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
     101/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
     102/       0 :                     				; "FIN P1 and BBL 0"
     103/       0 :                     	
     104/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
     105/       0 : =0H                  PM16_MEMSTART	equ 0000H
     106/       0 : =0D00H               PM16_LINEBUF	equ 0D00H
     107/       0 :                     
     108/       0 :                     ;;; for 256 x 16 x16 PM space
     109/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
     110/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
     111/       0 :                     
     112/       0 :                     ;;;---------------------------------------------------------------------------
     113/       0 :                     ;;; Data RAM Register Configuration
     114/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/03/22 17:52:17


     115/       0 :                     ;;; RAM0
     116/       0 :                     ;;; 
     117/       0 :                     ;;; 8080 register code DDD or SSS
     118/       0 :                     ;;; 0 1 2 3 4 5 6 7
     119/       0 :                     ;;; B C D E H L M A
     120/       0 :                     ;;; 
     121/       0 :                     ;;;  ADDRESS=~(xxx)<<1
     122/       0 :                     	
     123/       0 : =0H                  REG8_A		equ 00H	;
     124/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     125/       0 : =4H                  REG8_L		equ 04H	;
     126/       0 : =6H                  REG8_H		equ 06H	;
     127/       0 : =8H                  REG8_E		equ 08H	;
     128/       0 : =0AH                 REG8_D		equ 0AH	;
     129/       0 : =0CH                 REG8_C		equ 0CH	;
     130/       0 : =0EH                 REG8_B		equ 0EH	;
     131/       0 :                     
     132/       0 : =10H                 REG8_FLAG	equ 10H ;
     133/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     134/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
     135/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     136/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     137/       0 :                     
     138/       0 :                     		;; lower byte is the first
     139/       0 : =0CH                 REG16_BC	equ REG8_C
     140/       0 : =8H                  REG16_DE	equ REG8_E
     141/       0 : =4H                  REG16_HL	equ REG8_L
     142/       0 :                     
     143/       0 : =14H                 REG8_PCL	equ REG16_PC
     144/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     145/       0 : =18H                 REG8_SPL	equ REG16_SP
     146/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     147/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     148/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     149/       0 :                     	
     150/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     151/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     152/       0 :                     
     153/       0 : =20H                 REG4_EMU_STEP	equ 20H	; Execution mode (0:continuous, 1:step)
     154/       0 :                     	
     155/       0 : =28H                 REG16_MON_INDEX	equ 28H	;
     156/       0 : =2CH                 REG16_MON_ADDR	equ 2CH	;
     157/       0 : =30H                 REG16_MON_TMP	equ 30H	;
     158/       0 : =34H                 REG16_MON_PMBANK	equ 34H	;
     159/       0 : =38H                 REG8_MON_MEMSPACE	equ 38H	; 'D', 'P', 'L' = (Data, Physical, Logical)
     160/       0 : =3AH                 REG8_MON_RESERVED	equ 3AH	; (reserved)
     161/       0 :                     	
     162/       0 :                     
     163/       0 :                     ;;; RAM1
     164/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     165/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     166/       0 :                     
     167/       0 : =80H                 STACK_INIT	equ 80H
     168/       0 :                     
     169/       0 :                     ;;; RAM2
     170/       0 :                     ;;; RAM3
     171/       0 :                     	
     172/       0 :                     ;;;---------------------------------------------------------------------------
     173/       0 :                     ;;; Program Start
     174/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/03/22 17:52:17


     175/       0 :                     	org 0000H		; beginning of Program Memory
     176/       0 :                     
     177/       0 :                     ;;;---------------------------------------------------------------------------
     178/       0 :                     ;;; Mail Loop for Monitor Program
     179/       0 :                     ;;;---------------------------------------------------------------------------
     180/       0 :                     MAIN:
     181/       0 : 00                  	NOP
     182/       1 : F0                  	CLB
     183/       2 :                     
     184/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     185/       2 :                     	LDM BANK_DEFAULT
     186/       2 : [184]                	endif
     187/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     188/       2 :                     	;; except when in use for another banks.
     189/       2 : FD                  	DCL
     190/       3 :                     
     191/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     192/       5 : 5C 7D               	JMS INIT_SERIAL		; Initialize Serial Port
     193/       7 :                     
     194/       7 :                     
     195/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     196/       7 : D0                  	LDM loop(16)
     197/       8 : B2                  	XCH P1_HI
     198/       9 :                     PM_INIT_HLOOP:
     199/       9 : D0                  	LDM loop(16)
     200/       A : B3                  	XCH P1_LO
     201/       B :                     PM_INIT_LLOOP:
     202/       B : 5B B9               	JMS PM_SELECTPMB_P1
     203/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     204/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     205/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     206/      13 :                     
     207/      13 : 22 00               	FIM P1, 00H
     208/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     209/      17 :                     	
     210/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     211/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     212/      19 : 5E 00               	JMS PRINTSTR_P0
     213/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     214/      1D : 5E 00               	JMS PRINTSTR_P0
     215/      1F :                     
     216/      1F : 20 38               	FIM P0, REG8_MON_MEMSPACE
     217/      21 : 22 44               	FIM P1, 'D'
     218/      23 : 57 B8               	JMS LD_REG8P0_P1	; set memspace 'D'
     219/      25 :                     	
     220/      25 :                     	;; init emulator PC
     221/      25 : 20 14               	FIM P0, REG16_PC
     222/      27 : 24 00               	FIM P2, 00H
     223/      29 : 26 00               	FIM P3, 00H
     224/      2B : 57 5D               	JMS LD_REG16P0_P2P3	; PC=0000H
     225/      2D :                     
     226/      2D :                     CMD_LOOP:
     227/      2D : 22 5D               	FIM P1, ']'		; prompt
     228/      2F : 5C 5D               	JMS PUTCHAR_P1
     229/      31 :                     
     230/      31 : 20 28               	FIM P0, REG16_MON_INDEX
     231/      33 : 24 0D               	FIM P2, up(PM16_LINEBUF)
     232/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     233/      37 : 57 5D               	JMS LD_REG16P0_P2P3
     234/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/03/22 17:52:17


     235/      3B :                     
     236/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     237/      3D : 5D 44               	JMS TOUPPER_P1
     238/      3F :                     L0:
     239/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     240/      41 : 5D 20               	JMS CMP_P1P7
     241/      43 : 1C 47               	JCN ZN, L1
     242/      45 : 41 28               	JUN COMMAND_H
     243/      47 :                     L1:
     244/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     245/      49 : 5D 20               	JMS CMP_P1P7
     246/      4B : 1C 4F               	JCN ZN, L2
     247/      4D : 40 E7               	JUN COMMAND_D
     248/      4F :                     L2:
     249/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     250/      4F :                     ;;;	JMS CMP_P1P7
     251/      4F :                     ;;;	JCN ZN, L3
     252/      4F :                     ;;;	JUN COMMAND_S
     253/      4F :                     L3:
     254/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     255/      51 : 5D 20               	JMS CMP_P1P7
     256/      53 : 1C 57               	JCN ZN, L4
     257/      55 : 41 48               	JUN COMMAND_L
     258/      57 :                     L4:
     259/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     260/      59 : 5D 20               	JMS CMP_P1P7
     261/      5B : 1C 5F               	JCN ZN, L5
     262/      5D : 41 BA               	JUN COMMAND_C
     263/      5F :                     L5:
     264/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     265/      61 : 5D 20               	JMS CMP_P1P7
     266/      63 : 1C 67               	JCN ZN, L6
     267/      65 : 41 26               	JUN COMMAND_G
     268/      67 :                     L6:
     269/      67 : 2E 45               	FIM P7, 'E'		; jump to 8080 Emulator
     270/      69 : 5D 20               	JMS CMP_P1P7 		;
     271/      6B : 1C 87               	JCN ZN, L10		;
     272/      6D :                     
     273/      6D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; check next letter
     274/      6F : 5D 44               	JMS TOUPPER_P1
     275/      71 : 2E 53               	FIM P7, 'S'		; 'E' continuous mode, 'ES' step mode
     276/      73 : 5D 20               	JMS CMP_P1P7 		; 
     277/      75 : 1C 7A               	JCN ZN, L6_CONTINUOUS	;
     278/      77 : D1                  	LDM 1H			; step mode
     279/      78 : 40 7D               	JUN L6_SETMODE
     280/      7A :                     L6_CONTINUOUS			; continuous mode
     281/      7A : 58 46               	JMS DEC_REG16P0
     282/      7C : D0                  	LDM 0H
     283/      7D :                     L6_SETMODE:
     284/      7D : 2E 20               	FIM P7, REG4_EMU_STEP
     285/      7F : (MACRO)              	LD_REG4P7_ACC
     285/      7F : 2F                          SRC P7
     285/      80 : E0                          WRM
     286/      81 : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     287/      83 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     288/      85 : 41 D4               	JUN COMMAND_E
     289/      87 :                     
     290/      87 :                     
     291/      87 :                     L10:
     292/      87 : 20 AC               	FIM P0, lo(STR_CMDERR)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/03/22 17:52:17


     293/      89 : 5E 00               	JMS PRINTSTR_P0
     294/      8B :                     
     295/      8B : 40 2D               	JUN CMD_LOOP
     296/      8D :                     
     297/      8D :                     
     298/      8D :                     ;;;---------------------------------------------------------------------------
     299/      8D :                     ;;; COMMAND_DP
     300/      8D :                     ;;; Dump Physical Memory
     301/      8D :                     ;;;	BANK=ADDR.FEDCBA98
     302/      8D :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     303/      8D :                     ;;;---------------------------------------------------------------------------
     304/      8D :                     COMMAND_DP:
     305/      8D : 22 2C               	FIM P1, REG16_MON_ADDR
     306/      8F : 58 22               	JMS LD_P2P3_REG16P1
     307/      91 :                     
     308/      91 : (MACRO)              	LD_P1_P2
     308/      91 : A4                                  LD P2_HI
     308/      92 : B2                                  XCH P1_HI
     308/      93 : A5                                  LD P2_LO
     308/      94 : B3                                  XCH P1_LO
     309/      95 : 5B B9               	JMS PM_SELECTPMB_P1
     310/      97 :                     	
     311/      97 : D8                  	LDM loop(8)
     312/      98 : BA                  	XCH CNT_I
     313/      99 :                     CMDDP_L0:
     314/      99 : (MACRO)              	LD_P1_P2
     314/      99 : A4                                  LD P2_HI
     314/      9A : B2                                  XCH P1_HI
     314/      9B : A5                                  LD P2_LO
     314/      9C : B3                                  XCH P1_LO
     315/      9D : 5C 83               	JMS PRINTHEX_P1
     316/      9F : 22 3A               	FIM P1, ':'
     317/      A1 : 5C 5D               	JMS PUTCHAR_P1
     318/      A3 : 22 46               	FIM P1, 'F'
     319/      A5 : 5C 5D               	JMS PUTCHAR_P1
     320/      A7 : (MACRO)              	LD_P1_P3
     320/      A7 : A6                                  LD P3_HI
     320/      A8 : B2                                  XCH P1_HI
     320/      A9 : A7                                  LD P3_LO
     320/      AA : B3                                  XCH P1_LO
     321/      AB : 5C 83               	JMS PRINTHEX_P1
     322/      AD : 22 3A               	FIM P1, ':'
     323/      AF : 5C 5D               	JMS PUTCHAR_P1
     324/      B1 :                     
     325/      B1 :                     CMDDP_L1:	
     326/      B1 : (MACRO)              	LD_P0_P3
     326/      B1 : A6                                  LD P3_HI
     326/      B2 : B0                                  XCH P0_HI
     326/      B3 : A7                                  LD P3_LO
     326/      B4 : B1                                  XCH P0_LO
     327/      B5 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     328/      B7 : 5C 83               	JMS PRINTHEX_P1
     329/      B9 :                     
     330/      B9 : 77 B1               	ISZ P3_LO, CMDDP_L1
     331/      BB : 5C 9E               	JMS PRINT_CRLF
     332/      BD : 66                  	INC P3_HI
     333/      BE : A6                  	LD P3_HI
     334/      BF : 14 C3               	JCN Z, CMDDP_EXIT
     335/      C1 : 7A 99               	ISZ CNT_I, CMDDP_L0
     336/      C3 :                     CMDDP_EXIT:	
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/03/22 17:52:17


     337/      C3 : 20 2C               	FIM P0, REG16_MON_ADDR
     338/      C5 : 57 5D               	JMS LD_REG16P0_P2P3
     339/      C7 :                     
     340/      C7 : 40 2D               	JUN CMD_LOOP		; return to command loop
     341/      C9 :                     
     342/      C9 :                     ;;;---------------------------------------------------------------------------
     343/      C9 :                     ;;; COMMAND_DL
     344/      C9 :                     ;;; Dump Logical Memory
     345/      C9 :                     ;;;---------------------------------------------------------------------------
     346/      C9 :                     COMMAND_DL:
     347/      C9 : 20 2C               	FIM P0, REG16_MON_ADDR
     348/      CB : 57 D8               	JMS LD_P1_REG8P0
     349/      CD : (MACRO)              	LD_CNT_P1
     349/      CD : A2                                  LD P1_HI
     349/      CE : BA                                  XCH CNT_HI
     349/      CF : A3                                  LD P1_LO
     349/      D0 : BB                                  XCH CNT_LO
     350/      D1 : D8                  	LDM loop(8)
     351/      D2 : BA                  	XCH CNT_I
     352/      D3 :                     CMDDL_L0:
     353/      D3 : 22 2C               	FIM P1, REG16_MON_ADDR
     354/      D5 : 57 F0               	JMS PRINTHEX_REG16P1
     355/      D7 : 22 3A               	FIM P1, ':'
     356/      D9 : 5C 5D               	JMS PUTCHAR_P1
     357/      DB :                     CMDDL_L1:	
     358/      DB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     359/      DD : 5C 83               	JMS PRINTHEX_P1
     360/      DF :                     
     361/      DF : 7B DB               	ISZ CNT_J, CMDDL_L1
     362/      E1 : 5C 9E               	JMS PRINT_CRLF
     363/      E3 : 7A D3               	ISZ CNT_I, CMDDL_L0
     364/      E5 :                     CMDDL_NEXT:
     365/      E5 : 40 2D               	JUN CMD_LOOP		; return to command loop
     366/      E7 :                     
     367/      E7 :                     	
     368/      E7 :                     ;;;---------------------------------------------------------------------------
     369/      E7 :                     ;;; COMMAND_D
     370/      E7 :                     ;;; Dump Memory
     371/      E7 :                     ;;;---------------------------------------------------------------------------
     372/      E7 :                     COMMAND_D:
     373/      E7 : 22 2C               	FIM P1, REG16_MON_ADDR
     374/      E9 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     375/      EB :                     	
     376/      EB : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     377/      ED : 57 D0               	JMS LD_P1_REG8P7
     378/      EF :                     	
     379/      EF : 2E 44               	FIM P7, 'D'
     380/      F1 : 5D 20               	JMS CMP_P1P7
     381/      F3 : 1C F7               	JCN ZN, CMDD_L1
     382/      F5 : 41 0D               	JUN COMMAND_DD
     383/      F7 :                     CMDD_L1:
     384/      F7 : 2E 50               	FIM P7, 'P'
     385/      F9 : 5D 20               	JMS CMP_P1P7
     386/      FB : 1C FF               	JCN ZN, CMDD_L2
     387/      FD : 40 8D               	JUN COMMAND_DP
     388/      FF :                     CMDD_L2:
     389/      FF : 2E 4C               	FIM P7, 'L'
     390/     101 : 5D 20               	JMS CMP_P1P7
     391/     103 : 1C 07               	JCN ZN, CMDD_L3
     392/     105 : 40 C9               	JUN COMMAND_DL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/03/22 17:52:17


     393/     107 :                     CMDD_L3:
     394/     107 : 20 B0               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     395/     109 : 5E 00               	JMS PRINTSTR_P0
     396/     10B : 40 2D               	JUN CMD_LOOP
     397/     10D :                     
     398/     10D :                     ;;;---------------------------------------------------------------------------
     399/     10D :                     ;;; COMMAND_DD
     400/     10D :                     ;;; Dump Data RAM
     401/     10D :                     ;;; input:
     402/     10D :                     ;;; REG16_MON_ADDR
     403/     10D :                     ;;; RAM0=00H-3FH
     404/     10D :                     ;;; RAM1=40H-7FH
     405/     10D :                     ;;; RAM2=80H-BFH
     406/     10D :                     ;;; RAM3=C0H-FFH
     407/     10D :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     408/     10D :                     ;;;---------------------------------------------------------------------------
     409/     10D :                     COMMAND_DD:
     410/     10D : 2E 2C               	FIM P7, REG16_MON_ADDR
     411/     10F : 57 D0               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     412/     111 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     412/     111 : A2                                  LD P1_HI
     412/     112 : B0                                  XCH P0_HI
     412/     113 : A3                                  LD P1_LO
     412/     114 : B1                                  XCH P0_LO
     413/     115 :                     
     414/     115 :                     	;; PRINT 4 registers
     415/     115 : DC                  	LDM loop(4)		; PRINT 4 regs
     416/     116 : BA                  	XCH CNT_I		; I=loop(4)
     417/     117 :                     	;; PRINT 16 characters
     418/     117 :                     CMDDD_L1:
     419/     117 : 5D 50               	JMS PRINT_DATARAM_P0
     420/     119 : 60                  	INC P0_HI
     421/     11A : 7A 17               	ISZ CNT_I, CMDDD_L1
     422/     11C :                     
     423/     11C : (MACRO)              	LD_P1_P0
     423/     11C : A0                                  LD P0_HI
     423/     11D : B2                                  XCH P1_HI
     423/     11E : A1                                  LD P0_LO
     423/     11F : B3                                  XCH P1_LO
     424/     120 : 20 2C               	FIM P0, REG16_MON_ADDR
     425/     122 : 57 B8               	JMS LD_REG8P0_P1
     426/     124 :                     
     427/     124 : 40 2D               	JUN CMD_LOOP		; return to command loop
     428/     126 :                     	
     429/     126 :                     ;;;---------------------------------------------------------------------------
     430/     126 :                     ;;; COMMAND_G
     431/     126 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     432/     126 :                     ;;;---------------------------------------------------------------------------
     433/     126 :                     COMMAND_G:
     434/     126 : 4F 00               	JUN PM_RAM_START
     435/     128 :                     
     436/     128 :                     ;;;---------------------------------------------------------------------------
     437/     128 :                     ;;; COMMAND_H
     438/     128 :                     ;;; Select Memory Space and address
     439/     128 :                     ;;; 'D' = Data Memory
     440/     128 :                     ;;; 'P' = Physical Program Memory
     441/     128 :                     ;;; 'L' = Logical Program Memory
     442/     128 :                     ;;;---------------------------------------------------------------------------
     443/     128 :                     COMMAND_H:
     444/     128 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/03/22 17:52:17


     445/     12A : 5D 2D               	JMS ISZEROORNOT_P1
     446/     12C : 1C 30               	JCN ZN, CMDH_SET
     447/     12E : 41 3A               	JUN CMDH_EXIT
     448/     130 :                     CMDH_SET:
     449/     130 : 5D 44               	JMS TOUPPER_P1
     450/     132 : 24 38               	FIM P2, REG8_MON_MEMSPACE
     451/     134 : 57 C4               	JMS LD_REG8P2_P1
     452/     136 : 22 2C               	FIM P1, REG16_MON_ADDR
     453/     138 : 58 90               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     454/     13A :                     CMDH_EXIT:
     455/     13A : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     456/     13C : 57 D0               	JMS LD_P1_REG8P7
     457/     13E : 5C 5D               	JMS PUTCHAR_P1
     458/     140 : 22 2C               	FIM P1, REG16_MON_ADDR
     459/     142 : 57 F0               	JMS PRINTHEX_REG16P1
     460/     144 : 5C 9E               	JMS PRINT_CRLF
     461/     146 : 40 2D               	JUN CMD_LOOP
     462/     148 :                     
     463/     148 :                     ;;;---------------------------------------------------------------------------
     464/     148 :                     ;;; COMMAND_L
     465/     148 :                     ;;; Load to Logical Memory
     466/     148 :                     ;;; Intel Hex format, no checksum check
     467/     148 :                     ;;; data lengh must be 0to10H/line
     468/     148 :                     ;;;---------------------------------------------------------------------------
     469/     148 :                     COMMAND_L:
     470/     148 :                     CMDL_START:
     471/     148 : 20 28               	FIM P0, REG16_MON_INDEX
     472/     14A : 24 0D               	FIM P2, up(PM16_LINEBUF)
     473/     14C : 26 00               	FIM P3, lo(PM16_LINEBUF)
     474/     14E : 57 5D               	JMS LD_REG16P0_P2P3
     475/     150 : 5B C4               	JMS GETLINE_PM16REG16P0
     476/     152 :                     
     477/     152 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     478/     154 : 5D 2D               	JMS ISZEROORNOT_P1
     479/     156 : 1C 5A               	JCN ZN, CMDL_L0
     480/     158 : 41 B2               	JUN CMDL_EXIT
     481/     15A :                     CMDL_L0:
     482/     15A : 2E 3A               	FIM P7, ':'
     483/     15C : 5D 20               	JMS CMP_P1P7
     484/     15E : 14 62               	JCN Z, CMDL_L1
     485/     160 : 41 88               	JUN CMDL_ERROR
     486/     162 :                     CMDL_L1:
     487/     162 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     488/     164 : (MACRO)              	LD_CNT_P1				; count
     488/     164 : A2                                  LD P1_HI
     488/     165 : BA                                  XCH CNT_HI
     488/     166 : A3                                  LD P1_LO
     488/     167 : BB                                  XCH CNT_LO
     489/     168 :                     
     490/     168 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     491/     16A : (MACRO)              	LD_P2_P1
     491/     16A : A2                                  LD P1_HI
     491/     16B : B4                                  XCH P2_HI
     491/     16C : A3                                  LD P1_LO
     491/     16D : B5                                  XCH P2_LO
     492/     16E : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     493/     170 : (MACRO)              	LD_P3_P1
     493/     170 : A2                                  LD P1_HI
     493/     171 : B6                                  XCH P3_HI
     493/     172 : A3                                  LD P1_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/03/22 17:52:17


     493/     173 : B7                                  XCH P3_LO
     494/     174 : 22 2C               	FIM P1, REG16_MON_ADDR
     495/     176 : 57 57               	JMS LD_REG16P1_P2P3
     496/     178 : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     497/     17A : 5D 2D               	JMS ISZEROORNOT_P1
     498/     17C : 1C 80               	JCN ZN, CMDL_L2
     499/     17E : 41 92               	JUN CMDL_READLOOP
     500/     180 :                     CMDL_L2:
     501/     180 : 2E 01               	FIM P7, 01H
     502/     182 : 5D 20               	JMS CMP_P1P7
     503/     184 : 1C 88               	JCN ZN, CMDL_ERROR
     504/     186 : 41 B2               	JUN CMDL_EXIT
     505/     188 :                     CMDL_ERROR:
     506/     188 : 58 46               	JMS DEC_REG16P0
     507/     18A : 5C 08               	JMS PRINTSTR_PM16REG16P0
     508/     18C : 20 BC               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     509/     18E : 5E 00               	JMS PRINTSTR_P0
     510/     190 : 40 2D               	JUN CMD_LOOP
     511/     192 :                     CMDL_READLOOP:
     512/     192 : AB                  	LD CNT_LO
     513/     193 : 1C 9A               	JCN ZN, CMDL_CONTINUE
     514/     195 : AA                  	LD CNT_HI
     515/     196 : 1C 9A               	JCN ZN, CMDL_CONTINUE
     516/     198 : 41 48               	JUN  CMDL_START		; continue to read next line
     517/     19A :                     CMDL_CONTINUE:
     518/     19A : 20 28               	FIM P0, REG16_MON_INDEX
     519/     19C : 5C 16               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     520/     19E : 14 A2               	JCN Z, CMDL_L3
     521/     1A0 : 41 48               	JUN CMDL_START		; continue to read next line
     522/     1A2 :                     CMDL_L3:
     523/     1A2 : 20 2C               	FIM P0, REG16_MON_ADDR
     524/     1A4 : 5B 81               	JMS LD_PM16REG16P0_P1
     525/     1A6 : 58 36               	JMS INC_REG16P0
     526/     1A8 : AB                  	LD CNT_LO
     527/     1A9 : F8                  	DAC
     528/     1AA : BB                  	XCH CNT_LO
     529/     1AB : 12 B0               	JCN C, CMDL_L5		; no borrow then skip
     530/     1AD : AA                  	LD CNT_HI
     531/     1AE : F8                  	DAC
     532/     1AF : BA                  	XCH CNT_HI
     533/     1B0 :                     CMDL_L5:
     534/     1B0 : 41 92               	JUN CMDL_READLOOP
     535/     1B2 :                     CMDL_EXIT:
     536/     1B2 :                     	;; set memory space to logical
     537/     1B2 : 20 38               	FIM P0, REG8_MON_MEMSPACE
     538/     1B4 : 22 4C               	FIM P1, 'L'
     539/     1B6 : 57 B8               	JMS LD_REG8P0_P1
     540/     1B8 : 40 2D               	JUN CMD_LOOP
     541/     1BA :                     	
     542/     1BA :                     ;;;---------------------------------------------------------------------------
     543/     1BA :                     ;;; COMMAND_C
     544/     1BA :                     ;;; Clear Program Memory
     545/     1BA :                     ;;;---------------------------------------------------------------------------
     546/     1BA :                     COMMAND_C:
     547/     1BA : 2A F0               	FIM CNT, loops(1, 16)
     548/     1BC :                     ;;;	FIM CNT, loops(16, 16)
     549/     1BC :                     CMDPMC_BANKLOOP:
     550/     1BC : (MACRO)              	LD_P1_CNT
     550/     1BC : AA                                  LD CNT_HI
     550/     1BD : B2                                  XCH P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/03/22 17:52:17


     550/     1BE : AB                                  LD CNT_LO
     550/     1BF : B3                                  XCH P1_LO
     551/     1C0 : 5B B9               	JMS PM_SELECTPMB_P1
     552/     1C2 : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     553/     1C4 : 22 00               	FIM P1, 00H		; data to fill
     554/     1C6 :                     CMDPMC_L1:
     555/     1C6 : 5B A1               	JMS PM_WRITE_P0_P1
     556/     1C8 : 71 C6               	ISZ R1, CMDPMC_L1
     557/     1CA : 70 C6               	ISZ R0, CMDPMC_L1
     558/     1CC :                     
     559/     1CC : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     560/     1CE : 7B BC               	ISZ CNT_J, CMDPMC_BANKLOOP
     561/     1D0 : 7A BC               	ISZ CNT_I, CMDPMC_BANKLOOP
     562/     1D2 :                     
     563/     1D2 :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     564/     1D2 :                     	
     565/     1D2 : 40 2D               	JUN CMD_LOOP		; return to command loop
     566/     1D4 :                     
     567/     1D4 :                     ;;;	org 0200H
     568/     1D4 :                     ;;;---------------------------------------------------------------------------
     569/     1D4 :                     ;;; 8080 emulator main loop
     570/     1D4 :                     ;;;---------------------------------------------------------------------------
     571/     1D4 :                     COMMAND_E:
     572/     1D4 :                     EMU_START:
     573/     1D4 : 20 47               	FIM P0, lo(STR_EMU_MESSAGE)
     574/     1D6 : 5E 00               	JMS PRINTSTR_P0
     575/     1D8 :                     
     576/     1D8 :                     EMU_LOOP:
     577/     1D8 : 2E 20               	FIM P7, REG4_EMU_STEP
     578/     1DA : (MACRO)              	LD_ACC_REG4P7
     578/     1DA : 2F                          SRC P7
     578/     1DB : E9                          RDM
     579/     1DC : 14 E8               	JCN Z, EMU_EXEC
     580/     1DE : 58 F2               	JMS EMU_PRINT_REGISTERS
     581/     1E0 : 5C 35               	JMS GETCHAR_P1
     582/     1E2 : 2E 2E               	FIM P7, '.'
     583/     1E4 : 5D 20               	JMS CMP_P1P7
     584/     1E6 : 14 EC               	JCN Z, EMU_EXIT
     585/     1E8 :                     EMU_EXEC:
     586/     1E8 :                     	
     587/     1E8 : 51 EE               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     588/     1EA :                     			; but it can return here by BBL from various routines
     589/     1EA :                     			; in contrast JUN consumes 2 bytes
     590/     1EA : 41 D8               	JUN EMU_LOOP
     591/     1EC :                     
     592/     1EC :                     EMU_EXIT:
     593/     1EC : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     594/     1EE :                     
     595/     1EE :                     ;;;---------------------------------------------------------------------------
     596/     1EE :                     ;;; EXEC_CODE
     597/     1EE :                     ;;;---------------------------------------------------------------------------
     598/     1EE :                     EXEC_CODE:
     599/     1EE : 20 14               	FIM P0, REG16_PC
     600/     1F0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     601/     1F2 :                     
     602/     1F2 : A2                  	LD P1_HI		;
     603/     1F3 : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     604/     1F4 : 1A F8               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     605/     1F6 : 42 10               	JUN CODE_80FF		; 80H<=CODE<=FFH
     606/     1F8 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/03/22 17:52:17


     607/     1F8 :                     ;;;---------------------------------------------------------------------------
     608/     1F8 :                     CODE_007F:			; 00H<=CODE<=7FH
     609/     1F8 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     610/     1F9 : 1A FF               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     611/     1FB : 42 15               	JUN CODE_407F		; 40H<=CODE<=7FH
     612/     1FD :                     ;;;---------------------------------------------------------------------------
     613/     1FD : 00                  	NOP
     614/     1FE : 00                  	NOP
     615/     1FF :                     CODE_003F:			; 00H<=CODE<=3FH
     616/     1FF : A3                  	LD P1_LO
     617/     200 : 1C 07               	JCN NZ,CODE_NOT_NOP
     618/     202 : A2                  	LD P1_HI
     619/     203 : 1C 07               	JCN NZ,CODE_NOT_NOP
     620/     205 : 42 7F               	JUN CODE_00H		; NOP
     621/     207 :                     CODE_NOT_NOP:
     622/     207 :                     CODE_C0FF:
     623/     207 :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     624/     207 :                     	; prepare for jump table
     625/     207 :                     	; P1=P1<<1 and jump to dispatch table
     626/     207 : A3                  	LD P1_LO
     627/     208 : F1                  	CLC
     628/     209 : F5                  	RAL
     629/     20A : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     630/     20B : A2                  	LD P1_HI
     631/     20C : F5                  	RAL
     632/     20D : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     633/     20E : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     634/     210 :                     ;;;---------------------------------------------------------------------------
     635/     210 :                     CODE_80FF:			; 80H<=P1<=FFH
     636/     210 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     637/     211 : 1A 15               	JCN CN, CODE_80BF
     638/     213 : 42 07               	JUN CODE_C0FF		; C0H<=P1<=FFH
     639/     215 :                     
     640/     215 :                     ;;;---------------------------------------------------------------------------
     641/     215 :                     CODE_407F:			; 40H<=P1<=7FH
     642/     215 :                     CODE_80BF:			; 80H<=P1<=BFH
     643/     215 :                     ;;;---------------------------------------------------------------------------
     644/     215 :                     ;;; Common procedure for 40H<=CODE<=BFH
     645/     215 :                     ;;; save source value to REG(SRC)
     646/     215 :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     647/     215 :                     ;;; 8080 register code SSS
     648/     215 :                     ;;; 0 1 2 3 4 5 6 7
     649/     215 :                     ;;; B C D E H L M A
     650/     215 :                     ;;; ADDRESS=~(xxx)<<1
     651/     215 :                     ;;;---------------------------------------------------------------------------
     652/     215 : 5B 12               	JMS PUSH_P1
     653/     217 :                     	;; set source register address to P1
     654/     217 : F0                  	CLB
     655/     218 : B2                  	XCH P1_HI		; P1_HI=0000
     656/     219 : A3                  	LD P1_LO
     657/     21A : F4                  	CMA
     658/     21B : F1                  	CLC
     659/     21C : F5                  	RAL
     660/     21D : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     661/     21E :                     
     662/     21E : A3                  	LD P1_LO
     663/     21F :                     
     664/     21F : D2                   	LDM REG8_M		; check if SRCREG==M or not
     665/     220 : F1                  	CLC
     666/     221 : 93                  	SUB P1_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/03/22 17:52:17


     667/     222 : 14 28               	JCN Z, GETSRC_LOAD_M
     668/     224 :                     
     669/     224 : 57 DE               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     670/     226 : 42 2E                       JUN GETSRC_SAVE_SRCVALUE
     671/     228 :                     
     672/     228 :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     673/     228 : 20 04               	FIM P0, REG16_HL
     674/     22A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     675/     22C : 58 46               	JMS DEC_REG16P0
     676/     22E :                     
     677/     22E :                     GETSRC_SAVE_SRCVALUE:
     678/     22E :                     	;; set source register value to P1
     679/     22E : 20 12               	FIM P0, REG8_SRC
     680/     230 : 57 B8               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     681/     232 :                     
     682/     232 : 5B 43               	JMS POP_P1
     683/     234 : A2                  	LD P1_HI
     684/     235 : F5                  	RAL
     685/     236 : 1A 3A               	JCN CN, CODE_407F_MOV	; execute MOV
     686/     238 : 42 62               	JUN CODE_80BF_ARITH_LOGIC
     687/     23A :                     
     688/     23A :                     ;;;---------------------------------------------------------------------------
     689/     23A :                     ;;; Execute MOV code
     690/     23A :                     ;;; source value is already stored to REG8(SRC)
     691/     23A :                     ;;;---------------------------------------------------------------------------
     692/     23A :                     CODE_407F_MOV:
     693/     23A : 2E 76               	FIM P7, 76H		; check HLT
     694/     23C : 5D 20               	JMS CMP_P1P7
     695/     23E : 1C 42               	JCN ZN, CODE_MOV_L1
     696/     240 : 42 71               	JUN CODE_76H		; HLT
     697/     242 :                     
     698/     242 :                     CODE_MOV_L1:
     699/     242 :                     	;; set destination REGISTER address to P2
     700/     242 : 24 00               	FIM P2, 00H
     701/     244 : A2                  	LD P1_HI
     702/     245 : F5                  	RAL
     703/     246 : F5                  	RAL
     704/     247 : F1                  	CLC
     705/     248 : F6                  	RAR
     706/     249 : F6                  	RAR
     707/     24A : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     708/     24B : A3                  	LD P1_LO
     709/     24C : F5                  	RAL			; CY=bit(3)
     710/     24D : A5                  	LD P2_LO
     711/     24E : F5                  	RAL
     712/     24F : F4                  	CMA
     713/     250 : F5                  	RAL
     714/     251 : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     715/     252 :                     
     716/     252 : 22 12               	FIM P1, REG8_SRC
     717/     254 : 57 DE               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     718/     256 :                     
     719/     256 :                     				; write SRC value to DST
     720/     256 : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     721/     257 : F1                  	CLC
     722/     258 : 95                  	SUB P2_LO		; check DST(P2) is M or not
     723/     259 : 14 5E               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     724/     25B :                     
     725/     25B : 57 C4               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     726/     25D : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/03/22 17:52:17


     727/     25E :                     
     728/     25E :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
     729/     25E : 20 04               	FIM P0, REG16_HL
     730/     260 : 4B 81               	JUN LD_PM16REG16P0_P1
     731/     262 :                     ;;; 	BBL 0
     732/     262 :                     
     733/     262 :                     
     734/     262 :                     ;;;---------------------------------------------------------------------------
     735/     262 :                     CODE_80BF_ARITH_LOGIC:
     736/     262 :                     	; prepare P2 for jump table
     737/     262 :                     	; P2=0F0H + CODE.bit(543)0
     738/     262 : 24 F0               	FIM P2, 0F0H		; P2=0F0H
     739/     264 : A3                  	LD P1_LO		; ACC=CODE(3210)
     740/     265 : F5                  	RAL			; CY=CODE.bit(3)
     741/     266 : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     742/     267 : F5                  	RAL			; ACC=CODE.bit(6543)
     743/     268 : F1                  	CLC			; CY=0
     744/     269 : F5                  	RAL			; ACC=CODE.bit(543).0
     745/     26A : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     746/     26B :                     
     747/     26B : 2E 12               	FIM P7, REG8_SRC
     748/     26D : 57 D0               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     749/     26F :                     
     750/     26F : 49 EF               	JUN JIN_P2_CODE_80BF
     751/     271 :                     
     752/     271 :                     ;;;---------------------------------------------------------------------------
     753/     271 :                     ;;; Emulate individual codes
     754/     271 :                     ;;;---------------------------------------------------------------------------
     755/     271 :                     CODE_76H:			; HLT
     756/     271 : 20 A4               	FIM P0, lo(STR_EMU_HLT)
     757/     273 : 5E 00               	JMS PRINTSTR_P0
     758/     275 : 2E 20               	FIM P7, REG4_EMU_STEP
     759/     277 : (MACRO)              	LD_ACC_REG4P7
     759/     277 : 2F                          SRC P7
     759/     278 : E9                          RDM
     760/     279 : 1C 7D               	JCN ZN, CODE_76H_EXIT
     761/     27B : 58 F2               	JMS EMU_PRINT_REGISTERS	; print registers if continuous mode
     762/     27D :                     CODE_76H_EXIT:
     763/     27D : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     764/     27F :                     
     765/     27F :                     CODE_00H:			; NOP
     766/     27F : C0                  	BBL 0
     767/     280 :                     
     768/     280 :                     CODE_01H:			; LXI B,B3B2
     769/     280 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     770/     282 : 24 0C               	FIM P2, REG8_C
     771/     284 : 57 C4               	JMS LD_REG8P2_P1
     772/     286 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     773/     288 : 24 0E               	FIM P2, REG8_B
     774/     28A : 47 C4               	JUN LD_REG8P2_P1
     775/     28C :                     
     776/     28C :                     CODE_02H:			; STAX B
     777/     28C : 2E 00               	FIM P7, REG8_A
     778/     28E : 57 D0               	JMS LD_P1_REG8P7
     779/     290 : 20 0C               	FIM P0, REG16_BC
     780/     292 : 4B 81               	JUN LD_PM16REG16P0_P1
     781/     294 :                     
     782/     294 :                     CODE_03H:			; INX B
     783/     294 : 20 0C               	FIM P0, REG16_BC
     784/     296 : 48 36               	JUN INC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/03/22 17:52:17


     785/     298 :                     
     786/     298 :                     CODE_04H:			; INR B
     787/     298 : 22 0E               	FIM P1, REG8_B
     788/     29A : 44 3F               	JUN CODE_INR
     789/     29C :                     	
     790/     29C :                     CODE_05H:			; DCR B
     791/     29C : 22 0E               	FIM P1, REG8_B
     792/     29E : 44 45               	JUN CODE_DCR
     793/     2A0 :                     
     794/     2A0 :                     CODE_06H:			; MVI B,B2
     795/     2A0 : 24 0E               	FIM P2, REG8_B
     796/     2A2 : 44 4B               	JUN CODE_MVI
     797/     2A4 :                     ;;; 	BBL 0
     798/     2A4 :                     
     799/     2A4 :                     CODE_07H:			; RLC
     800/     2A4 : 20 00               	FIM P0, REG8_A
     801/     2A6 : 57 D8               	JMS LD_P1_REG8P0
     802/     2A8 : A2                  	LD P1_HI
     803/     2A9 : F5                  	RAL			; CY=bit(7)
     804/     2AA : A3                  	LD P1_LO
     805/     2AB : F5                  	RAL
     806/     2AC : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     807/     2AD : A2                  	LD P1_HI
     808/     2AE : F5                  	RAL
     809/     2AF : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     810/     2B0 : 56 52               	JMS SETFLAG_C_CY
     811/     2B2 : 47 B8               	JUN LD_REG8P0_P1
     812/     2B4 :                     ;;;	BBL 0
     813/     2B4 :                     
     814/     2B4 :                     CODE_08H:			; ...
     815/     2B4 : C0                  	BBL 0
     816/     2B5 :                     	
     817/     2B5 :                     CODE_09H:			; DAD B
     818/     2B5 : (MACRO)              	SETFLAG_SUB_0
     818/     2B5 : =>FALSE                      if EMU_USE_DAA
     818/     2B5 :                             JMS DAA_SETFLAG_SUB_0
     818/     2B5 : [818]                        endif
     819/     2B5 : 20 04               	FIM P0, REG16_HL
     820/     2B7 : 22 0C               	FIM P1, REG16_BC
     821/     2B9 : 58 7B               	JMS ADD_REG16P0_REG16P1
     822/     2BB : 46 52               	JUN SETFLAG_C_CY
     823/     2BD :                     ;;; 	BBL 0
     824/     2BD :                     
     825/     2BD :                     CODE_0AH:			; LDAX B
     826/     2BD : 20 0C               	FIM P0, REG16_BC
     827/     2BF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     828/     2C1 : 58 46               	JMS DEC_REG16P0
     829/     2C3 :                     	
     830/     2C3 : 24 00               	FIM P2, REG8_A
     831/     2C5 : 47 C4               	JUN LD_REG8P2_P1
     832/     2C7 :                     ;;; 	BBL 0
     833/     2C7 :                     
     834/     2C7 :                     CODE_0BH:			; DCX B
     835/     2C7 : 20 0C               	FIM P0, REG16_BC
     836/     2C9 : 48 46               	JUN DEC_REG16P0
     837/     2CB :                     ;;; 	BBL 0
     838/     2CB :                     	
     839/     2CB :                     CODE_0CH:			; INR C
     840/     2CB : 22 0C               	FIM P1, REG8_C
     841/     2CD : 44 3F               	JUN CODE_INR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/03/22 17:52:17


     842/     2CF :                     ;;; 	BBL 0
     843/     2CF :                     
     844/     2CF :                     CODE_0DH:			; DCR C
     845/     2CF : 22 0C               	FIM P1, REG8_C
     846/     2D1 : 44 45               	JUN CODE_DCR
     847/     2D3 :                     ;;; 	BBL 0
     848/     2D3 :                     
     849/     2D3 :                     CODE_0EH:			; MVI C,B2
     850/     2D3 : 24 0C               	FIM P2, REG8_C
     851/     2D5 : 44 4B               	JUN CODE_MVI
     852/     2D7 :                     ;;; 	BBL 0
     853/     2D7 :                     
     854/     2D7 :                     CODE_0FH:			; RRC
     855/     2D7 : 20 00               	FIM P0, REG8_A
     856/     2D9 : 57 D8               	JMS LD_P1_REG8P0
     857/     2DB : A3                  	LD P1_LO
     858/     2DC : F6                  	RAR			; CY=bit(0)
     859/     2DD : A2                  	LD P1_HI
     860/     2DE : F6                  	RAR
     861/     2DF : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     862/     2E0 : A3                  	LD P1_LO
     863/     2E1 : F6                  	RAR
     864/     2E2 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     865/     2E3 : 56 52               	JMS SETFLAG_C_CY
     866/     2E5 : 47 B8               	JUN LD_REG8P0_P1
     867/     2E7 :                     ;;; 	BBL 0
     868/     2E7 :                     
     869/     2E7 :                     CODE_10H:			; ...
     870/     2E7 : C0                  	BBL 0
     871/     2E8 :                     
     872/     2E8 :                     CODE_11H:			; LXI D,B3B2
     873/     2E8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     874/     2EA : 24 08               	FIM P2, REG8_E
     875/     2EC : 57 C4               	JMS LD_REG8P2_P1
     876/     2EE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     877/     2F0 : 24 0A               	FIM P2, REG8_D
     878/     2F2 : 47 C4               	JUN LD_REG8P2_P1
     879/     2F4 :                     
     880/     2F4 :                     CODE_12H:			; STAX D
     881/     2F4 : 2E 00               	FIM P7, REG8_A
     882/     2F6 : 57 D0               	JMS LD_P1_REG8P7
     883/     2F8 : 20 08               	FIM P0, REG16_DE
     884/     2FA : 4B 81               	JUN LD_PM16REG16P0_P1
     885/     2FC :                     	
     886/     2FC :                     CODE_13H:			; INX D
     887/     2FC : 20 08               	FIM P0, REG16_DE
     888/     2FE : 48 36               	JUN INC_REG16P0
     889/     300 :                     
     890/     300 :                     CODE_14H:			; INR D
     891/     300 : 22 0A               	FIM P1, REG8_D
     892/     302 : 44 3F               	JUN CODE_INR
     893/     304 :                     
     894/     304 :                     CODE_15H:			; DCR D
     895/     304 : 22 0A               	FIM P1, REG8_D
     896/     306 : 44 45               	JUN CODE_DCR
     897/     308 :                     ;;; 	BBL 0
     898/     308 :                     
     899/     308 :                     CODE_16H:			; MVI D,B2
     900/     308 : 24 0A               	FIM P2, REG8_D
     901/     30A : 44 4B               	JUN CODE_MVI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/03/22 17:52:17


     902/     30C :                     ;;; 	BBL 0
     903/     30C :                     
     904/     30C :                     CODE_17H:			; RAL
     905/     30C : 20 00               	FIM P0, REG8_A
     906/     30E : 57 D8               	JMS LD_P1_REG8P0	; P1=ACC
     907/     310 : 56 48               	JMS GETFLAG_C		; CY=FLAG_C
     908/     312 :                     ;;; 	RAR			; can be omitted because CY is already C
     909/     312 : A3                  	LD P1_LO
     910/     313 : F5                  	RAL
     911/     314 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     912/     315 : A2                  	LD P1_HI
     913/     316 : F5                  	RAL
     914/     317 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     915/     318 : 56 52               	JMS SETFLAG_C_CY
     916/     31A : 47 B8               	JUN LD_REG8P0_P1
     917/     31C :                     ;;;	BBL 0
     918/     31C :                     	
     919/     31C :                     CODE_18H:			; ...
     920/     31C : C0                  	BBL 0
     921/     31D :                     
     922/     31D :                     CODE_19H:			; DAD D
     923/     31D : (MACRO)              	SETFLAG_SUB_0
     923/     31D : =>FALSE                      if EMU_USE_DAA
     923/     31D :                             JMS DAA_SETFLAG_SUB_0
     923/     31D : [923]                        endif
     924/     31D : 20 04               	FIM P0, REG16_HL
     925/     31F : 22 08               	FIM P1, REG16_DE
     926/     321 : 58 7B               	JMS ADD_REG16P0_REG16P1
     927/     323 : 46 52               	JUN SETFLAG_C_CY
     928/     325 :                     ;;;	BBL 0
     929/     325 :                     	
     930/     325 :                     CODE_1AH:			; LDAX D
     931/     325 : 20 08               	FIM P0, REG16_DE
     932/     327 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     933/     329 : 58 46               	JMS DEC_REG16P0
     934/     32B :                     	
     935/     32B : 24 00               	FIM P2, REG8_A
     936/     32D : 47 C4               	JUN LD_REG8P2_P1
     937/     32F :                     ;;;	BBL 0
     938/     32F :                     
     939/     32F :                     CODE_1BH:			; DCX D
     940/     32F : 20 08               	FIM P0, REG16_DE
     941/     331 : 48 46               	JUN DEC_REG16P0
     942/     333 :                     ;;;	BBL 0
     943/     333 :                     
     944/     333 :                     CODE_1CH:			; INR E
     945/     333 : 22 08               	FIM P1, REG8_E
     946/     335 : 44 3F               	JUN CODE_INR
     947/     337 :                     ;;;	BBL 0
     948/     337 :                     
     949/     337 :                     CODE_1DH:			; DCR E
     950/     337 : 22 08               	FIM P1, REG8_E
     951/     339 : 44 45               	JUN CODE_DCR
     952/     33B :                     ;;;	BBL 0
     953/     33B :                     
     954/     33B :                     CODE_1EH:			; MVI E,B2
     955/     33B : 24 08               	FIM P2, REG8_E
     956/     33D : 44 4B               	JUN CODE_MVI
     957/     33F :                     ;;;	BBL 0
     958/     33F :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/03/22 17:52:17


     959/     33F :                     CODE_1FH:			; RAR
     960/     33F : 20 00               	FIM P0, REG8_A
     961/     341 : 57 D8               	JMS LD_P1_REG8P0	; P1=ACC
     962/     343 : 56 48               	JMS GETFLAG_C		; CY=FLAG_C
     963/     345 :                     ;;; 	RAR			; can be omitted because CY is already C
     964/     345 : A2                  	LD P1_HI
     965/     346 : F6                  	RAR
     966/     347 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
     967/     348 : A3                  	LD P1_LO
     968/     349 : F6                  	RAR
     969/     34A : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     970/     34B : 56 52               	JMS SETFLAG_C_CY
     971/     34D : 47 B8               	JUN LD_REG8P0_P1
     972/     34F :                     ;;;	BBL 0
     973/     34F :                     
     974/     34F :                     CODE_20H:			; ...
     975/     34F : C0                  	BBL 0
     976/     350 :                     
     977/     350 :                     CODE_21H:			; LXI H,B3B2
     978/     350 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     979/     352 : 24 04               	FIM P2, REG8_L
     980/     354 : 57 C4               	JMS LD_REG8P2_P1
     981/     356 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     982/     358 : 24 06               	FIM P2, REG8_H
     983/     35A : 47 C4               	JUN LD_REG8P2_P1
     984/     35C :                     ;;;	BBL 0
     985/     35C :                     
     986/     35C :                     CODE_22H:			; SHLD,B3B2
     987/     35C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     988/     35E : 24 1C               	FIM P2, REG8_ADDRL
     989/     360 : 57 C4               	JMS LD_REG8P2_P1
     990/     362 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     991/     364 : 24 1E               	FIM P2, REG8_ADDRH
     992/     366 : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
     993/     368 :                     
     994/     368 : 2E 04               	FIM P7, REG8_L
     995/     36A : 57 D0               	JMS LD_P1_REG8P7
     996/     36C : 20 1C               	FIM P0, REG16_ADDR
     997/     36E : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
     998/     370 : 58 36               	JMS INC_REG16P0		; REG(ADDR)++
     999/     372 :                     	
    1000/     372 : 2E 06               	FIM P7, REG8_H
    1001/     374 : 57 D0               	JMS LD_P1_REG8P7
    1002/     376 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
    1003/     378 : 48 36               	JUN INC_REG16P0		; REG(ADDR)++ and return
    1004/     37A :                     ;;;	BBL 0
    1005/     37A :                     
    1006/     37A :                     	
    1007/     37A :                     CODE_23H:			; INX H
    1008/     37A : 20 04               	FIM P0, REG16_HL
    1009/     37C : 48 36               	JUN INC_REG16P0
    1010/     37E :                     ;;;	BBL 0
    1011/     37E :                     
    1012/     37E :                     CODE_24H:			; INR H
    1013/     37E : 22 06               	FIM P1, REG8_H
    1014/     380 : 44 3F               	JUN CODE_INR
    1015/     382 :                     ;;;	BBL 0
    1016/     382 :                     
    1017/     382 :                     CODE_25H:			; DCR H
    1018/     382 : 22 06               	FIM P1, REG8_H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/03/22 17:52:17


    1019/     384 : 44 45               	JUN CODE_DCR
    1020/     386 :                     ;;;	BBL 0
    1021/     386 :                     
    1022/     386 :                     CODE_26H:			; MVI H,B2
    1023/     386 : 24 06               	FIM P2, REG8_H
    1024/     388 : 44 4B               	JUN CODE_MVI
    1025/     38A :                     ;;;	BBL 0
    1026/     38A :                     
    1027/     38A :                     CODE_27H:			; DAA
    1028/     38A :                     				; This is not properly implemeted
    1029/     38A :                     				; due to the lack of CY4 flag
    1030/     38A : 20 00               	FIM P0, REG8_A
    1031/     38C : 57 D8               	JMS LD_P1_REG8P0
    1032/     38E : A3                  	LD P1_LO
    1033/     38F : FB                  	DAA
    1034/     390 : B3                  	XCH P1_LO
    1035/     391 : D0                  	LDM 0
    1036/     392 : 82                  	ADD P1_HI
    1037/     393 : B2                  	XCH P1_HI
    1038/     394 : FB                  	DAA
    1039/     395 : B2                  	XCH P1_HI
    1040/     396 :                     	
    1041/     396 : 47 B8               	JUN LD_REG8P0_P1
    1042/     398 :                     ;;;	BBL 0
    1043/     398 :                     
    1044/     398 :                     CODE_28H:			; ...
    1045/     398 : C0                  	BBL 0
    1046/     399 :                     
    1047/     399 :                     CODE_29H:			; DAD H
    1048/     399 : (MACRO)              	SETFLAG_SUB_0
    1048/     399 : =>FALSE                      if EMU_USE_DAA
    1048/     399 :                             JMS DAA_SETFLAG_SUB_0
    1048/     399 : [1048]                       endif
    1049/     399 : 20 04               	FIM P0, REG16_HL
    1050/     39B : 22 04               	FIM P1, REG16_HL
    1051/     39D : 58 7B               	JMS ADD_REG16P0_REG16P1
    1052/     39F : 46 52               	JUN SETFLAG_C_CY
    1053/     3A1 :                     ;;;	BBL 0
    1054/     3A1 :                     
    1055/     3A1 :                     CODE_2AH:			; LHLD,B3B2
    1056/     3A1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1057/     3A3 : 24 1C               	FIM P2, REG8_ADDRL
    1058/     3A5 : 57 C4               	JMS LD_REG8P2_P1
    1059/     3A7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1060/     3A9 : 24 1E               	FIM P2, REG8_ADDRH
    1061/     3AB : 57 C4               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1062/     3AD :                     
    1063/     3AD : 20 1C               	FIM P0, REG16_ADDR
    1064/     3AF : 24 04               	FIM P2, REG8_L
    1065/     3B1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1066/     3B3 : 57 C4               	JMS LD_REG8P2_P1
    1067/     3B5 :                     
    1068/     3B5 : 24 06               	FIM P2, REG8_H
    1069/     3B7 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1070/     3B9 : 47 C4               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1071/     3BB :                     ;;;	BBL 0
    1072/     3BB :                     
    1073/     3BB :                     CODE_2BH:			; DCX H
    1074/     3BB : 20 04               	FIM P0, REG16_HL
    1075/     3BD : 48 46               	JUN DEC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/03/22 17:52:17


    1076/     3BF :                     ;;;	BBL 0
    1077/     3BF :                     
    1078/     3BF :                     CODE_2CH:			; INR L
    1079/     3BF : 22 04               	FIM P1, REG8_L
    1080/     3C1 : 44 3F               	JUN CODE_INR
    1081/     3C3 :                     ;;;	BBL 0
    1082/     3C3 :                     
    1083/     3C3 :                     CODE_2DH:			; DCR L
    1084/     3C3 : 22 04               	FIM P1, REG8_L
    1085/     3C5 : 44 45               	JUN CODE_DCR
    1086/     3C7 :                     ;;;	BBL 0
    1087/     3C7 :                     
    1088/     3C7 :                     CODE_2EH:			; MVI L,B2
    1089/     3C7 : 24 04               	FIM P2, REG8_L
    1090/     3C9 : 44 4B               	JUN CODE_MVI
    1091/     3CB :                     ;;;	BBL 0
    1092/     3CB :                     
    1093/     3CB :                     CODE_2FH:			; CMA
    1094/     3CB : 20 00               	FIM P0, REG8_A		; A=~A
    1095/     3CD : 57 D8               	JMS LD_P1_REG8P0
    1096/     3CF : A3                  	LD P1_LO
    1097/     3D0 : F4                  	CMA
    1098/     3D1 : B3                  	XCH P1_LO
    1099/     3D2 :                     
    1100/     3D2 : A2                  	LD P1_HI
    1101/     3D3 : F4                  	CMA
    1102/     3D4 : B2                  	XCH P1_HI
    1103/     3D5 : 47 B8               	JUN LD_REG8P0_P1
    1104/     3D7 :                     ;;;	BBL 0
    1105/     3D7 :                     	
    1106/     3D7 :                     CODE_30H:			; ...
    1107/     3D7 : C0                  	BBL 0
    1108/     3D8 :                     
    1109/     3D8 :                     CODE_31H:			; LXI SP, B3B2
    1110/     3D8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1111/     3DA : 24 18               	FIM P2, REG8_SPL
    1112/     3DC : 57 C4               	JMS LD_REG8P2_P1
    1113/     3DE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1114/     3E0 : 24 1A               	FIM P2, REG8_SPH
    1115/     3E2 : 47 C4               	JUN LD_REG8P2_P1
    1116/     3E4 :                     ;;;	BBL 0
    1117/     3E4 :                     
    1118/     3E4 :                     CODE_32H:			; STA B3B2
    1119/     3E4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1120/     3E6 : 24 1C               	FIM P2, REG8_ADDRL
    1121/     3E8 : 57 C4               	JMS LD_REG8P2_P1
    1122/     3EA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1123/     3EC : 24 1E               	FIM P2, REG8_ADDRH
    1124/     3EE : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1125/     3F0 :                     
    1126/     3F0 : 2E 00               	FIM P7, REG8_A
    1127/     3F2 : 57 D0               	JMS LD_P1_REG8P7	; P1=A
    1128/     3F4 : 20 1C               	FIM P0, REG16_ADDR
    1129/     3F6 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1130/     3F8 :                     ;;;	BBL 0
    1131/     3F8 :                     	
    1132/     3F8 :                     CODE_33H:			; INX SP
    1133/     3F8 : 20 18               	FIM P0, REG16_SP
    1134/     3FA : 48 36               	JUN INC_REG16P0
    1135/     3FC :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/03/22 17:52:17


    1136/     3FC :                     
    1137/     3FC :                     CODE_34H:			; INR M
    1138/     3FC : (MACRO)              	SETFLAG_SUB_0
    1138/     3FC : =>FALSE                      if EMU_USE_DAA
    1138/     3FC :                             JMS DAA_SETFLAG_SUB_0
    1138/     3FC : [1138]                       endif
    1139/     3FC : 20 04               	FIM P0, REG16_HL
    1140/     3FE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1141/     400 : 58 46               	JMS DEC_REG16P0
    1142/     402 :                     	
    1143/     402 : 5C BD               	JMS INC_P1
    1144/     404 : 5B 81               	JMS LD_PM16REG16P0_P1
    1145/     406 :                     
    1146/     406 : 46 6C               	JUN SETFLAG_ZSP_P1
    1147/     408 :                     ;;;	BBL 0
    1148/     408 :                     
    1149/     408 :                     CODE_35H:			; DCR M
    1150/     408 : (MACRO)              	SETFLAG_SUB_1
    1150/     408 : =>FALSE                      if EMU_USE_DAA
    1150/     408 :                             JMS DAA_SETFLAG_SUB_1
    1150/     408 : [1150]                       endif
    1151/     408 : 20 04               	FIM P0, REG16_HL
    1152/     40A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1153/     40C : 58 46               	JMS DEC_REG16P0
    1154/     40E :                     	
    1155/     40E : 5C C3               	JMS DEC_P1
    1156/     410 : 5B 81               	JMS LD_PM16REG16P0_P1
    1157/     412 :                     
    1158/     412 : 46 6C               	JUN SETFLAG_ZSP_P1
    1159/     414 :                     ;;;	BBL 0
    1160/     414 :                     	
    1161/     414 :                     CODE_36H:			; MVI M, B2
    1162/     414 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1163/     416 : 20 04               	FIM P0, REG16_HL
    1164/     418 : 4B 81               	JUN LD_PM16REG16P0_P1
    1165/     41A :                     ;;;	BBL 0
    1166/     41A :                     	
    1167/     41A :                     CODE_37H:			; STC
    1168/     41A : 46 5D               	JUN SETFLAG_C_1
    1169/     41C :                     ;;;	BBL 0
    1170/     41C :                     
    1171/     41C :                     CODE_38H:			; ...
    1172/     41C : C0                  	BBL 0
    1173/     41D :                     
    1174/     41D :                     CODE_39H:			; DAD SP
    1175/     41D : (MACRO)              	SETFLAG_SUB_0
    1175/     41D : =>FALSE                      if EMU_USE_DAA
    1175/     41D :                             JMS DAA_SETFLAG_SUB_0
    1175/     41D : [1175]                       endif
    1176/     41D : 20 04               	FIM P0, REG16_HL
    1177/     41F : 22 18               	FIM P1, REG16_SP
    1178/     421 : 58 7B               	JMS ADD_REG16P0_REG16P1
    1179/     423 : 46 52               	JUN SETFLAG_C_CY
    1180/     425 :                     ;;;	BBL 0
    1181/     425 :                     
    1182/     425 :                     CODE_3AH:			; LDA B2B3
    1183/     425 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1184/     427 : 24 1C               	FIM P2, REG8_ADDRL
    1185/     429 : 57 C4               	JMS LD_REG8P2_P1
    1186/     42B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/03/22 17:52:17


    1187/     42D : 24 1E               	FIM P2, REG8_ADDRH
    1188/     42F : 57 C4               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1189/     431 :                     
    1190/     431 : 20 1C               	FIM P0, REG16_ADDR
    1191/     433 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1192/     435 : 24 00               	FIM P2, REG8_A
    1193/     437 : 47 C4               	JUN LD_REG8P2_P1	; P1=A and return
    1194/     439 :                     ;;;	BBL 0
    1195/     439 :                     
    1196/     439 :                     CODE_3BH:			; DCX SP
    1197/     439 : 20 18               	FIM P0, REG16_SP
    1198/     43B : 48 46               	JUN DEC_REG16P0
    1199/     43D :                     ;;;	BBL 0
    1200/     43D :                     
    1201/     43D :                     CODE_3CH:			; INR A
    1202/     43D : 22 00               	FIM P1, REG8_A
    1203/     43F :                     CODE_INR:
    1204/     43F : (MACRO)              	SETFLAG_SUB_0
    1204/     43F : =>FALSE                      if EMU_USE_DAA
    1204/     43F :                             JMS DAA_SETFLAG_SUB_0
    1204/     43F : [1204]                       endif
    1205/     43F : 57 74               	JMS INC_REG8P1
    1206/     441 : 46 6A               	JUN SETFLAG_ZSP_REG8P1
    1207/     443 :                     ;;;	BBL 0
    1208/     443 :                     
    1209/     443 :                     CODE_3DH:			; DCR A
    1210/     443 : 22 00               	FIM P1, REG8_A
    1211/     445 :                     CODE_DCR:
    1212/     445 : (MACRO)              	SETFLAG_SUB_1
    1212/     445 : =>FALSE                      if EMU_USE_DAA
    1212/     445 :                             JMS DAA_SETFLAG_SUB_1
    1212/     445 : [1212]                       endif
    1213/     445 : 57 95               	JMS DEC_REG8P1
    1214/     447 : 46 6A               	JUN SETFLAG_ZSP_REG8P1
    1215/     449 :                     ;;;	BBL 0
    1216/     449 :                     
    1217/     449 :                     CODE_3EH:			; MVI A,B2
    1218/     449 : 24 00               	FIM P2, REG8_A
    1219/     44B :                     CODE_MVI:
    1220/     44B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1221/     44D : 47 C4               	JUN LD_REG8P2_P1
    1222/     44F :                     ;;;	BBL 0
    1223/     44F :                     
    1224/     44F :                     CODE_3FH:			; CMC
    1225/     44F : 56 48               	JMS GETFLAG_C
    1226/     451 :                     ;;; 	RAR			; can be omitted because CY is already C
    1227/     451 : F3                  	CMC
    1228/     452 : 46 52               	JUN SETFLAG_C_CY
    1229/     454 :                     ;;;	BBL 0
    1230/     454 :                     
    1231/     454 :                     CODE_C0H:			; RNZ
    1232/     454 : 56 35               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1233/     456 : 44 9B               	JUN RET_IF0		; return if Z flag == 0
    1234/     458 :                     	;;;	BBL 0
    1235/     458 :                     
    1236/     458 :                     CODE_C1H:			; POP B
    1237/     458 : 24 0E               	FIM P2, REG8_B
    1238/     45A : 26 0C               	FIM P3, REG8_C
    1239/     45C : 45 CE               	JUN CODE_POP_REG8P2P3
    1240/     45E :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/03/22 17:52:17


    1241/     45E :                     
    1242/     45E :                     CODE_C2H:			; JNZ
    1243/     45E : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1244/     460 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1245/     460 :                     ;;; this jump can be omitted
    1246/     460 :                     JMP_IF0:
    1247/     460 : 14 6E               	JCN Z, CODE_JMP
    1248/     462 : 58 36               	JMS INC_REG16P0		; PC+=2
    1249/     464 : 58 36               	JMS INC_REG16P0
    1250/     466 : C0                  	BBL 0
    1251/     467 :                     JMP_IF1:
    1252/     467 : 1C 6E               	JCN ZN, CODE_JMP
    1253/     469 : 58 36               	JMS INC_REG16P0		; PC+=2
    1254/     46B : 58 36               	JMS INC_REG16P0
    1255/     46D : C0                  	BBL 0
    1256/     46E :                     
    1257/     46E :                     CODE_C3H:			; JMP B3B2
    1258/     46E :                     CODE_JMP:
    1259/     46E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1260/     470 : (MACRO)              	LD_P3_P1
    1260/     470 : A2                                  LD P1_HI
    1260/     471 : B6                                  XCH P3_HI
    1260/     472 : A3                                  LD P1_LO
    1260/     473 : B7                                  XCH P3_LO
    1261/     474 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1262/     476 : (MACRO)              	LD_P2_P1
    1262/     476 : A2                                  LD P1_HI
    1262/     477 : B4                                  XCH P2_HI
    1262/     478 : A3                                  LD P1_LO
    1262/     479 : B5                                  XCH P2_LO
    1263/     47A :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1264/     47A : 47 5D               	JUN LD_REG16P0_P2P3
    1265/     47C :                     ;;;	BBL 0
    1266/     47C :                     
    1267/     47C :                     CODE_C4H:			; CNZ
    1268/     47C : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1269/     47E : 44 B2               	JUN CALL_IF0		; call if Z==0
    1270/     480 :                     ;;;	BBL 0
    1271/     480 :                     
    1272/     480 :                     CODE_C5H:			; PUSH B
    1273/     480 : 24 0E               	FIM P2, REG8_B
    1274/     482 : 26 0C               	FIM P3, REG8_C
    1275/     484 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1276/     486 :                     ;;;	BBL 0
    1277/     486 :                     
    1278/     486 :                     CODE_C6H:			; ADI B2
    1279/     486 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1280/     488 :                     ADI_P1:
    1281/     488 : (MACRO)              	SETFLAG_SUB_0
    1281/     488 : =>FALSE                      if EMU_USE_DAA
    1281/     488 :                             JMS DAA_SETFLAG_SUB_0
    1281/     488 : [1281]                       endif
    1282/     488 : 20 00               	FIM P0, REG8_A
    1283/     48A : 57 63               	JMS ADD_REG8P0_P1
    1284/     48C : 56 52               	JMS SETFLAG_C_CY
    1285/     48E : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1286/     490 :                     ;;;	BBL 0
    1287/     490 :                     	
    1288/     490 :                     CODE_C7H:			; RST 0
    1289/     490 : 24 00               	FIM P2, up(0<<3)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/03/22 17:52:17


    1290/     492 : 26 00               	FIM P3, lo(0<<3)
    1291/     494 : 44 C5               	JUN CALL_P2P3
    1292/     496 :                     ;;;	BBL 0
    1293/     496 :                     	
    1294/     496 :                     CODE_C8H:			; RZ
    1295/     496 : 56 35               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1296/     498 :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1297/     498 :                     ;;; this jump can be omitted
    1298/     498 :                     RET_IF1:
    1299/     498 : 1C 9E               	JCN ZN, CODE_RET
    1300/     49A : C0                  	BBL 0
    1301/     49B :                     RET_IF0:
    1302/     49B : 14 9E               	JCN Z, CODE_RET
    1303/     49D : C0                  	BBL 0
    1304/     49E :                     CODE_C9H:			; RET
    1305/     49E :                     CODE_RET:	
    1306/     49E : 24 16               	FIM P2, REG8_PCH
    1307/     4A0 : 26 14               	FIM P3, REG8_PCL
    1308/     4A2 : 45 CE               	JUN CODE_POP_REG8P2P3
    1309/     4A4 :                     ;;;	BBL 0
    1310/     4A4 :                     	
    1311/     4A4 :                     CODE_CAH:			; JZ
    1312/     4A4 : 56 35               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1313/     4A6 : 44 67               	JUN JMP_IF1		; jump if Z==1
    1314/     4A8 :                     ;;;	BBL 0
    1315/     4A8 :                     
    1316/     4A8 :                     CODE_CBH:			; ...
    1317/     4A8 : C0                  	BBL 0
    1318/     4A9 :                     
    1319/     4A9 :                     CODE_CCH:			; CZ
    1320/     4A9 : 56 35               	JMS GETFLAG_Z
    1321/     4AB :                     CALL_IF1:
    1322/     4AB : 1C B9               	JCN ZN, CODE_CALL
    1323/     4AD : 58 36               	JMS INC_REG16P0		; PC+=2
    1324/     4AF : 58 36               	JMS INC_REG16P0
    1325/     4B1 : C0                  	BBL 0
    1326/     4B2 :                     CALL_IF0:	
    1327/     4B2 : 14 B9               	JCN Z, CODE_CALL
    1328/     4B4 : 58 36               	JMS INC_REG16P0		; PC+=2
    1329/     4B6 : 58 36               	JMS INC_REG16P0
    1330/     4B8 : C0                  	BBL 0
    1331/     4B9 :                     
    1332/     4B9 :                     CODE_CDH:			; CALL B3B2
    1333/     4B9 :                     CODE_CALL:
    1334/     4B9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1335/     4BB : (MACRO)              	LD_P3_P1
    1335/     4BB : A2                                  LD P1_HI
    1335/     4BC : B6                                  XCH P3_HI
    1335/     4BD : A3                                  LD P1_LO
    1335/     4BE : B7                                  XCH P3_LO
    1336/     4BF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1337/     4C1 : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1337/     4C1 : A2                                  LD P1_HI
    1337/     4C2 : B4                                  XCH P2_HI
    1337/     4C3 : A3                                  LD P1_LO
    1337/     4C4 : B5                                  XCH P2_LO
    1338/     4C5 :                     
    1339/     4C5 :                     CALL_P2P3:
    1340/     4C5 : 22 1C               	FIM P1, REG16_ADDR
    1341/     4C7 : 57 3D               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/03/22 17:52:17


    1342/     4C9 :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1343/     4C9 : 57 5D               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1344/     4CB :                     	
    1345/     4CB :                     	;; PUSH PC
    1346/     4CB : 24 1E               	FIM P2, REG8_ADDRH
    1347/     4CD : 26 1C               	FIM P3, REG8_ADDRL
    1348/     4CF : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1349/     4D1 :                     ;;; 	BBL 0
    1350/     4D1 :                     
    1351/     4D1 :                     CODE_CEH:			; ACI B2
    1352/     4D1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1353/     4D3 :                     ACI_P1:
    1354/     4D3 : (MACRO)              	SETFLAG_SUB_0
    1354/     4D3 : =>FALSE                      if EMU_USE_DAA
    1354/     4D3 :                             JMS DAA_SETFLAG_SUB_0
    1354/     4D3 : [1354]                       endif
    1355/     4D3 : 56 48               	JMS GETFLAG_C
    1356/     4D5 : 14 D9               	JCN Z, ACI_P1_NOCARRY
    1357/     4D7 : 5C BD               	JMS INC_P1
    1358/     4D9 :                     ACI_P1_NOCARRY:	
    1359/     4D9 : 20 00               	FIM P0, REG8_A
    1360/     4DB : 57 63               	JMS ADD_REG8P0_P1
    1361/     4DD : 56 52               	JMS SETFLAG_C_CY
    1362/     4DF : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1363/     4E1 :                     ;;;	BBL 0
    1364/     4E1 :                     	
    1365/     4E1 :                     CODE_CFH:			; RST 1
    1366/     4E1 : 24 00               	FIM P2, up(1<<3)
    1367/     4E3 : 26 08               	FIM P3, lo(1<<3)
    1368/     4E5 : 44 C5               	JUN CALL_P2P3
    1369/     4E7 :                     	
    1370/     4E7 :                     CODE_D0H:			; RNC
    1371/     4E7 : 56 48               	JMS GETFLAG_C		;
    1372/     4E9 : 44 9B               	JUN RET_IF0		;
    1373/     4EB :                     ;;;	BBL 0
    1374/     4EB :                     
    1375/     4EB :                     CODE_D1H:			; POP D
    1376/     4EB : 24 0A               	FIM P2, REG8_D
    1377/     4ED : 26 08               	FIM P3, REG8_E
    1378/     4EF : 45 CE               	JUN CODE_POP_REG8P2P3
    1379/     4F1 :                     ;;;	BBL 0
    1380/     4F1 :                     
    1381/     4F1 :                     CODE_D2H:			; JNC
    1382/     4F1 : 56 48               	JMS GETFLAG_C
    1383/     4F3 : 44 60               	JUN JMP_IF0
    1384/     4F5 :                     ;;;	BBL 0
    1385/     4F5 :                     
    1386/     4F5 :                     CODE_D3H:			; OUT B2
    1387/     4F5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1388/     4F7 : 48 B1               	JUN EMULATE_OUT_P1
    1389/     4F9 :                     ;;;	BBL 0
    1390/     4F9 :                     	
    1391/     4F9 :                     CODE_D4H:			; CNC
    1392/     4F9 : 56 48               	JMS GETFLAG_C
    1393/     4FB : 44 B2               	JUN CALL_IF0
    1394/     4FD :                     ;;;	BBL 0
    1395/     4FD :                     
    1396/     4FD :                     CODE_D5H:			; PUSH D
    1397/     4FD : 24 0A               	FIM P2, REG8_D
    1398/     4FF : 26 08               	FIM P3, REG8_E
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/03/22 17:52:17


    1399/     501 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1400/     503 :                     ;;;	BBL 0
    1401/     503 :                     
    1402/     503 :                     CODE_D6H:			; SUI B2
    1403/     503 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1404/     505 :                     SUI_P1:
    1405/     505 : (MACRO)              	SETFLAG_SUB_1
    1405/     505 : =>FALSE                      if EMU_USE_DAA
    1405/     505 :                             JMS DAA_SETFLAG_SUB_1
    1405/     505 : [1405]                       endif
    1406/     505 : 20 00               	FIM P0, REG8_A
    1407/     507 : 57 84               	JMS SUB_REG8P0_P1
    1408/     509 : 56 52               	JMS SETFLAG_C_CY
    1409/     50B : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1410/     50D :                     ;;;	BBL 0
    1411/     50D :                     	
    1412/     50D :                     CODE_D7H:			; RST 2
    1413/     50D : 24 00               	FIM P2, up(2<<3)
    1414/     50F : 26 10               	FIM P3, lo(2<<3)
    1415/     511 : 44 C5               	JUN CALL_P2P3
    1416/     513 :                     ;;;	BBL 0
    1417/     513 :                     	
    1418/     513 :                     CODE_D8H:			; RC
    1419/     513 : 56 48               	JMS GETFLAG_C
    1420/     515 : 44 98               	JUN RET_IF1
    1421/     517 :                     ;;;	BBL 0
    1422/     517 :                     
    1423/     517 :                     CODE_D9H:			; ...
    1424/     517 : C0                  	BBL 0
    1425/     518 :                     
    1426/     518 :                     CODE_DAH:			; JC
    1427/     518 : 56 48               	JMS GETFLAG_C
    1428/     51A : 44 67               	JUN JMP_IF1
    1429/     51C :                     ;;;	BBL 0
    1430/     51C :                     
    1431/     51C :                     CODE_DBH:			; IN
    1432/     51C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1433/     51E : 48 C9               	JUN EMULATE_IN_P1
    1434/     520 :                     ;;;	BBL 0
    1435/     520 :                     
    1436/     520 :                     CODE_DCH:			; CC
    1437/     520 : 56 48               	JMS GETFLAG_C
    1438/     522 : 44 AB               	JUN CALL_IF1
    1439/     524 :                     
    1440/     524 :                     CODE_DDH:			; ...
    1441/     524 : C0                  	BBL 0
    1442/     525 :                     CODE_DEH:			; SBI B2
    1443/     525 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1444/     527 :                     SBI_P1:
    1445/     527 : (MACRO)              	SETFLAG_SUB_1
    1445/     527 : =>FALSE                      if EMU_USE_DAA
    1445/     527 :                             JMS DAA_SETFLAG_SUB_1
    1445/     527 : [1445]                       endif
    1446/     527 : 56 48               	JMS GETFLAG_C
    1447/     529 : 14 2D               	JCN Z, SBI_P1_NOCARRY
    1448/     52B : 5C BD               	JMS INC_P1
    1449/     52D :                     SBI_P1_NOCARRY:
    1450/     52D : 20 00               	FIM P0, REG8_A
    1451/     52F : 57 84               	JMS SUB_REG8P0_P1
    1452/     531 : 56 52               	JMS SETFLAG_C_CY
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/03/22 17:52:17


    1453/     533 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1454/     535 :                     ;;; 	BBL 0
    1455/     535 :                     
    1456/     535 :                     CODE_DFH:			; RST 3
    1457/     535 : 24 00               	FIM P2, up(3<<3)
    1458/     537 : 26 18               	FIM P3, lo(3<<3)
    1459/     539 : 44 C5               	JUN CALL_P2P3
    1460/     53B :                     
    1461/     53B :                     CODE_E0H:			; RPO
    1462/     53B : 56 51               	JMS GETFLAG_P
    1463/     53D : 44 9B               	JUN RET_IF0
    1464/     53F :                     	
    1465/     53F :                     CODE_E1H:			; POP H
    1466/     53F : 24 06               	FIM P2, REG8_H
    1467/     541 : 26 04               	FIM P3, REG8_L
    1468/     543 : 45 CE               	JUN CODE_POP_REG8P2P3
    1469/     545 :                     
    1470/     545 :                     CODE_E2H:			; JPO
    1471/     545 : 56 51               	JMS GETFLAG_P
    1472/     547 : 44 60               	JUN JMP_IF0
    1473/     549 :                     
    1474/     549 :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1475/     549 :                     	;; POP to ADDR
    1476/     549 : 24 1E               	FIM P2, REG8_ADDRH
    1477/     54B : 26 1C               	FIM P3, REG8_ADDRL
    1478/     54D : 20 18               	FIM P0, REG16_SP
    1479/     54F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1480/     551 : 57 BE               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1481/     553 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1482/     555 : 57 C4               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1483/     557 :                     
    1484/     557 :                     	;; PUSH HL
    1485/     557 : 24 06               	FIM P2, REG8_H
    1486/     559 : 26 04               	FIM P3, REG8_L
    1487/     55B : 57 E4               	JMS LD_P1_REG8P2	; P1=REG(H)
    1488/     55D : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1489/     55F : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1490/     561 :                     
    1491/     561 : 57 EA               	JMS LD_P1_REG8P3	; P1=REG(L)
    1492/     563 : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1493/     565 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1494/     567 :                     
    1495/     567 :                     	;; HL = ADDR
    1496/     567 : 2C 04               	FIM P6, REG16_HL
    1497/     569 : 2E 1C               	FIM P7, REG16_ADDR
    1498/     56B : 48 17               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1499/     56D :                     	
    1500/     56D :                     CODE_E4H:			; CPO
    1501/     56D : 56 51               	JMS GETFLAG_P
    1502/     56F : 44 B2               	JUN CALL_IF0
    1503/     571 :                     
    1504/     571 :                     CODE_E5H:			; PUSH H
    1505/     571 : 24 06               	FIM P2, REG8_H
    1506/     573 : 26 04               	FIM P3, REG8_L
    1507/     575 : 45 E5               	JUN CODE_PUSH_REG8P2P3
    1508/     577 :                     
    1509/     577 :                     CODE_E6H:			; ANI B2
    1510/     577 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1511/     579 :                     ANI_P1:
    1512/     579 : (MACRO)              	LD_P2_P1		; P2=B2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/03/22 17:52:17


    1512/     579 : A2                                  LD P1_HI
    1512/     57A : B4                                  XCH P2_HI
    1512/     57B : A3                                  LD P1_LO
    1512/     57C : B5                                  XCH P2_LO
    1513/     57D : 20 00               	FIM P0, REG8_A
    1514/     57F : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1515/     581 : 56 A8               	JMS AND_P1_P2		; P1=A&P2
    1516/     583 : 57 B8               	JMS LD_REG8P0_P1	; A= P1
    1517/     585 : 56 54               	JMS SETFLAG_C_0
    1518/     587 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1519/     589 :                     	
    1520/     589 :                     CODE_E7H:			; RST 4
    1521/     589 : 24 00               	FIM P2, up(4<<3)
    1522/     58B : 26 20               	FIM P3, lo(4<<3)
    1523/     58D : 44 C5               	JUN CALL_P2P3
    1524/     58F :                     
    1525/     58F :                     CODE_E8H:			; RPE
    1526/     58F : 56 51               	JMS GETFLAG_P
    1527/     591 : 44 98               	JUN RET_IF1
    1528/     593 :                     
    1529/     593 :                     CODE_E9H:			; PCHL
    1530/     593 : 22 04               	FIM P1, REG16_HL
    1531/     595 : 47 33               	JUN LD_REG16P0_REG16P1
    1532/     597 :                     	
    1533/     597 :                     CODE_EAH:			; JPE
    1534/     597 : 56 51               	JMS GETFLAG_P
    1535/     599 : 44 67               	JUN JMP_IF1
    1536/     59B :                     
    1537/     59B :                     CODE_EBH:			; XCHG
    1538/     59B : 20 1C               	FIM P0, REG16_ADDR
    1539/     59D : 22 04               	FIM P1, REG16_HL
    1540/     59F : 57 33               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1541/     5A1 : 20 08               	FIM P0, REG16_DE
    1542/     5A3 : 57 3D               	JMS LD_REG16P1_REG16P0	; HL=DE
    1543/     5A5 : 22 1C               	FIM P1, REG16_ADDR
    1544/     5A7 : 47 33               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1545/     5A9 :                     	
    1546/     5A9 :                     CODE_ECH:			; CPE
    1547/     5A9 : 56 51               	JMS GETFLAG_P
    1548/     5AB : 44 AB               	JUN CALL_IF1
    1549/     5AD :                     
    1550/     5AD :                     CODE_EDH:			; ...
    1551/     5AD : C0                  	BBL 0
    1552/     5AE :                     
    1553/     5AE :                     CODE_EEH:			; XRI B2
    1554/     5AE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1555/     5B0 :                     XRI_P1:
    1556/     5B0 : (MACRO)              	LD_P2_P1		; P2=B2
    1556/     5B0 : A2                                  LD P1_HI
    1556/     5B1 : B4                                  XCH P2_HI
    1556/     5B2 : A3                                  LD P1_LO
    1556/     5B3 : B5                                  XCH P2_LO
    1557/     5B4 : 20 00               	FIM P0, REG8_A
    1558/     5B6 : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1559/     5B8 : 56 E5               	JMS XOR_P1_P2
    1560/     5BA : 57 B8               	JMS LD_REG8P0_P1	; A= A ^ P2
    1561/     5BC : 56 54               	JMS SETFLAG_C_0
    1562/     5BE : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1563/     5C0 :                     	
    1564/     5C0 :                     CODE_EFH:			; RST 5
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/03/22 17:52:17


    1565/     5C0 : 24 00               	FIM P2, up(5<<3)
    1566/     5C2 : 26 28               	FIM P3, lo(5<<3)
    1567/     5C4 : 44 C5               	JUN CALL_P2P3
    1568/     5C6 :                     
    1569/     5C6 :                     CODE_F0H:			; RP
    1570/     5C6 : 56 3F               	JMS GETFLAG_S
    1571/     5C8 : 44 9B               	JUN RET_IF0
    1572/     5CA :                     	
    1573/     5CA :                     CODE_F1H:			; POP PSW
    1574/     5CA : 24 00               	FIM P2, REG8_A
    1575/     5CC : 26 10               	FIM P3, REG8_FLAG
    1576/     5CE :                     CODE_POP_REG8P2P3:
    1577/     5CE : 20 18               	FIM P0, REG16_SP
    1578/     5D0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1579/     5D2 : 57 BE               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1580/     5D4 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1581/     5D6 : 47 C4               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1582/     5D8 :                     	
    1583/     5D8 :                     CODE_F2H:			; JP
    1584/     5D8 : 56 3F               	JMS GETFLAG_S
    1585/     5DA : 44 60               	JUN JMP_IF0
    1586/     5DC :                     
    1587/     5DC :                     CODE_F3H:			; DI
    1588/     5DC :                     				; Interrupt is not implemented
    1589/     5DC : C0                  	BBL 0
    1590/     5DD :                     
    1591/     5DD :                     CODE_F4H:			; CP
    1592/     5DD : 56 3F               	JMS GETFLAG_S
    1593/     5DF : 44 B2               	JUN CALL_IF0
    1594/     5E1 :                     
    1595/     5E1 :                     CODE_F5H:			; PUSH PSW
    1596/     5E1 : 24 00               	FIM P2, REG8_A
    1597/     5E3 : 26 10               	FIM P3, REG8_FLAG
    1598/     5E5 :                     CODE_PUSH_REG8P2P3:
    1599/     5E5 : 20 18               	FIM P0, REG16_SP
    1600/     5E7 :                     				; higher byte is the first
    1601/     5E7 : 57 E4               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1602/     5E9 : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1603/     5EB : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1604/     5ED :                     
    1605/     5ED : 57 EA               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1606/     5EF : 58 46               	JMS DEC_REG16P0		; REG(SP)--
    1607/     5F1 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1608/     5F3 :                     
    1609/     5F3 :                     CODE_F6H:			; ORI
    1610/     5F3 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1611/     5F5 :                     ORI_P1:
    1612/     5F5 : (MACRO)              	LD_P2_P1		; P2=B2
    1612/     5F5 : A2                                  LD P1_HI
    1612/     5F6 : B4                                  XCH P2_HI
    1612/     5F7 : A3                                  LD P1_LO
    1612/     5F8 : B5                                  XCH P2_LO
    1613/     5F9 : 20 00               	FIM P0, REG8_A
    1614/     5FB : 57 D8               	JMS LD_P1_REG8P0	; P1=A
    1615/     5FD : 56 F6               	JMS OR_P1_P2
    1616/     5FF : 57 B8               	JMS LD_REG8P0_P1	; P1= A | P2
    1617/     601 : 56 54               	JMS SETFLAG_C_0
    1618/     603 : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1619/     605 :                     	
    1620/     605 :                     CODE_F7H:			; RST 6
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/03/22 17:52:17


    1621/     605 : 24 00               	FIM P2, up(6<<3)
    1622/     607 : 26 30               	FIM P3, lo(6<<3)
    1623/     609 : 44 C5               	JUN CALL_P2P3
    1624/     60B :                     
    1625/     60B :                     CODE_F8H:			; RM
    1626/     60B : 56 3F               	JMS GETFLAG_S
    1627/     60D : 44 98               	JUN RET_IF1
    1628/     60F :                     
    1629/     60F :                     CODE_F9H:			; SPHL
    1630/     60F : 2C 18               	FIM P6, REG16_SP
    1631/     611 : 2E 04               	FIM P7, REG16_HL
    1632/     613 : 48 17               	JUN LD_REG16P6_REG16P7
    1633/     615 :                     
    1634/     615 :                     CODE_FAH:			; JM
    1635/     615 : 56 3F               	JMS GETFLAG_S
    1636/     617 : 44 67               	JUN JMP_IF1
    1637/     619 :                     
    1638/     619 :                     CODE_FBH:			; EI
    1639/     619 :                     				; Interrupt is not implemented
    1640/     619 : C0                  	BBL 0
    1641/     61A :                     
    1642/     61A :                     CODE_FCH:			; CM
    1643/     61A : 56 3F               	JMS GETFLAG_S
    1644/     61C : 44 AB               	JUN CALL_IF1
    1645/     61E :                     
    1646/     61E :                     CODE_FDH:			; ...
    1647/     61E : C0                  	BBL 0
    1648/     61F :                     
    1649/     61F :                     CODE_FEH:			; CPI
    1650/     61F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1651/     621 :                     CPI_P1:
    1652/     621 : (MACRO)              	SETFLAG_SUB_1
    1652/     621 : =>FALSE                      if EMU_USE_DAA
    1652/     621 :                             JMS DAA_SETFLAG_SUB_1
    1652/     621 : [1652]                       endif
    1653/     621 : 2C 12               	FIM P6, REG8_SRC
    1654/     623 : 2E 00               	FIM P7, REG8_A
    1655/     625 : 57 AD               	JMS LD_REG8P6_REG8P7
    1656/     627 : 20 12               	FIM P0, REG8_SRC
    1657/     629 : 57 84               	JMS SUB_REG8P0_P1
    1658/     62B : 56 52               	JMS SETFLAG_C_CY
    1659/     62D : 46 66               	JUN SETFLAG_ZSP_REG8P0
    1660/     62F :                     ;;; 	BBL 0
    1661/     62F :                     CODE_FFH:			; RST 7
    1662/     62F : 24 00               	FIM P2, up(7<<3)
    1663/     631 : 26 38               	FIM P3, lo(7<<3)
    1664/     633 : 44 C5               	JUN CALL_P2P3
    1665/     635 :                     
    1666/     635 :                     ;;;---------------------------------------------------------------------------
    1667/     635 :                     ;;; FLAG routines
    1668/     635 :                     ;;;---------------------------------------------------------------------------
    1669/     635 :                     
    1670/     635 :                     ;;;---------------------------------------------------------------------------
    1671/     635 :                     ;;; GETFLAG_Z
    1672/     635 :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1673/     635 :                     ;;;---------------------------------------------------------------------------
    1674/     635 :                     GETFLAG_Z:
    1675/     635 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1676/     637 : 2F                  	SRC P7
    1677/     638 : E9                  	RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/03/22 17:52:17


    1678/     639 : F5                  	RAL
    1679/     63A : F5                  	RAL
    1680/     63B : 12 3E               	JCN C, GETFLAG_Z_EXIT1
    1681/     63D : C0                  	BBL 0
    1682/     63E :                     GETFLAG_Z_EXIT1:
    1683/     63E : C1                  	BBL 1
    1684/     63F :                     
    1685/     63F :                     ;;;---------------------------------------------------------------------------
    1686/     63F :                     ;;; GETFLAG_S
    1687/     63F :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1688/     63F :                     ;;;---------------------------------------------------------------------------
    1689/     63F :                     GETFLAG_S:
    1690/     63F : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1691/     641 : 2F                  	SRC P7
    1692/     642 : E9                  	RDM
    1693/     643 : F5                  	RAL
    1694/     644 : 12 47               	JCN C, GETFLAG_S_EXIT1
    1695/     646 : C0                  	BBL 0
    1696/     647 :                     GETFLAG_S_EXIT1:
    1697/     647 : C1                  	BBL 1
    1698/     648 :                     
    1699/     648 :                     ;;;---------------------------------------------------------------------------
    1700/     648 :                     ;;; GETFLAG_C
    1701/     648 :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1702/     648 :                     ;;;---------------------------------------------------------------------------
    1703/     648 :                     GETFLAG_C:
    1704/     648 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1705/     64A : 2F                  	SRC P7
    1706/     64B : E9                  	RDM
    1707/     64C : F6                  	RAR
    1708/     64D : 12 50               	JCN C, GETFLAG_C_1
    1709/     64F : C0                  	BBL 0
    1710/     650 :                     GETFLAG_C_1:	
    1711/     650 : C1                  	BBL 1
    1712/     651 :                     
    1713/     651 :                     ;;;---------------------------------------------------------------------------
    1714/     651 :                     ;;; GETFLAG_P
    1715/     651 :                     ;;; Flag P is loded to ACC
    1716/     651 :                     ;;; ACC=FLAG_P
    1717/     651 :                     ;;; This routine is compiled if EMU_USE_FLAG_P, 
    1718/     651 :                     ;;; otherwise FLAG_P is always 0.
    1719/     651 :                     ;;;---------------------------------------------------------------------------
    1720/     651 :                     GETFLAG_P:
    1721/     651 : =>FALSE              	if EMU_USE_FLAG_P
    1722/     651 :                     	FIM P7, REG4_FLAG_1P1C
    1723/     651 :                     	SRC P7
    1724/     651 :                     	RDM
    1725/     651 :                     	RAL
    1726/     651 :                     	RAL
    1727/     651 :                     	JCN CN, GETFLAG_P_0
    1728/     651 :                     	BBL 1
    1729/     651 :                     GETFLAG_P_0:
    1730/     651 : [1721]               	endif 			; EMU_USE_FLAG_P
    1731/     651 : C0                  	BBL 0
    1732/     652 :                     	
    1733/     652 :                     ;;;---------------------------------------------------------------------------
    1734/     652 :                     ;;; DAA_SETFLAG_SUB_0
    1735/     652 :                     ;;; DAA_SETFLAG_SUB_1
    1736/     652 :                     ;;; FLAG_SUB is compiled only if EMU_USE_DAA
    1737/     652 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/03/22 17:52:17


    1738/     652 :                     
    1739/     652 : =>FALSE              	if EMU_USE_DAA
    1740/     652 :                     DAA_SETFLAG_SUB_0:
    1741/     652 :                     	FIM P7, REG4_FLAG_SZBH
    1742/     652 :                     	SRC P7
    1743/     652 :                     	RDM
    1744/     652 :                     	RAR
    1745/     652 :                     	RAR
    1746/     652 :                     	CLC
    1747/     652 :                     RAL_RAL_WRM_BBL0:
    1748/     652 :                     	RAL
    1749/     652 :                     	RAL
    1750/     652 :                     	WRM
    1751/     652 :                     	BBL 0
    1752/     652 :                     
    1753/     652 :                     DAA_SETFLAG_SUB_1:
    1754/     652 :                     	FIM P7, REG4_FLAG_SZBH
    1755/     652 :                     	SRC P7
    1756/     652 :                     	RDM
    1757/     652 :                     	RAR
    1758/     652 :                     	RAR
    1759/     652 :                     	STC
    1760/     652 :                     	JUN RAL_RAL_WRM_BBL0
    1761/     652 :                     ;;; 	RAL
    1762/     652 :                     ;;; 	RAL
    1763/     652 :                     ;;; 	WRM
    1764/     652 :                     ;;; 	BBL 0
    1765/     652 : [1739]               	endif		; EMU_USE_DAA
    1766/     652 :                     	
    1767/     652 :                     ;;;---------------------------------------------------------------------------
    1768/     652 :                     ;;; SETFLAG_C_{CY, 0, 1}
    1769/     652 :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1770/     652 :                     ;;;---------------------------------------------------------------------------
    1771/     652 :                     SETFLAG_C_CY:
    1772/     652 : 12 5D               	JCN C, SETFLAG_C_1
    1773/     654 :                     SETFLAG_C_0:
    1774/     654 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1775/     656 : 2F                  	SRC P7
    1776/     657 : E9                  	RDM
    1777/     658 : F6                  	RAR
    1778/     659 : F1                  	CLC
    1779/     65A : F5                  	RAL
    1780/     65B : E0                  	WRM
    1781/     65C : C0                  	BBL 0
    1782/     65D :                     SETFLAG_C_1:
    1783/     65D : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1784/     65F : 2F                  	SRC P7
    1785/     660 : E9                  	RDM
    1786/     661 : F6                  	RAR
    1787/     662 : FA                  	STC
    1788/     663 : F5                  	RAL
    1789/     664 : E0                  	WRM
    1790/     665 : C0                  	BBL 0
    1791/     666 :                     
    1792/     666 :                     ;;;---------------------------------------------------------------------------
    1793/     666 :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1794/     666 :                     ;;; 
    1795/     666 :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1796/     666 :                     ;;; P flag is compiled if EMU_USE_FLAG_P (not implemented yet).
    1797/     666 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/03/22 17:52:17


    1798/     666 :                     SETFLAG_ZSP_REG8P0:
    1799/     666 : 57 D8               	JMS LD_P1_REG8P0
    1800/     668 : 46 6C               	JUN SETFLAG_ZSP_P1
    1801/     66A :                     
    1802/     66A :                     SETFLAG_ZSP_REG8P1:
    1803/     66A : 57 DE               	JMS LD_P1_REG8P1
    1804/     66C :                     
    1805/     66C :                     SETFLAG_ZSP_P1:
    1806/     66C : A2                  	LD P1_HI		; ACC=Sxxx
    1807/     66D : F5                  	RAL			; CY=S
    1808/     66E : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1809/     66F :                     	
    1810/     66F : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
    1811/     670 :                     
    1812/     670 :                     	;; set Z FLAG
    1813/     670 : 5D 2D               	JMS ISZEROORNOT_P1
    1814/     672 : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1815/     673 : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1816/     674 : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1817/     675 : F6                  	RAR			; ACC=ZBHx (CY=S)
    1818/     676 : F6                  	RAR			; ACC=SZBH (BH=00)
    1819/     677 :                     
    1820/     677 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1821/     679 : 2F                  	SRC P7
    1822/     67A : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1823/     67B :                     
    1824/     67B : =>FALSE              	if EMU_USE_FLAG_P
    1825/     67B :                     	;; Set P flag
    1826/     67B :                     ;;; table implementation may be faster
    1827/     67B :                     ;;;              0123456789ABCDEF
    1828/     67B :                     ;;; 4bit table =(0110100110010110)
    1829/     67B :                     ;;; org 09D0H
    1830/     67B :                     ;;; PARITY4TABLE: (1 when EVEN)
    1831/     67B :                     ;;; data 1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1
    1832/     67B :                     ;;; GETPARITY_R1:
    1833/     67B :                     ;;; FIN P2
    1834/     67B :                     ;;; LD P2_LO
    1835/     67B :                     ;;; XCH_R1
    1836/     67B :                     ;;; BBL 0
    1837/     67B :                     ;;; 
    1838/     67B :                     ;;; FIM P0, lo(PARITY4TABLE)
    1839/     67B :                     ;;; LD P1_H
    1840/     67B :                     ;;; XCH R1
    1841/     67B :                     ;;; JMS GETPARITY_R1
    1842/     67B :                     ;;; LD R1
    1843/     67B :                     ;;; XCH P1_H
    1844/     67B :                     ;;; LD P1_L
    1845/     67B :                     ;;; XCH R1
    1846/     67B :                     ;;; JMS GETPARITY_R1
    1847/     67B :                     ;;; LD R1
    1848/     67B :                     ;;; ADD P1_H
    1849/     67B :                     ;;; RAR       ; here CY=PARITY (1 when EVEN)
    1850/     67B :                     	
    1851/     67B :                     	CLB
    1852/     67B :                     	XCH CNT_I		; I=0
    1853/     67B :                     	LD_P1_P2		; restore P1
    1854/     67B :                     	LD P1_HI
    1855/     67B :                     	RAL
    1856/     67B :                     	JCN CN,PFLAG_CNT1
    1857/     67B :                     	INC CNT_I
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/03/22 17:52:17


    1858/     67B :                     PFLAG_CNT1:
    1859/     67B :                     	RAL
    1860/     67B :                     	JCN CN,PFLAG_CNT2
    1861/     67B :                     	INC CNT_I
    1862/     67B :                     PFLAG_CNT2:
    1863/     67B :                     	RAL
    1864/     67B :                     	JCN CN,PFLAG_CNT3
    1865/     67B :                     	INC CNT_I
    1866/     67B :                     PFLAG_CNT3:
    1867/     67B :                     	RAL
    1868/     67B :                     	JCN CN,PFLAG_CNT4
    1869/     67B :                     	INC CNT_I
    1870/     67B :                     PFLAG_CNT4:
    1871/     67B :                     	LD P1_LO
    1872/     67B :                     	RAL
    1873/     67B :                     	JCN CN,PFLAG_CNT5
    1874/     67B :                     	INC CNT_I
    1875/     67B :                     PFLAG_CNT5:
    1876/     67B :                     	RAL
    1877/     67B :                     	JCN CN,PFLAG_CNT6
    1878/     67B :                     	INC CNT_I
    1879/     67B :                     PFLAG_CNT6:
    1880/     67B :                     	RAL
    1881/     67B :                     	JCN CN,PFLAG_CNT7
    1882/     67B :                     	INC CNT_I
    1883/     67B :                     PFLAG_CNT7:
    1884/     67B :                     	RAL
    1885/     67B :                     	JCN CN,PFLAG_CNT8
    1886/     67B :                     	INC CNT_I
    1887/     67B :                     PFLAG_CNT8:
    1888/     67B :                     	FIM P7, REG4_FLAG_1P1C
    1889/     67B :                     	SRC P7
    1890/     67B :                     	RDM
    1891/     67B :                     	RAL
    1892/     67B :                     	RAL
    1893/     67B :                     	WRM			; FLAG=xCxx (CY=P)
    1894/     67B :                     
    1895/     67B :                     	LD CNT_I
    1896/     67B :                     	RAR
    1897/     67B :                     	CMC			; CY=~(LSB of I) (P=1 when EVEN )
    1898/     67B :                     
    1899/     67B :                     	RDM
    1900/     67B :                     	RAR
    1901/     67B :                     	RAR
    1902/     67B :                     	WRM			; FLAG=xPxC
    1903/     67B :                     	
    1904/     67B : [1824]               	endif			; EMU_USE_FLAG_P
    1905/     67B : C0                  	BBL 0	
    1906/     67C :                     
    1907/     67C :                     ;;;---------------------------------------------------------------------------
    1908/     67C :                     ;;; Logical operators
    1909/     67C :                     ;;; and, or, xor
    1910/     67C :                     ;;; destroy: P3(R6, R7)
    1911/     67C :                     ;;;---------------------------------------------------------------------------
    1912/     67C :                     
    1913/     67C :                     ;;;---------------------------------------------------------------------------
    1914/     67C :                     ;;; AND_R6_R7
    1915/     67C :                     ;;; R6 = R6 & R7
    1916/     67C :                     ;;;---------------------------------------------------------------------------
    1917/     67C :                     AND_R6_R7:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/03/22 17:52:17


    1918/     67C : F0                  	CLB
    1919/     67D : A7                  	LD R7
    1920/     67E : F6                  	RAR
    1921/     67F : 12 86               	JCN C, AND67_L1	; jump if R7.bit0==1
    1922/     681 : A6                  	LD R6
    1923/     682 : F6                  	RAR
    1924/     683 : F1                  	CLC
    1925/     684 : F5                  	RAL
    1926/     685 : B6                  	XCH R6		; R6.bit0=0
    1927/     686 :                     AND67_L1:
    1928/     686 : A7                  	LD R7
    1929/     687 : F6                  	RAR
    1930/     688 : F6                  	RAR
    1931/     689 : 12 92               	JCN C, AND67_L2	; jump if R7.bit1==1
    1932/     68B : A6                  	LD R6
    1933/     68C : F6                  	RAR
    1934/     68D : F6                  	RAR
    1935/     68E : F1                  	CLC
    1936/     68F : F5                  	RAL
    1937/     690 : F5                  	RAL
    1938/     691 : B6                  	XCH R6		; R6.bit1=0
    1939/     692 :                     AND67_L2:
    1940/     692 : A7                  	LD R7
    1941/     693 : F5                  	RAL
    1942/     694 : F5                  	RAL
    1943/     695 : 12 9E               	JCN C, AND67_L3	; jump if R7.bit2==1
    1944/     697 : A6                  	LD R6
    1945/     698 : F5                  	RAL
    1946/     699 : F5                  	RAL
    1947/     69A : F1                  	CLC
    1948/     69B : F6                  	RAR
    1949/     69C : F6                  	RAR
    1950/     69D : B6                  	XCH R6		; R6.bit2=0
    1951/     69E :                     AND67_L3:
    1952/     69E : A7                  	LD R7
    1953/     69F : F5                  	RAL
    1954/     6A0 : 12 A7               	JCN C, AND67_L4	; jump if R7.bit3==1
    1955/     6A2 : A6                  	LD R6
    1956/     6A3 : F5                  	RAL
    1957/     6A4 : F1                  	CLC
    1958/     6A5 : F6                  	RAR
    1959/     6A6 : B6                  	XCH R6		; R6.bit3=0
    1960/     6A7 :                     AND67_L4:
    1961/     6A7 :                     	
    1962/     6A7 : C0                  	BBL 0
    1963/     6A8 :                     
    1964/     6A8 :                     ;;;---------------------------------------------------------------------------
    1965/     6A8 :                     ;;; AND_P1_P2
    1966/     6A8 :                     ;;; P1 = P1 & P2
    1967/     6A8 :                     ;;;---------------------------------------------------------------------------
    1968/     6A8 :                     AND_P1_P2:
    1969/     6A8 : A3                  	LD P1_LO
    1970/     6A9 : B6                  	XCH R6
    1971/     6AA : A5                  	LD P2_LO
    1972/     6AB : B7                  	XCH R7
    1973/     6AC : 56 7C               	JMS AND_R6_R7
    1974/     6AE : A6                  	LD R6
    1975/     6AF : B3                  	XCH P1_LO
    1976/     6B0 :                     	
    1977/     6B0 : A2                  	LD P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/03/22 17:52:17


    1978/     6B1 : B6                  	XCH R6
    1979/     6B2 : A4                  	LD P2_HI
    1980/     6B3 : B7                  	XCH R7
    1981/     6B4 : 56 7C               	JMS AND_R6_R7
    1982/     6B6 : A6                  	LD R6
    1983/     6B7 : B2                  	XCH P1_HI
    1984/     6B8 : C0                  	BBL 0
    1985/     6B9 :                     
    1986/     6B9 :                     ;;;---------------------------------------------------------------------------
    1987/     6B9 :                     ;;; XOR_R6_R7
    1988/     6B9 :                     ;;; R6 = R6 ^ R7
    1989/     6B9 :                     ;;;---------------------------------------------------------------------------
    1990/     6B9 :                     XOR_R6_R7:
    1991/     6B9 : F0                  	CLB
    1992/     6BA : A7                  	LD R7
    1993/     6BB : F6                  	RAR
    1994/     6BC : 1A C3               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    1995/     6BE : A6                  	LD R6
    1996/     6BF : F6                  	RAR
    1997/     6C0 : F3                  	CMC
    1998/     6C1 : F5                  	RAL
    1999/     6C2 : B6                  	XCH R6			; cmp R6.bit0
    2000/     6C3 :                     XOR67_L1:
    2001/     6C3 : A7                  	LD R7
    2002/     6C4 : F6                  	RAR
    2003/     6C5 : F6                  	RAR
    2004/     6C6 : 1A CF               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    2005/     6C8 : A6                  	LD R6
    2006/     6C9 : F6                  	RAR
    2007/     6CA : F6                  	RAR
    2008/     6CB : F3                  	CMC
    2009/     6CC : F5                  	RAL
    2010/     6CD : F5                  	RAL
    2011/     6CE : B6                  	XCH R6			; cmp R6.bit1
    2012/     6CF :                     XOR67_L2:
    2013/     6CF : A7                  	LD R7
    2014/     6D0 : F5                  	RAL
    2015/     6D1 : F5                  	RAL
    2016/     6D2 : 1A DB               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    2017/     6D4 : A6                  	LD R6
    2018/     6D5 : F5                  	RAL
    2019/     6D6 : F5                  	RAL
    2020/     6D7 : F3                  	CMC
    2021/     6D8 : F6                  	RAR
    2022/     6D9 : F6                  	RAR
    2023/     6DA : B6                  	XCH R6			; cmp R6.bit2
    2024/     6DB :                     XOR67_L3:
    2025/     6DB : A7                  	LD R7
    2026/     6DC : F5                  	RAL
    2027/     6DD : 1A E4               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    2028/     6DF : A6                  	LD R6
    2029/     6E0 : F5                  	RAL
    2030/     6E1 : F3                  	CMC
    2031/     6E2 : F6                  	RAR
    2032/     6E3 : B6                  	XCH R6			; cmp R6.bit3
    2033/     6E4 :                     XOR67_L4:
    2034/     6E4 : C0                  	BBL 0
    2035/     6E5 :                     
    2036/     6E5 :                     ;;;---------------------------------------------------------------------------
    2037/     6E5 :                     ;;; XOR_P1_P2
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/03/22 17:52:17


    2038/     6E5 :                     ;;; P1 = P1 ^ P2
    2039/     6E5 :                     ;;;---------------------------------------------------------------------------
    2040/     6E5 :                     XOR_P1_P2:
    2041/     6E5 : A3                  	LD P1_LO
    2042/     6E6 : B6                  	XCH R6
    2043/     6E7 : A5                  	LD P2_LO
    2044/     6E8 : B7                  	XCH R7
    2045/     6E9 : 56 B9               	JMS XOR_R6_R7
    2046/     6EB : A6                  	LD R6
    2047/     6EC : B3                  	XCH P1_LO
    2048/     6ED :                     	
    2049/     6ED : A2                  	LD P1_HI
    2050/     6EE : B6                  	XCH R6
    2051/     6EF : A4                  	LD P2_HI
    2052/     6F0 : B7                  	XCH R7
    2053/     6F1 : 56 B9               	JMS XOR_R6_R7
    2054/     6F3 : A6                  	LD R6
    2055/     6F4 : B2                  	XCH P1_HI
    2056/     6F5 : C0                  	BBL 0
    2057/     6F6 :                     
    2058/     6F6 :                     ;;;---------------------------------------------------------------------------
    2059/     6F6 :                     ;;; OR_P1_P2
    2060/     6F6 :                     ;;; P1 = P1 | P2
    2061/     6F6 :                     ;;;---------------------------------------------------------------------------
    2062/     6F6 :                     OR_P1_P2:
    2063/     6F6 : A3                  	LD P1_LO
    2064/     6F7 : B6                  	XCH R6
    2065/     6F8 : A5                  	LD P2_LO
    2066/     6F9 : B7                  	XCH R7
    2067/     6FA : 57 07               	JMS OR_R6_R7
    2068/     6FC : A6                  	LD R6
    2069/     6FD : B3                  	XCH P1_LO
    2070/     6FE :                     	
    2071/     6FE : A2                  	LD P1_HI
    2072/     6FF : B6                  	XCH R6
    2073/     700 : A4                  	LD P2_HI
    2074/     701 : B7                  	XCH R7
    2075/     702 : 57 07               	JMS OR_R6_R7
    2076/     704 : A6                  	LD R6
    2077/     705 : B2                  	XCH P1_HI
    2078/     706 : C0                  	BBL 0
    2079/     707 :                     
    2080/     707 :                     ;;;---------------------------------------------------------------------------
    2081/     707 :                     ;;; OR_R6_R7
    2082/     707 :                     ;;; R6 = R6 | R7
    2083/     707 :                     ;;;---------------------------------------------------------------------------
    2084/     707 :                     OR_R6_R7:
    2085/     707 : F0                  	CLB
    2086/     708 : A7                  	LD R7
    2087/     709 : F6                  	RAR
    2088/     70A : 1A 11               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2089/     70C : A6                  	LD R6
    2090/     70D : F6                  	RAR
    2091/     70E : FA                  	STC
    2092/     70F : F5                  	RAL
    2093/     710 : B6                  	XCH R6			; cmp R6.bit0
    2094/     711 :                     OR67_L1:
    2095/     711 : A7                  	LD R7
    2096/     712 : F6                  	RAR
    2097/     713 : F6                  	RAR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/03/22 17:52:17


    2098/     714 : 1A 1D               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2099/     716 : A6                  	LD R6
    2100/     717 : F6                  	RAR
    2101/     718 : F6                  	RAR
    2102/     719 : FA                  	STC
    2103/     71A : F5                  	RAL
    2104/     71B : F5                  	RAL
    2105/     71C : B6                  	XCH R6			; cmp R6.bit1
    2106/     71D :                     OR67_L2:
    2107/     71D : A7                  	LD R7
    2108/     71E : F5                  	RAL
    2109/     71F : F5                  	RAL
    2110/     720 : 1A 29               	JCN CN, OR67_L3	; jump if R7.bit2==0
    2111/     722 : A6                  	LD R6
    2112/     723 : F5                  	RAL
    2113/     724 : F5                  	RAL
    2114/     725 : FA                  	STC
    2115/     726 : F6                  	RAR
    2116/     727 : F6                  	RAR
    2117/     728 : B6                  	XCH R6			; cmp R6.bit2
    2118/     729 :                     OR67_L3:
    2119/     729 : A7                  	LD R7
    2120/     72A : F5                  	RAL
    2121/     72B : 1A 32               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2122/     72D : A6                  	LD R6
    2123/     72E : F5                  	RAL
    2124/     72F : FA                  	STC
    2125/     730 : F6                  	RAR
    2126/     731 : B6                  	XCH R6			; cmp R6.bit3
    2127/     732 :                     OR67_L4:
    2128/     732 : C0                  	BBL 0
    2129/     733 :                     
    2130/     733 :                     
    2131/     733 :                     ;;;	org 0900H
    2132/     733 :                     ;;;----------------------------------------------------------------------------
    2133/     733 :                     ;;; Subroutines for REG16 (16bit registars)
    2134/     733 :                     ;;;----------------------------------------------------------------------------
    2135/     733 :                     	
    2136/     733 :                     	
    2137/     733 :                     ;;;----------------------------------------------------------------------------
    2138/     733 :                     ;;; LD_REG16P0_REG16P1
    2139/     733 :                     ;;; REG16(P0) = REG16(P1)
    2140/     733 :                     ;;; destroy: P6, P7
    2141/     733 :                     ;;;----------------------------------------------------------------------------
    2142/     733 :                     LD_REG16P0_REG16P1:
    2143/     733 : (MACRO)              	LD_P6_P0
    2143/     733 : A0                                  LD P0_HI
    2143/     734 : BC                                  XCH P6_HI
    2143/     735 : A1                                  LD P0_LO
    2143/     736 : BD                                  XCH P6_LO
    2144/     737 : (MACRO)              	LD_P7_P1
    2144/     737 : A2                                  LD P1_HI
    2144/     738 : BE                                  XCH P7_HI
    2144/     739 : A3                                  LD P1_LO
    2144/     73A : BF                                  XCH P7_LO
    2145/     73B : 48 17               	JUN LD_REG16P6_REG16P7
    2146/     73D :                     
    2147/     73D :                     ;;;----------------------------------------------------------------------------
    2148/     73D :                     ;;; LD_REG16P1_REG16P0
    2149/     73D :                     ;;; REG16(P1) = REG16(P0)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/03/22 17:52:17


    2150/     73D :                     ;;; destroy: P6, P7
    2151/     73D :                     ;;;----------------------------------------------------------------------------
    2152/     73D :                     LD_REG16P1_REG16P0:
    2153/     73D : (MACRO)              	LD_P6_P1
    2153/     73D : A2                                  LD P1_HI
    2153/     73E : BC                                  XCH P6_HI
    2153/     73F : A3                                  LD P1_LO
    2153/     740 : BD                                  XCH P6_LO
    2154/     741 : (MACRO)              	LD_P7_P0
    2154/     741 : A0                                  LD P0_HI
    2154/     742 : BE                                  XCH P7_HI
    2154/     743 : A1                                  LD P0_LO
    2154/     744 : BF                                  XCH P7_LO
    2155/     745 : 48 17               	JUN LD_REG16P6_REG16P7
    2156/     747 :                     
    2157/     747 :                     ;;;----------------------------------------------------------------------------
    2158/     747 :                     ;;; LD_REG16P7_P2P3
    2159/     747 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2160/     747 :                     ;;; destroy P7
    2161/     747 :                     ;;;----------------------------------------------------------------------------
    2162/     747 :                     LD_REG16P7_P2P3:
    2163/     747 : 2F                  	SRC P7
    2164/     748 : A7                  	LD P3_LO
    2165/     749 : E0                  	WRM
    2166/     74A :                     
    2167/     74A : 6F                  	INC P7_LO
    2168/     74B : 2F                  	SRC P7
    2169/     74C : A6                  	LD P3_HI
    2170/     74D : E0                  	WRM
    2171/     74E :                     
    2172/     74E : 6F                  	INC P7_LO
    2173/     74F : 2F                  	SRC P7
    2174/     750 : A5                  	LD P2_LO
    2175/     751 : E0                  	WRM
    2176/     752 :                     
    2177/     752 : 6F                  	INC P7_LO
    2178/     753 : 2F                  	SRC P7
    2179/     754 : A4                  	LD P2_HI
    2180/     755 : E0                  	WRM
    2181/     756 :                     
    2182/     756 : C0                  	BBL 0
    2183/     757 :                     
    2184/     757 :                     ;;;----------------------------------------------------------------------------
    2185/     757 :                     ;;; LD_REG16P1_P2P3
    2186/     757 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2187/     757 :                     ;;; destroy P7
    2188/     757 :                     ;;;----------------------------------------------------------------------------
    2189/     757 :                     LD_REG16P1_P2P3:
    2190/     757 : (MACRO)              	LD_P7_P1
    2190/     757 : A2                                  LD P1_HI
    2190/     758 : BE                                  XCH P7_HI
    2190/     759 : A3                                  LD P1_LO
    2190/     75A : BF                                  XCH P7_LO
    2191/     75B : 47 47               	JUN LD_REG16P7_P2P3
    2192/     75D :                     
    2193/     75D :                     ;;;----------------------------------------------------------------------------
    2194/     75D :                     ;;; LD_REG16P0_P2P3
    2195/     75D :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2196/     75D :                     ;;; destroy P7
    2197/     75D :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/03/22 17:52:17


    2198/     75D :                     LD_REG16P0_P2P3:
    2199/     75D : (MACRO)              	LD_P7_P0
    2199/     75D : A0                                  LD P0_HI
    2199/     75E : BE                                  XCH P7_HI
    2199/     75F : A1                                  LD P0_LO
    2199/     760 : BF                                  XCH P7_LO
    2200/     761 : 47 47               	JUN LD_REG16P7_P2P3
    2201/     763 :                     
    2202/     763 :                     ;;;----------------------------------------------------------------------------
    2203/     763 :                     ;;; ADD_REG8P0_P1
    2204/     763 :                     ;;; REG8(P0) = REG16(P0)+P1
    2205/     763 :                     ;;; destroy: P7(R14, R15)
    2206/     763 :                     ;;;----------------------------------------------------------------------------
    2207/     763 :                     ADD_REG8P0_P1:
    2208/     763 : (MACRO)              	LD_P7_P0
    2208/     763 : A0                                  LD P0_HI
    2208/     764 : BE                                  XCH P7_HI
    2208/     765 : A1                                  LD P0_LO
    2208/     766 : BF                                  XCH P7_LO
    2209/     767 : 2F                  	SRC P7
    2210/     768 : E9                  	RDM
    2211/     769 : A3                  	LD P1_LO
    2212/     76A : F1                  	CLC
    2213/     76B : EB                  	ADM
    2214/     76C : E0                  	WRM
    2215/     76D : 6F                  	INC P7_LO
    2216/     76E : 2F                  	SRC P7
    2217/     76F : E9                  	RDM
    2218/     770 : A2                  	LD P1_HI
    2219/     771 : EB                  	ADM
    2220/     772 : E0                  	WRM
    2221/     773 : C0                  	BBL 0
    2222/     774 :                     
    2223/     774 :                     ;;;----------------------------------------------------------------------------
    2224/     774 :                     ;;; INC_REG8P1
    2225/     774 :                     ;;; REG8(P1) = REG16(P1)+1
    2226/     774 :                     ;;; CY is set if overflow
    2227/     774 :                     ;;; destroy: P7(R14, R15)
    2228/     774 :                     ;;;----------------------------------------------------------------------------
    2229/     774 :                     INC_REG8P1:
    2230/     774 : (MACRO)              	LD_P7_P1
    2230/     774 : A2                                  LD P1_HI
    2230/     775 : BE                                  XCH P7_HI
    2230/     776 : A3                                  LD P1_LO
    2230/     777 : BF                                  XCH P7_LO
    2231/     778 :                     	
    2232/     778 : 2F                  	SRC P7
    2233/     779 : E9                  	RDM
    2234/     77A : F2                  	IAC 
    2235/     77B : E0                  	WRM			; REG(P0).lower++
    2236/     77C : 1C 83               	JCN NZ, REG8_INC_EXIT
    2237/     77E : 6F                  	INC P7_LO
    2238/     77F : 2F                  	SRC P7
    2239/     780 : E9                  	RDM
    2240/     781 : F2                  	IAC 
    2241/     782 : E0                  	WRM			; REG(P0).higher++
    2242/     783 :                     REG8_INC_EXIT:
    2243/     783 : C0                  	BBL 0
    2244/     784 :                     
    2245/     784 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/03/22 17:52:17


    2246/     784 :                     ;;; SUB_REG8P0_P1
    2247/     784 :                     ;;; REG8(P0) = REG8(P0)-P1
    2248/     784 :                     ;;; destroy: P7(R14, R15)
    2249/     784 :                     ;;;----------------------------------------------------------------------------
    2250/     784 :                     SUB_REG8P0_P1:
    2251/     784 : (MACRO)              	LD_P7_P0
    2251/     784 : A0                                  LD P0_HI
    2251/     785 : BE                                  XCH P7_HI
    2251/     786 : A1                                  LD P0_LO
    2251/     787 : BF                                  XCH P7_LO
    2252/     788 : 2F                  	SRC P7
    2253/     789 : E9                  	RDM
    2254/     78A : F1                  	CLC
    2255/     78B : 93                  	SUB P1_LO
    2256/     78C : E0                  	WRM
    2257/     78D : F3                  	CMC
    2258/     78E :                     
    2259/     78E : 6F                  	INC P7_LO
    2260/     78F : 2F                  	SRC P7
    2261/     790 : E9                  	RDM
    2262/     791 : 92                  	SUB P1_HI
    2263/     792 : E0                  	WRM
    2264/     793 : F3                  	CMC
    2265/     794 :                     
    2266/     794 : C0                  	BBL 0	
    2267/     795 :                     
    2268/     795 :                     ;;;----------------------------------------------------------------------------
    2269/     795 :                     ;;; DEC_REG8P1
    2270/     795 :                     ;;; REG8(P1) = REG16(P1)+1
    2271/     795 :                     ;;; destroy: P7(R14, R15)
    2272/     795 :                     ;;;----------------------------------------------------------------------------
    2273/     795 :                     DEC_REG8P1:
    2274/     795 : (MACRO)              	LD_P7_P1
    2274/     795 : A2                                  LD P1_HI
    2274/     796 : BE                                  XCH P7_HI
    2274/     797 : A3                                  LD P1_LO
    2274/     798 : BF                                  XCH P7_LO
    2275/     799 :                     	
    2276/     799 : 2F                  	SRC P7
    2277/     79A : E9                  	RDM
    2278/     79B : F8                  	DAC 
    2279/     79C : E0                  	WRM			; REG(P0).lower--
    2280/     79D : 12 A4               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2281/     79F : 6F                  	INC P7_LO
    2282/     7A0 : 2F                  	SRC P7
    2283/     7A1 : E9                  	RDM
    2284/     7A2 : F8                  	DAC 
    2285/     7A3 : E0                  	WRM			; REG(P0).higher--
    2286/     7A4 :                     REG8_DEC_EXIT:
    2287/     7A4 : C0                  	BBL 0
    2288/     7A5 :                     
    2289/     7A5 :                     ;;;----------------------------------------------------------------------------
    2290/     7A5 :                     ;;; LD_REG8P0_REG8P1
    2291/     7A5 :                     ;;; REG8(P0)=REG8(P1)
    2292/     7A5 :                     ;;; destroy: P6, P7
    2293/     7A5 :                     ;;;----------------------------------------------------------------------------
    2294/     7A5 :                     LD_REG8P0_REG8P1:
    2295/     7A5 : (MACRO)              	LD_P6_P0
    2295/     7A5 : A0                                  LD P0_HI
    2295/     7A6 : BC                                  XCH P6_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/03/22 17:52:17


    2295/     7A7 : A1                                  LD P0_LO
    2295/     7A8 : BD                                  XCH P6_LO
    2296/     7A9 : (MACRO)              	LD_P7_P1
    2296/     7A9 : A2                                  LD P1_HI
    2296/     7AA : BE                                  XCH P7_HI
    2296/     7AB : A3                                  LD P1_LO
    2296/     7AC : BF                                  XCH P7_LO
    2297/     7AD :                     LD_REG8P6_REG8P7:
    2298/     7AD : 2F                  	SRC P7
    2299/     7AE : E9                  	RDM
    2300/     7AF : 2D                  	SRC P6
    2301/     7B0 : E0                  	WRM
    2302/     7B1 : 6F                  	INC P7_LO
    2303/     7B2 : 6D                  	INC P6_LO
    2304/     7B3 : 2F                  	SRC P7
    2305/     7B4 : E9                  	RDM
    2306/     7B5 : 2D                  	SRC P6
    2307/     7B6 : E0                  	WRM
    2308/     7B7 :                     
    2309/     7B7 : C0                  	BBL 0
    2310/     7B8 :                     
    2311/     7B8 :                     ;;;----------------------------------------------------------------------------
    2312/     7B8 :                     ;;; LD_REG8P0_P1
    2313/     7B8 :                     ;;; REG8(P0)=P1
    2314/     7B8 :                     ;;;----------------------------------------------------------------------------
    2315/     7B8 :                     LD_REG8P0_P1:
    2316/     7B8 : (MACRO)              	LD_P7_P0
    2316/     7B8 : A0                                  LD P0_HI
    2316/     7B9 : BE                                  XCH P7_HI
    2316/     7BA : A1                                  LD P0_LO
    2316/     7BB : BF                                  XCH P7_LO
    2317/     7BC : 47 C8                	JUN LD_REG8P7_P1
    2318/     7BE :                     
    2319/     7BE :                     ;;;----------------------------------------------------------------------------
    2320/     7BE :                     ;;; LD_REG8P3_P1
    2321/     7BE :                     ;;; REG8(P3)=P1
    2322/     7BE :                     ;;;----------------------------------------------------------------------------
    2323/     7BE :                     LD_REG8P3_P1:
    2324/     7BE : (MACRO)              	LD_P7_P3
    2324/     7BE : A6                                  LD P3_HI
    2324/     7BF : BE                                  XCH P7_HI
    2324/     7C0 : A7                                  LD P3_LO
    2324/     7C1 : BF                                  XCH P7_LO
    2325/     7C2 : 47 C8                	JUN LD_REG8P7_P1
    2326/     7C4 :                     
    2327/     7C4 :                     ;;;----------------------------------------------------------------------------
    2328/     7C4 :                     ;;; LD_REG8P2_P1
    2329/     7C4 :                     ;;; REG8(P2) = P1
    2330/     7C4 :                     ;;;----------------------------------------------------------------------------
    2331/     7C4 :                     LD_REG8P2_P1:
    2332/     7C4 : (MACRO)              	LD_P7_P2
    2332/     7C4 : A4                                  LD P2_HI
    2332/     7C5 : BE                                  XCH P7_HI
    2332/     7C6 : A5                                  LD P2_LO
    2332/     7C7 : BF                                  XCH P7_LO
    2333/     7C8 :                     ;;; 	JUN LD_REG8P7_P1
    2334/     7C8 :                     ;;;----------------------------------------------------------------------------
    2335/     7C8 :                     ;;; LD_REG8P7_P1
    2336/     7C8 :                     ;;; REG8(P7)=P1
    2337/     7C8 :                     ;;; destroy: P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/03/22 17:52:17


    2338/     7C8 :                     ;;;----------------------------------------------------------------------------
    2339/     7C8 :                     LD_REG8P7_P1:
    2340/     7C8 : 2F                  	SRC P7
    2341/     7C9 : A3                  	LD P1_LO
    2342/     7CA : E0                  	WRM
    2343/     7CB :                     
    2344/     7CB : 6F                  	INC P7_LO
    2345/     7CC : 2F                  	SRC P7
    2346/     7CD : A2                  	LD P1_HI
    2347/     7CE : E0                  	WRM
    2348/     7CF :                     
    2349/     7CF : C0                  	BBL 0
    2350/     7D0 :                     	
    2351/     7D0 :                     ;;;----------------------------------------------------------------------------
    2352/     7D0 :                     ;;; LD_P1_REG8P7
    2353/     7D0 :                     ;;; P1 = REG8(P7)
    2354/     7D0 :                     ;;;----------------------------------------------------------------------------
    2355/     7D0 :                     LD_P1_REG8P7:
    2356/     7D0 : 2F                  	SRC P7
    2357/     7D1 : E9                  	RDM
    2358/     7D2 : B3                  	XCH P1_LO
    2359/     7D3 :                     
    2360/     7D3 : 6F                  	INC P7_LO		; P7_LO++
    2361/     7D4 : 2F                  	SRC P7
    2362/     7D5 : E9                  	RDM
    2363/     7D6 : B2                  	XCH P1_HI
    2364/     7D7 : C0                  	BBL 0
    2365/     7D8 :                     
    2366/     7D8 :                     ;;;----------------------------------------------------------------------------
    2367/     7D8 :                     ;;; LD_P1_REG8P0
    2368/     7D8 :                     ;;; P1 = REG8(P0)
    2369/     7D8 :                     ;;;----------------------------------------------------------------------------
    2370/     7D8 :                     LD_P1_REG8P0:
    2371/     7D8 : (MACRO)              	LD_P7_P0
    2371/     7D8 : A0                                  LD P0_HI
    2371/     7D9 : BE                                  XCH P7_HI
    2371/     7DA : A1                                  LD P0_LO
    2371/     7DB : BF                                  XCH P7_LO
    2372/     7DC : 47 D0               	JUN LD_P1_REG8P7
    2373/     7DE :                     
    2374/     7DE :                     ;;;----------------------------------------------------------------------------
    2375/     7DE :                     ;;; LD_P1_REG8P1
    2376/     7DE :                     ;;; P1 = REG8(P1)
    2377/     7DE :                     ;;;----------------------------------------------------------------------------
    2378/     7DE :                     LD_P1_REG8P1:
    2379/     7DE : (MACRO)              	LD_P7_P1
    2379/     7DE : A2                                  LD P1_HI
    2379/     7DF : BE                                  XCH P7_HI
    2379/     7E0 : A3                                  LD P1_LO
    2379/     7E1 : BF                                  XCH P7_LO
    2380/     7E2 : 47 D0               	JUN LD_P1_REG8P7
    2381/     7E4 :                     
    2382/     7E4 :                     ;;;----------------------------------------------------------------------------
    2383/     7E4 :                     ;;; LD_P1_REG8P2
    2384/     7E4 :                     ;;; P1 = REG8(P2)
    2385/     7E4 :                     ;;;----------------------------------------------------------------------------
    2386/     7E4 :                     LD_P1_REG8P2:
    2387/     7E4 : (MACRO)              	LD_P7_P2
    2387/     7E4 : A4                                  LD P2_HI
    2387/     7E5 : BE                                  XCH P7_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/03/22 17:52:17


    2387/     7E6 : A5                                  LD P2_LO
    2387/     7E7 : BF                                  XCH P7_LO
    2388/     7E8 : 47 D0               	JUN LD_P1_REG8P7
    2389/     7EA :                     
    2390/     7EA :                     ;;;----------------------------------------------------------------------------
    2391/     7EA :                     ;;; LD_P1_REG8P3
    2392/     7EA :                     ;;; P1 = REG8(P3)
    2393/     7EA :                     ;;;----------------------------------------------------------------------------
    2394/     7EA :                     LD_P1_REG8P3:
    2395/     7EA : (MACRO)              	LD_P7_P3
    2395/     7EA : A6                                  LD P3_HI
    2395/     7EB : BE                                  XCH P7_HI
    2395/     7EC : A7                                  LD P3_LO
    2395/     7ED : BF                                  XCH P7_LO
    2396/     7EE : 47 D0               	JUN LD_P1_REG8P7
    2397/     7F0 :                     
    2398/     7F0 :                     ;;;----------------------------------------------------------------------------
    2399/     7F0 :                     ;;; PRINTHEX_REG16P1
    2400/     7F0 :                     ;;; PRINT REG16(P1)
    2401/     7F0 :                     ;;; destroy: P6, P7
    2402/     7F0 :                     ;;;----------------------------------------------------------------------------
    2403/     7F0 :                     PRINTHEX_REG16P1:
    2404/     7F0 : 5B 00               	JMS PUSH_P0
    2405/     7F2 : (MACRO)              	LD_P0_P3
    2405/     7F2 : A6                                  LD P3_HI
    2405/     7F3 : B0                                  XCH P0_HI
    2405/     7F4 : A7                                  LD P3_LO
    2405/     7F5 : B1                                  XCH P0_LO
    2406/     7F6 : 5B 00               	JMS PUSH_P0
    2407/     7F8 : 5B 12               	JMS PUSH_P1
    2408/     7FA : 5B 24               	JMS PUSH_P2
    2409/     7FC :                     	
    2410/     7FC : 58 22               	JMS LD_P2P3_REG16P1
    2411/     7FE : A4                  	LD R4
    2412/     7FF : 5C B2               	JMS PRINT_ACC		; print bit.FEDC
    2413/     801 : A5                  	LD R5
    2414/     802 : 5C B2               	JMS PRINT_ACC		; print bit.BA98
    2415/     804 : A6                  	LD R6
    2416/     805 : 5C B2               	JMS PRINT_ACC		; print bit.7654
    2417/     807 : A7                  	LD R7
    2418/     808 : 5C B2               	JMS PRINT_ACC		; print bit.3210
    2419/     80A :                     
    2420/     80A : 5B 50               	JMS POP_P2
    2421/     80C : 5B 43               	JMS POP_P1
    2422/     80E : 5B 36               	JMS POP_P0
    2423/     810 : (MACRO)              	LD_P3_P0
    2423/     810 : A0                                  LD P0_HI
    2423/     811 : B6                                  XCH P3_HI
    2423/     812 : A1                                  LD P0_LO
    2423/     813 : B7                                  XCH P3_LO
    2424/     814 : 5B 36               	JMS POP_P0
    2425/     816 : C0                  	BBL 0
    2426/     817 :                     
    2427/     817 :                     ;;;----------------------------------------------------------------------------
    2428/     817 :                     ;;; LD_REG16P6_REG16P7
    2429/     817 :                     ;;; REG16(P6) = REG16(P7)
    2430/     817 :                     ;;; destroy: P6, P7, CNT_J
    2431/     817 :                     ;;;----------------------------------------------------------------------------
    2432/     817 :                     LD_REG16P6_REG16P7:
    2433/     817 : DC                  	LDM loop(4)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/03/22 17:52:17


    2434/     818 : BB                  	XCH CNT_J
    2435/     819 :                     LDREG16P6P7_LOOP:
    2436/     819 : 2F                  	SRC P7
    2437/     81A : E9                  	RDM
    2438/     81B : 2D                  	SRC P6
    2439/     81C : E0                  	WRM
    2440/     81D : 6F                  	INC P7_LO
    2441/     81E : 6D                  	INC P6_LO
    2442/     81F : 7B 19               	ISZ CNT_J, LDREG16P6P7_LOOP
    2443/     821 : C0                  	BBL 0
    2444/     822 :                     
    2445/     822 :                     ;;;----------------------------------------------------------------------------
    2446/     822 :                     ;;; LD_P2P3_REG16P1
    2447/     822 :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2448/     822 :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2449/     822 :                     ;;; destroy: P7
    2450/     822 :                     ;;;----------------------------------------------------------------------------
    2451/     822 :                     LD_P2P3_REG16P1:
    2452/     822 : (MACRO)              	LD_P7_P1
    2452/     822 : A2                                  LD P1_HI
    2452/     823 : BE                                  XCH P7_HI
    2452/     824 : A3                                  LD P1_LO
    2452/     825 : BF                                  XCH P7_LO
    2453/     826 : 2F                  	SRC P7
    2454/     827 : E9                  	RDM
    2455/     828 : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2456/     829 :                     
    2457/     829 : 6F                  	INC P7_LO
    2458/     82A : 2F                  	SRC P7
    2459/     82B : E9                  	RDM
    2460/     82C : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2461/     82D :                     	
    2462/     82D : 6F                  	INC P7_LO
    2463/     82E : 2F                  	SRC P7
    2464/     82F : E9                  	RDM
    2465/     830 : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2466/     831 :                     
    2467/     831 : 6F                  	INC P7_LO
    2468/     832 : 2F                  	SRC P7
    2469/     833 : E9                  	RDM
    2470/     834 : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2471/     835 :                     
    2472/     835 : C0                  	BBL 0
    2473/     836 :                     
    2474/     836 :                     ;;;----------------------------------------------------------------------------
    2475/     836 :                     ;;; INC_REG16P0
    2476/     836 :                     ;;; REG16(P0) = REG16(P0)+1
    2477/     836 :                     ;;; destroy: P7(R14, R15)
    2478/     836 :                     ;;;----------------------------------------------------------------------------
    2479/     836 :                     INC_REG16P0:
    2480/     836 : A1                  	LD R1
    2481/     837 : BF                  	XCH R15			; save R1 to R15
    2482/     838 :                     
    2483/     838 : DC                  	LDM loop(4)
    2484/     839 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2485/     83A :                     REG16_INC_LOOP:
    2486/     83A : 21                  	SRC P0
    2487/     83B : E9                  	RDM
    2488/     83C : F2                  	IAC 
    2489/     83D : E0                  	WRM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/03/22 17:52:17


    2490/     83E : 1C 43               	JCN NZ, REG16_INC_EXIT
    2491/     840 : 61                  	INC R1
    2492/     841 : 7E 3A               	ISZ R14, REG16_INC_LOOP
    2493/     843 :                     
    2494/     843 :                     REG16_INC_EXIT:
    2495/     843 : AF                  	LD R15
    2496/     844 : B1                  	XCH R1			; restore R1
    2497/     845 : C0                  	BBL 0
    2498/     846 :                     
    2499/     846 :                     ;;;----------------------------------------------------------------------------
    2500/     846 :                     ;;; DEC_REG16P0
    2501/     846 :                     ;;; REG16(P0) = REG16(P0) - 1
    2502/     846 :                     ;;; destroy: P7(R14, R15)
    2503/     846 :                     ;;;----------------------------------------------------------------------------
    2504/     846 :                     DEC_REG16P0:
    2505/     846 : A1                  	LD R1
    2506/     847 : BF                  	XCH R15			; save R1 to R15
    2507/     848 :                     
    2508/     848 : DC                  	LDM loop(4)
    2509/     849 : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2510/     84A : F1                  	CLC
    2511/     84B :                     REG16_DEC_LOOP:
    2512/     84B : 21                  	SRC P0
    2513/     84C : E9                  	RDM
    2514/     84D : F8                  	DAC
    2515/     84E : E0                  	WRM
    2516/     84F : 12 54               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2517/     851 : 61                  	INC R1
    2518/     852 : 7E 4B               	ISZ R14, REG16_DEC_LOOP
    2519/     854 :                     REG16_DEC_EXIT:
    2520/     854 : AF                  	LD R15
    2521/     855 : B1                  	XCH R1			; restore R1
    2522/     856 : C0                  	BBL 0
    2523/     857 :                     
    2524/     857 :                     ;;;----------------------------------------------------------------------------
    2525/     857 :                     ;;; CMP_REG16P0_REG16P1
    2526/     857 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2527/     857 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
    2528/     857 :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2529/     857 :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2530/     857 :                     ;;; destroy: P6, P7, R5
    2531/     857 :                     ;;;----------------------------------------------------------------------------
    2532/     857 :                     CMP_REG16P0_REG16P1:
    2533/     857 : A1                  	LD R1
    2534/     858 : BF                  	XCH R15			; save R1 to R15
    2535/     859 : A3                  	LD R3
    2536/     85A : BD                  	XCH R13			; save R3 to R13
    2537/     85B : F0                  	CLB
    2538/     85C : BC                  	XCH R12			; R12 = 0
    2539/     85D : DC                  	LDM loop(4)
    2540/     85E : BE                  	XCH R14			; R14=12, 13, 14, 15
    2541/     85F : FA                  	STC
    2542/     860 :                     REG16_CMP_LOOP:
    2543/     860 : F3                  	CMC
    2544/     861 : 21                  	SRC P0
    2545/     862 : E9                  	RDM
    2546/     863 : 23                  	SRC P1
    2547/     864 : E8                  	SBM
    2548/     865 : 61                  	INC R1
    2549/     866 : 63                  	INC R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/03/22 17:52:17


    2550/     867 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2551/     868 : AB                  	LD R11
    2552/     869 : 14 6D               	JCN Z, REG16_CMP_NEXT
    2553/     86B : D1                  	LDM 1
    2554/     86C : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2555/     86D :                     REG16_CMP_NEXT:
    2556/     86D : 7E 60               	ISZ R14, REG16_CMP_LOOP
    2557/     86F : AB                  	LD R11
    2558/     870 : F5                  	RAL
    2559/     871 : F3                  	CMC			; CY=~MSB
    2560/     872 :                     
    2561/     872 : AF                  	LD R15
    2562/     873 : B1                  	XCH R1			; restore R1
    2563/     874 : AD                  	LD R13
    2564/     875 : B3                  	XCH R3			; restore R3
    2565/     876 :                     
    2566/     876 : AC                  	LD R12
    2567/     877 : 14 7A               	JCN Z, REG16_CMP_EXIT0
    2568/     879 : C1                  	BBL 1
    2569/     87A :                     REG16_CMP_EXIT0:
    2570/     87A : C0                  	BBL 0
    2571/     87B :                     
    2572/     87B :                     ;;;----------------------------------------------------------------------------
    2573/     87B :                     ;;; ADD_REG16P0_REG16P1
    2574/     87B :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2575/     87B :                     ;;; destroy: P6, P7
    2576/     87B :                     ;;;----------------------------------------------------------------------------
    2577/     87B :                     ADD_REG16P0_REG16P1:
    2578/     87B : A1                  	LD R1
    2579/     87C : BF                  	XCH R15			; save R1 to R15
    2580/     87D : A3                  	LD R3
    2581/     87E : BD                  	XCH R13			; save R3 to R13
    2582/     87F :                     
    2583/     87F : DC                  	LDM loop(4)
    2584/     880 : BE                  	XCH R14
    2585/     881 : F1                  	CLC
    2586/     882 :                     REG16_ADD_LOOP:
    2587/     882 : 23                  	SRC P1
    2588/     883 : E9                  	RDM
    2589/     884 : 21                  	SRC P0
    2590/     885 : EB                  	ADM
    2591/     886 : E0                  	WRM
    2592/     887 : 61                  	INC R1
    2593/     888 : 63                  	INC R3
    2594/     889 : 7E 82               	ISZ R14, REG16_ADD_LOOP
    2595/     88B :                     
    2596/     88B : AF                  	LD R15
    2597/     88C : B1                  	XCH R1			; restore R1
    2598/     88D : AD                  	LD R13
    2599/     88E : B3                  	XCH R3			; restore R3
    2600/     88F : C0                  	BBL 0
    2601/     890 :                     
    2602/     890 :                     ;;;----------------------------------------------------------------------------
    2603/     890 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2604/     890 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2605/     890 :                     ;;; and increment the pointer
    2606/     890 :                     ;;; ACC=0 get number succeed
    2607/     890 :                     ;;; ACC=1 no number, P1=first chalacter
    2608/     890 :                     ;;; destroy: P6, P7, P2, P3
    2609/     890 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/03/22 17:52:17


    2610/     890 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2611/     890 : 5B 12               	JMS PUSH_P1
    2612/     892 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2613/     894 : 5C E9               	JMS ISHEX_P1
    2614/     896 : 1C 9B               	JCN ZN, GETHEX_START
    2615/     898 :                     	;; the first character is not a number
    2616/     898 : 5B 43               	JMS POP_P1
    2617/     89A : C1                  	BBL 1
    2618/     89B :                     GETHEX_START:
    2619/     89B : 24 00               	FIM P2, 00H
    2620/     89D : 26 00               	FIM P3, 00H
    2621/     89F :                     GETHEX_LOOP:
    2622/     89F : 5D 14               	JMS CTOI_P1
    2623/     8A1 : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2624/     8A3 : A3                  	LD P1_LO
    2625/     8A4 : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2626/     8A5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2627/     8A7 : 5C E9               	JMS ISHEX_P1
    2628/     8A9 : 14 AD               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2629/     8AB : 48 9F               	JUN GETHEX_LOOP
    2630/     8AD :                     GETHEX_EXIT:
    2631/     8AD : 5B 43               	JMS POP_P1
    2632/     8AF : 47 57               	JUN LD_REG16P1_P2P3
    2633/     8B1 :                     ;;;	BBL 0
    2634/     8B1 :                     
    2635/     8B1 :                     ;;;----------------------------------------------------------------------------
    2636/     8B1 :                     ;;; EMULATE_OUT_P1
    2637/     8B1 :                     ;;; Emulate OUT instruction
    2638/     8B1 :                     ;;;----------------------------------------------------------------------------
    2639/     8B1 :                     EMULATE_OUT_P1:
    2640/     8B1 : 2E 01               	FIM P7, EMU_UARTRD
    2641/     8B3 : 5D 20               	JMS CMP_P1P7
    2642/     8B5 : 1C B9               	JCN ZN, EMU_OUT_P1_L1
    2643/     8B7 : 48 C2               	JUN EMU_OUT_UARTRD
    2644/     8B9 :                     EMU_OUT_P1_L1:
    2645/     8B9 : 2E 00               	FIM P7, EMU_UARTRC
    2646/     8BB : 5D 20               	JMS CMP_P1P7
    2647/     8BD : 1C C1               	JCN ZN, EMU_OUT_P1_L2
    2648/     8BF : 48 C8               	JUN EMU_OUT_UARTRC
    2649/     8C1 :                     EMU_OUT_P1_L2:
    2650/     8C1 : C0                  	BBL 0
    2651/     8C2 :                     
    2652/     8C2 :                     EMU_OUT_UARTRD:
    2653/     8C2 : 22 00               	FIM P1, REG8_A
    2654/     8C4 : 57 DE               	JMS LD_P1_REG8P1
    2655/     8C6 : 4C 5D               	JUN PUTCHAR_P1
    2656/     8C8 :                     ;;;	BBL 0
    2657/     8C8 :                     EMU_OUT_UARTRC:			; do nothing
    2658/     8C8 : C0                  	BBL 0
    2659/     8C9 :                     	
    2660/     8C9 :                     ;;;----------------------------------------------------------------------------
    2661/     8C9 :                     ;;; EMULATE_IN_P1
    2662/     8C9 :                     ;;; Emulate IN instruction
    2663/     8C9 :                     ;;;----------------------------------------------------------------------------
    2664/     8C9 :                     EMULATE_IN_P1:
    2665/     8C9 : 2E 01               	FIM P7, EMU_UARTRD
    2666/     8CB : 5D 20               	JMS CMP_P1P7
    2667/     8CD : 1C D1               	JCN ZN, EMU_IN_P1_L1
    2668/     8CF : 48 DA               	JUN EMU_IN_UARTRD
    2669/     8D1 :                     EMU_IN_P1_L1:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/03/22 17:52:17


    2670/     8D1 : 2E 00               	FIM P7, EMU_UARTRC
    2671/     8D3 : 5D 20               	JMS CMP_P1P7
    2672/     8D5 : 1C D9               	JCN ZN, EMU_IN_P1_L2
    2673/     8D7 : 48 E6               	JUN EMU_IN_UARTRC
    2674/     8D9 :                     EMU_IN_P1_L2:
    2675/     8D9 : C0                  	BBL 0
    2676/     8DA :                     
    2677/     8DA :                     EMU_IN_UARTRD:
    2678/     8DA : 5C 35               	JMS GETCHAR_P1
    2679/     8DC : 2E 1B               	FIM P7, 1BH		; ESC
    2680/     8DE : 5D 20               	JMS CMP_P1P7
    2681/     8E0 : 14 EC               	JCN Z, EMU_IN_EXIT
    2682/     8E2 :                     	
    2683/     8E2 : 20 00               	FIM P0, REG8_A
    2684/     8E4 : 47 B8               	JUN LD_REG8P0_P1
    2685/     8E6 :                     ;;;	BBL 0
    2686/     8E6 :                     
    2687/     8E6 :                     EMU_IN_UARTRC:
    2688/     8E6 : 20 00               	FIM P0, REG8_A
    2689/     8E8 : 22 FF               	FIM P1, EMU_IN_UARTRC_VALUE
    2690/     8EA : 47 B8               	JUN LD_REG8P0_P1
    2691/     8EC :                     ;;;	BBL 0
    2692/     8EC :                     
    2693/     8EC :                     EMU_IN_EXIT:
    2694/     8EC : 5C 9E               	JMS PRINT_CRLF
    2695/     8EE : 58 F2               	JMS EMU_PRINT_REGISTERS
    2696/     8F0 : 40 2D               	JUN CMD_LOOP
    2697/     8F2 :                     	
    2698/     8F2 :                     ;;;----------------------------------------------------------------------------
    2699/     8F2 :                     ;;; EMU_PRINT_REGISTERS
    2700/     8F2 :                     ;;;----------------------------------------------------------------------------
    2701/     8F2 :                     EMU_PRINT_REGISTERS:
    2702/     8F2 : 20 69               	FIM P0, lo(STR_EMU_REG)
    2703/     8F4 : 5E 00               	JMS PRINTSTR_P0
    2704/     8F6 :                     
    2705/     8F6 : 22 00               	FIM P1, REG8_A
    2706/     8F8 : 57 DE               	JMS LD_P1_REG8P1
    2707/     8FA : 5C 83               	JMS PRINTHEX_P1
    2708/     8FC : 5C 96               	JMS PRINT_SPC
    2709/     8FE :                     
    2710/     8FE : 56 3F               	JMS GETFLAG_S
    2711/     900 : 5C B2               	JMS PRINT_ACC
    2712/     902 : 56 35               	JMS GETFLAG_Z
    2713/     904 : 5C B2               	JMS PRINT_ACC
    2714/     906 : 56 48               	JMS GETFLAG_C
    2715/     908 : 5C B2               	JMS PRINT_ACC
    2716/     90A : 5C 96               	JMS PRINT_SPC
    2717/     90C :                     
    2718/     90C : 22 0C               	FIM P1, REG16_BC
    2719/     90E : 57 F0               	JMS PRINTHEX_REG16P1
    2720/     910 : 5C 96               	JMS PRINT_SPC
    2721/     912 :                     
    2722/     912 : 22 08               	FIM P1, REG16_DE
    2723/     914 : 57 F0               	JMS PRINTHEX_REG16P1
    2724/     916 : 5C 96               	JMS PRINT_SPC
    2725/     918 :                     
    2726/     918 : 22 04               	FIM P1, REG16_HL
    2727/     91A : 57 F0               	JMS PRINTHEX_REG16P1
    2728/     91C : 5C 96               	JMS PRINT_SPC
    2729/     91E :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/03/22 17:52:17


    2730/     91E : 22 18               	FIM P1, REG16_SP
    2731/     920 : 57 F0               	JMS PRINTHEX_REG16P1
    2732/     922 : 5C 96               	JMS PRINT_SPC
    2733/     924 :                     
    2734/     924 : 22 14               	FIM P1, REG16_PC
    2735/     926 : 57 F0               	JMS PRINTHEX_REG16P1
    2736/     928 : 5C 96               	JMS PRINT_SPC
    2737/     92A :                     
    2738/     92A : 20 1C               	FIM P0, REG16_ADDR
    2739/     92C : 22 14               	FIM P1, REG16_PC
    2740/     92E : 57 33               	JMS LD_REG16P0_REG16P1
    2741/     930 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2742/     932 : 5C 83               	JMS PRINTHEX_P1
    2743/     934 : 5C 96               	JMS PRINT_SPC
    2744/     936 :                     
    2745/     936 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2746/     938 : 5C 83               	JMS PRINTHEX_P1
    2747/     93A : 5C 96               	JMS PRINT_SPC
    2748/     93C :                     
    2749/     93C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2750/     93E : 5C 83               	JMS PRINTHEX_P1
    2751/     940 : 5C 96               	JMS PRINT_SPC
    2752/     942 :                     
    2753/     942 : 20 0C               	FIM P0, REG16_BC
    2754/     944 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2755/     946 : 58 46               	JMS DEC_REG16P0
    2756/     948 : 5C 83               	JMS PRINTHEX_P1
    2757/     94A : 5C 96               	JMS PRINT_SPC
    2758/     94C :                     	
    2759/     94C : 20 08               	FIM P0, REG16_DE
    2760/     94E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2761/     950 : 58 46               	JMS DEC_REG16P0
    2762/     952 : 5C 83               	JMS PRINTHEX_P1
    2763/     954 : 5C 96               	JMS PRINT_SPC
    2764/     956 :                     
    2765/     956 : 20 04               	FIM P0, REG16_HL
    2766/     958 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2767/     95A : 58 46               	JMS DEC_REG16P0
    2768/     95C : 5C 83               	JMS PRINTHEX_P1
    2769/     95E : 5C 96               	JMS PRINT_SPC
    2770/     960 :                     
    2771/     960 : 20 18               	FIM P0, REG16_SP
    2772/     962 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2773/     964 : 5C 83               	JMS PRINTHEX_P1
    2774/     966 : 5C 96               	JMS PRINT_SPC
    2775/     968 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2776/     96A : 5C 83               	JMS PRINTHEX_P1
    2777/     96C :                     ;;; 	JMS PRINT_SPC
    2778/     96C :                     
    2779/     96C : 58 46               	JMS DEC_REG16P0
    2780/     96E : 58 46               	JMS DEC_REG16P0
    2781/     970 :                     	
    2782/     970 : 4C 9E               	JUN PRINT_CRLF
    2783/     972 :                     ;;;	BBL 0
    2784/     972 :                     
    2785/     972 :                     
    2786/     972 :                     	
    2787/     972 :                     ;;;---------------------------------------------------------------------------
    2788/     972 :                     ;;; JIN_P2_CODE_80BF
    2789/     972 :                     ;;; Jump table for CODE 80H to BFH
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/03/22 17:52:17


    2790/     972 :                     ;;; P2=0F0H + CODE.bit(543)0
    2791/     972 :                     ;;;---------------------------------------------------------------------------
    2792/     9EF :                     	org 09EFH
    2793/     9EF :                     JIN_P2_CODE_80BF:
    2794/     9EF : 35                  	JIN P2
    2795/     9F0 :                     	org 09F0H
    2796/     9F0 : 44 88               	JUN ADI_P1		; 9F0: 80H<=87H
    2797/     9F2 : 44 D3               	JUN ACI_P1		; 9F2: 88H<=8FH
    2798/     9F4 : 45 05               	JUN SUI_P1		; 9F4: 90H<=97H
    2799/     9F6 : 45 27               	JUN SBI_P1		; 9F6: 98H<=9FH
    2800/     9F8 : 45 79               	JUN ANI_P1		; 9F8: A0H<=A7H
    2801/     9FA : 45 B0               	JUN XRI_P1		; 9FA: A8H<=AFH
    2802/     9FC : 45 F5               	JUN ORI_P1		; 9FC: B0H<=B7H
    2803/     9FE : 46 21               	JUN CPI_P1		; 9FE: B8H<=BFH
    2804/     A00 :                     ;;;---------------------------------------------------------------------------
    2805/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2806/     A00 :                     ;;;---------------------------------------------------------------------------
    2807/     A00 :                     	org 0A00H
    2808/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2809/     A00 : 33                  	JIN P1
    2810/     A01 : 00                  	NOP			; do not delete this NOP
    2811/     A02 : 42 80               	JUN CODE_01H
    2812/     A04 : 42 8C               	JUN CODE_02H
    2813/     A06 : 42 94               	JUN CODE_03H
    2814/     A08 : 42 98               	JUN CODE_04H
    2815/     A0A : 42 9C               	JUN CODE_05H
    2816/     A0C : 42 A0               	JUN CODE_06H
    2817/     A0E : 42 A4               	JUN CODE_07H
    2818/     A10 : 42 B4               	JUN CODE_08H
    2819/     A12 : 42 B5               	JUN CODE_09H
    2820/     A14 : 42 BD               	JUN CODE_0AH
    2821/     A16 : 42 C7               	JUN CODE_0BH
    2822/     A18 : 42 CB               	JUN CODE_0CH
    2823/     A1A : 42 CF               	JUN CODE_0DH
    2824/     A1C : 42 D3               	JUN CODE_0EH
    2825/     A1E : 42 D7               	JUN CODE_0FH
    2826/     A20 : 42 E7               	JUN CODE_10H
    2827/     A22 : 42 E8               	JUN CODE_11H
    2828/     A24 : 42 F4               	JUN CODE_12H
    2829/     A26 : 42 FC               	JUN CODE_13H
    2830/     A28 : 43 00               	JUN CODE_14H
    2831/     A2A : 43 04               	JUN CODE_15H
    2832/     A2C : 43 08               	JUN CODE_16H
    2833/     A2E : 43 0C               	JUN CODE_17H
    2834/     A30 : 43 1C               	JUN CODE_18H
    2835/     A32 : 43 1D               	JUN CODE_19H
    2836/     A34 : 43 25               	JUN CODE_1AH
    2837/     A36 : 43 2F               	JUN CODE_1BH
    2838/     A38 : 43 33               	JUN CODE_1CH
    2839/     A3A : 43 37               	JUN CODE_1DH
    2840/     A3C : 43 3B               	JUN CODE_1EH
    2841/     A3E : 43 3F               	JUN CODE_1FH
    2842/     A40 : 43 4F               	JUN CODE_20H
    2843/     A42 : 43 50               	JUN CODE_21H
    2844/     A44 : 43 5C               	JUN CODE_22H
    2845/     A46 : 43 7A               	JUN CODE_23H
    2846/     A48 : 43 7E               	JUN CODE_24H
    2847/     A4A : 43 82               	JUN CODE_25H
    2848/     A4C : 43 86               	JUN CODE_26H
    2849/     A4E : 43 8A               	JUN CODE_27H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/03/22 17:52:17


    2850/     A50 : 43 98               	JUN CODE_28H
    2851/     A52 : 43 99               	JUN CODE_29H
    2852/     A54 : 43 A1               	JUN CODE_2AH
    2853/     A56 : 43 BB               	JUN CODE_2BH
    2854/     A58 : 43 BF               	JUN CODE_2CH
    2855/     A5A : 43 C3               	JUN CODE_2DH
    2856/     A5C : 43 C7               	JUN CODE_2EH
    2857/     A5E : 43 CB               	JUN CODE_2FH
    2858/     A60 : 43 D7               	JUN CODE_30H
    2859/     A62 : 43 D8               	JUN CODE_31H
    2860/     A64 : 43 E4               	JUN CODE_32H
    2861/     A66 : 43 F8               	JUN CODE_33H
    2862/     A68 : 43 FC               	JUN CODE_34H
    2863/     A6A : 44 08               	JUN CODE_35H
    2864/     A6C : 44 14               	JUN CODE_36H
    2865/     A6E : 44 1A               	JUN CODE_37H
    2866/     A70 : 44 1C               	JUN CODE_38H
    2867/     A72 : 44 1D               	JUN CODE_39H
    2868/     A74 : 44 25               	JUN CODE_3AH
    2869/     A76 : 44 39               	JUN CODE_3BH
    2870/     A78 : 44 3D               	JUN CODE_3CH
    2871/     A7A : 44 43               	JUN CODE_3DH
    2872/     A7C : 44 49               	JUN CODE_3EH
    2873/     A7E : 44 4F               	JUN CODE_3FH
    2874/     A80 : 44 54               	JUN CODE_C0H
    2875/     A82 : 44 58               	JUN CODE_C1H
    2876/     A84 : 44 5E               	JUN CODE_C2H
    2877/     A86 : 44 6E               	JUN CODE_C3H
    2878/     A88 : 44 7C               	JUN CODE_C4H
    2879/     A8A : 44 80               	JUN CODE_C5H
    2880/     A8C : 44 86               	JUN CODE_C6H
    2881/     A8E : 44 90               	JUN CODE_C7H
    2882/     A90 : 44 96               	JUN CODE_C8H
    2883/     A92 : 44 9E               	JUN CODE_C9H
    2884/     A94 : 44 A4               	JUN CODE_CAH
    2885/     A96 : 44 A8               	JUN CODE_CBH
    2886/     A98 : 44 A9               	JUN CODE_CCH
    2887/     A9A : 44 B9               	JUN CODE_CDH
    2888/     A9C : 44 D1               	JUN CODE_CEH
    2889/     A9E : 44 E1               	JUN CODE_CFH
    2890/     AA0 : 44 E7               	JUN CODE_D0H
    2891/     AA2 : 44 EB               	JUN CODE_D1H
    2892/     AA4 : 44 F1               	JUN CODE_D2H
    2893/     AA6 : 44 F5               	JUN CODE_D3H
    2894/     AA8 : 44 F9               	JUN CODE_D4H
    2895/     AAA : 44 FD               	JUN CODE_D5H
    2896/     AAC : 45 03               	JUN CODE_D6H
    2897/     AAE : 45 0D               	JUN CODE_D7H
    2898/     AB0 : 45 13               	JUN CODE_D8H
    2899/     AB2 : 45 17               	JUN CODE_D9H
    2900/     AB4 : 45 18               	JUN CODE_DAH
    2901/     AB6 : 45 1C               	JUN CODE_DBH
    2902/     AB8 : 45 20               	JUN CODE_DCH
    2903/     ABA : 45 24               	JUN CODE_DDH
    2904/     ABC : 45 25               	JUN CODE_DEH
    2905/     ABE : 45 35               	JUN CODE_DFH
    2906/     AC0 : 45 3B               	JUN CODE_E0H
    2907/     AC2 : 45 3F               	JUN CODE_E1H
    2908/     AC4 : 45 45               	JUN CODE_E2H
    2909/     AC6 : 45 49               	JUN CODE_E3H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/03/22 17:52:17


    2910/     AC8 : 45 6D               	JUN CODE_E4H
    2911/     ACA : 45 71               	JUN CODE_E5H
    2912/     ACC : 45 77               	JUN CODE_E6H
    2913/     ACE : 45 89               	JUN CODE_E7H
    2914/     AD0 : 45 8F               	JUN CODE_E8H
    2915/     AD2 : 45 93               	JUN CODE_E9H
    2916/     AD4 : 45 97               	JUN CODE_EAH
    2917/     AD6 : 45 9B               	JUN CODE_EBH
    2918/     AD8 : 45 A9               	JUN CODE_ECH
    2919/     ADA : 45 AD               	JUN CODE_EDH
    2920/     ADC : 45 AE               	JUN CODE_EEH
    2921/     ADE : 45 C0               	JUN CODE_EFH
    2922/     AE0 : 45 C6               	JUN CODE_F0H
    2923/     AE2 : 45 CA               	JUN CODE_F1H
    2924/     AE4 : 45 D8               	JUN CODE_F2H
    2925/     AE6 : 45 DC               	JUN CODE_F3H
    2926/     AE8 : 45 DD               	JUN CODE_F4H
    2927/     AEA : 45 E1               	JUN CODE_F5H
    2928/     AEC : 45 F3               	JUN CODE_F6H
    2929/     AEE : 46 05               	JUN CODE_F7H
    2930/     AF0 : 46 0B               	JUN CODE_F8H
    2931/     AF2 : 46 0F               	JUN CODE_F9H
    2932/     AF4 : 46 15               	JUN CODE_FAH
    2933/     AF6 : 46 19               	JUN CODE_FBH
    2934/     AF8 : 46 1A               	JUN CODE_FCH
    2935/     AFA : 46 1E               	JUN CODE_FDH
    2936/     AFC : 46 1F               	JUN CODE_FEH
    2937/     AFE : 46 2F               	JUN CODE_FFH
    2938/     B00 :                     
    2939/     B00 :                     	org 0B00H
    2940/     B00 :                     ;;;----------------------------------------------------------------------------
    2941/     B00 :                     ;;; PUSH_P0, P1, P2
    2942/     B00 :                     ;;; POP_P0, P1, P2
    2943/     B00 :                     ;;; Push and Pop an 8bit register pair
    2944/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2945/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    2946/     B00 :                     ;;; destroy P7, P6
    2947/     B00 :                     ;;;----------------------------------------------------------------------------
    2948/     B00 :                     
    2949/     B00 :                     PUSHP	macro ThisR0, ThisR1
    2950/     B00 :                     	LD SP_LO
    2951/     B00 :                     	DAC
    2952/     B00 :                     	XCH SP_LO		; --sp.3210
    2953/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    2954/     B00 :                     	LD SP_HI
    2955/     B00 :                     	DAC
    2956/     B00 :                     	XCH SP_HI		; --sp.7654
    2957/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    2958/     B00 :                     	SRC SP
    2959/     B00 :                     	LD ThisR0
    2960/     B00 :                     	WRM			; (sp)=R0
    2961/     B00 :                     
    2962/     B00 :                     	LD SP_LO
    2963/     B00 :                     	DAC
    2964/     B00 :                     	XCH SP_LO		; --sp.3210
    2965/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    2966/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    2967/     B00 :                     ;;;	LD SP_HI
    2968/     B00 :                     ;;;	DAC
    2969/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/03/22 17:52:17


    2970/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    2971/     B00 :                     	SRC SP
    2972/     B00 :                     	LD ThisR1
    2973/     B00 :                     	WRM			; (sp)=R1
    2974/     B00 :                     
    2975/     B00 :                     	BBL 0
    2976/     B00 :                     	endm
    2977/     B00 :                     ;;;----------------------------------------------------------------------------
    2978/     B00 :                     POPP	macro ThisR0, ThisR1
    2979/     B00 :                     	SRC SP
    2980/     B00 :                     	RDM
    2981/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    2982/     B00 :                     	INC SP_LO		; sp.3210++
    2983/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    2984/     B00 :                     	SRC SP
    2985/     B00 :                     	RDM
    2986/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    2987/     B00 :                     	INC SP_LO		; sp.3210++
    2988/     B00 :                     	LD SP_LO
    2989/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    2990/     B00 :                     	INC SP_HI		; sp.7654++
    2991/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    2992/     B00 :                     	BBL 0
    2993/     B00 :                     	endm
    2994/     B00 :                     ;;;----------------------------------------------------------------------------
    2995/     B00 :                     ;;;----------------------------------------------------------------------------
    2996/     B00 :                     ;;; Generate real codes from macros
    2997/     B00 :                     ;;;----------------------------------------------------------------------------
    2998/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    2998/     B00 : A9                          LD SP_LO
    2998/     B01 : F8                          DAC
    2998/     B02 : B9                          XCH SP_LO               ; --sp.3210
    2998/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    2998/     B05 : A8                          LD SP_HI
    2998/     B06 : F8                          DAC
    2998/     B07 : B8                          XCH SP_HI               ; --sp.7654
    2998/     B08 :                     PUSH_NOBORROW_R0_R1:
    2998/     B08 : 29                          SRC SP
    2998/     B09 : A0                          LD R0
    2998/     B0A : E0                          WRM                     ; (sp)=R0
    2998/     B0B :                     
    2998/     B0B : A9                          LD SP_LO
    2998/     B0C : F8                          DAC
    2998/     B0D : B9                          XCH SP_LO               ; --sp.3210
    2998/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    2998/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    2998/     B0E :                     ;;;     LD SP_HI
    2998/     B0E :                     ;;;     DAC
    2998/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    2998/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    2998/     B0E : 29                          SRC SP
    2998/     B0F : A1                          LD R1
    2998/     B10 : E0                          WRM                     ; (sp)=R1
    2998/     B11 :                     
    2998/     B11 : C0                          BBL 0
    2999/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    2999/     B12 : A9                          LD SP_LO
    2999/     B13 : F8                          DAC
    2999/     B14 : B9                          XCH SP_LO               ; --sp.3210
    2999/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/03/22 17:52:17


    2999/     B17 : A8                          LD SP_HI
    2999/     B18 : F8                          DAC
    2999/     B19 : B8                          XCH SP_HI               ; --sp.7654
    2999/     B1A :                     PUSH_NOBORROW_R2_R3:
    2999/     B1A : 29                          SRC SP
    2999/     B1B : A2                          LD R2
    2999/     B1C : E0                          WRM                     ; (sp)=R0
    2999/     B1D :                     
    2999/     B1D : A9                          LD SP_LO
    2999/     B1E : F8                          DAC
    2999/     B1F : B9                          XCH SP_LO               ; --sp.3210
    2999/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    2999/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    2999/     B20 :                     ;;;     LD SP_HI
    2999/     B20 :                     ;;;     DAC
    2999/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    2999/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    2999/     B20 : 29                          SRC SP
    2999/     B21 : A3                          LD R3
    2999/     B22 : E0                          WRM                     ; (sp)=R1
    2999/     B23 :                     
    2999/     B23 : C0                          BBL 0
    3000/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    3000/     B24 : A9                          LD SP_LO
    3000/     B25 : F8                          DAC
    3000/     B26 : B9                          XCH SP_LO               ; --sp.3210
    3000/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
    3000/     B29 : A8                          LD SP_HI
    3000/     B2A : F8                          DAC
    3000/     B2B : B8                          XCH SP_HI               ; --sp.7654
    3000/     B2C :                     PUSH_NOBORROW_R4_R5:
    3000/     B2C : 29                          SRC SP
    3000/     B2D : A4                          LD R4
    3000/     B2E : E0                          WRM                     ; (sp)=R0
    3000/     B2F :                     
    3000/     B2F : A9                          LD SP_LO
    3000/     B30 : F8                          DAC
    3000/     B31 : B9                          XCH SP_LO               ; --sp.3210
    3000/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    3000/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    3000/     B32 :                     ;;;     LD SP_HI
    3000/     B32 :                     ;;;     DAC
    3000/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    3000/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    3000/     B32 : 29                          SRC SP
    3000/     B33 : A5                          LD R5
    3000/     B34 : E0                          WRM                     ; (sp)=R1
    3000/     B35 :                     
    3000/     B35 : C0                          BBL 0
    3001/     B36 : (MACRO)              POP_P0: POPP R0, R1
    3001/     B36 : 29                          SRC SP
    3001/     B37 : E9                          RDM
    3001/     B38 : B1                          XCH R1              ; R1=(sp)
    3001/     B39 : 69                          INC SP_LO               ; sp.3210++
    3001/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    3001/     B3A : 29                          SRC SP
    3001/     B3B : E9                          RDM
    3001/     B3C : B0                          XCH R0              ; R0=(sp)
    3001/     B3D : 69                          INC SP_LO               ; sp.3210++
    3001/     B3E : A9                          LD SP_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/03/22 17:52:17


    3001/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    3001/     B41 : 68                          INC SP_HI               ; sp.7654++
    3001/     B42 :                     POP_NOCARRY_R0_R1:
    3001/     B42 : C0                          BBL 0
    3002/     B43 : (MACRO)              POP_P1: POPP R2, R3
    3002/     B43 : 29                          SRC SP
    3002/     B44 : E9                          RDM
    3002/     B45 : B3                          XCH R3              ; R3=(sp)
    3002/     B46 : 69                          INC SP_LO               ; sp.3210++
    3002/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    3002/     B47 : 29                          SRC SP
    3002/     B48 : E9                          RDM
    3002/     B49 : B2                          XCH R2              ; R2=(sp)
    3002/     B4A : 69                          INC SP_LO               ; sp.3210++
    3002/     B4B : A9                          LD SP_LO
    3002/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    3002/     B4E : 68                          INC SP_HI               ; sp.7654++
    3002/     B4F :                     POP_NOCARRY_R2_R3:
    3002/     B4F : C0                          BBL 0
    3003/     B50 : (MACRO)              POP_P2: POPP R4, R5
    3003/     B50 : 29                          SRC SP
    3003/     B51 : E9                          RDM
    3003/     B52 : B5                          XCH R5              ; R5=(sp)
    3003/     B53 : 69                          INC SP_LO               ; sp.3210++
    3003/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    3003/     B54 : 29                          SRC SP
    3003/     B55 : E9                          RDM
    3003/     B56 : B4                          XCH R4              ; R4=(sp)
    3003/     B57 : 69                          INC SP_LO               ; sp.3210++
    3003/     B58 : A9                          LD SP_LO
    3003/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    3003/     B5B : 68                          INC SP_HI               ; sp.7654++
    3003/     B5C :                     POP_NOCARRY_R4_R5:
    3003/     B5C : C0                          BBL 0
    3004/     B5D :                     
    3005/     B5D :                     ;;;	org 0B00H
    3006/     B5D :                     ;;;---------------------------------------------------------------------------
    3007/     B5D :                     ;;; PM16
    3008/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    3009/     B5D :                     ;;; 
    3010/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    3011/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    3012/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    3013/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    3014/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    3015/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    3016/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    3017/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
    3018/     B5D :                     ;;; 
    3019/     B5D :                     ;;;    PM12(BA98.7654.3210)
    3020/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    3021/     B5D :                     ;;; 
    3022/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    3023/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    3024/     B5D :                     ;;;   (for debug with 256 x 16bank)
    3025/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    3026/     B5D :                     ;;;---------------------------------------------------------------------------
    3027/     B5D :                     ;;;---------------------------------------------------------------------------
    3028/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    3029/     B5D :                     ;;; P1 = PM16(REG(P0)++)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/03/22 17:52:17


    3030/     B5D :                     ;;; destroy: P6, P7
    3031/     B5D :                     ;;;---------------------------------------------------------------------------
    3032/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    3033/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    3033/     B5D : A0                                  LD P0_HI
    3033/     B5E : BC                                  XCH P6_HI
    3033/     B5F : A1                                  LD P0_LO
    3033/     B60 : BD                                  XCH P6_LO
    3034/     B61 : 2D                  	SRC P6
    3035/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    3036/     B63 :                     
    3037/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3038/     B65 : 2F                  	SRC P7
    3039/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3040/     B67 :                     
    3041/     B67 : 6D                  	INC P6_LO
    3042/     B68 : 2D                  	SRC P6
    3043/     B69 : E9                  	RDM
    3044/     B6A : B1                  	XCH P0_LO		; P0_LO=REG(P0).bit7654
    3045/     B6B :                     	
    3046/     B6B : 6D                  	INC P6_LO
    3047/     B6C : 2D                  	SRC P6
    3048/     B6D : E9                  	RDM
    3049/     B6E : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitBA98
    3050/     B6F :                     
    3051/     B6F : 6D                  	INC P6_LO
    3052/     B70 : 2D                  	SRC P6
    3053/     B71 : E9                  	RDM
    3054/     B72 :                     
    3055/     B72 : 2E 40               	FIM P7, CHIP_PMSELECT1
    3056/     B74 : 2F                  	SRC P7
    3057/     B75 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    3058/     B76 :                     
    3059/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3060/     B78 :                     
    3061/     B78 : AC                  	LD P6_HI			; restore P0
    3062/     B79 : B0                  	XCH P0_HI
    3063/     B7A : AD                  	LD P6_LO
    3064/     B7B : F8                  	DAC
    3065/     B7C : F8                  	DAC
    3066/     B7D : F8                  	DAC
    3067/     B7E : B1                  	XCH P0_LO
    3068/     B7F : 48 36               	JUN INC_REG16P0
    3069/     B81 :                     ;;;	BBL 0
    3070/     B81 :                     
    3071/     B81 :                     ;;;---------------------------------------------------------------------------
    3072/     B81 :                     ;;; LD_PM16REG16P0_P1
    3073/     B81 :                     ;;; PM16(REG(P0)) = P1
    3074/     B81 :                     ;;; 
    3075/     B81 :                     ;;; destroy: P7
    3076/     B81 :                     ;;;---------------------------------------------------------------------------
    3077/     B81 :                     LD_PM16REG16P0_P1:
    3078/     B81 : 21                  	SRC P0
    3079/     B82 : E9                  	RDM			; bit3210 of REG(P0)
    3080/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3081/     B85 : 2F                  	SRC P7
    3082/     B86 : E1                  	WMP			; set bank to REG(P0).bit3210
    3083/     B87 :                     
    3084/     B87 :                     
    3085/     B87 : 61                  	INC P0_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/03/22 17:52:17


    3086/     B88 : 21                  	SRC P0
    3087/     B89 : E9                  	RDM			; bit7654 of REG(P0)
    3088/     B8A : BD                  	XCH P6_LO		; R13 = REG(P0).bit7654
    3089/     B8B :                     
    3090/     B8B : 61                  	INC P0_LO
    3091/     B8C : 21                  	SRC P0
    3092/     B8D : E9                  	RDM
    3093/     B8E : BC                  	XCH P6_HI		; R12 = REG(P0).bitBA98
    3094/     B8F :                     	
    3095/     B8F : 61                  	INC P0_LO
    3096/     B90 : 21                  	SRC P0
    3097/     B91 : E9                  	RDM
    3098/     B92 :                     
    3099/     B92 : 2E 40               	FIM P7, CHIP_PMSELECT1
    3100/     B94 : 2F                  	SRC P7
    3101/     B95 : E1                  	WMP			; set bank_high to REG(P0).bitFEDC
    3102/     B96 :                     
    3103/     B96 : 2D                  	SRC P6
    3104/     B97 : A3                  	LD P1_LO
    3105/     B98 : E3                  	WPM
    3106/     B99 : A2                  	LD P1_HI
    3107/     B9A : E3                  	WPM
    3108/     B9B :                     	
    3109/     B9B : A1                  	LD R1			; restore P0
    3110/     B9C : F8                  	DAC
    3111/     B9D : F8                  	DAC
    3112/     B9E : F8                  	DAC
    3113/     B9F : B1                  	XCH R1
    3114/     BA0 : C0                  	BBL 0
    3115/     BA1 :                     
    3116/     BA1 :                     ;;;----------------------------------------------------------------------------
    3117/     BA1 :                     ;;; Subroutines for program memory operation
    3118/     BA1 :                     ;;;----------------------------------------------------------------------------
    3119/     BA1 :                     ;;;---------------------------------------------------------------------------
    3120/     BA1 :                     ;;; PM_WRITE_P0_P1
    3121/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3122/     BA1 :                     ;;; (0F00H+P0) = P1
    3123/     BA1 :                     ;;; input: P0, P1
    3124/     BA1 :                     ;;; output: none
    3125/     BA1 :                     ;;;---------------------------------------------------------------------------
    3126/     BA1 :                     PM_WRITE_P0_P1:
    3127/     BA1 : 21                  	SRC P0
    3128/     BA2 : A3                  	LD P1_LO
    3129/     BA3 : E3                  	WPM			; write lower 4bit
    3130/     BA4 : A2                  	LD P1_HI
    3131/     BA5 : E3                  	WPM			; write higher 4bit
    3132/     BA6 : C0                  	BBL 0
    3133/     BA7 :                     
    3134/     BA7 :                     ;;;---------------------------------------------------------------------------
    3135/     BA7 :                     ;;; PM_WRITE_P6_P7
    3136/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3137/     BA7 :                     ;;; (0F00H+P6) = P7
    3138/     BA7 :                     ;;; input: P6, P7
    3139/     BA7 :                     ;;; output: none
    3140/     BA7 :                     ;;;---------------------------------------------------------------------------
    3141/     BA7 :                     PM_WRITE_P6_P7:
    3142/     BA7 : 2D                  	SRC P6
    3143/     BA8 : AF                  	LD P7_LO
    3144/     BA9 : E3                  	WPM			; write lower 4bit
    3145/     BAA : AE                  	LD P7_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/03/22 17:52:17


    3146/     BAB : E3                  	WPM			; write higher 4bit
    3147/     BAC : C0                  	BBL 0
    3148/     BAD :                     
    3149/     BAD :                     ;;;---------------------------------------------------------------------------
    3150/     BAD :                     ;;; PM_INIT_BANK
    3151/     BAD :                     ;;; initialization for program memory (RAM)
    3152/     BAD :                     ;;; Write a subroutne code for reading memory
    3153/     BAD :                     ;;; destroy: P6, P7
    3154/     BAD :                     ;;;---------------------------------------------------------------------------
    3155/     BAD :                     PM_INIT_BANK:	
    3156/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3157/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3158/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3159/     BB3 : 6D                  	INC P6_LO
    3160/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3161/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3162/     BB8 : C0                  	BBL 0
    3163/     BB9 :                     
    3164/     BB9 :                     ;;;---------------------------------------------------------------------------
    3165/     BB9 :                     ;;; PM_SELECTPMB_P1
    3166/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3167/     BB9 :                     ;;; destroy: P7
    3168/     BB9 :                     ;;;---------------------------------------------------------------------------
    3169/     BB9 :                     PM_SELECTPMB_P1:
    3170/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3171/     BBB : 2F                  	SRC P7
    3172/     BBC : A3                  	LD P1_LO
    3173/     BBD : E1                  	WMP
    3174/     BBE :                     
    3175/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3176/     BC0 : 2F                  	SRC P7
    3177/     BC1 : A2                  	LD P1_HI
    3178/     BC2 : E1                  	WMP
    3179/     BC3 : C0                  	BBL 0
    3180/     BC4 :                     ;;;----------------------------------------------------------------------------
    3181/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3182/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3183/     BC4 :                     ;;; The value of REG(P0) does not change
    3184/     BC4 :                     ;;;----------------------------------------------------------------------------
    3185/     BC4 :                     GETLINE_PM16REG16P0:
    3186/     BC4 : 5B 00               	JMS PUSH_P0
    3187/     BC6 : 5B 12               	JMS PUSH_P1
    3188/     BC8 :                     
    3189/     BC8 : 22 30               	FIM P1, REG16_MON_TMP
    3190/     BCA : 57 3D               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3191/     BCC :                     
    3192/     BCC :                     GETLINE_LOOP:
    3193/     BCC : 5C 35               	JMS GETCHAR_P1		; P1 = getchar()
    3194/     BCE :                     
    3195/     BCE : 5D 35               	JMS ISCRLF_P1
    3196/     BD0 : 14 D8               	JCN Z, GETLINE_L1
    3197/     BD2 : 5C AA               	JMS PRINT_CR
    3198/     BD4 : 5C AE               	JMS PRINT_LF
    3199/     BD6 : 4B FC               	JUN GETLINE_EXIT
    3200/     BD8 :                     GETLINE_L1:
    3201/     BD8 : 2E 08               	FIM P7, 08H		; backspace
    3202/     BDA : 5D 20               	JMS CMP_P1P7
    3203/     BDC : 14 E0               	JCN Z, GETLINE_BS
    3204/     BDE : 4B F4               	JUN GETLINE_INSERTCHAR
    3205/     BE0 :                     GETLINE_BS:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/03/22 17:52:17


    3206/     BE0 : 22 30               	FIM P1, REG16_MON_TMP
    3207/     BE2 : 58 57               	JMS CMP_REG16P0_REG16P1
    3208/     BE4 : 1C E8               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3209/     BE6 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3210/     BE8 :                     GETLINE_DO_BS:			; delete a character on the cursor
    3211/     BE8 : 58 46               	JMS DEC_REG16P0		; REG(P0)--
    3212/     BEA :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3213/     BEA : 22 08               	FIM P1, 08H
    3214/     BEC : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3215/     BEE : 5C 96               	JMS PRINT_SPC		; put ' '
    3216/     BF0 : 5C 5D               	JMS PUTCHAR_P1		; put backspace
    3217/     BF2 :                     
    3218/     BF2 : 4B CC               	JUN GETLINE_LOOP
    3219/     BF4 :                     GETLINE_INSERTCHAR:
    3220/     BF4 : 5C 5D               	JMS PUTCHAR_P1
    3221/     BF6 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3222/     BF8 : 58 36               	JMS INC_REG16P0		; REG(P0)++
    3223/     BFA :                     	
    3224/     BFA : 4B CC               	JUN GETLINE_LOOP
    3225/     BFC :                     GETLINE_EXIT:
    3226/     BFC : 22 00               	FIM P1, 00H
    3227/     BFE : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3228/     C00 :                     
    3229/     C00 : 22 30               	FIM P1, REG16_MON_TMP
    3230/     C02 : 57 33               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3231/     C04 : 5B 43               	JMS POP_P1		; restore P1
    3232/     C06 : 4B 36               	JUN POP_P0		; restore P0
    3233/     C08 :                     ;;;	BBL 0
    3234/     C08 :                     
    3235/     C08 :                     ;;;----------------------------------------------------------------------------
    3236/     C08 :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3237/     C08 :                     ;;; Print a string 
    3238/     C08 :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3239/     C08 :                     ;;; REG(INDEX) is incremented to
    3240/     C08 :                     ;;;	the end of the string
    3241/     C08 :                     ;;; 
    3242/     C08 :                     ;;; destroy: P6, P7
    3243/     C08 :                     ;;;----------------------------------------------------------------------------
    3244/     C08 :                     PRINTSTR_PM16REG16P0:
    3245/     C08 : 5B 12               	JMS PUSH_P1
    3246/     C0A :                     PRINTSTR_LOOP:
    3247/     C0A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3248/     C0C : 5D 2D               	JMS ISZEROORNOT_P1
    3249/     C0E : 14 14               	JCN Z, PRINTSTR_EXIT
    3250/     C10 : 5C 5D               	JMS PUTCHAR_P1
    3251/     C12 : 4C 0A               	JUN PRINTSTR_LOOP
    3252/     C14 :                     PRINTSTR_EXIT:
    3253/     C14 : 4B 43               	JUN POP_P1
    3254/     C16 :                     ;;;	BBL 0
    3255/     C16 :                     
    3256/     C16 :                     ;;;----------------------------------------------------------------------------
    3257/     C16 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3258/     C16 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3259/     C16 :                     ;;; and increment the pointer
    3260/     C16 :                     ;;; output: P1
    3261/     C16 :                     ;;; ACC=0 get number success
    3262/     C16 :                     ;;; ACC=1 no number, P1=first character
    3263/     C16 :                     ;;; destroy: P6, P7
    3264/     C16 :                     ;;;----------------------------------------------------------------------------
    3265/     C16 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 65 - 2023/03/22 17:52:17


    3266/     C16 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3267/     C18 : 5C E9               	JMS ISHEX_P1
    3268/     C1A : 1C 1D               	JCN ZN, GETHEXBYTE_L1
    3269/     C1C : C1                  	BBL 1			; no hex number and exit
    3270/     C1D :                     GETHEXBYTE_L1:	
    3271/     C1D : 5B 24               	JMS PUSH_P2
    3272/     C1F : 5D 14               	JMS CTOI_P1
    3273/     C21 : A3                  	LD  P1_LO
    3274/     C22 : B4                  	XCH P2_HI			; save for upper digit
    3275/     C23 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3276/     C25 : 5C E9               	JMS ISHEX_P1
    3277/     C27 : 14 2F               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3278/     C29 : 5D 14               	JMS CTOI_P1
    3279/     C2B : A4                  	LD P2_HI
    3280/     C2C : B2                  	XCH P1_HI
    3281/     C2D : 4B 50               	JUN POP_P2
    3282/     C2F :                     ;;;	BBL 0
    3283/     C2F :                     GETHEXZBYTE_1DIGIT_EXIT:
    3284/     C2F : F0                  	CLB
    3285/     C30 : B2                  	XCH P1_HI
    3286/     C31 : A4                  	LD P2_HI
    3287/     C32 : B3                  	XCH P1_LO
    3288/     C33 : 4B 50               	JUN POP_P2
    3289/     C35 :                     ;;;	BBL 0
    3290/     C35 :                     	
    3291/     C35 :                     ;;;----------------------------------------------------------------------------
    3292/     C35 :                     ;;; I/O and some basic routines located in Page 0D00H
    3293/     C35 :                     ;;;----------------------------------------------------------------------------
    3294/     C35 :                     ;;;	org 0C00H
    3295/     C35 :                     ;;;---------------------------------------------------------------------------
    3296/     C35 :                     ;;; Software UART Routine
    3297/     C35 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3298/     C35 :                     ;;; defined in separated file
    3299/     C35 :                     ;;;---------------------------------------------------------------------------
    3300/     C35 :                     ;;; supported baudrates are 4800bps or 9600bps
    3301/     C35 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3302/     C35 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3303/     C35 :                     
    3304/     C35 : =2580H               	switch BAUDRATE
    3305/     C35 : =>FALSE              	case 4800
    3306/     C35 :                     	include "4800bps.inc"
    3307/     C35 : =>TRUE               	case 9600
    3308/     C35 :                     	include "9600bps.inc"
(1)    1/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C35 :                     ;;; getchar and putchar functions
(1)    3/     C35 :                     ;;; baud rate = 9600bps
(1)    4/     C35 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    6/     C35 :                     
(1)    7/     C35 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C35 :                     ;;; GETCHAR_P1
(1)    9/     C35 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C35 :                     ;;;
(1)   11/     C35 :                     ;;; Input: none
(1)   12/     C35 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     C35 :                     ;;; Working: P6, P7
(1)   14/     C35 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C35 :                     ;;; 
(1)   16/     C35 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C35 :                     ;;; 
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 66 - 2023/03/22 17:52:17


(1)   18/     C35 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C35 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C35 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C35 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C35 :                     ;;;               |->phase delay
(1)   23/     C35 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C35 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C35 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C35 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C35 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C35 :                     
(1)   29/     C35 :                     GETCHAR_P1:
(1)   30/     C35 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C37 :                                                     ; 
(1)   32/     C37 : 19 37                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C39 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3B : 7F 3B               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3D :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3D :                     GETCHAR_L1:
(1)   37/     C3D : 19 42               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C3F : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C40 : 4C 45                       JUN GETCHAR_L3          ;<2>
(1)   40/     C42 :                     GETCHAR_L2:
(1)   41/     C42 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C43 : 00                          NOP                     ;[1]
(1)   43/     C44 : 00                          NOP                     ;[1]
(1)   44/     C45 :                     GETCHAR_L3:
(1)   45/     C45 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C46 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C47 : 7D 3D                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     C49 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C49 : B3                  	XCH R3                  ;(1)
(1)   50/     C4A : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4C :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4C :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4C :                     GETCHAR_L4:
(1)   54/     C4C : 19 51               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C4E : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     C4F : 4C 54                       JUN GETCHAR_L6          ;<2>
(1)   57/     C51 :                     GETCHAR_L5:
(1)   58/     C51 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C52 : 00                          NOP                     ;[1]
(1)   60/     C53 : 00                          NOP                     ;[1]
(1)   61/     C54 :                     GETCHAR_L6:
(1)   62/     C54 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C55 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C56 : 7D 4C                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C58 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     C58 : B2                  	XCH R2                  ;(1)
(1)   67/     C59 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C59 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C59 :                     	;; check stop bit
(1)   70/     C59 : 19 5C                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5B : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5C :                     GETCHAR_OK:
(1)   73/     C5C : C0                  	BBL 0
(1)   74/     C5D :                                     
(1)   75/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5D :                     ;;; PUTCHAR_P1
(1)   77/     C5D :                     ;;; send the character in P1(R2, R3) to OUTPORT
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 67 - 2023/03/22 17:52:17


(1)   78/     C5D :                     ;;; 
(1)   79/     C5D :                     ;;; Input: P1(R2,R3)
(1)   80/     C5D :                     ;;; Output: ACC=0
(1)   81/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5D :                     ;;; P1 is not affected
(1)   84/     C5D :                     ;;; 
(1)   85/     C5D :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5D :                     ;;; 
(1)   87/     C5D :                     ;;; Input: P1(R2,R3)
(1)   88/     C5D :                     ;;; Output: ACC=0
(1)   89/     C5D :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5D :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5D :                     ;;; 
(1)   93/     C5D :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5D :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5D :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5D :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5D :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5D :                     
(1)   99/     C5D :                     PUTCHAR_P1:
(1)  100/     C5D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5D :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5D :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5D : [100]                	endif
(1)  104/     C5D :                     	
(1)  105/     C5D : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C5F : 2F                  	SRC P7              ; set port address
(1)  107/     C60 :                     
(1)  108/     C60 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C62 : A3                          LD R3
(1)  110/     C63 : F1                          CLC                 ; start bit is 0
(1)  111/     C64 : F5                          RAL
(1)  112/     C65 :                                     
(1)  113/     C65 :                     PUTCHAR_L1:
(1)  114/     C65 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C66 : 00                          NOP                 ;(1)
(1)  116/     C67 : 00                          NOP                 ;(1)
(1)  117/     C68 : 00                          NOP                 ;(1)
(1)  118/     C69 : 00                          NOP                 ;(1)
(1)  119/     C6A : E1                          WMP                 ;(1)
(1)  120/     C6B : F6                          RAR                 ;(1)
(1)  121/     C6C : 7D 65                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C6E :                     	
(1)  123/     C6E : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C70 : A2                          LD R2               ;(1)
(1)  125/     C71 : FA                          STC                 ;(1) stop bit is 1
(1)  126/     C72 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C73 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C74 :                     PUTCHAR_L2:
(1)  129/     C74 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C75 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C77 : 7F 77                       ISZ R15, $          ;(4)
(1)  132/     C79 : F6                          RAR                 ;(1)
(1)  133/     C7A : 7D 74                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7C :                     	
(1)  135/     C7C : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7C :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7C :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 68 - 2023/03/22 17:52:17


(1)  138/     C7C : [135]                	endif
(1)  139/     C7C :                     	
(1)  140/     C7C : C0                          BBL 0
(1)  141/     C7D :                     
(1)  142/     C7D :                     
    3309/     C7D : [3304]               	endcase
    3310/     C7D :                     
    3311/     C7D :                     ;;;---------------------------------------------------------------------------
    3312/     C7D :                     ;;; INIT_SERIAL
    3313/     C7D :                     ;;; Initialize serial port
    3314/     C7D :                     ;;;---------------------------------------------------------------------------
    3315/     C7D :                     INIT_SERIAL:
    3316/     C7D : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3317/     C7D :                     	LDM BANK_SERIAL	    ; bank of output port
    3318/     C7D :                     	DCL		    ; set port bank
    3319/     C7D : [3316]               	endif
    3320/     C7D :                     	
    3321/     C7D : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3322/     C7F : 2F                  	SRC P7		    ; set port address
    3323/     C80 : D1                  	LDM 1
    3324/     C81 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3325/     C82 :                     
    3326/     C82 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3327/     C82 :                     	LDM BANK_DEFAULT    
    3328/     C82 :                     	DCL		    ; restore bank to default
    3329/     C82 : [3326]               	endif
    3330/     C82 :                     	
    3331/     C82 : C0                  	BBL 0
    3332/     C83 :                     
    3333/     C83 :                     ;;;----------------------------------------------------------------------------
    3334/     C83 :                     ;;; PRINTHEX_P1
    3335/     C83 :                     ;;; Print 8bit register pair in HEX format
    3336/     C83 :                     ;;; PRINT HEX
    3337/     C83 :                     ;;; destroy: P6, P7
    3338/     C83 :                     ;;;----------------------------------------------------------------------------
    3339/     C83 :                     PRINTHEX_P1:
    3340/     C83 : 5B 00               	JMS PUSH_P0
    3341/     C85 : 5B 12               	JMS PUSH_P1
    3342/     C87 : (MACRO)              	LD_P0_P1
    3342/     C87 : A2                                  LD P1_HI
    3342/     C88 : B0                                  XCH P0_HI
    3342/     C89 : A3                                  LD P1_LO
    3342/     C8A : B1                                  XCH P0_LO
    3343/     C8B : A0                  	LD R0
    3344/     C8C : 5C B2               	JMS PRINT_ACC		; print upper 4bit
    3345/     C8E : A1                  	LD R1
    3346/     C8F : 5C B2               	JMS PRINT_ACC		; print lower 4bit
    3347/     C91 : 5B 43               	JMS POP_P1
    3348/     C93 : 5B 36               	JMS POP_P0
    3349/     C95 : C0                  	BBL 0
    3350/     C96 :                     
    3351/     C96 :                     ;;;---------------------------------------------------------------------------
    3352/     C96 :                     ;;; PRINT_SPC
    3353/     C96 :                     ;;; print " "
    3354/     C96 :                     ;;; destroy: ACC
    3355/     C96 :                     ;;; This routine consumes 2 PC stack
    3356/     C96 :                     ;;;---------------------------------------------------------------------------
    3357/     C96 :                     PRINT_SPC:
    3358/     C96 : 5B 12               	JMS PUSH_P1
    3359/     C98 : 22 20               	FIM P1, ' '
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/03/22 17:52:17


    3360/     C9A : 5C 5D               	JMS PUTCHAR_P1
    3361/     C9C : 4B 43               	JUN POP_P1
    3362/     C9E :                     ;;;	BBL 0
    3363/     C9E :                     
    3364/     C9E :                     ;;;---------------------------------------------------------------------------
    3365/     C9E :                     ;;; PRINT_CRLF
    3366/     C9E :                     ;;; print "\r\n"
    3367/     C9E :                     ;;; destroy: ACC
    3368/     C9E :                     ;;; This routine consumes 2 PC stack
    3369/     C9E :                     ;;;---------------------------------------------------------------------------
    3370/     C9E :                     PRINT_CRLF:
    3371/     C9E : 5B 12               	JMS PUSH_P1
    3372/     CA0 : 22 0D               	FIM P1, '\r'
    3373/     CA2 : 5C 5D               	JMS PUTCHAR_P1
    3374/     CA4 : 22 0A               	FIM P1, '\n'
    3375/     CA6 : 5C 5D               	JMS PUTCHAR_P1
    3376/     CA8 : 4B 43               	JUN POP_P1
    3377/     CAA :                     ;;;	BBL 0
    3378/     CAA :                     
    3379/     CAA :                     ;;;---------------------------------------------------------------------------
    3380/     CAA :                     ;;; PRINT_CR
    3381/     CAA :                     ;;; print "\r"
    3382/     CAA :                     ;;; destroy: P1, ACC
    3383/     CAA :                     ;;; This routine consumes 1 PC stack
    3384/     CAA :                     ;;;---------------------------------------------------------------------------
    3385/     CAA :                     PRINT_CR:
    3386/     CAA : 22 0D               	FIM P1, '\r'
    3387/     CAC : 4C 5D               	JUN PUTCHAR_P1
    3388/     CAE :                     
    3389/     CAE :                     ;;;---------------------------------------------------------------------------
    3390/     CAE :                     ;;; PRINT_LF
    3391/     CAE :                     ;;; print "\n"
    3392/     CAE :                     ;;; destroy: P1, ACC
    3393/     CAE :                     ;;; This routine consumes 1 PC stack
    3394/     CAE :                     ;;;---------------------------------------------------------------------------
    3395/     CAE :                     PRINT_LF:
    3396/     CAE : 22 0A               	FIM P1, '\n'
    3397/     CB0 : 4C 5D               	JUN PUTCHAR_P1
    3398/     CB2 :                     
    3399/     CB2 :                     ;;;---------------------------------------------------------------------------
    3400/     CB2 :                     ;;; PRINT_ACC
    3401/     CB2 :                     ;;; print contents of ACC('0'...'F') as a character
    3402/     CB2 :                     ;;; destroy: P1, P6, P7, ACC
    3403/     CB2 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3404/     CB2 :                     ;;;---------------------------------------------------------------------------
    3405/     CB2 :                     PRINT_ACC:
    3406/     CB2 : 22 30               	FIM P1, '0'
    3407/     CB4 : F1                  	CLC			; clear carry
    3408/     CB5 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3409/     CB6 : 1A BA               	JCN CN, PRINTACC_L1
    3410/     CB8 : 62                  	INC P1_HI
    3411/     CB9 : F2                  	IAC
    3412/     CBA :                     PRINTACC_L1:	
    3413/     CBA : B3                  	XCH P1_LO		; P1_LO<-ACC
    3414/     CBB : 4C 5D               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3415/     CBD :                     
    3416/     CBD :                     ;;;----------------------------------------------------------------------------
    3417/     CBD :                     ;;; INC_P1
    3418/     CBD :                     ;;; P1=P1+1
    3419/     CBD :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/03/22 17:52:17


    3420/     CBD :                     INC_P1:	
    3421/     CBD : 63                  	INC P1_LO
    3422/     CBE : A3                  	LD P1_LO
    3423/     CBF : 1C C2               	JCN ZN, INC_P1_EXIT
    3424/     CC1 : 62                  	INC P1_HI
    3425/     CC2 :                     INC_P1_EXIT:	
    3426/     CC2 : C0                  	BBL 0
    3427/     CC3 :                     
    3428/     CC3 :                     ;;;----------------------------------------------------------------------------
    3429/     CC3 :                     ;;; DEC_P1
    3430/     CC3 :                     ;;; P1=P1-1
    3431/     CC3 :                     ;;;----------------------------------------------------------------------------
    3432/     CC3 :                     DEC_P1:	
    3433/     CC3 : A3                  	LD P1_LO
    3434/     CC4 : F8                  	DAC
    3435/     CC5 : B3                  	XCH P1_LO
    3436/     CC6 : 12 CB               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3437/     CC8 : A2                  	LD P1_HI		; decrement upper 4bit
    3438/     CC9 : F8                  	DAC
    3439/     CCA : B2                  	XCH P1_HI
    3440/     CCB :                     DEC_P1_EXIT:	
    3441/     CCB : C0                  	BBL 0
    3442/     CCC :                     	
    3443/     CCC :                     ;;;----------------------------------------------------------------------------
    3444/     CCC :                     ;;; ISALPHA_P1
    3445/     CCC :                     ;;; check P1 is an alphabet as a ascii character
    3446/     CCC :                     ;;; return: ACC=0 if P1 is not an alphabet
    3447/     CCC :                     ;;;	    ACC=1 if P1 is an alphabet
    3448/     CCC :                     ;;; destroy: P7
    3449/     CCC :                     ;;;----------------------------------------------------------------------------
    3450/     CCC :                     ISALPHA_P1:
    3451/     CCC :                     ISALPHA_L1:
    3452/     CCC : 2E 41               	FIM P7, 'A'
    3453/     CCE : 5D 20               	JMS CMP_P1P7
    3454/     CD0 : 12 D3               	JCN C, ISALPHA_L10
    3455/     CD2 : C0                  	BBL 0			; P1<'A'
    3456/     CD3 :                     ISALPHA_L10:
    3457/     CD3 : 2E 5B               	FIM P7, 'Z'+1
    3458/     CD5 : 5D 20               	JMS CMP_P1P7
    3459/     CD7 : 12 DA               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3460/     CD9 : C1                  	BBL 1			; 'A'<=P1<='Z'
    3461/     CDA :                     ISALPHA_L2:
    3462/     CDA : 2E 61               	FIM P7, 'a'
    3463/     CDC : 5D 20               	JMS CMP_P1P7
    3464/     CDE : 12 E1               	JCN C, ISALPHA_L20
    3465/     CE0 : C0                  	BBL 0			; P1<'a'
    3466/     CE1 :                     ISALPHA_L20:	
    3467/     CE1 : 2E 7B               	FIM P7, 'z'+1
    3468/     CE3 : 5D 20               	JMS CMP_P1P7
    3469/     CE5 : 12 E8               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3470/     CE7 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3471/     CE8 :                     ISALPHA_FALSE:
    3472/     CE8 : C0                  	BBL 0
    3473/     CE9 :                     
    3474/     CE9 :                     ;;;----------------------------------------------------------------------------
    3475/     CE9 :                     ;;; ISHEX_P1
    3476/     CE9 :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3477/     CE9 :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3478/     CE9 :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3479/     CE9 :                     ;;; destroy: P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/03/22 17:52:17


    3480/     CE9 :                     ;;;----------------------------------------------------------------------------
    3481/     CE9 :                     ISHEX_P1:
    3482/     CE9 : 2E 30               	FIM P7, '0'
    3483/     CEB : 5D 20               	JMS CMP_P1P7
    3484/     CED : 12 F0               	JCN C, ISHEX_L00
    3485/     CEF : C0                  	BBL 0			; P1<'0'
    3486/     CF0 :                     ISHEX_L00:	
    3487/     CF0 : 2E 3A               	FIM P7, '9'+1
    3488/     CF2 : 5D 20               	JMS CMP_P1P7
    3489/     CF4 : 12 F7               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3490/     CF6 : C1                  	BBL 1			; '0'<=P1<='9'
    3491/     CF7 :                     ISHEX_L1:
    3492/     CF7 : 2E 41               	FIM P7, 'A'
    3493/     CF9 : 5D 20               	JMS CMP_P1P7
    3494/     CFB : 12 FE               	JCN C, ISHEX_L10
    3495/     CFD : C0                  	BBL 0			; P1<'A'
    3496/     CFE :                     ISHEX_L10:
    3497/     CFE : 2E 47               	FIM P7, 'F'+1
    3498/     D00 : 5D 20               	JMS CMP_P1P7
    3499/     D02 : 12 05               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3500/     D04 : C1                  	BBL 1			; 'A'<=P1<='F'
    3501/     D05 :                     ISHEX_L2:
    3502/     D05 : 2E 61               	FIM P7, 'a'
    3503/     D07 : 5D 20               	JMS CMP_P1P7
    3504/     D09 : 12 0C               	JCN C, ISHEX_L20
    3505/     D0B : C0                  	BBL 0			; P1<'a'
    3506/     D0C :                     ISHEX_L20:	
    3507/     D0C : 2E 67               	FIM P7, 'f'+1
    3508/     D0E : 5D 20               	JMS CMP_P1P7
    3509/     D10 : 12 13               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3510/     D12 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3511/     D13 :                     ISHEX_FALSE:
    3512/     D13 : C0                  	BBL 0
    3513/     D14 :                     
    3514/     D14 :                     ;;;---------------------------------------------------------------------------
    3515/     D14 :                     ;;; CTOI_P1
    3516/     D14 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3517/     D14 :                     ;;; no error check
    3518/     D14 :                     ;;; input: P1(R2R3)
    3519/     D14 :                     ;;; output: P1_LO, (P1_HI=0)
    3520/     D14 :                     ;;;---------------------------------------------------------------------------
    3521/     D14 :                     CTOI_P1:
    3522/     D14 : F0                  	CLB
    3523/     D15 : D3                  	LDM 3
    3524/     D16 : 92                  	SUB P1_HI
    3525/     D17 : 14 1D               	JCN Z, CTOI_09	; check upper 4bit
    3526/     D19 : F0                  	CLB
    3527/     D1A : D9                  	LDM 9
    3528/     D1B : 83                  	ADD P1_LO
    3529/     D1C : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3530/     D1D :                     CTOI_09:
    3531/     D1D : F0                  	CLB
    3532/     D1E : B2                  	XCH R2			; R2 = 0
    3533/     D1F : C0                  	BBL 0
    3534/     D20 :                     	
    3535/     D20 :                     ;;;---------------------------------------------------------------------------
    3536/     D20 :                     ;;; CMP_P1P7
    3537/     D20 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3538/     D20 :                     ;;; input: P1, P7
    3539/     D20 :                     ;;; output: ACC=1,CY=0 if P1<P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/03/22 17:52:17


    3540/     D20 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3541/     D20 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3542/     D20 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3543/     D20 :                     ;;;---------------------------------------------------------------------------
    3544/     D20 :                     CMP_P1P7:
    3545/     D20 : F0                  	CLB
    3546/     D21 : A2                  	LD R2			
    3547/     D22 : 9E                  	SUB R14			;R2-R14
    3548/     D23 : 14 26               	JCN Z, CMP17_L1		; jump if R2==R14
    3549/     D25 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3550/     D26 :                     CMP17_L1:	
    3551/     D26 : F0                  	CLB
    3552/     D27 : A3                  	LD R3
    3553/     D28 : 9F                  	SUB R15			;R3-R15
    3554/     D29 : 14 2C               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3555/     D2B : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3556/     D2C :                     				; if P1>P7 then ACC=1, CY=1
    3557/     D2C :                     CMP17_EXIT01:
    3558/     D2C : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3559/     D2D :                     	
    3560/     D2D :                     ;;;---------------------------------------------------------------------------
    3561/     D2D :                      ;;; ISZEROORNOT_P1
    3562/     D2D :                     ;;; check P1 is zero or not
    3563/     D2D :                     ;;; Return 0 if P1 is 0
    3564/     D2D :                     ;;; return: ACC=0 if P1 == 0
    3565/     D2D :                     ;;;	    ACC=1 if P1 != 0
    3566/     D2D :                     ;;;---------------------------------------------------------------------------
    3567/     D2D :                     ISZEROORNOT_P1:
    3568/     D2D : A3                  	LD P1_LO
    3569/     D2E : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3570/     D30 : A2                  	LD P1_HI
    3571/     D31 : 1C 34               	JCN ZN, ISZEROORNOT_EXIT1
    3572/     D33 : C0                  	BBL 0
    3573/     D34 :                     ISZEROORNOT_EXIT1:
    3574/     D34 : C1                  	BBL 1
    3575/     D35 :                     
    3576/     D35 :                     ;;;---------------------------------------------------------------------------
    3577/     D35 :                     ;;; ISCRLF_P1
    3578/     D35 :                     ;;; check if P1=='\r' | P1=='\n'
    3579/     D35 :                     ;;; input: P0
    3580/     D35 :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3581/     D35 :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3582/     D35 :                     ;;;---------------------------------------------------------------------------
    3583/     D35 :                     ISCRLF_P1:
    3584/     D35 : A2                  	LD R2
    3585/     D36 : 1C 42               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3586/     D38 : F1                  	CLC
    3587/     D39 : DD                  	LDM '\r'
    3588/     D3A : 93                  	SUB R3
    3589/     D3B : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3590/     D3D : F1                  	CLC
    3591/     D3E : DA                  	LDM '\n'
    3592/     D3F : 93                  	SUB R3
    3593/     D40 : 14 43               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3594/     D42 :                     ISCRLF_EXIT0:
    3595/     D42 : C0                  	BBL 0
    3596/     D43 :                     ISCRLF_EXIT1:
    3597/     D43 : C1                  	BBL 1
    3598/     D44 :                     
    3599/     D44 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/03/22 17:52:17


    3600/     D44 :                     ;;; TOUPPER_P1
    3601/     D44 :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3602/     D44 :                     ;;;---------------------------------------------------------------------------
    3603/     D44 :                     TOUPPER_P1:
    3604/     D44 : 5C CC               	JMS ISALPHA_P1
    3605/     D46 : 14 4F               	JCN Z, TOUPPER_P1_EXIT
    3606/     D48 : A2                  	LD P1_HI
    3607/     D49 : F6                  	RAR
    3608/     D4A : F6                  	RAR
    3609/     D4B : F1                  	CLC
    3610/     D4C : F5                  	RAL
    3611/     D4D : F5                  	RAL
    3612/     D4E : B2                  	XCH P1_HI
    3613/     D4F :                     TOUPPER_P1_EXIT:
    3614/     D4F : C0                  	BBL 0
    3615/     D50 :                     
    3616/     D50 :                     ;;;---------------------------------------------------------------------------
    3617/     D50 :                     ;;; PRINT_DATARAM_P0
    3618/     D50 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3619/     D50 :                     ;;;---------------------------------------------------------------------------
    3620/     D50 :                     PRINT_DATARAM_P0:
    3621/     D50 : A0                  	LD P0_HI		; PRINT ADDDR
    3622/     D51 : 5C B2               	JMS PRINT_ACC
    3623/     D53 : A1                  	LD P0_LO
    3624/     D54 : 5C B2               	JMS PRINT_ACC
    3625/     D56 : 22 3A               	FIM P1, ':'
    3626/     D58 : 5C 5D               	JMS PUTCHAR_P1
    3627/     D5A :                     CMDDD_L2:
    3628/     D5A : F0                  	CLB		; PRINT data characters
    3629/     D5B : 21                  	SRC P0		; set address
    3630/     D5C : E9                  	RDM		; read data memory
    3631/     D5D : 5C B2               	JMS PRINT_ACC
    3632/     D5F : 71 5A               	ISZ P0_LO, CMDDD_L2
    3633/     D61 :                     
    3634/     D61 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3635/     D63 : 5C 5D               	JMS PUTCHAR_P1
    3636/     D65 : 21                  	SRC P0		; set address
    3637/     D66 : EC                  	RD0
    3638/     D67 : B2                  	XCH P1_HI
    3639/     D68 : ED                  	RD1
    3640/     D69 : B3                  	XCH P1_LO
    3641/     D6A : 5C 83               	JMS PRINTHEX_P1
    3642/     D6C : 21                  	SRC P0		; set address
    3643/     D6D : EE                  	RD2
    3644/     D6E : B2                  	XCH P1_HI
    3645/     D6F : EF                  	RD3
    3646/     D70 : B3                  	XCH P1_LO
    3647/     D71 : 5C 83               	JMS PRINTHEX_P1
    3648/     D73 : 4C 9E               	JUN PRINT_CRLF
    3649/     D75 :                     ;;;	BBL 0
    3650/     D75 :                     
    3651/     D75 :                     ;;;----------------------------------------------------------------------------
    3652/     D75 :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3653/     D75 :                     ;;; The string data sould be located in the same page as the print routine.
    3654/     D75 :                     ;;;----------------------------------------------------------------------------
    3655/     E00 :                     	org 0E00H
    3656/     E00 :                     ;;;----------------------------------------------------------------------------
    3657/     E00 :                     ;;; PRINTSTR_P0
    3658/     E00 :                     ;;; Print a string with a delimiter 00H
    3659/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/03/22 17:52:17


    3660/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3661/     E00 :                     ;;;----------------------------------------------------------------------------
    3662/     E00 :                     PRINTSTR_P0:
    3663/     E00 : 5B 00               	JMS PUSH_P0
    3664/     E02 : 5B 12               	JMS PUSH_P1
    3665/     E04 :                     PRINTSTRP0_LOOP:
    3666/     E04 : 32                  	FIN P1			; P1=(P0)
    3667/     E05 : A2                  	LD P1_HI
    3668/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3669/     E08 : A3                  	LD P1_LO
    3670/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3671/     E0B :                     PRINTSTRP0_PUT:
    3672/     E0B : 5C 5D               	JMS PUTCHAR_P1		; putchar(P1)
    3673/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3674/     E0F : 60                  	INC P0_HI
    3675/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3676/     E12 :                     PRINTSTRP0_EXIT:
    3677/     E12 : 5B 43               	JMS POP_P1
    3678/     E14 : 4B 36               	JUN POP_P0
    3679/     E16 :                     ;;;	BBL 0
    3680/     E16 :                     		
    3681/     E16 :                     	
    3682/     E16 :                     ;;;----------------------------------------------------------------------------
    3683/     E16 :                     ;;; MUL16_P2P3
    3684/     E16 :                     ;;; P2P3 = P2P3*16
    3685/     E16 :                     ;;;----------------------------------------------------------------------------
    3686/     E16 :                     MUL16_P2P3:	
    3687/     E16 : A5                  	LD R5
    3688/     E17 : B4                  	XCH R4			; 100'->1000'
    3689/     E18 : A6                  	LD R6
    3690/     E19 : B5                  	XCH R5			; 10'->100'
    3691/     E1A : A7                  	LD R7
    3692/     E1B : B6                  	XCH R6			; 1'->10'
    3693/     E1C : F0                  	CLB
    3694/     E1D : B7                  	XCH R7			; 0->1'
    3695/     E1E : C0                  	BBL 0
    3696/     E1F :                     
    3697/     E1F :                     ;;;----------------------------------------------------------------------------
    3698/     E1F :                     ;;; String data
    3699/     E1F :                     ;;;----------------------------------------------------------------------------
    3700/     E1F :                     
    3701/     E1F :                     STR_OMSG:
    3702/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
    3703/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3704/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3705/     E47 :                     STR_EMU_MESSAGE:
    3706/     E47 : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 1.0\r\n", 0
              E4D : 20 45 6D 75 6C 61 
              E53 : 74 6F 72 20 6F 6E 
              E59 : 20 34 30 30 34 20 
              E5F : 56 65 72 20 31 2E 
              E65 : 30 0D 0A 00       
    3707/     E69 :                     
    3708/     E69 :                     STR_EMU_REG:
    3709/     E69 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/03/22 17:52:17


              E6F : 20 20 42 43 20 20 
              E75 : 20 44 45 20 20 20 
              E7B : 48 4C 20 20 20 53 
              E81 : 50 20 20 20 50 43 
              E87 : 20 28 2B 30 20 2B 
              E8D : 31 20 2B 32 29 42 
              E93 : 43 29 44 45 29 48 
              E99 : 4C 29 53 50 20 2B 
              E9F : 31 29 0D 0A 00    
    3710/     EA4 :                     STR_EMU_HLT:
    3711/     EA4 : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              EAA : 0A 00             
    3712/     EAC :                     ;;; strings for register command of 4004 monitor
    3713/     EAC :                     ;;; STR_REG0:
    3714/     EAC :                     ;;;	data "AC	SP1111\r\n", 0
    3715/     EAC :                     ;;; STR_REG1:
    3716/     EAC :                     ;;;	data "CY01234567890123\r\n", 0
    3717/     EAC :                     ;;; STR_DATAREG:
    3718/     EAC :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
    3719/     EAC :                     
    3720/     EAC :                     STR_CMDERR:
    3721/     EAC : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3722/     EB0 :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3723/     EB0 : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              EB6 : 41 43 45 0D 0A 00 
    3724/     EBC :                     STR_ERROR_LOADCOMMAND:
    3725/     EBC : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              EC2 : 45 52 52 4F 52 0D 
              EC8 : 0A 00             
    3726/     ECA :                     
    3727/     ECA :                     ;;;---------------------------------------------------------------------------
    3728/     ECA :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3729/     ECA :                     ;;;---------------------------------------------------------------------------
    3730/     ECA :                     ;;; READPM_P0
    3731/     ECA :                     ;;; P1 = (P0)
    3732/     ECA :                     ;;; input: P0
    3733/     ECA :                     ;;; output: P1
    3734/     ECA :                     ;;;---------------------------------------------------------------------------
    3735/     ECA :                     ;;;	org 0F7EH
    3736/     ECA :                     ;;; PM_READ_P0_P1:
    3737/     ECA : 32                  	FIN P1
    3738/     ECB : C0                  	BBL 0
    3739/     ECC :                     
    3740/     ECC :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/03/22 17:52:17


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4D3 C |  ACI_P1_NOCARRY :               4D9 C |
 ADD_REG16P0_REG16P1 :          87B C |  ADD_REG8P0_P1 :                763 C |
 ADI_P1 :                       488 C |  AND67_L1 :                     686 C |
 AND67_L2 :                     692 C |  AND67_L3 :                     69E C |
 AND67_L4 :                     6A7 C |  AND_P1_P2 :                    6A8 C |
 AND_R6_R7 :                    67C C |  ANI_P1 :                       579 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  CALL_IF0 :                     4B2 C |
 CALL_IF1 :                     4AB C |  CALL_P2P3 :                    4C5 C |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT0 :                 0 - |
 CHIP_PMSELECT1 :                40 - |  CHIP_RAM0 :                      0 - |
 CHIP_RAM1 :                     40 - | *CHIP_RAM2 :                     80 - |
 CHIP_RAM3 :                    0C0 - |  CHIP_SERIAL :                  0C0 - |
 CMDDD_L1 :                     117 C |  CMDDD_L2 :                    0D5A C |
 CMDDL_L0 :                     0D3 C |  CMDDL_L1 :                     0DB C |
*CMDDL_NEXT :                   0E5 C |  CMDDP_EXIT :                   0C3 C |
 CMDDP_L0 :                      99 C |  CMDDP_L1 :                     0B1 C |
 CMDD_L1 :                      0F7 C |  CMDD_L2 :                      0FF C |
 CMDD_L3 :                      107 C |  CMDH_EXIT :                    13A C |
 CMDH_SET :                     130 C |  CMDL_CONTINUE :                19A C |
 CMDL_ERROR :                   188 C |  CMDL_EXIT :                    1B2 C |
 CMDL_L0 :                      15A C |  CMDL_L1 :                      162 C |
 CMDL_L2 :                      180 C |  CMDL_L3 :                      1A2 C |
 CMDL_L5 :                      1B0 C |  CMDL_READLOOP :                192 C |
 CMDL_START :                   148 C |  CMDPMC_BANKLOOP :              1BC C |
 CMDPMC_L1 :                    1C6 C |  CMD_LOOP :                      2D C |
 CMP17_EXIT01 :                0D2C C |  CMP17_L1 :                    0D26 C |
 CMP_P1P7 :                    0D20 C |  CMP_REG16P0_REG16P1 :          857 C |
 CODE_003F :                    1FF C |  CODE_007F :                    1F8 C |
 CODE_00H :                     27F C |  CODE_01H :                     280 C |
 CODE_02H :                     28C C |  CODE_03H :                     294 C |
 CODE_04H :                     298 C |  CODE_05H :                     29C C |
 CODE_06H :                     2A0 C |  CODE_07H :                     2A4 C |
 CODE_08H :                     2B4 C |  CODE_09H :                     2B5 C |
 CODE_0AH :                     2BD C |  CODE_0BH :                     2C7 C |
 CODE_0CH :                     2CB C |  CODE_0DH :                     2CF C |
 CODE_0EH :                     2D3 C |  CODE_0FH :                     2D7 C |
 CODE_10H :                     2E7 C |  CODE_11H :                     2E8 C |
 CODE_12H :                     2F4 C |  CODE_13H :                     2FC C |
 CODE_14H :                     300 C |  CODE_15H :                     304 C |
 CODE_16H :                     308 C |  CODE_17H :                     30C C |
 CODE_18H :                     31C C |  CODE_19H :                     31D C |
 CODE_1AH :                     325 C |  CODE_1BH :                     32F C |
 CODE_1CH :                     333 C |  CODE_1DH :                     337 C |
 CODE_1EH :                     33B C |  CODE_1FH :                     33F C |
 CODE_20H :                     34F C |  CODE_21H :                     350 C |
 CODE_22H :                     35C C |  CODE_23H :                     37A C |
 CODE_24H :                     37E C |  CODE_25H :                     382 C |
 CODE_26H :                     386 C |  CODE_27H :                     38A C |
 CODE_28H :                     398 C |  CODE_29H :                     399 C |
 CODE_2AH :                     3A1 C |  CODE_2BH :                     3BB C |
 CODE_2CH :                     3BF C |  CODE_2DH :                     3C3 C |
 CODE_2EH :                     3C7 C |  CODE_2FH :                     3CB C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/03/22 17:52:17


 CODE_30H :                     3D7 C |  CODE_31H :                     3D8 C |
 CODE_32H :                     3E4 C |  CODE_33H :                     3F8 C |
 CODE_34H :                     3FC C |  CODE_35H :                     408 C |
 CODE_36H :                     414 C |  CODE_37H :                     41A C |
 CODE_38H :                     41C C |  CODE_39H :                     41D C |
 CODE_3AH :                     425 C |  CODE_3BH :                     439 C |
 CODE_3CH :                     43D C |  CODE_3DH :                     443 C |
 CODE_3EH :                     449 C |  CODE_3FH :                     44F C |
 CODE_407F :                    215 C |  CODE_407F_MOV :                23A C |
 CODE_76H :                     271 C |  CODE_76H_EXIT :                27D C |
 CODE_80BF :                    215 C |  CODE_80BF_ARITH_LOGIC :        262 C |
 CODE_80FF :                    210 C |  CODE_C0FF :                    207 C |
 CODE_C0H :                     454 C |  CODE_C1H :                     458 C |
 CODE_C2H :                     45E C |  CODE_C3H :                     46E C |
 CODE_C4H :                     47C C |  CODE_C5H :                     480 C |
 CODE_C6H :                     486 C |  CODE_C7H :                     490 C |
 CODE_C8H :                     496 C |  CODE_C9H :                     49E C |
 CODE_CAH :                     4A4 C |  CODE_CALL :                    4B9 C |
 CODE_CBH :                     4A8 C |  CODE_CCH :                     4A9 C |
 CODE_CDH :                     4B9 C |  CODE_CEH :                     4D1 C |
 CODE_CFH :                     4E1 C |  CODE_D0H :                     4E7 C |
 CODE_D1H :                     4EB C |  CODE_D2H :                     4F1 C |
 CODE_D3H :                     4F5 C |  CODE_D4H :                     4F9 C |
 CODE_D5H :                     4FD C |  CODE_D6H :                     503 C |
 CODE_D7H :                     50D C |  CODE_D8H :                     513 C |
 CODE_D9H :                     517 C |  CODE_DAH :                     518 C |
 CODE_DBH :                     51C C |  CODE_DCH :                     520 C |
 CODE_DCR :                     445 C |  CODE_DDH :                     524 C |
 CODE_DEH :                     525 C |  CODE_DFH :                     535 C |
 CODE_E0H :                     53B C |  CODE_E1H :                     53F C |
 CODE_E2H :                     545 C |  CODE_E3H :                     549 C |
 CODE_E4H :                     56D C |  CODE_E5H :                     571 C |
 CODE_E6H :                     577 C |  CODE_E7H :                     589 C |
 CODE_E8H :                     58F C |  CODE_E9H :                     593 C |
 CODE_EAH :                     597 C |  CODE_EBH :                     59B C |
 CODE_ECH :                     5A9 C |  CODE_EDH :                     5AD C |
 CODE_EEH :                     5AE C |  CODE_EFH :                     5C0 C |
 CODE_F0H :                     5C6 C |  CODE_F1H :                     5CA C |
 CODE_F2H :                     5D8 C |  CODE_F3H :                     5DC C |
 CODE_F4H :                     5DD C |  CODE_F5H :                     5E1 C |
 CODE_F6H :                     5F3 C |  CODE_F7H :                     605 C |
 CODE_F8H :                     60B C |  CODE_F9H :                     60F C |
 CODE_FAH :                     615 C |  CODE_FBH :                     619 C |
 CODE_FCH :                     61A C |  CODE_FDH :                     61E C |
 CODE_FEH :                     61F C |  CODE_FFH :                     62F C |
 CODE_INR :                     43F C |  CODE_JMP :                     46E C |
 CODE_MOV_L1 :                  242 C |  CODE_MOV_WRITE_M_TO_PM :       25E C |
 CODE_MVI :                     44B C |  CODE_NOT_NOP :                 207 C |
 CODE_POP_REG8P2P3 :            5CE C |  CODE_PUSH_REG8P2P3 :           5E5 C |
 CODE_RET :                     49E C |  COMMAND_C :                    1BA C |
 COMMAND_D :                    0E7 C |  COMMAND_DD :                   10D C |
 COMMAND_DL :                   0C9 C |  COMMAND_DP :                    8D C |
 COMMAND_E :                    1D4 C |  COMMAND_G :                    126 C |
 COMMAND_H :                    128 C |  COMMAND_L :                    148 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CPI_P1 :                       621 C |  CTOI_09 :                     0D1D C |
 CTOI_P1 :                     0D14 C | *DATE :                "2023/03/22" - |
 DEC_P1 :                      0CC3 C |  DEC_P1_EXIT :                 0CCB C |
 DEC_REG16P0 :                  846 C |  DEC_REG8P1 :                   795 C |
 EMULATE_IN_P1 :                8C9 C |  EMULATE_OUT_P1 :               8B1 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/03/22 17:52:17


 EMU_EXEC :                     1E8 C |  EMU_EXIT :                     1EC C |
 EMU_IN_EXIT :                  8EC C |  EMU_IN_P1_L1 :                 8D1 C |
 EMU_IN_P1_L2 :                 8D9 C |  EMU_IN_UARTRC :                8E6 C |
 EMU_IN_UARTRC_VALUE :          0FF - |  EMU_IN_UARTRD :                8DA C |
 EMU_LOOP :                     1D8 C |  EMU_OUT_P1_L1 :                8B9 C |
 EMU_OUT_P1_L2 :                8C1 C |  EMU_OUT_UARTRC :               8C8 C |
 EMU_OUT_UARTRD :               8C2 C |  EMU_PRINT_REGISTERS :          8F2 C |
*EMU_START :                    1D4 C |  EMU_UARTRC :                     0 - |
 EMU_UARTRD :                     1 - |  EMU_USE_DAA :                    0 - |
 EMU_USE_FLAG_P :                 0 - |  EXEC_CODE :                    1EE C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                  0C3D C |  GETCHAR_L2 :                  0C42 C |
 GETCHAR_L3 :                  0C45 C |  GETCHAR_L4 :                  0C4C C |
 GETCHAR_L5 :                  0C51 C |  GETCHAR_L6 :                  0C54 C |
 GETCHAR_OK :                  0C5C C |  GETCHAR_P1 :                  0C35 C |
 GETFLAG_C :                    648 C |  GETFLAG_C_1 :                  650 C |
 GETFLAG_P :                    651 C |  GETFLAG_S :                    63F C |
 GETFLAG_S_EXIT1 :              647 C |  GETFLAG_Z :                    635 C |
 GETFLAG_Z_EXIT1 :              63E C |  GETHEXBYTE_L1 :               0C1D C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C16 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C2F C |  GETHEX_EXIT :                  8AD C |
 GETHEX_LOOP :                  89F C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 890 C |
 GETHEX_START :                 89B C |  GETLINE_BS :                  0BE0 C |
 GETLINE_DO_BS :               0BE8 C |  GETLINE_EXIT :                0BFC C |
 GETLINE_INSERTCHAR :          0BF4 C |  GETLINE_L1 :                  0BD8 C |
*GETLINE_L1_NEXT :             0BEA C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                228 C |
 GETSRC_SAVE_SRCVALUE :         22E C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBD C |  INC_P1_EXIT :                 0CC2 C |
 INC_REG16P0 :                  836 C |  INC_REG8P1 :                   774 C |
 INIT_SERIAL :                 0C7D C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CE8 C | *ISALPHA_L1 :                  0CCC C |
 ISALPHA_L10 :                 0CD3 C |  ISALPHA_L2 :                  0CDA C |
 ISALPHA_L20 :                 0CE1 C |  ISALPHA_P1 :                  0CCC C |
 ISCRLF_EXIT0 :                0D42 C |  ISCRLF_EXIT1 :                0D43 C |
 ISCRLF_P1 :                   0D35 C |  ISHEX_FALSE :                 0D13 C |
 ISHEX_L00 :                   0CF0 C |  ISHEX_L1 :                    0CF7 C |
 ISHEX_L10 :                   0CFE C |  ISHEX_L2 :                    0D05 C |
 ISHEX_L20 :                   0D0C C |  ISHEX_P1 :                    0CE9 C |
 ISZEROORNOT_EXIT1 :           0D34 C |  ISZEROORNOT_P1 :              0D2D C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      460 C |  JMP_IF1 :                      467 C |
*L0 :                            3F C |  L1 :                            47 C |
 L10 :                           87 C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 L6_CONTINUOUS :                 7A C |  L6_SETMODE :                    7D C |
 LDREG16P6P7_LOOP :             819 C |  LD_P1_PM16REG16P0_INCREMENT : 0B5D C |
 LD_P1_REG8P0 :                 7D8 C |  LD_P1_REG8P1 :                 7DE C |
 LD_P1_REG8P2 :                 7E4 C |  LD_P1_REG8P3 :                 7EA C |
 LD_P1_REG8P7 :                 7D0 C |  LD_P2P3_REG16P1 :              822 C |
 LD_PM16REG16P0_P1 :           0B81 C |  LD_REG16P0_P2P3 :              75D C |
 LD_REG16P0_REG16P1 :           733 C |  LD_REG16P1_P2P3 :              757 C |
 LD_REG16P1_REG16P0 :           73D C |  LD_REG16P6_REG16P7 :           817 C |
 LD_REG16P7_P2P3 :              747 C |  LD_REG8P0_P1 :                 7B8 C |
*LD_REG8P0_REG8P1 :             7A5 C |  LD_REG8P2_P1 :                 7C4 C |
 LD_REG8P3_P1 :                 7BE C |  LD_REG8P6_REG8P7 :             7AD C |
 LD_REG8P7_P1 :                 7C8 C | *LISTON :                         1 - |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/03/22 17:52:17


*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                  0E16 C | *NESTMAX :                      100 - |
 OR67_L1 :                      711 C |  OR67_L2 :                      71D C |
 OR67_L3 :                      729 C |  OR67_L4 :                      732 C |
 ORI_P1 :                       5F5 C |  OR_P1_P2 :                     6F6 C |
 OR_R6_R7 :                     707 C | *PADDING :                        1 - |
 PM16_LINEBUF :                0D00 - | *PM16_MEMSTART :                  0 - |
 PM_INIT_BANK :                0BAD C |  PM_INIT_HLOOP :                  9 C |
 PM_INIT_LLOOP :                 0B C |  PM_RAM_START :                0F00 - |
 PM_READ_P0_P1 :               0FFE - |  PM_SELECTPMB_P1 :             0BB9 C |
 PM_WRITE_P0_P1 :              0BA1 C |  PM_WRITE_P6_P7 :              0BA7 C |
 POP_P0 :                      0B36 C |  POP_P1 :                      0B43 C |
 POP_P2 :                      0B50 C |  PRINTACC_L1 :                 0CBA C |
 PRINTHEX_P1 :                 0C83 C |  PRINTHEX_REG16P1 :             7F0 C |
 PRINTSTRP0_EXIT :             0E12 C |  PRINTSTRP0_LOOP :             0E04 C |
 PRINTSTRP0_PUT :              0E0B C |  PRINTSTR_EXIT :               0C14 C |
 PRINTSTR_LOOP :               0C0A C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM16REG16P0 :        0C08 C |  PRINT_ACC :                   0CB2 C |
 PRINT_CR :                    0CAA C |  PRINT_CRLF :                  0C9E C |
 PRINT_DATARAM_P0 :            0D50 C |  PRINT_LF :                    0CAE C |
 PRINT_SPC :                   0C96 C |  PUSH_P0 :                     0B00 C |
 PUSH_P1 :                     0B12 C |  PUSH_P2 :                     0B24 C |
 PUTCHAR_L1 :                  0C65 C |  PUTCHAR_L2 :                  0C74 C |
 PUTCHAR_P1 :                  0C5D C |  RAM23TYPE :               "4002-2" - |
 REG16_ADDR :                    1C - |  REG16_ADD_LOOP :               882 C |
 REG16_BC :                      0C - |  REG16_CMP_EXIT0 :              87A C |
 REG16_CMP_LOOP :               860 C |  REG16_CMP_NEXT :               86D C |
 REG16_DE :                       8 - |  REG16_DEC_EXIT :               854 C |
 REG16_DEC_LOOP :               84B C |  REG16_HL :                       4 - |
 REG16_INC_EXIT :               843 C |  REG16_INC_LOOP :               83A C |
 REG16_MON_ADDR :                2C - |  REG16_MON_INDEX :               28 - |
*REG16_MON_PMBANK :              34 - |  REG16_MON_TMP :                 30 - |
 REG16_PC :                      14 - |  REG16_SP :                      18 - |
*REG16_STACK_40H :               40 - | *REG16_STACK_7CH :               7C - |
 REG4_EMU_STEP :                 20 - |  REG4_FLAG_1P1C :                10 - |
 REG4_FLAG_SZBH :                11 - |  REG8_A :                         0 - |
 REG8_ADDRH :                    1E - |  REG8_ADDRL :                    1C - |
 REG8_B :                        0E - |  REG8_C :                        0C - |
 REG8_D :                        0A - |  REG8_DEC_EXIT :                7A4 C |
 REG8_E :                         8 - |  REG8_FLAG :                     10 - |
 REG8_H :                         6 - |  REG8_INC_EXIT :                783 C |
 REG8_L :                         4 - |  REG8_M :                         2 - |
 REG8_MON_MEMSPACE :             38 - | *REG8_MON_RESERVED :             3A - |
 REG8_PCH :                      16 - |  REG8_PCL :                      14 - |
 REG8_SPH :                      1A - |  REG8_SPL :                      18 - |
 REG8_SRC :                      12 - | *RELAXED :                        0 - |
 RET_IF0 :                      49B C |  RET_IF1 :                      498 C |
 SBI_P1 :                       527 C |  SBI_P1_NOCARRY :               52D C |
 SETFLAG_C_0 :                  654 C |  SETFLAG_C_1 :                  65D C |
 SETFLAG_C_CY :                 652 C |  SETFLAG_ZSP_P1 :               66C C |
 SETFLAG_ZSP_REG8P0 :           666 C |  SETFLAG_ZSP_REG8P1 :           66A C |
 STACK_INIT :                    80 - |  STR_CMDERR :                  0EAC C |
 STR_EMU_HLT :                 0EA4 C |  STR_EMU_MESSAGE :             0E47 C |
 STR_EMU_REG :                 0E69 C |  STR_ERROR_LOADCOMMAND :       0EBC C |
 STR_ERROR_UNKNOWN_MEMSPACE :  0EB0 C |  STR_OMSG :                    0E1F C |
 STR_VFD_INIT :                0E42 C |  SUB_REG8P0_P1 :                784 C |
 SUI_P1 :                       505 C | *TIME :                  "17:52:17" - |
 TOUPPER_P1 :                  0D44 C |  TOUPPER_P1_EXIT :             0D4F C |
*TRUE :                           1 - | *VERSION :                     142F - |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/03/22 17:52:17


 XOR67_L1 :                     6C3 C |  XOR67_L2 :                     6CF C |
 XOR67_L3 :                     6DB C |  XOR67_L4 :                     6E4 C |
 XOR_P1_P2 :                    6E5 C |  XOR_R6_R7 :                    6B9 C |
 XRI_P1 :                       5B0 C |

    477 symbols
     38 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/03/22 17:52:17


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/03/22 17:52:17


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_ACC_REG4P7                        
LD_CNT_P1                             | LD_P0_P1                             
LD_P0_P3                              | LD_P1_CNT                            
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P2_P1                             
LD_P2_P3                              | LD_P3_P0                             
LD_P3_P1                              | LD_P3_P2                             
LD_P6_P0                              | LD_P6_P1                             
LD_P6_SP                              | LD_P7_P0                             
LD_P7_P1                              | LD_P7_P2                             
LD_P7_P3                              | LD_REG4P7_ACC                        
POPP                                  | PUSHP                                
SETFLAG_SUB_0                         | SETFLAG_SUB_1                        

     26 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/03/22 17:52:17


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 84 - 2023/03/22 17:52:17


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4129 lines source file
   4462 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
