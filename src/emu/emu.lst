 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 1 - 2023/04/16 11:22:22


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with 8080 emulator on 4004 (emu8080)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/04/16
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004	; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc"	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo	function x, ((x)&255)
(1)    6/       0 :                     up	function x, (((x)>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop	function x, (16-(x))
(1)   13/       0 :                     loops	function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11	reg RB
(1)   22/       0 : =R12                 R12	reg RC
(1)   23/       0 : =R13                 R13	reg RD
(1)   24/       0 : =R14                 R14	reg RE
(1)   25/       0 : =R15                 R15	reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0	reg R0R1
(1)   29/       0 : =R1P                 P1	reg R2R3
(1)   30/       0 : =R2P                 P2	reg R4R5
(1)   31/       0 : =R3P                 P3	reg R6R7
(1)   32/       0 : =R4P                 P4	reg R8R9
(1)   33/       0 : =R5P                 P5	reg RARB
(1)   34/       0 : =R6P                 P6	reg RCRD
(1)   35/       0 : =R7P                 P7	reg RERF
(1)   36/       0 : =R5P                 R10R11	reg RARB
(1)   37/       0 : =R6P                 R12R13	reg RCRD
(1)   38/       0 : =R7P                 R14R15	reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;; Register Pairs
(1)   41/       0 : =R0                  P0_HI	reg R0
(1)   42/       0 : =R1                  P0_LO	reg R1
(1)   43/       0 : =R2                  P1_HI	reg R2
(1)   44/       0 : =R3                  P1_LO	reg R3
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 2 - 2023/04/16 11:22:22


(1)   45/       0 : =R4                  P2_HI	reg R4
(1)   46/       0 : =R5                  P2_LO	reg R5
(1)   47/       0 : =R6                  P3_HI	reg R6
(1)   48/       0 : =R7                  P3_LO	reg R7
(1)   49/       0 : =R8                  P4_HI	reg R8
(1)   50/       0 : =R9                  P4_LO	reg R9
(1)   51/       0 : =R10                 P5_HI	reg R10
(1)   52/       0 : =R11                 P5_LO	reg R11
(1)   53/       0 : =R12                 P6_HI	reg R12
(1)   54/       0 : =R13                 P6_LO	reg R13
(1)   55/       0 : =R14                 P7_HI	reg R14
(1)   56/       0 : =R15                 P7_LO	reg R15
(1)   57/       0 :                     
(1)   58/       0 :                     ;;;---------------------------------------------------------------------------
(1)   59/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   60/       0 :                     ;;;---------------------------------------------------------------------------
(1)   61/       0 : =R4P                 SP	reg P4
(1)   62/       0 : =R8                  SP_HI	reg R8
(1)   63/       0 : =R9                  SP_LO	reg R9
(1)   64/       0 :                     
(1)   65/       0 :                     ;;;---------------------------------------------------------------------------
(1)   66/       0 :                     ;;; Register Pair used as a Stack Pointer
(1)   67/       0 :                     ;;;---------------------------------------------------------------------------
(1)   68/       0 : =R5P                 CNT	reg P5
(1)   69/       0 : =R10                 CNT_I	reg R10
(1)   70/       0 : =R11                 CNT_J	reg R11
(1)   71/       0 : =R10                 CNT_HI	reg R10
(1)   72/       0 : =R11                 CNT_LO	reg R11
(1)   73/       0 :                     
(1)   74/       0 :                     ;;;---------------------------------------------------------------------------
(1)   75/       0 :                     ;;; macro instructions
(1)   76/       0 :                     ;;;---------------------------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 :                     ;;;----------------------------------------------------------------------------
(1)   79/       0 :                     ;;; LD_REG4P7_ACC
(1)   80/       0 :                     ;;; REG4(P7)=ACC
(1)   81/       0 :                     ;;;----------------------------------------------------------------------------
(1)   82/       0 :                     LD_REG4P7_ACC macro
(1)   83/       0 :                     	SRC P7
(1)   84/       0 :                     	WRM
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     ;;;----------------------------------------------------------------------------
(1)   88/       0 :                     ;;; LD_ACC_REG4P7
(1)   89/       0 :                     ;;; REG4(P7)=ACC
(1)   90/       0 :                     ;;;----------------------------------------------------------------------------
(1)   91/       0 :                     LD_ACC_REG4P7 macro
(1)   92/       0 :                     	SRC P7
(1)   93/       0 :                     	RDM
(1)   94/       0 :                     	endm
(1)   95/       0 :                     
(1)   96/       0 :                     ;;;----------------------------------------------------------------------------
(1)   97/       0 :                     ;;; Register Pair Operations
(1)   98/       0 :                     ;;;----------------------------------------------------------------------------
(1)   99/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)  100/       0 :                     		LD P1_HI
(1)  101/       0 :                     		XCH P0_HI
(1)  102/       0 :                     		LD P1_LO
(1)  103/       0 :                     		XCH P0_LO
(1)  104/       0 :                     		endm
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 3 - 2023/04/16 11:22:22


(1)  105/       0 :                     ;;;----------------------------------------------------------------------------
(1)  106/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)  107/       0 :                     		LD P3_HI
(1)  108/       0 :                     		XCH P0_HI
(1)  109/       0 :                     		LD P3_LO
(1)  110/       0 :                     		XCH P0_LO
(1)  111/       0 :                     		endm
(1)  112/       0 :                     ;;;----------------------------------------------------------------------------
(1)  113/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)  114/       0 :                     		LD P0_HI
(1)  115/       0 :                     		XCH P1_HI
(1)  116/       0 :                     		LD P0_LO
(1)  117/       0 :                     		XCH P1_LO
(1)  118/       0 :                     		endm
(1)  119/       0 :                     ;;;----------------------------------------------------------------------------
(1)  120/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  121/       0 :                     		LD P2_HI
(1)  122/       0 :                     		XCH P1_HI
(1)  123/       0 :                     		LD P2_LO
(1)  124/       0 :                     		XCH P1_LO
(1)  125/       0 :                     		endm
(1)  126/       0 :                     ;;;----------------------------------------------------------------------------
(1)  127/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  128/       0 :                     		LD P3_HI
(1)  129/       0 :                     		XCH P1_HI
(1)  130/       0 :                     		LD P3_LO
(1)  131/       0 :                     		XCH P1_LO
(1)  132/       0 :                     		endm
(1)  133/       0 :                     ;;;----------------------------------------------------------------------------
(1)  134/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  135/       0 :                     		LD P1_HI
(1)  136/       0 :                     		XCH P2_HI
(1)  137/       0 :                     		LD P1_LO
(1)  138/       0 :                     		XCH P2_LO
(1)  139/       0 :                     		endm
(1)  140/       0 :                     ;;;----------------------------------------------------------------------------
(1)  141/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  142/       0 :                     		LD P3_HI
(1)  143/       0 :                     		XCH P2_HI
(1)  144/       0 :                     		LD P3_LO
(1)  145/       0 :                     		XCH P2_LO
(1)  146/       0 :                     		endm
(1)  147/       0 :                     ;;;----------------------------------------------------------------------------
(1)  148/       0 :                     LD_P3_P0	macro	; P3 = P0
(1)  149/       0 :                     		LD P0_HI
(1)  150/       0 :                     		XCH P3_HI
(1)  151/       0 :                     		LD P0_LO
(1)  152/       0 :                     		XCH P3_LO
(1)  153/       0 :                     		endm
(1)  154/       0 :                     ;;;----------------------------------------------------------------------------
(1)  155/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  156/       0 :                     		LD P1_HI
(1)  157/       0 :                     		XCH P3_HI
(1)  158/       0 :                     		LD P1_LO
(1)  159/       0 :                     		XCH P3_LO
(1)  160/       0 :                     		endm
(1)  161/       0 :                     ;;;----------------------------------------------------------------------------
(1)  162/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  163/       0 :                     		LD P2_HI
(1)  164/       0 :                     		XCH P3_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 4 - 2023/04/16 11:22:22


(1)  165/       0 :                     		LD P2_LO
(1)  166/       0 :                     		XCH P3_LO
(1)  167/       0 :                     		endm
(1)  168/       0 :                     ;;;----------------------------------------------------------------------------
(1)  169/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  170/       0 :                     		LD P0_HI
(1)  171/       0 :                     		XCH P6_HI
(1)  172/       0 :                     		LD P0_LO
(1)  173/       0 :                     		XCH P6_LO
(1)  174/       0 :                     		endm
(1)  175/       0 :                     ;;;----------------------------------------------------------------------------
(1)  176/       0 :                     LD_P6_P1	macro	; P6 = P1
(1)  177/       0 :                     		LD P1_HI
(1)  178/       0 :                     		XCH P6_HI
(1)  179/       0 :                     		LD P1_LO
(1)  180/       0 :                     		XCH P6_LO
(1)  181/       0 :                     		endm
(1)  182/       0 :                     ;;;----------------------------------------------------------------------------
(1)  183/       0 :                     LD_P6_SP	macro	; P6 = SP
(1)  184/       0 :                     		LD SP_HI
(1)  185/       0 :                     		XCH P6_HI
(1)  186/       0 :                     		LD SP_LO
(1)  187/       0 :                     		XCH P6_LO
(1)  188/       0 :                     		endm
(1)  189/       0 :                     ;;;----------------------------------------------------------------------------
(1)  190/       0 :                     LD_P7_P0	macro	; P7 = P0
(1)  191/       0 :                     		LD P0_HI
(1)  192/       0 :                     		XCH P7_HI
(1)  193/       0 :                     		LD P0_LO
(1)  194/       0 :                     		XCH P7_LO
(1)  195/       0 :                     		endm
(1)  196/       0 :                     ;;;----------------------------------------------------------------------------
(1)  197/       0 :                     LD_P7_P1	macro	; P7 = P1
(1)  198/       0 :                     		LD P1_HI
(1)  199/       0 :                     		XCH P7_HI
(1)  200/       0 :                     		LD P1_LO
(1)  201/       0 :                     		XCH P7_LO
(1)  202/       0 :                     		endm
(1)  203/       0 :                     ;;;----------------------------------------------------------------------------
(1)  204/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  205/       0 :                     		LD P2_HI
(1)  206/       0 :                     		XCH P7_HI
(1)  207/       0 :                     		LD P2_LO
(1)  208/       0 :                     		XCH P7_LO
(1)  209/       0 :                     		endm
(1)  210/       0 :                     ;;;----------------------------------------------------------------------------
(1)  211/       0 :                     LD_P7_P3	macro	; P7 = P3
(1)  212/       0 :                     		LD P3_HI
(1)  213/       0 :                     		XCH P7_HI
(1)  214/       0 :                     		LD P3_LO
(1)  215/       0 :                     		XCH P7_LO
(1)  216/       0 :                     		endm
(1)  217/       0 :                     ;;;----------------------------------------------------------------------------
(1)  218/       0 :                     LD_CNT_P1	macro	; CNT = P1
(1)  219/       0 :                     		LD P1_HI
(1)  220/       0 :                     		XCH CNT_HI
(1)  221/       0 :                     		LD P1_LO
(1)  222/       0 :                     		XCH CNT_LO
(1)  223/       0 :                     		endm
(1)  224/       0 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm(macros.inc) - Page 5 - 2023/04/16 11:22:22


(1)  225/       0 :                     LD_P1_CNT	macro	; P1 = CNT
(1)  226/       0 :                     		LD CNT_HI
(1)  227/       0 :                     		XCH P1_HI
(1)  228/       0 :                     		LD CNT_LO
(1)  229/       0 :                     		XCH P1_LO
(1)  230/       0 :                     		endm
(1)  231/       0 :                     ;;;----------------------------------------------------------------------------
(1)  232/       0 :                     
(1)  233/       0 :                     ;;;----------------------------------------------------------------------------
(1)  234/       0 :                     ;;; For debug
(1)  235/       0 :                     ;;;----------------------------------------------------------------------------
(1)  236/       0 :                     ;;;----------------------------------------------------------------------------
(1)  237/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)  238/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)  239/       0 :                     ;;;----------------------------------------------------------------------------
(1)  240/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)  241/       0 :                     	JMS PUSH_P1
(1)  242/       0 :                     	FIM P1, ch
(1)  243/       0 :                     	JMS PUTCHAR_P1
(1)  244/       0 :                     	JMS POP_P1
(1)  245/       0 :                     	endm
(1)  246/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Software Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 : =0H                  USE_MON_CMD_DP = 0		; dump physical memory command 'DP'
      23/       0 : =0H                  USE_MON_CMD_T = 0		; memory test command 'T'
      24/       0 :                     
      25/       0 :                     ;;;---------------------------------------------------------------------------
      26/       0 :                     ;;; Emulator compile configuration
      27/       0 :                     ;;;---------------------------------------------------------------------------
      28/       0 :                     ;; FLAG_P is not implemented because it takes much cost
      29/       0 : =1H                  USE_EMU_FLAG_P = 1	; use P FLAG
      30/       0 :                     
      31/       0 :                     ;;;---------------------------------------------------------------------------
      32/       0 :                     ;;; Emulator port configuration
      33/       0 :                     ;;;---------------------------------------------------------------------------
      34/       0 :                     ;;; EMU_UARTRC	equ	00H	; for tinybasic-1.0
      35/       0 :                     ;;; EMU_UARTRD	equ	01H	; for tynybasic-1.0
      36/       0 :                     ;;; EMU_IN_UARTRC_VALUE	equ 22H	 ; for tynybasic-1.0
      37/       0 :                     
      38/       0 : =1H                  EMU_UARTRC	equ	01H	; for SBC8080 compatibility
      39/       0 : =0H                  EMU_UARTRD	equ	00H	; for SBC8080 compatibility
      40/       0 : =0FFH                EMU_IN_UARTRC_VALUE	equ 0FFH	;
      41/       0 : =3H                  EMU_IN_STOPCODE	equ 03H			; ctrl-C
      42/       0 :                     	
      43/       0 :                     ;;;---------------------------------------------------------------------------
      44/       0 :                     ;;; Hardware Configuration
      45/       0 :                     ;;;---------------------------------------------------------------------------
      46/       0 :                     
      47/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      48/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      49/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      50/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      51/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      52/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      53/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      54/       0 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 6 - 2023/04/16 11:22:22


      55/       0 :                     ;;; Chip type of RAM2 and RAM3
      56/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      57/       0 :                     
      58/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      59/       0 : =0H                  BANK_RAM0	equ 0
      60/       0 : =0H                  CHIP_RAM0	equ 00H
      61/       0 : =0H                  BANK_RAM1	equ 0
      62/       0 : =40H                 CHIP_RAM1	equ 40H
      63/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      64/       0 : =0H                  BANK_RAM2	equ 0
      65/       0 : =80H                 CHIP_RAM2	equ 80H
      66/       0 : =0H                  BANK_RAM3	equ 0
      67/       0 : =0C0H                CHIP_RAM3	equ 0C0H
      68/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      69/       0 :                     BANK_RAM2	equ 1
      70/       0 :                     CHIP_RAM2	equ 00H
      71/       0 :                     BANK_RAM3	equ 1
      72/       0 :                     CHIP_RAM3	equ 40H
      73/       0 : [63]                 	endif
      74/       0 :                     
      75/       0 :                     ;;; Default Bank
      76/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      77/       0 :                     ;;; to omit DCL as much as possible.
      78/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      79/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      80/       0 :                     		
      81/       0 :                     ;;; Output port for serial interface
      82/       0 : =0H                  BANK_SERIAL	equ BANK_RAM3
      83/       0 : =0C0H                CHIP_SERIAL	equ CHIP_RAM3
      84/       0 :                     
      85/       0 :                     ;;; Output port for program memory bank selection
      86/       0 : =0H                  BANK_PMSELECT0	equ BANK_RAM0
      87/       0 : =0H                  BANK_PMSELECT1	equ BANK_RAM1
      88/       0 : =0H                  CHIP_PMSELECT0	equ CHIP_RAM0
      89/       0 : =40H                 CHIP_PMSELECT1	equ CHIP_RAM1
      90/       0 :                     
      91/       0 :                     	
      92/       0 :                     ;;; Program Memory RAM area
      93/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
      94/       0 : =0FFEH               PM_READ_P0_P1	equ 0FFEH	; Entry of the subroutine to read RAM
      95/       0 :                     				; "FIN P1 and BBL 0"
      96/       0 :                     	
      97/       0 :                     ;;; Address labels in the 16 bit address space logical program memory PM16
      98/       0 : =0H                  PM16_MEMSTART	equ 0000H
      99/       0 : =0FD00H              PM16_LINEBUF	equ 0FD00H
     100/       0 :                     
     101/       0 :                     ;;; for 256 x 16 x16 PM space
     102/       0 :                     ;;; PM_READ_P0_P1   equ 0F7EH	; Entry of the subroutine to read RAM
     103/       0 :                     ;;; PM16_LINEBUF	equ 7D00H
     104/       0 :                     
     105/       0 :                     ;;;---------------------------------------------------------------------------
     106/       0 :                     ;;; Data RAM Register Configuration
     107/       0 :                     ;;;---------------------------------------------------------------------------
     108/       0 :                     ;;; RAM0
     109/       0 :                     ;;; 
     110/       0 :                     ;;; 8080 register code DDD or SSS
     111/       0 :                     ;;; 0 1 2 3 4 5 6 7
     112/       0 :                     ;;; B C D E H L M A
     113/       0 :                     ;;; 
     114/       0 :                     ;;;  ADDRESS=~(xxx)<<1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 7 - 2023/04/16 11:22:22


     115/       0 :                     	
     116/       0 : =0H                  REG8_A		equ 00H	;
     117/       0 : =2H                  REG8_M		equ 02H	; REG8_M is only used as a label.
     118/       0 : =4H                  REG8_L		equ 04H	;
     119/       0 : =6H                  REG8_H		equ 06H	;
     120/       0 : =8H                  REG8_E		equ 08H	;
     121/       0 : =0AH                 REG8_D		equ 0AH	;
     122/       0 : =0CH                 REG8_C		equ 0CH	;
     123/       0 : =0EH                 REG8_B		equ 0EH	;
     124/       0 :                     
     125/       0 : =10H                 REG8_FLAG	equ 10H ;
     126/       0 : =12H                 REG8_SRC	equ 12H	; temporary register to save SRC reg value
     127/       0 : =14H                 REG16_PC	equ 14H	; Program Counter of 8080
     128/       0 : =18H                 REG16_SP	equ 18H	; Stack Pointer of 8080
     129/       0 : =1CH                 REG16_ADDR	equ 1CH ; 16 bit temporary register
     130/       0 :                     
     131/       0 :                     		;; lower byte is the first
     132/       0 : =0CH                 REG16_BC	equ REG8_C
     133/       0 : =8H                  REG16_DE	equ REG8_E
     134/       0 : =4H                  REG16_HL	equ REG8_L
     135/       0 :                     
     136/       0 : =14H                 REG8_PCL	equ REG16_PC
     137/       0 : =16H                 REG8_PCH	equ REG16_PC+2
     138/       0 : =18H                 REG8_SPL	equ REG16_SP
     139/       0 : =1AH                 REG8_SPH	equ REG16_SP+2
     140/       0 : =1CH                 REG8_ADDRL	equ REG16_ADDR
     141/       0 : =1EH                 REG8_ADDRH	equ REG16_ADDR+2
     142/       0 :                     	
     143/       0 : =10H                 REG4_FLAG_1P1C	equ REG8_FLAG
     144/       0 : =11H                 REG4_FLAG_SZBH	equ REG8_FLAG+1
     145/       0 :                     
     146/       0 : =20H                 REG8_EMU_KEYBUF equ 20H ; virtual buffer for input STOP key
     147/       0 : =24H                 REG4_EMU_MODE	equ 24H	; Execution mode (0:continuous, 1:viewPC, 2:step)
     148/       0 :                     	
     149/       0 : =28H                 REG16_MON_INDEX	equ 28H	;
     150/       0 : =2CH                 REG16_MON_ADDR	equ 2CH	;
     151/       0 : =30H                 REG16_MON_TMP	equ 30H	;
     152/       0 : =30H                 REG8_MON_TMP	equ 30H	;
     153/       0 : =32H                 REG8_MON_TMP2	equ 32H	;
     154/       0 : =34H                 REG16_MON_PMBANK	equ 34H	; not used (?)
     155/       0 : =38H                 REG8_MON_MEMSPACE	equ 38H	; 'D', 'P', 'L' = (Data, Physical, Logical)
     156/       0 : =3AH                 REG8_MON_RESERVED	equ 3AH	; (reserved)
     157/       0 :                     	
     158/       0 :                     
     159/       0 :                     ;;; RAM1
     160/       0 : =40H                 REG16_STACK_40H	equ 40H		;; stack area
     161/       0 : =7CH                 REG16_STACK_7CH	equ 7CH	
     162/       0 :                     
     163/       0 : =80H                 STACK_INIT	equ 80H
     164/       0 :                     
     165/       0 :                     ;;; RAM2
     166/       0 :                     ;;; RAM3
     167/       0 :                     	
     168/       0 :                     ;;;---------------------------------------------------------------------------
     169/       0 :                     ;;; Program Start
     170/       0 :                     ;;;---------------------------------------------------------------------------
     171/       0 :                     	org 0000H		; beginning of Program Memory
     172/       0 :                     
     173/       0 :                     ;;;---------------------------------------------------------------------------
     174/       0 :                     ;;; Mail Loop for Monitor Program
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 8 - 2023/04/16 11:22:22


     175/       0 :                     ;;; 
     176/       0 :                     ;;; Command:
     177/       0 :                     ;;; H : Select memory space
     178/       0 :                     ;;;   HD : Data RAM (4002)
     179/       0 :                     ;;;   HP : Physical Program Memory
     180/       0 :                     ;;;   HL : Logical Program Memory
     181/       0 :                     ;;; D : Dump memory
     182/       0 :                     ;;; L : Load Intel hex to logical program memory
     183/       0 :                     ;;; C : Clear Program Memory
     184/       0 :                     ;;; G : Go to PM_RAM_START (0F00H)
     185/       0 :                     ;;; E : 8080 Emulator
     186/       0 :                     ;;;   ES : 8080 Emulator (step mode)
     187/       0 :                     ;;; 
     188/       0 :                     ;;;---------------------------------------------------------------------------
     189/       0 :                     MAIN:
     190/       0 : 00                  	NOP
     191/       1 : F0                  	CLB
     192/       2 :                     
     193/       2 : =>FALSE              	if ( BANK_DEFAULT != 0 )
     194/       2 :                     	LDM BANK_DEFAULT
     195/       2 : [193]                	endif
     196/       2 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     197/       2 :                     	;; except when in use for another banks.
     198/       2 : FD                  	DCL
     199/       3 :                     
     200/       3 : 28 80               	FIM SP, STACK_INIT	; initialize stack pointer
     201/       5 : 5C 7F               	JMS INIT_SERIAL		; Initialize Serial Port
     202/       7 :                     
     203/       7 :                     
     204/       7 :                     	;; write "PM_READ_P0_P1" routine on all memory banks
     205/       7 : D0                  	LDM loop(16)
     206/       8 : B2                  	XCH P1_HI
     207/       9 :                     PM_INIT_HLOOP:
     208/       9 : D0                  	LDM loop(16)
     209/       A : B3                  	XCH P1_LO
     210/       B :                     PM_INIT_LLOOP:
     211/       B : 5B B9               	JMS PM_SELECTPMB_P1
     212/       D : 5B AD               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     213/       F : 73 0B               	ISZ P1_LO, PM_INIT_LLOOP
     214/      11 : 72 09               	ISZ P1_HI, PM_INIT_HLOOP
     215/      13 :                     
     216/      13 : 22 00               	FIM P1, 00H
     217/      15 : 5B B9               	JMS PM_SELECTPMB_P1	 ; set PMB to 0
     218/      17 :                     	
     219/      17 :                     ;	JCN TN, $		;wait for TEST="0" (button pressed)
     220/      17 : 20 42               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     221/      19 : 5E 00               	JMS PRINTSTR_P0
     222/      1B : 20 1F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     223/      1D : 5E 00               	JMS PRINTSTR_P0
     224/      1F :                     
     225/      1F : 20 38               	FIM P0, REG8_MON_MEMSPACE
     226/      21 : 22 44               	FIM P1, 'D'
     227/      23 : 57 F1               	JMS LD_REG8P0_P1	; set memspace 'D'
     228/      25 :                     	
     229/      25 :                     	;; init emulator PC
     230/      25 : 20 14               	FIM P0, REG16_PC
     231/      27 : 24 00               	FIM P2, 00H
     232/      29 : 26 00               	FIM P3, 00H
     233/      2B : 57 96               	JMS LD_REG16P0_P2P3	; PC=0000H
     234/      2D :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 9 - 2023/04/16 11:22:22


     235/      2D :                     CMD_LOOP:
     236/      2D : 22 5D               	FIM P1, ']'		; prompt
     237/      2F : 5C 5F               	JMS PUTCHAR_P1
     238/      31 :                     
     239/      31 : 20 28               	FIM P0, REG16_MON_INDEX
     240/      33 : 24 FD               	FIM P2, up(PM16_LINEBUF)
     241/      35 : 26 00               	FIM P3, lo(PM16_LINEBUF)
     242/      37 : 57 96               	JMS LD_REG16P0_P2P3
     243/      39 : 5B C4               	JMS GETLINE_PM16REG16P0
     244/      3B :                     
     245/      3B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     246/      3D : 5D 4B               	JMS TOUPPER_P1
     247/      3F :                     L0:
     248/      3F : 2E 48               	FIM P7, 'H'		; Select Memory Space (D/P/L)
     249/      41 : 5D 27               	JMS CMP_P1P7
     250/      43 : 1C 47               	JCN ZN, L1
     251/      45 : 40 E9               	JUN COMMAND_H
     252/      47 :                     L1:
     253/      47 : 2E 44               	FIM P7, 'D'		; Dump Memory
     254/      49 : 5D 27               	JMS CMP_P1P7
     255/      4B : 1C 4F               	JCN ZN, L2
     256/      4D : 40 92               	JUN COMMAND_D
     257/      4F :                     L2:
     258/      4F :                     ;;;	FIM P7, 'S'		; Set to Memory
     259/      4F :                     ;;;	JMS CMP_P1P7
     260/      4F :                     ;;;	JCN ZN, L3
     261/      4F :                     ;;;	JUN COMMAND_S
     262/      4F :                     L3:
     263/      4F : 2E 4C               	FIM P7, 'L'		; Load to Logical Memory
     264/      51 : 5D 27               	JMS CMP_P1P7
     265/      53 : 1C 57               	JCN ZN, L4
     266/      55 : 41 09               	JUN COMMAND_L
     267/      57 :                     L4:
     268/      57 : 2E 43               	FIM P7, 'C'		; Clear program memory
     269/      59 : 5D 27               	JMS CMP_P1P7
     270/      5B : 1C 5F               	JCN ZN, L5
     271/      5D : 41 7B               	JUN COMMAND_C
     272/      5F :                     L5:
     273/      5F : 2E 47               	FIM P7, 'G'		; Go to PM_RAM_START (0F00H)
     274/      61 : 5D 27               	JMS CMP_P1P7
     275/      63 : 1C 67               	JCN ZN, L6
     276/      65 : 40 E7               	JUN COMMAND_G
     277/      67 :                     L6:
     278/      67 : 2E 45               	FIM P7, 'E'		; jump to 8080 Emulator
     279/      69 : 5D 27               	JMS CMP_P1P7 		;
     280/      6B : 1C 8C               	JCN ZN, L7		;
     281/      6D :                     
     282/      6D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; check next letter
     283/      6F : 5D 4B               	JMS TOUPPER_P1		; 'E' continuous mode
     284/      71 : 2E 53               	FIM P7, 'S'		; 'EV' view register mode
     285/      73 : 5D 27               	JMS CMP_P1P7 		; 'ES' step mode
     286/      75 : 1C 7A               	JCN ZN, L6_VIEWREG	;
     287/      77 : D2                  	LDM 2			; step mode
     288/      78 : 40 86               	JUN L6_SETMODE
     289/      7A :                     L6_VIEWREG:
     290/      7A : 2E 56               	FIM P7, 'V'		;
     291/      7C : 5D 27               	JMS CMP_P1P7 		; 
     292/      7E : 1C 83               	JCN ZN, L6_CONTINUOUS	;
     293/      80 : D1                  	LDM 1			; view PC mode
     294/      81 : 40 86               	JUN L6_SETMODE
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 10 - 2023/04/16 11:22:22


     295/      83 :                     L6_CONTINUOUS:
     296/      83 : 58 6B               	JMS DEC_REG16P0
     297/      85 : D0                  	LDM 0			; continuous mode
     298/      86 :                     L6_SETMODE:
     299/      86 : 2E 24               	FIM P7, REG4_EMU_MODE
     300/      88 : (MACRO)              	LD_REG4P7_ACC
     300/      88 : 2F                          SRC P7
     300/      89 : E0                          WRM
     301/      8A : 41 95               	JUN COMMAND_E
     302/      8C :                     
     303/      8C :                     L7:
     304/      8C : =>FALSE              	if USE_MON_CMD_T
     305/      8C :                     	FIM P7, 'T'		; Test program memory
     306/      8C :                     	JMS CMP_P1P7
     307/      8C :                     	JCN ZN, L10
     308/      8C :                     	JUN COMMAND_T
     309/      8C : [304]                	endif
     310/      8C :                     L10:
     311/      8C : 20 47               	FIM P0, lo(STR_CMDERR)
     312/      8E : 5E 00               	JMS PRINTSTR_P0
     313/      90 :                     
     314/      90 : 40 2D               	JUN CMD_LOOP
     315/      92 :                     
     316/      92 :                     
     317/      92 :                     ;;;---------------------------------------------------------------------------
     318/      92 :                     ;;; COMMAND_D
     319/      92 :                     ;;; Dump Memory
     320/      92 :                     ;;;---------------------------------------------------------------------------
     321/      92 :                     COMMAND_D:
     322/      92 : 22 2C               	FIM P1, REG16_MON_ADDR
     323/      94 : 58 C9               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     324/      96 :                     	
     325/      96 : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     326/      98 : 58 09               	JMS LD_P1_REG8P7
     327/      9A :                     	
     328/      9A : 2E 44               	FIM P7, 'D'
     329/      9C : 5D 27               	JMS CMP_P1P7
     330/      9E : 1C A2               	JCN ZN, CMDD_L1
     331/      A0 : 40 CE               	JUN COMMAND_DD
     332/      A2 :                     CMDD_L1:
     333/      A2 : =>FALSE              	if USE_MON_CMD_DP
     334/      A2 :                     	FIM P7, 'P'
     335/      A2 :                     	JMS CMP_P1P7
     336/      A2 :                     	JCN ZN, CMDD_L2
     337/      A2 :                     	JUN COMMAND_DP
     338/      A2 : [333]                	endif 			;  USE_MON_CMD_DP
     339/      A2 :                     CMDD_L2:
     340/      A2 : 2E 4C               	FIM P7, 'L'
     341/      A4 : 5D 27               	JMS CMP_P1P7
     342/      A6 : 1C AA               	JCN ZN, CMDD_L3
     343/      A8 : 40 B0               	JUN COMMAND_DL
     344/      AA :                     CMDD_L3:
     345/      AA : 20 4B               	FIM P0, lo(STR_ERROR_UNKNOWN_MEMSPACE)
     346/      AC : 5E 00               	JMS PRINTSTR_P0
     347/      AE : 40 2D               	JUN CMD_LOOP
     348/      B0 :                     
     349/      B0 : =>FALSE              	if  USE_MON_CMD_DP
     350/      B0 :                     ;;;---------------------------------------------------------------------------
     351/      B0 :                     ;;; COMMAND_DP
     352/      B0 :                     ;;; Dump Physical Memory
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 11 - 2023/04/16 11:22:22


     353/      B0 :                     ;;;	BANK=ADDR.FEDCBA98
     354/      B0 :                     ;;;  PM_ADDR=ADDR.76543210 + 0F00H
     355/      B0 :                     ;;;---------------------------------------------------------------------------
     356/      B0 :                     COMMAND_DP:
     357/      B0 :                     	FIM P1, REG16_MON_ADDR
     358/      B0 :                     	JMS LD_P2P3_REG16P1
     359/      B0 :                     
     360/      B0 :                     	LD_P1_P2
     361/      B0 :                     	JMS PM_SELECTPMB_P1
     362/      B0 :                     	
     363/      B0 :                     	LDM loop(8)
     364/      B0 :                     	XCH CNT_I
     365/      B0 :                     CMDDP_L0:
     366/      B0 :                     	LD_P1_P2
     367/      B0 :                     	JMS PRINTHEX_P1
     368/      B0 :                     	FIM P1, ':'
     369/      B0 :                     	JMS PUTCHAR_P1
     370/      B0 :                     	FIM P1, 'F'
     371/      B0 :                     	JMS PUTCHAR_P1
     372/      B0 :                     	LD_P1_P3
     373/      B0 :                     	JMS PRINTHEX_P1
     374/      B0 :                     	FIM P1, ':'
     375/      B0 :                     	JMS PUTCHAR_P1
     376/      B0 :                     
     377/      B0 :                     CMDDP_L1:	
     378/      B0 :                     	LD_P0_P3
     379/      B0 :                     	JMS PM_READ_P0_P1	; Read program memory
     380/      B0 :                     	JMS PRINTHEX_P1
     381/      B0 :                     
     382/      B0 :                     	ISZ P3_LO, CMDDP_L1
     383/      B0 :                     	JMS PRINT_CRLF
     384/      B0 :                     	INC P3_HI
     385/      B0 :                     	LD P3_HI
     386/      B0 :                     	JCN Z, CMDDP_EXIT
     387/      B0 :                     	ISZ CNT_I, CMDDP_L0
     388/      B0 :                     CMDDP_EXIT:	
     389/      B0 :                     	FIM P0, REG16_MON_ADDR
     390/      B0 :                     	JMS LD_REG16P0_P2P3
     391/      B0 :                     
     392/      B0 :                     	JUN CMD_LOOP		; return to command loop
     393/      B0 :                     
     394/      B0 : [349]                	endif  			; USE_MON_CMD_DP
     395/      B0 :                     
     396/      B0 :                     ;;;---------------------------------------------------------------------------
     397/      B0 :                     ;;; COMMAND_DL
     398/      B0 :                     ;;; Dump Logical Memory
     399/      B0 :                     ;;;---------------------------------------------------------------------------
     400/      B0 :                     COMMAND_DL:
     401/      B0 : 20 2C               	FIM P0, REG16_MON_ADDR
     402/      B2 : 58 11               	JMS LD_P1_REG8P0
     403/      B4 : (MACRO)              	LD_CNT_P1
     403/      B4 : A2                                  LD P1_HI
     403/      B5 : BA                                  XCH CNT_HI
     403/      B6 : A3                                  LD P1_LO
     403/      B7 : BB                                  XCH CNT_LO
     404/      B8 : D8                  	LDM loop(8)
     405/      B9 : BA                  	XCH CNT_I
     406/      BA :                     CMDDL_L0:
     407/      BA : 22 2C               	FIM P1, REG16_MON_ADDR
     408/      BC : 58 29               	JMS PRINTHEX_REG16P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 12 - 2023/04/16 11:22:22


     409/      BE : 22 3A               	FIM P1, ':'
     410/      C0 : 5C 5F               	JMS PUTCHAR_P1
     411/      C2 :                     CMDDL_L1:	
     412/      C2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     413/      C4 : 5C 85               	JMS PRINTHEX_P1
     414/      C6 :                     
     415/      C6 : 7B C2               	ISZ CNT_J, CMDDL_L1
     416/      C8 : 5C A0               	JMS PRINT_CRLF
     417/      CA : 7A BA               	ISZ CNT_I, CMDDL_L0
     418/      CC :                     CMDDL_NEXT:
     419/      CC : 40 2D               	JUN CMD_LOOP		; return to command loop
     420/      CE :                     
     421/      CE :                     ;;;---------------------------------------------------------------------------
     422/      CE :                     ;;; COMMAND_DD
     423/      CE :                     ;;; Dump Data RAM
     424/      CE :                     ;;; input:
     425/      CE :                     ;;; REG16_MON_ADDR
     426/      CE :                     ;;; RAM0=00H-3FH
     427/      CE :                     ;;; RAM1=40H-7FH
     428/      CE :                     ;;; RAM2=80H-BFH
     429/      CE :                     ;;; RAM3=C0H-FFH
     430/      CE :                     ;;; CHIP#=ADDR.bit(76), REG#=ADDR.bit(54), CHAR#=ADDR.bit(3210)
     431/      CE :                     ;;;---------------------------------------------------------------------------
     432/      CE :                     COMMAND_DD:
     433/      CE : 2E 2C               	FIM P7, REG16_MON_ADDR
     434/      D0 : 58 09               	JMS LD_P1_REG8P7	; P1=lower 8bit of ADDR
     435/      D2 : (MACRO)              	LD_P0_P1		; P0=ADDR for SCR
     435/      D2 : A2                                  LD P1_HI
     435/      D3 : B0                                  XCH P0_HI
     435/      D4 : A3                                  LD P1_LO
     435/      D5 : B1                                  XCH P0_LO
     436/      D6 :                     
     437/      D6 :                     	;; PRINT 4 registers
     438/      D6 : DC                  	LDM loop(4)		; PRINT 4 regs
     439/      D7 : BA                  	XCH CNT_I		; I=loop(4)
     440/      D8 :                     	;; PRINT 16 characters
     441/      D8 :                     CMDDD_L1:
     442/      D8 : 5D 57               	JMS PRINT_DATARAM_P0
     443/      DA : 60                  	INC P0_HI
     444/      DB : 7A D8               	ISZ CNT_I, CMDDD_L1
     445/      DD :                     
     446/      DD : (MACRO)              	LD_P1_P0
     446/      DD : A0                                  LD P0_HI
     446/      DE : B2                                  XCH P1_HI
     446/      DF : A1                                  LD P0_LO
     446/      E0 : B3                                  XCH P1_LO
     447/      E1 : 20 2C               	FIM P0, REG16_MON_ADDR
     448/      E3 : 57 F1               	JMS LD_REG8P0_P1
     449/      E5 :                     
     450/      E5 : 40 2D               	JUN CMD_LOOP		; return to command loop
     451/      E7 :                     	
     452/      E7 :                     ;;;---------------------------------------------------------------------------
     453/      E7 :                     ;;; COMMAND_G
     454/      E7 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
     455/      E7 :                     ;;;---------------------------------------------------------------------------
     456/      E7 :                     COMMAND_G:
     457/      E7 : 4F 00               	JUN PM_RAM_START
     458/      E9 :                     
     459/      E9 :                     ;;;---------------------------------------------------------------------------
     460/      E9 :                     ;;; COMMAND_H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 13 - 2023/04/16 11:22:22


     461/      E9 :                     ;;; Select Memory Space and address
     462/      E9 :                     ;;; 'D' = Data Memory
     463/      E9 :                     ;;; 'P' = Physical Program Memory
     464/      E9 :                     ;;; 'L' = Logical Program Memory
     465/      E9 :                     ;;;---------------------------------------------------------------------------
     466/      E9 :                     COMMAND_H:
     467/      E9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM16(REG(P0)++)
     468/      EB : 5D 34               	JMS ISZEROORNOT_P1
     469/      ED : 1C F1               	JCN ZN, CMDH_SET
     470/      EF : 40 FB               	JUN CMDH_EXIT
     471/      F1 :                     CMDH_SET:
     472/      F1 : 5D 4B               	JMS TOUPPER_P1
     473/      F3 : 24 38               	FIM P2, REG8_MON_MEMSPACE
     474/      F5 : 57 FD               	JMS LD_REG8P2_P1
     475/      F7 : 22 2C               	FIM P1, REG16_MON_ADDR
     476/      F9 : 58 C9               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     477/      FB :                     CMDH_EXIT:
     478/      FB : 2E 38               	FIM P7, REG8_MON_MEMSPACE
     479/      FD : 58 09               	JMS LD_P1_REG8P7
     480/      FF : 5C 5F               	JMS PUTCHAR_P1
     481/     101 : 22 2C               	FIM P1, REG16_MON_ADDR
     482/     103 : 58 29               	JMS PRINTHEX_REG16P1
     483/     105 : 5C A0               	JMS PRINT_CRLF
     484/     107 : 40 2D               	JUN CMD_LOOP
     485/     109 :                     
     486/     109 :                     ;;;---------------------------------------------------------------------------
     487/     109 :                     ;;; COMMAND_L
     488/     109 :                     ;;; Load to Logical Memory
     489/     109 :                     ;;; Intel Hex format, no checksum check
     490/     109 :                     ;;; data lengh must be 0to10H/line
     491/     109 :                     ;;;---------------------------------------------------------------------------
     492/     109 :                     COMMAND_L:
     493/     109 :                     CMDL_START:
     494/     109 : 20 28               	FIM P0, REG16_MON_INDEX
     495/     10B : 24 FD               	FIM P2, up(PM16_LINEBUF)
     496/     10D : 26 00               	FIM P3, lo(PM16_LINEBUF)
     497/     10F : 57 96               	JMS LD_REG16P0_P2P3
     498/     111 : 5B C4               	JMS GETLINE_PM16REG16P0
     499/     113 :                     
     500/     113 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     501/     115 : 5D 34               	JMS ISZEROORNOT_P1
     502/     117 : 1C 1B               	JCN ZN, CMDL_L0
     503/     119 : 41 73               	JUN CMDL_EXIT
     504/     11B :                     CMDL_L0:
     505/     11B : 2E 3A               	FIM P7, ':'
     506/     11D : 5D 27               	JMS CMP_P1P7
     507/     11F : 14 23               	JCN Z, CMDL_L1
     508/     121 : 41 49               	JUN CMDL_ERROR
     509/     123 :                     CMDL_L1:
     510/     123 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     511/     125 : (MACRO)              	LD_CNT_P1				; count
     511/     125 : A2                                  LD P1_HI
     511/     126 : BA                                  XCH CNT_HI
     511/     127 : A3                                  LD P1_LO
     511/     128 : BB                                  XCH CNT_LO
     512/     129 :                     
     513/     129 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (upper byte)
     514/     12B : (MACRO)              	LD_P2_P1
     514/     12B : A2                                  LD P1_HI
     514/     12C : B4                                  XCH P2_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 14 - 2023/04/16 11:22:22


     514/     12D : A3                                  LD P1_LO
     514/     12E : B5                                  XCH P2_LO
     515/     12F : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; address (lower byte)
     516/     131 : (MACRO)              	LD_P3_P1
     516/     131 : A2                                  LD P1_HI
     516/     132 : B6                                  XCH P3_HI
     516/     133 : A3                                  LD P1_LO
     516/     134 : B7                                  XCH P3_LO
     517/     135 : 22 2C               	FIM P1, REG16_MON_ADDR
     518/     137 : 57 90               	JMS LD_REG16P1_P2P3
     519/     139 : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT ; recode type
     520/     13B : 5D 34               	JMS ISZEROORNOT_P1
     521/     13D : 1C 41               	JCN ZN, CMDL_L2
     522/     13F : 41 53               	JUN CMDL_READLOOP
     523/     141 :                     CMDL_L2:
     524/     141 : 2E 01               	FIM P7, 01H
     525/     143 : 5D 27               	JMS CMP_P1P7
     526/     145 : 1C 49               	JCN ZN, CMDL_ERROR
     527/     147 : 41 73               	JUN CMDL_EXIT
     528/     149 :                     CMDL_ERROR:
     529/     149 : 58 6B               	JMS DEC_REG16P0
     530/     14B : 5C 0A               	JMS PRINTSTR_PM16REG16P0
     531/     14D : 20 57               	FIM P0, lo(STR_ERROR_LOADCOMMAND)
     532/     14F : 5E 00               	JMS PRINTSTR_P0
     533/     151 : 40 2D               	JUN CMD_LOOP
     534/     153 :                     CMDL_READLOOP:
     535/     153 : AB                  	LD CNT_LO
     536/     154 : 1C 5B               	JCN ZN, CMDL_CONTINUE
     537/     156 : AA                  	LD CNT_HI
     538/     157 : 1C 5B               	JCN ZN, CMDL_CONTINUE
     539/     159 : 41 09               	JUN  CMDL_START		; continue to read next line
     540/     15B :                     CMDL_CONTINUE:
     541/     15B : 20 28               	FIM P0, REG16_MON_INDEX
     542/     15D : 5C 18               	JMS GETHEXBYTE_P1_PM16REG16P0_INCREMENT
     543/     15F : 14 63               	JCN Z, CMDL_L3
     544/     161 : 41 09               	JUN CMDL_START		; continue to read next line
     545/     163 :                     CMDL_L3:
     546/     163 : 20 2C               	FIM P0, REG16_MON_ADDR
     547/     165 : 5B 81               	JMS LD_PM16REG16P0_P1
     548/     167 : 58 5B               	JMS INC_REG16P0
     549/     169 : AB                  	LD CNT_LO
     550/     16A : F8                  	DAC
     551/     16B : BB                  	XCH CNT_LO
     552/     16C : 12 71               	JCN C, CMDL_L5		; no borrow then skip
     553/     16E : AA                  	LD CNT_HI
     554/     16F : F8                  	DAC
     555/     170 : BA                  	XCH CNT_HI
     556/     171 :                     CMDL_L5:
     557/     171 : 41 53               	JUN CMDL_READLOOP
     558/     173 :                     CMDL_EXIT:
     559/     173 :                     	;; set memory space to logical
     560/     173 : 20 38               	FIM P0, REG8_MON_MEMSPACE
     561/     175 : 22 4C               	FIM P1, 'L'
     562/     177 : 57 F1               	JMS LD_REG8P0_P1
     563/     179 : 40 2D               	JUN CMD_LOOP
     564/     17B :                     	
     565/     17B :                     ;;;---------------------------------------------------------------------------
     566/     17B :                     ;;; COMMAND_C
     567/     17B :                     ;;; Clear Program Memory
     568/     17B :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 15 - 2023/04/16 11:22:22


     569/     17B :                     COMMAND_C:
     570/     17B :                     ;;; 	FIM CNT, loops(1, 16)
     571/     17B : 2A 00               	FIM CNT, loops(16, 16)
     572/     17D :                     CMDPMC_BANKLOOP:
     573/     17D : (MACRO)              	LD_P1_CNT
     573/     17D : AA                                  LD CNT_HI
     573/     17E : B2                                  XCH P1_HI
     573/     17F : AB                                  LD CNT_LO
     573/     180 : B3                                  XCH P1_LO
     574/     181 : 5B B9               	JMS PM_SELECTPMB_P1
     575/     183 : 20 00               	FIM R0R1, loops(16, 16)	; loop counter
     576/     185 : 22 00               	FIM P1, 00H		; data to fill
     577/     187 :                     CMDPMC_L1:
     578/     187 : 5B A1               	JMS PM_WRITE_P0_P1
     579/     189 : 71 87               	ISZ R1, CMDPMC_L1
     580/     18B : 70 87               	ISZ R0, CMDPMC_L1
     581/     18D :                     
     582/     18D : 5B AD               	JMS PM_INIT_BANK	; write PM_READ code on program memory
     583/     18F : 7B 7D               	ISZ CNT_J, CMDPMC_BANKLOOP
     584/     191 : 7A 7D               	ISZ CNT_I, CMDPMC_BANKLOOP
     585/     193 :                     
     586/     193 :                     ;;;	JMS PM_SELECTPMB_P1	; set PMB to 0
     587/     193 :                     	
     588/     193 : 40 2D               	JUN CMD_LOOP		; return to command loop
     589/     195 :                     
     590/     195 :                     ;;;  	org 0200H
     591/     195 :                     ;;;---------------------------------------------------------------------------
     592/     195 :                     ;;; 8080 emulator
     593/     195 :                     ;;;---------------------------------------------------------------------------
     594/     195 :                     COMMAND_E:
     595/     195 : 22 14               	FIM P1, REG16_PC	; set start PC if designated
     596/     197 : 58 C9               	JMS GETHEX_REG16P1_PM16REG16P0_INCREMENT
     597/     199 :                     EMU_START:
     598/     199 : 20 65               	FIM P0, lo(STR_EMU_MESSAGE)
     599/     19B : 5E 00               	JMS PRINTSTR_P0
     600/     19D :                     
     601/     19D : 2E 24               	FIM P7, REG4_EMU_MODE
     602/     19F : (MACRO)              	LD_ACC_REG4P7
     602/     19F : 2F                          SRC P7
     602/     1A0 : E9                          RDM
     603/     1A1 : 14 A5               	JCN Z, EMU_LOOP	      	; continuous mode
     604/     1A3 : 41 BB               	JUN EMU_DEBUG 		; not continuous mode (view reg or step)
     605/     1A5 :                     
     606/     1A5 :                     ;;;---------------------------------------------------------------------------
     607/     1A5 :                     ;;; Continuous loop
     608/     1A5 :                     ;;;---------------------------------------------------------------------------
     609/     1A5 :                     EMU_LOOP:	        ; loop for continuous mode
     610/     1A5 :                     
     611/     1A5 :                     ;;;---------------------------------------------------------------------------
     612/     1A5 :                     ;;; for debug
     613/     1A5 :                     ;;;---------------------------------------------------------------------------
     614/     1A5 : =0H                  DEBUG_TRACE = 0
     615/     1A5 : =>FALSE              	if DEBUG_TRACE
     616/     1A5 :                     	FIM P0, REG16_PC
     617/     1A5 :                     	FIM P1, REG16_ADDR
     618/     1A5 :                     
     619/     1A5 :                     	FIM P2, up(197DH)
     620/     1A5 :                     	FIM P3, lo(197DH)
     621/     1A5 :                     	JMS LD_REG16P1_P2P3
     622/     1A5 :                     	JMS CMP_REG16P0_REG16P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 16 - 2023/04/16 11:22:22


     623/     1A5 :                     	JCN NZ, DEBUG_TRACE_EXIT
     624/     1A5 :                     
     625/     1A5 :                     	FIM P0, REG16_BC
     626/     1A5 :                     	FIM P2, up(36FFH)
     627/     1A5 :                     	FIM P3, lo(36FFH)
     628/     1A5 :                     	JMS LD_REG16P1_P2P3
     629/     1A5 :                     	JMS CMP_REG16P0_REG16P1
     630/     1A5 :                     	JCN Z, DEBUG_TRACE_HLT
     631/     1A5 :                     	JUN DEBUG_TRACE_EXIT
     632/     1A5 :                     
     633/     1A5 :                     DEBUG_TRACE_PRINT:
     634/     1A5 :                      	JMS PRINT_CRLF
     635/     1A5 :                      	JMS EMU_PRINT_REGISTERS
     636/     1A5 :                     
     637/     1A5 :                     DEBUG_TRACE_HLT:
     638/     1A5 :                     	JUN EMU_PRINTREG_AND_EXIT ; jump to HLT
     639/     1A5 :                     
     640/     1A5 :                     DEBUG_TRACE_EXIT:
     641/     1A5 :                     	FIM P0, REG16_PC
     642/     1A5 : [615]                	endif 			; DEBUG_TRACE
     643/     1A5 :                     ;;;---------------------------------------------------------------------------
     644/     1A5 :                     ;;; end for debug
     645/     1A5 :                     ;;;---------------------------------------------------------------------------
     646/     1A5 :                     
     647/     1A5 : 51 E6               	JMS EXEC_CODE	; call by subroutine consumes precious PC stack 
     648/     1A7 :                     			; but it can return here by BBL from various routines
     649/     1A7 :                     			; in contrast JUN consumes 2 bytes
     650/     1A7 : 11 AB               	JCN T, EMU_EXIT	; exit by TEST button
     651/     1A9 : 41 A5               	JUN EMU_LOOP
     652/     1AB :                     	
     653/     1AB :                     EMU_EXIT:
     654/     1AB : 2A 00               	FIM CNT, loops(16, 16)
     655/     1AD :                     EMU_EXIT_LOOP:			 ; check button keep on for a while
     656/     1AD : 19 A5               	JCN TN, EMU_LOOP
     657/     1AF : 7B AD               	ISZ CNT_J, EMU_EXIT_LOOP
     658/     1B1 : 7A AD               	ISZ CNT_I, EMU_EXIT_LOOP
     659/     1B3 :                     	
     660/     1B3 : 11 B3               	JCN T, $		  ; wait for TEST button released
     661/     1B5 : 20 C2               	FIM P0, lo(STR_EMU_STOP)
     662/     1B7 : 5E 00               	JMS PRINTSTR_P0
     663/     1B9 : 42 6B               	JUN EMU_PRINTREG_AND_EXIT ; jump to HLT
     664/     1BB :                     	
     665/     1BB :                     ;;;---------------------------------------------------------------------------
     666/     1BB :                     ;;; Loop for Debug (view resistor or step)
     667/     1BB :                     ;;;---------------------------------------------------------------------------
     668/     1BB :                     EMU_DEBUG:
     669/     1BB : F8                  	DAC
     670/     1BC : 14 C0               	JCN Z, EMU_VIEWREG
     671/     1BE : 41 D4               	JUN EMU_STEP
     672/     1C0 :                     ;;;---------------------------------------------------------------------------
     673/     1C0 :                     ;;; Loop with Viewing Resister
     674/     1C0 :                     ;;;---------------------------------------------------------------------------
     675/     1C0 :                     EMU_VIEWREG:			; MODE=1 (viw register)
     676/     1C0 : 20 87               	FIM P0, lo(STR_EMU_REGHEADER)
     677/     1C2 : 5E 00               	JMS PRINTSTR_P0
     678/     1C4 :                     EMU_VIEWREG_LOOP:			; MODE=1 (viw register)
     679/     1C4 : 5C AC                	JMS PRINT_CR
     680/     1C6 : 58 EE                	JMS EMU_PRINT_REGISTERS_NO_HEADER
     681/     1C8 : 11 CE               	JCN T, EMU_VIEWREG_EXIT	  ; exit by TEST button
     682/     1CA : 51 E6               	JMS EXEC_CODE
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 17 - 2023/04/16 11:22:22


     683/     1CC : 41 C4               	JUN EMU_VIEWREG_LOOP
     684/     1CE :                     EMU_VIEWREG_EXIT:
     685/     1CE : 11 CE               	JCN T, $		  ; wait for TEST button released
     686/     1D0 : 5C A0                	JMS PRINT_CRLF
     687/     1D2 : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     688/     1D4 :                     
     689/     1D4 :                     ;;;---------------------------------------------------------------------------
     690/     1D4 :                     ;;; Step Execution Loop
     691/     1D4 :                     ;;;---------------------------------------------------------------------------
     692/     1D4 :                     EMU_STEP
     693/     1D4 :                     EMU_STEP_LOOP:			; MODE=2 (step)
     694/     1D4 : 58 EA               	JMS EMU_PRINT_REGISTERS
     695/     1D6 : 5C A0               	JMS PRINT_CRLF
     696/     1D8 : 5C 37               	JMS GETCHAR_P1
     697/     1DA : 2E 2E               	FIM P7, '.'
     698/     1DC : 5D 27               	JMS CMP_P1P7
     699/     1DE : 14 E4               	JCN Z, EMU_STEP_EXIT
     700/     1E0 :                     
     701/     1E0 : 51 E6               	JMS EXEC_CODE
     702/     1E2 : 41 D4               	JUN EMU_STEP_LOOP
     703/     1E4 :                     
     704/     1E4 :                     EMU_STEP_EXIT:
     705/     1E4 : 40 2D               	JUN CMD_LOOP	; go back to monitor loop
     706/     1E6 :                     
     707/     1E6 :                     
     708/     1E6 :                     ;;;---------------------------------------------------------------------------
     709/     1E6 :                     ;;; EXEC_CODE
     710/     1E6 :                     ;;;---------------------------------------------------------------------------
     711/     1E6 :                     EXEC_CODE:
     712/     1E6 : 20 14               	FIM P0, REG16_PC
     713/     1E8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     714/     1EA :                     
     715/     1EA : A2                  	LD P1_HI		;
     716/     1EB : F5                  	RAL			; ACC=bit(654x), CY=bit(7)
     717/     1EC : 1A F0               	JCN CN, CODE_007F	; 00H<=CODE<=7FH
     718/     1EE : 42 06               	JUN CODE_80FF		; 80H<=CODE<=FFH
     719/     1F0 :                     
     720/     1F0 :                     ;;;---------------------------------------------------------------------------
     721/     1F0 :                     CODE_007F:			; 00H<=CODE<=7FH
     722/     1F0 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     723/     1F1 : 1A F5               	JCN CN, CODE_003F	; 00H<=CODE<=3FH
     724/     1F3 : 42 0B               	JUN CODE_407F		; 40H<=CODE<=7FH
     725/     1F5 :                     ;;;---------------------------------------------------------------------------
     726/     1F5 :                     CODE_003F:			; 00H<=CODE<=3FH
     727/     1F5 : A3                  	LD P1_LO
     728/     1F6 : 1C FD               	JCN NZ,CODE_NOT_NOP
     729/     1F8 : A2                  	LD P1_HI
     730/     1F9 : 1C FD               	JCN NZ,CODE_NOT_NOP
     731/     1FB : 42 71               	JUN CODE_00H		; NOP
     732/     1FD :                     CODE_NOT_NOP:
     733/     1FD :                     CODE_C0FF:
     734/     1FD :                     	; merge 01H<=CODE<=3FH and C0H<=CODE<=FFH here,
     735/     1FD :                     	; prepare for jump table
     736/     1FD :                     	; P1=P1<<1 and jump to dispatch table
     737/     1FD : A3                  	LD P1_LO
     738/     1FE : F1                  	CLC
     739/     1FF : F5                  	RAL
     740/     200 : B3                  	XCH P1_LO			; P1_LO=bit(210).0, CY=bit(3)
     741/     201 : A2                  	LD P1_HI
     742/     202 : F5                  	RAL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 18 - 2023/04/16 11:22:22


     743/     203 : B2                  	XCH P1_HI			; P1_HI=bit(6543)
     744/     204 : 4A 00               	JUN JIN_P1_CODE_013F_C0FF	; jump to branch table
     745/     206 :                     ;;;---------------------------------------------------------------------------
     746/     206 :                     CODE_80FF:			; 80H<=P1<=FFH
     747/     206 : F5                  	RAL			; ACC=bit(54xx), CY=bit(6)
     748/     207 : 1A 0B               	JCN CN, CODE_80BF
     749/     209 : 41 FD               	JUN CODE_C0FF		; C0H<=P1<=FFH
     750/     20B :                     
     751/     20B :                     ;;;---------------------------------------------------------------------------
     752/     20B :                     CODE_407F:			; 40H<=P1<=7FH
     753/     20B :                     CODE_80BF:			; 80H<=P1<=BFH
     754/     20B :                     ;;;---------------------------------------------------------------------------
     755/     20B :                     ;;; Common procedure for 40H<=CODE<=BFH
     756/     20B :                     ;;; save source value to REG(SRC)
     757/     20B :                     ;;; REG(SRC) = REG((~P1.bit(210))<<1)
     758/     20B :                     ;;; 8080 register code SSS
     759/     20B :                     ;;; 0 1 2 3 4 5 6 7
     760/     20B :                     ;;; B C D E H L M A
     761/     20B :                     ;;; ADDRESS=~(xxx)<<1
     762/     20B :                     ;;;---------------------------------------------------------------------------
     763/     20B : 5B 12               	JMS PUSH_P1
     764/     20D :                     	;; set source register address to P1
     765/     20D : F0                  	CLB
     766/     20E : B2                  	XCH P1_HI		; P1_HI=0000
     767/     20F : A3                  	LD P1_LO
     768/     210 : F4                  	CMA
     769/     211 : F1                  	CLC
     770/     212 : F5                  	RAL
     771/     213 : B3                  	XCH P1_LO		; P1_LO=~bit(210)<<1, P1_HI=0000
     772/     214 :                     
     773/     214 : A3                  	LD P1_LO
     774/     215 :                     
     775/     215 : D2                   	LDM REG8_M		; check if SRCREG==M or not
     776/     216 : F1                  	CLC
     777/     217 : 93                  	SUB P1_LO
     778/     218 : 14 1E               	JCN Z, GETSRC_LOAD_M
     779/     21A :                     
     780/     21A : 58 17               	JMS LD_P1_REG8P1	; if SRCREG!=M then P1=REG(SRCREG)
     781/     21C : 42 24                       JUN GETSRC_SAVE_SRCVALUE
     782/     21E :                     
     783/     21E :                     GETSRC_LOAD_M:			; if SRCREG==M then P1=PM(HL)
     784/     21E : 20 04               	FIM P0, REG16_HL
     785/     220 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(ADDR(=HL)++)
     786/     222 : 58 6B               	JMS DEC_REG16P0
     787/     224 :                     
     788/     224 :                     GETSRC_SAVE_SRCVALUE:
     789/     224 :                     	;; set source register value to P1
     790/     224 : 20 12               	FIM P0, REG8_SRC
     791/     226 : 57 F1               	JMS LD_REG8P0_P1	; REG(SRC) = P1
     792/     228 :                     
     793/     228 : 5B 43               	JMS POP_P1
     794/     22A : A2                  	LD P1_HI
     795/     22B : F5                  	RAL
     796/     22C : 1A 30               	JCN CN, CODE_407F_MOV	; execute MOV
     797/     22E : 42 58               	JUN CODE_80BF_ARITH_LOGIC
     798/     230 :                     
     799/     230 :                     ;;;---------------------------------------------------------------------------
     800/     230 :                     ;;; Execute MOV code
     801/     230 :                     ;;; source value is already stored to REG8(SRC)
     802/     230 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 19 - 2023/04/16 11:22:22


     803/     230 :                     CODE_407F_MOV:
     804/     230 : 2E 76               	FIM P7, 76H		; check HLT
     805/     232 : 5D 27               	JMS CMP_P1P7
     806/     234 : 1C 38               	JCN ZN, CODE_MOV_L1
     807/     236 : 42 67               	JUN CODE_76H		; HLT
     808/     238 :                     
     809/     238 :                     CODE_MOV_L1:
     810/     238 :                     	;; set destination REGISTER address to P2
     811/     238 : 24 00               	FIM P2, 00H
     812/     23A : A2                  	LD P1_HI
     813/     23B : F5                  	RAL
     814/     23C : F5                  	RAL
     815/     23D : F1                  	CLC
     816/     23E : F6                  	RAR
     817/     23F : F6                  	RAR
     818/     240 : B5                  	XCH P2_LO		; P2_LO=00.bit(54)
     819/     241 : A3                  	LD P1_LO
     820/     242 : F5                  	RAL			; CY=bit(3)
     821/     243 : A5                  	LD P2_LO
     822/     244 : F5                  	RAL
     823/     245 : F4                  	CMA
     824/     246 : F5                  	RAL
     825/     247 : B5                  	XCH P2_LO		; P2_LO=~(bit(543)).0
     826/     248 :                     
     827/     248 : 22 12               	FIM P1, REG8_SRC
     828/     24A : 58 17               	JMS LD_P1_REG8P1	; P1=REG(SRC)
     829/     24C :                     
     830/     24C :                     				; write SRC value to DST
     831/     24C : D2                  	LDM REG8_M		; if DST=M, write M to (HL)
     832/     24D : F1                  	CLC
     833/     24E : 95                  	SUB P2_LO		; check DST(P2) is M or not
     834/     24F : 14 54               	JCN Z, CODE_MOV_WRITE_M_TO_PM
     835/     251 :                     
     836/     251 : 57 FD               	JMS LD_REG8P2_P1	; mov REG(DST) = REG(SRC)
     837/     253 : C0                  	BBL 0
     838/     254 :                     
     839/     254 :                     CODE_MOV_WRITE_M_TO_PM:		; PM(HL)=REG(SRC)
     840/     254 : 20 04               	FIM P0, REG16_HL
     841/     256 : 4B 81               	JUN LD_PM16REG16P0_P1
     842/     258 :                     ;;; 	BBL 0
     843/     258 :                     
     844/     258 :                     
     845/     258 :                     ;;;---------------------------------------------------------------------------
     846/     258 :                     CODE_80BF_ARITH_LOGIC:
     847/     258 :                     	; prepare P2 for jump table
     848/     258 :                     	; P2=0F0H + CODE.bit(543)0
     849/     258 : 24 F0               	FIM P2, 0F0H		; P2=0F0H
     850/     25A : A3                  	LD P1_LO		; ACC=CODE(3210)
     851/     25B : F5                  	RAL			; CY=CODE.bit(3)
     852/     25C : A2                  	LD P1_HI		; ACC=CODE.bit(7654), CY=bit(3)
     853/     25D : F5                  	RAL			; ACC=CODE.bit(6543)
     854/     25E : F1                  	CLC			; CY=0
     855/     25F : F5                  	RAL			; ACC=CODE.bit(543).0
     856/     260 : B5                  	XCH P2_LO		; P2=0F0H + CODE.bit(543)0
     857/     261 :                     
     858/     261 : 2E 12               	FIM P7, REG8_SRC
     859/     263 : 58 09               	JMS LD_P1_REG8P7	; P1 = REG(SRC)
     860/     265 :                     
     861/     265 : 49 EF               	JUN JIN_P2_CODE_80BF
     862/     267 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 20 - 2023/04/16 11:22:22


     863/     267 :                     ;;;---------------------------------------------------------------------------
     864/     267 :                     ;;; Emulate individual codes
     865/     267 :                     ;;;---------------------------------------------------------------------------
     866/     267 :                     CODE_76H:			; HLT
     867/     267 : 20 CB               	FIM P0, lo(STR_EMU_HLT)
     868/     269 : 5E 00               	JMS PRINTSTR_P0
     869/     26B :                     EMU_PRINTREG_AND_EXIT:
     870/     26B : 58 EA               	JMS EMU_PRINT_REGISTERS
     871/     26D : 5C A0               	JMS PRINT_CRLF
     872/     26F : 40 2D               	JUN CMD_LOOP		; go back to monitor by HLT
     873/     271 :                     
     874/     271 :                     CODE_00H:			; NOP
     875/     271 : C0                  	BBL 0
     876/     272 :                     
     877/     272 :                     CODE_01H:			; LXI B,B3B2
     878/     272 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     879/     274 : 24 0C               	FIM P2, REG8_C
     880/     276 : 57 FD               	JMS LD_REG8P2_P1
     881/     278 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     882/     27A : 24 0E               	FIM P2, REG8_B
     883/     27C : 47 FD               	JUN LD_REG8P2_P1
     884/     27E :                     
     885/     27E :                     CODE_02H:			; STAX B
     886/     27E : 2E 00               	FIM P7, REG8_A
     887/     280 : 58 09               	JMS LD_P1_REG8P7
     888/     282 : 20 0C               	FIM P0, REG16_BC
     889/     284 : 4B 81               	JUN LD_PM16REG16P0_P1
     890/     286 :                     
     891/     286 :                     CODE_03H:			; INX B
     892/     286 : 20 0C               	FIM P0, REG16_BC
     893/     288 : 48 5B               	JUN INC_REG16P0
     894/     28A :                     
     895/     28A :                     CODE_04H:			; INR B
     896/     28A : 22 0E               	FIM P1, REG8_B
     897/     28C : 44 30               	JUN CODE_INR
     898/     28E :                     	
     899/     28E :                     CODE_05H:			; DCR B
     900/     28E : 22 0E               	FIM P1, REG8_B
     901/     290 : 44 36               	JUN CODE_DCR
     902/     292 :                     
     903/     292 :                     CODE_06H:			; MVI B,B2
     904/     292 : 24 0E               	FIM P2, REG8_B
     905/     294 : 44 3C               	JUN CODE_MVI
     906/     296 :                     ;;; 	BBL 0
     907/     296 :                     
     908/     296 :                     CODE_07H:			; RLC
     909/     296 : 20 00               	FIM P0, REG8_A
     910/     298 : 58 11               	JMS LD_P1_REG8P0
     911/     29A : A2                  	LD P1_HI
     912/     29B : F5                  	RAL			; CY=bit(7)
     913/     29C : A3                  	LD P1_LO
     914/     29D : F5                  	RAL
     915/     29E : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
     916/     29F : A2                  	LD P1_HI
     917/     2A0 : F5                  	RAL
     918/     2A1 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
     919/     2A2 : 56 8C               	JMS SETFLAG_C_CY
     920/     2A4 : 47 F1               	JUN LD_REG8P0_P1
     921/     2A6 :                     ;;;	BBL 0
     922/     2A6 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 21 - 2023/04/16 11:22:22


     923/     2A6 :                     CODE_08H:			; ...
     924/     2A6 : C0                  	BBL 0
     925/     2A7 :                     	
     926/     2A7 :                     CODE_09H:			; DAD B
     927/     2A7 : 20 04               	FIM P0, REG16_HL
     928/     2A9 : 22 0C               	FIM P1, REG16_BC
     929/     2AB : 58 A0               	JMS ADD_REG16P0_REG16P1
     930/     2AD : 46 8C               	JUN SETFLAG_C_CY
     931/     2AF :                     ;;; 	BBL 0
     932/     2AF :                     
     933/     2AF :                     CODE_0AH:			; LDAX B
     934/     2AF : 20 0C               	FIM P0, REG16_BC
     935/     2B1 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     936/     2B3 : 58 6B               	JMS DEC_REG16P0
     937/     2B5 :                     	
     938/     2B5 : 24 00               	FIM P2, REG8_A
     939/     2B7 : 47 FD               	JUN LD_REG8P2_P1
     940/     2B9 :                     ;;; 	BBL 0
     941/     2B9 :                     
     942/     2B9 :                     CODE_0BH:			; DCX B
     943/     2B9 : 20 0C               	FIM P0, REG16_BC
     944/     2BB : 48 6B               	JUN DEC_REG16P0
     945/     2BD :                     ;;; 	BBL 0
     946/     2BD :                     	
     947/     2BD :                     CODE_0CH:			; INR C
     948/     2BD : 22 0C               	FIM P1, REG8_C
     949/     2BF : 44 30               	JUN CODE_INR
     950/     2C1 :                     ;;; 	BBL 0
     951/     2C1 :                     
     952/     2C1 :                     CODE_0DH:			; DCR C
     953/     2C1 : 22 0C               	FIM P1, REG8_C
     954/     2C3 : 44 36               	JUN CODE_DCR
     955/     2C5 :                     ;;; 	BBL 0
     956/     2C5 :                     
     957/     2C5 :                     CODE_0EH:			; MVI C,B2
     958/     2C5 : 24 0C               	FIM P2, REG8_C
     959/     2C7 : 44 3C               	JUN CODE_MVI
     960/     2C9 :                     ;;; 	BBL 0
     961/     2C9 :                     
     962/     2C9 :                     CODE_0FH:			; RRC
     963/     2C9 : 20 00               	FIM P0, REG8_A
     964/     2CB : 58 11               	JMS LD_P1_REG8P0
     965/     2CD : A3                  	LD P1_LO
     966/     2CE : F6                  	RAR			; CY=bit(0)
     967/     2CF : A2                  	LD P1_HI
     968/     2D0 : F6                  	RAR
     969/     2D1 : B2                  	XCH P1_HI		; P1_HI=bit(0765), CY=bit(4)
     970/     2D2 : A3                  	LD P1_LO
     971/     2D3 : F6                  	RAR
     972/     2D4 : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
     973/     2D5 : 56 8C               	JMS SETFLAG_C_CY
     974/     2D7 : 47 F1               	JUN LD_REG8P0_P1
     975/     2D9 :                     ;;; 	BBL 0
     976/     2D9 :                     
     977/     2D9 :                     CODE_10H:			; ...
     978/     2D9 : C0                  	BBL 0
     979/     2DA :                     
     980/     2DA :                     CODE_11H:			; LXI D,B3B2
     981/     2DA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     982/     2DC : 24 08               	FIM P2, REG8_E
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 22 - 2023/04/16 11:22:22


     983/     2DE : 57 FD               	JMS LD_REG8P2_P1
     984/     2E0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
     985/     2E2 : 24 0A               	FIM P2, REG8_D
     986/     2E4 : 47 FD               	JUN LD_REG8P2_P1
     987/     2E6 :                     
     988/     2E6 :                     CODE_12H:			; STAX D
     989/     2E6 : 2E 00               	FIM P7, REG8_A
     990/     2E8 : 58 09               	JMS LD_P1_REG8P7
     991/     2EA : 20 08               	FIM P0, REG16_DE
     992/     2EC : 4B 81               	JUN LD_PM16REG16P0_P1
     993/     2EE :                     	
     994/     2EE :                     CODE_13H:			; INX D
     995/     2EE : 20 08               	FIM P0, REG16_DE
     996/     2F0 : 48 5B               	JUN INC_REG16P0
     997/     2F2 :                     
     998/     2F2 :                     CODE_14H:			; INR D
     999/     2F2 : 22 0A               	FIM P1, REG8_D
    1000/     2F4 : 44 30               	JUN CODE_INR
    1001/     2F6 :                     
    1002/     2F6 :                     CODE_15H:			; DCR D
    1003/     2F6 : 22 0A               	FIM P1, REG8_D
    1004/     2F8 : 44 36               	JUN CODE_DCR
    1005/     2FA :                     ;;; 	BBL 0
    1006/     2FA :                     
    1007/     2FA :                     CODE_16H:			; MVI D,B2
    1008/     2FA : 24 0A               	FIM P2, REG8_D
    1009/     2FC : 44 3C               	JUN CODE_MVI
    1010/     2FE :                     ;;; 	BBL 0
    1011/     2FE :                     
    1012/     2FE :                     CODE_17H:			; RAL
    1013/     2FE : 20 00               	FIM P0, REG8_A
    1014/     300 : 58 11               	JMS LD_P1_REG8P0	; P1=ACC
    1015/     302 : 56 40               	JMS GETFLAG_C		; CY=FLAG_C
    1016/     304 :                     ;;; 	RAR			; can be omitted because CY is already C
    1017/     304 : A3                  	LD P1_LO
    1018/     305 : F5                  	RAL
    1019/     306 : B3                  	XCH P1_LO		; P1_LO=bit(2107), CY=bit(3)
    1020/     307 : A2                  	LD P1_HI
    1021/     308 : F5                  	RAL
    1022/     309 : B2                  	XCH P1_HI		; P1_HI=bit(6543), CY=bit(7)
    1023/     30A : 56 8C               	JMS SETFLAG_C_CY
    1024/     30C : 47 F1               	JUN LD_REG8P0_P1
    1025/     30E :                     ;;;	BBL 0
    1026/     30E :                     	
    1027/     30E :                     CODE_18H:			; ...
    1028/     30E : C0                  	BBL 0
    1029/     30F :                     
    1030/     30F :                     CODE_19H:			; DAD D
    1031/     30F : 20 04               	FIM P0, REG16_HL
    1032/     311 : 22 08               	FIM P1, REG16_DE
    1033/     313 : 58 A0               	JMS ADD_REG16P0_REG16P1
    1034/     315 : 46 8C               	JUN SETFLAG_C_CY
    1035/     317 :                     ;;;	BBL 0
    1036/     317 :                     	
    1037/     317 :                     CODE_1AH:			; LDAX D
    1038/     317 : 20 08               	FIM P0, REG16_DE
    1039/     319 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1040/     31B : 58 6B               	JMS DEC_REG16P0
    1041/     31D :                     	
    1042/     31D : 24 00               	FIM P2, REG8_A
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 23 - 2023/04/16 11:22:22


    1043/     31F : 47 FD               	JUN LD_REG8P2_P1
    1044/     321 :                     ;;;	BBL 0
    1045/     321 :                     
    1046/     321 :                     CODE_1BH:			; DCX D
    1047/     321 : 20 08               	FIM P0, REG16_DE
    1048/     323 : 48 6B               	JUN DEC_REG16P0
    1049/     325 :                     ;;;	BBL 0
    1050/     325 :                     
    1051/     325 :                     CODE_1CH:			; INR E
    1052/     325 : 22 08               	FIM P1, REG8_E
    1053/     327 : 44 30               	JUN CODE_INR
    1054/     329 :                     ;;;	BBL 0
    1055/     329 :                     
    1056/     329 :                     CODE_1DH:			; DCR E
    1057/     329 : 22 08               	FIM P1, REG8_E
    1058/     32B : 44 36               	JUN CODE_DCR
    1059/     32D :                     ;;;	BBL 0
    1060/     32D :                     
    1061/     32D :                     CODE_1EH:			; MVI E,B2
    1062/     32D : 24 08               	FIM P2, REG8_E
    1063/     32F : 44 3C               	JUN CODE_MVI
    1064/     331 :                     ;;;	BBL 0
    1065/     331 :                     
    1066/     331 :                     CODE_1FH:			; RAR
    1067/     331 : 20 00               	FIM P0, REG8_A
    1068/     333 : 58 11               	JMS LD_P1_REG8P0	; P1=ACC
    1069/     335 : 56 40               	JMS GETFLAG_C		; CY=FLAG_C
    1070/     337 :                     ;;; 	RAR			; can be omitted because CY is already C
    1071/     337 : A2                  	LD P1_HI
    1072/     338 : F6                  	RAR
    1073/     339 : B2                  	XCH P1_HI		; P1_HI=bit(C765), CY=bit(4)
    1074/     33A : A3                  	LD P1_LO
    1075/     33B : F6                  	RAR
    1076/     33C : B3                  	XCH P1_LO		; P1_LO=bit(4321), CY=bit(0)
    1077/     33D : 56 8C               	JMS SETFLAG_C_CY
    1078/     33F : 47 F1               	JUN LD_REG8P0_P1
    1079/     341 :                     ;;;	BBL 0
    1080/     341 :                     
    1081/     341 :                     CODE_20H:			; ...
    1082/     341 : C0                  	BBL 0
    1083/     342 :                     
    1084/     342 :                     CODE_21H:			; LXI H,B3B2
    1085/     342 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1086/     344 : 24 04               	FIM P2, REG8_L
    1087/     346 : 57 FD               	JMS LD_REG8P2_P1
    1088/     348 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1089/     34A : 24 06               	FIM P2, REG8_H
    1090/     34C : 47 FD               	JUN LD_REG8P2_P1
    1091/     34E :                     ;;;	BBL 0
    1092/     34E :                     
    1093/     34E :                     CODE_22H:			; SHLD,B3B2
    1094/     34E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1095/     350 : 24 1C               	FIM P2, REG8_ADDRL
    1096/     352 : 57 FD               	JMS LD_REG8P2_P1
    1097/     354 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1098/     356 : 24 1E               	FIM P2, REG8_ADDRH
    1099/     358 : 57 FD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1100/     35A :                     
    1101/     35A : 2E 04               	FIM P7, REG8_L
    1102/     35C : 58 09               	JMS LD_P1_REG8P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 24 - 2023/04/16 11:22:22


    1103/     35E : 20 1C               	FIM P0, REG16_ADDR
    1104/     360 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=L
    1105/     362 : 58 5B               	JMS INC_REG16P0		; REG(ADDR)++
    1106/     364 :                     	
    1107/     364 : 2E 06               	FIM P7, REG8_H
    1108/     366 : 58 09               	JMS LD_P1_REG8P7
    1109/     368 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(ADDR))=H
    1110/     36A : 48 5B               	JUN INC_REG16P0		; REG(ADDR)++ and return
    1111/     36C :                     ;;;	BBL 0
    1112/     36C :                     
    1113/     36C :                     	
    1114/     36C :                     CODE_23H:			; INX H
    1115/     36C : 20 04               	FIM P0, REG16_HL
    1116/     36E : 48 5B               	JUN INC_REG16P0
    1117/     370 :                     ;;;	BBL 0
    1118/     370 :                     
    1119/     370 :                     CODE_24H:			; INR H
    1120/     370 : 22 06               	FIM P1, REG8_H
    1121/     372 : 44 30               	JUN CODE_INR
    1122/     374 :                     ;;;	BBL 0
    1123/     374 :                     
    1124/     374 :                     CODE_25H:			; DCR H
    1125/     374 : 22 06               	FIM P1, REG8_H
    1126/     376 : 44 36               	JUN CODE_DCR
    1127/     378 :                     ;;;	BBL 0
    1128/     378 :                     
    1129/     378 :                     CODE_26H:			; MVI H,B2
    1130/     378 : 24 06               	FIM P2, REG8_H
    1131/     37A : 44 3C               	JUN CODE_MVI
    1132/     37C :                     ;;;	BBL 0
    1133/     37C :                     
    1134/     37C :                     CODE_27H:			; DAA
    1135/     37C :                     				; This is not properly implemeted
    1136/     37C :                     				; due to the lack of AC(CY4) flag
    1137/     37C : 20 00               	FIM P0, REG8_A
    1138/     37E : 58 11               	JMS LD_P1_REG8P0
    1139/     380 : A3                  	LD P1_LO
    1140/     381 : FB                  	DAA
    1141/     382 : B3                  	XCH P1_LO		; P1_LO=DAA(P1_LO), CY=0 or 1
    1142/     383 : D0                  	LDM 0
    1143/     384 : 82                  	ADD P1_HI		; ACC=P1_HI+CY
    1144/     385 : FB                  	DAA
    1145/     386 : B2                  	XCH P1_HI
    1146/     387 :                     	
    1147/     387 : 47 F1               	JUN LD_REG8P0_P1
    1148/     389 :                     ;;;	BBL 0
    1149/     389 :                     
    1150/     389 :                     CODE_28H:			; ...
    1151/     389 : C0                  	BBL 0
    1152/     38A :                     
    1153/     38A :                     CODE_29H:			; DAD H
    1154/     38A : 20 04               	FIM P0, REG16_HL
    1155/     38C : 22 04               	FIM P1, REG16_HL
    1156/     38E : 58 A0               	JMS ADD_REG16P0_REG16P1
    1157/     390 : 46 8C               	JUN SETFLAG_C_CY
    1158/     392 :                     ;;;	BBL 0
    1159/     392 :                     
    1160/     392 :                     CODE_2AH:			; LHLD,B3B2
    1161/     392 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1162/     394 : 24 1C               	FIM P2, REG8_ADDRL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 25 - 2023/04/16 11:22:22


    1163/     396 : 57 FD               	JMS LD_REG8P2_P1
    1164/     398 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1165/     39A : 24 1E               	FIM P2, REG8_ADDRH
    1166/     39C : 57 FD               	JMS LD_REG8P2_P1		; REG(ADDR)=B3B2
    1167/     39E :                     
    1168/     39E : 20 1C               	FIM P0, REG16_ADDR
    1169/     3A0 : 24 04               	FIM P2, REG8_L
    1170/     3A2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; L=PM(REG(ADDR)++)
    1171/     3A4 : 57 FD               	JMS LD_REG8P2_P1
    1172/     3A6 :                     
    1173/     3A6 : 24 06               	FIM P2, REG8_H
    1174/     3A8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1175/     3AA : 47 FD               	JUN LD_REG8P2_P1		; H=PM(REG(ADDR)++) and return
    1176/     3AC :                     ;;;	BBL 0
    1177/     3AC :                     
    1178/     3AC :                     CODE_2BH:			; DCX H
    1179/     3AC : 20 04               	FIM P0, REG16_HL
    1180/     3AE : 48 6B               	JUN DEC_REG16P0
    1181/     3B0 :                     ;;;	BBL 0
    1182/     3B0 :                     
    1183/     3B0 :                     CODE_2CH:			; INR L
    1184/     3B0 : 22 04               	FIM P1, REG8_L
    1185/     3B2 : 44 30               	JUN CODE_INR
    1186/     3B4 :                     ;;;	BBL 0
    1187/     3B4 :                     
    1188/     3B4 :                     CODE_2DH:			; DCR L
    1189/     3B4 : 22 04               	FIM P1, REG8_L
    1190/     3B6 : 44 36               	JUN CODE_DCR
    1191/     3B8 :                     ;;;	BBL 0
    1192/     3B8 :                     
    1193/     3B8 :                     CODE_2EH:			; MVI L,B2
    1194/     3B8 : 24 04               	FIM P2, REG8_L
    1195/     3BA : 44 3C               	JUN CODE_MVI
    1196/     3BC :                     ;;;	BBL 0
    1197/     3BC :                     
    1198/     3BC :                     CODE_2FH:			; CMA
    1199/     3BC : 20 00               	FIM P0, REG8_A		; A=~A
    1200/     3BE : 58 11               	JMS LD_P1_REG8P0
    1201/     3C0 : A3                  	LD P1_LO
    1202/     3C1 : F4                  	CMA
    1203/     3C2 : B3                  	XCH P1_LO
    1204/     3C3 :                     
    1205/     3C3 : A2                  	LD P1_HI
    1206/     3C4 : F4                  	CMA
    1207/     3C5 : B2                  	XCH P1_HI
    1208/     3C6 : 47 F1               	JUN LD_REG8P0_P1
    1209/     3C8 :                     ;;;	BBL 0
    1210/     3C8 :                     	
    1211/     3C8 :                     CODE_30H:			; ...
    1212/     3C8 : C0                  	BBL 0
    1213/     3C9 :                     
    1214/     3C9 :                     CODE_31H:			; LXI SP, B3B2
    1215/     3C9 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1216/     3CB : 24 18               	FIM P2, REG8_SPL
    1217/     3CD : 57 FD               	JMS LD_REG8P2_P1
    1218/     3CF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1219/     3D1 : 24 1A               	FIM P2, REG8_SPH
    1220/     3D3 : 47 FD               	JUN LD_REG8P2_P1
    1221/     3D5 :                     ;;;	BBL 0
    1222/     3D5 :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 26 - 2023/04/16 11:22:22


    1223/     3D5 :                     CODE_32H:			; STA B3B2
    1224/     3D5 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1225/     3D7 : 24 1C               	FIM P2, REG8_ADDRL
    1226/     3D9 : 57 FD               	JMS LD_REG8P2_P1
    1227/     3DB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1228/     3DD : 24 1E               	FIM P2, REG8_ADDRH
    1229/     3DF : 57 FD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1230/     3E1 :                     
    1231/     3E1 : 2E 00               	FIM P7, REG8_A
    1232/     3E3 : 58 09               	JMS LD_P1_REG8P7	; P1=A
    1233/     3E5 : 20 1C               	FIM P0, REG16_ADDR
    1234/     3E7 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(ADDR)) = A and return
    1235/     3E9 :                     ;;;	BBL 0
    1236/     3E9 :                     	
    1237/     3E9 :                     CODE_33H:			; INX SP
    1238/     3E9 : 20 18               	FIM P0, REG16_SP
    1239/     3EB : 48 5B               	JUN INC_REG16P0
    1240/     3ED :                     ;;;	BBL 0
    1241/     3ED :                     
    1242/     3ED :                     CODE_34H:			; INR M
    1243/     3ED : 20 04               	FIM P0, REG16_HL
    1244/     3EF : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1245/     3F1 : 58 6B               	JMS DEC_REG16P0
    1246/     3F3 :                     	
    1247/     3F3 : 5C BF               	JMS INC_P1
    1248/     3F5 : 5B 81               	JMS LD_PM16REG16P0_P1
    1249/     3F7 :                     
    1250/     3F7 : 46 A6               	JUN SETFLAG_ZSP_P1
    1251/     3F9 :                     ;;;	BBL 0
    1252/     3F9 :                     
    1253/     3F9 :                     CODE_35H:			; DCR M
    1254/     3F9 : 20 04               	FIM P0, REG16_HL
    1255/     3FB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1256/     3FD : 58 6B               	JMS DEC_REG16P0
    1257/     3FF :                     	
    1258/     3FF : 5C CA               	JMS DEC_P1
    1259/     401 : 5B 81               	JMS LD_PM16REG16P0_P1
    1260/     403 :                     
    1261/     403 : 46 A6               	JUN SETFLAG_ZSP_P1
    1262/     405 :                     ;;;	BBL 0
    1263/     405 :                     	
    1264/     405 :                     CODE_36H:			; MVI M, B2
    1265/     405 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1266/     407 : 20 04               	FIM P0, REG16_HL
    1267/     409 : 4B 81               	JUN LD_PM16REG16P0_P1
    1268/     40B :                     ;;;	BBL 0
    1269/     40B :                     	
    1270/     40B :                     CODE_37H:			; STC
    1271/     40B : 46 97               	JUN SETFLAG_C_1
    1272/     40D :                     ;;;	BBL 0
    1273/     40D :                     
    1274/     40D :                     CODE_38H:			; ...
    1275/     40D : C0                  	BBL 0
    1276/     40E :                     
    1277/     40E :                     CODE_39H:			; DAD SP
    1278/     40E : 20 04               	FIM P0, REG16_HL
    1279/     410 : 22 18               	FIM P1, REG16_SP
    1280/     412 : 58 A0               	JMS ADD_REG16P0_REG16P1
    1281/     414 : 46 8C               	JUN SETFLAG_C_CY
    1282/     416 :                     ;;;	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 27 - 2023/04/16 11:22:22


    1283/     416 :                     
    1284/     416 :                     CODE_3AH:			; LDA B2B3
    1285/     416 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1286/     418 : 24 1C               	FIM P2, REG8_ADDRL
    1287/     41A : 57 FD               	JMS LD_REG8P2_P1
    1288/     41C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1289/     41E : 24 1E               	FIM P2, REG8_ADDRH
    1290/     420 : 57 FD               	JMS LD_REG8P2_P1	; REG(ADDR)=B3B2
    1291/     422 :                     
    1292/     422 : 20 1C               	FIM P0, REG16_ADDR
    1293/     424 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1=PM(REG(ADDR)++)
    1294/     426 : 24 00               	FIM P2, REG8_A
    1295/     428 : 47 FD               	JUN LD_REG8P2_P1	; P1=A and return
    1296/     42A :                     ;;;	BBL 0
    1297/     42A :                     
    1298/     42A :                     CODE_3BH:			; DCX SP
    1299/     42A : 20 18               	FIM P0, REG16_SP
    1300/     42C : 48 6B               	JUN DEC_REG16P0
    1301/     42E :                     ;;;	BBL 0
    1302/     42E :                     
    1303/     42E :                     CODE_3CH:			; INR A
    1304/     42E : 22 00               	FIM P1, REG8_A
    1305/     430 :                     CODE_INR:
    1306/     430 : 57 AD               	JMS INC_REG8P1
    1307/     432 : 46 A4               	JUN SETFLAG_ZSP_REG8P1
    1308/     434 :                     ;;;	BBL 0
    1309/     434 :                     
    1310/     434 :                     CODE_3DH:			; DCR A
    1311/     434 : 22 00               	FIM P1, REG8_A
    1312/     436 :                     CODE_DCR:
    1313/     436 : 57 BD               	JMS DEC_REG8P1
    1314/     438 : 46 A4               	JUN SETFLAG_ZSP_REG8P1
    1315/     43A :                     ;;;	BBL 0
    1316/     43A :                     
    1317/     43A :                     CODE_3EH:			; MVI A,B2
    1318/     43A : 24 00               	FIM P2, REG8_A
    1319/     43C :                     CODE_MVI:
    1320/     43C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1321/     43E : 47 FD               	JUN LD_REG8P2_P1
    1322/     440 :                     ;;;	BBL 0
    1323/     440 :                     
    1324/     440 :                     CODE_3FH:			; CMC
    1325/     440 : 56 40               	JMS GETFLAG_C
    1326/     442 :                     ;;; 	RAR			; can be omitted because CY is already C
    1327/     442 : F3                  	CMC
    1328/     443 : 46 8C               	JUN SETFLAG_C_CY
    1329/     445 :                     ;;;	BBL 0
    1330/     445 :                     
    1331/     445 :                     CODE_C0H:			; RNZ
    1332/     445 : 56 2D               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
    1333/     447 : 44 8C               	JUN RET_IF0		; return if Z flag == 0
    1334/     449 :                     	;;;	BBL 0
    1335/     449 :                     
    1336/     449 :                     CODE_C1H:			; POP B
    1337/     449 : 24 0E               	FIM P2, REG8_B
    1338/     44B : 26 0C               	FIM P3, REG8_C
    1339/     44D : 45 C6               	JUN CODE_POP_REG8P2P3
    1340/     44F :                     ;;;	BBL 0
    1341/     44F :                     
    1342/     44F :                     CODE_C2H:			; JNZ
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 28 - 2023/04/16 11:22:22


    1343/     44F : 56 2D               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1344/     451 :                     ;;;	JUN JMP_IF0		; jump if Z==0
    1345/     451 :                     ;;; this jump can be omitted
    1346/     451 :                     JMP_IF0:
    1347/     451 : 14 5F               	JCN Z, CODE_JMP
    1348/     453 : 58 5B               	JMS INC_REG16P0		; PC+=2
    1349/     455 : 58 5B               	JMS INC_REG16P0
    1350/     457 : C0                  	BBL 0
    1351/     458 :                     JMP_IF1:
    1352/     458 : 1C 5F               	JCN ZN, CODE_JMP
    1353/     45A : 58 5B               	JMS INC_REG16P0		; PC+=2
    1354/     45C : 58 5B               	JMS INC_REG16P0
    1355/     45E : C0                  	BBL 0
    1356/     45F :                     
    1357/     45F :                     CODE_C3H:			; JMP B3B2
    1358/     45F :                     CODE_JMP:
    1359/     45F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1360/     461 : (MACRO)              	LD_P3_P1
    1360/     461 : A2                                  LD P1_HI
    1360/     462 : B6                                  XCH P3_HI
    1360/     463 : A3                                  LD P1_LO
    1360/     464 : B7                                  XCH P3_LO
    1361/     465 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1362/     467 : (MACRO)              	LD_P2_P1
    1362/     467 : A2                                  LD P1_HI
    1362/     468 : B4                                  XCH P2_HI
    1362/     469 : A3                                  LD P1_LO
    1362/     46A : B5                                  XCH P2_LO
    1363/     46B :                     ;;;	FIM P0, REG16_PC	; this can be omitted
    1364/     46B : 47 96               	JUN LD_REG16P0_P2P3
    1365/     46D :                     ;;;	BBL 0
    1366/     46D :                     
    1367/     46D :                     CODE_C4H:			; CNZ
    1368/     46D : 56 2D               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1369/     46F : 44 A3               	JUN CALL_IF0		; call if Z==0
    1370/     471 :                     ;;;	BBL 0
    1371/     471 :                     
    1372/     471 :                     CODE_C5H:			; PUSH B
    1373/     471 : 24 0E               	FIM P2, REG8_B
    1374/     473 : 26 0C               	FIM P3, REG8_C
    1375/     475 : 45 DD               	JUN CODE_PUSH_REG8P2P3
    1376/     477 :                     ;;;	BBL 0
    1377/     477 :                     
    1378/     477 :                     CODE_C6H:			; ADI B2
    1379/     477 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1380/     479 :                     ADI_P1:
    1381/     479 : 20 00               	FIM P0, REG8_A
    1382/     47B : 57 9C               	JMS ADD_REG8P0_P1
    1383/     47D : 56 8C               	JMS SETFLAG_C_CY
    1384/     47F : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1385/     481 :                     ;;;	BBL 0
    1386/     481 :                     	
    1387/     481 :                     CODE_C7H:			; RST 0
    1388/     481 : 24 00               	FIM P2, up(0<<3)
    1389/     483 : 26 00               	FIM P3, lo(0<<3)
    1390/     485 : 44 B6               	JUN CALL_P2P3
    1391/     487 :                     ;;;	BBL 0
    1392/     487 :                     	
    1393/     487 :                     CODE_C8H:			; RZ
    1394/     487 : 56 2D               	JMS GETFLAG_Z		; *** Z-flag =1 if zero, =0 if not zero ***
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 29 - 2023/04/16 11:22:22


    1395/     489 :                     ;;;	JUN RET_IF1		; return if Z flag == 1
    1396/     489 :                     ;;; this jump can be omitted
    1397/     489 :                     RET_IF1:
    1398/     489 : 1C 8F               	JCN ZN, CODE_RET
    1399/     48B : C0                  	BBL 0
    1400/     48C :                     RET_IF0:
    1401/     48C : 14 8F               	JCN Z, CODE_RET
    1402/     48E : C0                  	BBL 0
    1403/     48F :                     CODE_C9H:			; RET
    1404/     48F :                     CODE_RET:	
    1405/     48F : 24 16               	FIM P2, REG8_PCH
    1406/     491 : 26 14               	FIM P3, REG8_PCL
    1407/     493 : 45 C6               	JUN CODE_POP_REG8P2P3
    1408/     495 :                     ;;;	BBL 0
    1409/     495 :                     	
    1410/     495 :                     CODE_CAH:			; JZ
    1411/     495 : 56 2D               	JMS GETFLAG_Z		; *** Z==1 if zero, ==0 if not zero ***
    1412/     497 : 44 58               	JUN JMP_IF1		; jump if Z==1
    1413/     499 :                     ;;;	BBL 0
    1414/     499 :                     
    1415/     499 :                     CODE_CBH:			; ...
    1416/     499 : C0                  	BBL 0
    1417/     49A :                     
    1418/     49A :                     CODE_CCH:			; CZ
    1419/     49A : 56 2D               	JMS GETFLAG_Z
    1420/     49C :                     CALL_IF1:
    1421/     49C : 1C AA               	JCN ZN, CODE_CALL
    1422/     49E : 58 5B               	JMS INC_REG16P0		; PC+=2
    1423/     4A0 : 58 5B               	JMS INC_REG16P0
    1424/     4A2 : C0                  	BBL 0
    1425/     4A3 :                     CALL_IF0:	
    1426/     4A3 : 14 AA               	JCN Z, CODE_CALL
    1427/     4A5 : 58 5B               	JMS INC_REG16P0		; PC+=2
    1428/     4A7 : 58 5B               	JMS INC_REG16P0
    1429/     4A9 : C0                  	BBL 0
    1430/     4AA :                     
    1431/     4AA :                     CODE_CDH:			; CALL B3B2
    1432/     4AA :                     CODE_CALL:
    1433/     4AA : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P2=PM(REG(PC)++)
    1434/     4AC : (MACRO)              	LD_P3_P1
    1434/     4AC : A2                                  LD P1_HI
    1434/     4AD : B6                                  XCH P3_HI
    1434/     4AE : A3                                  LD P1_LO
    1434/     4AF : B7                                  XCH P3_LO
    1435/     4B0 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P3=PM(REG(PC)++)
    1436/     4B2 : (MACRO)              	LD_P2_P1			; P2P3=B3B2 (Target address to jump)
    1436/     4B2 : A2                                  LD P1_HI
    1436/     4B3 : B4                                  XCH P2_HI
    1436/     4B4 : A3                                  LD P1_LO
    1436/     4B5 : B5                                  XCH P2_LO
    1437/     4B6 :                     
    1438/     4B6 :                     CALL_P2P3:
    1439/     4B6 : 22 1C               	FIM P1, REG16_ADDR
    1440/     4B8 : 57 76               	JMS LD_REG16P1_REG16P0	; ADDR=PC (return address to PUSH)
    1441/     4BA :                     ;;; 	FIM P0, REG16_PC	; this can be omitted
    1442/     4BA : 57 96               	JMS LD_REG16P0_P2P3	; PC=B3B2
    1443/     4BC :                     	
    1444/     4BC :                     	;; PUSH PC
    1445/     4BC : 24 1E               	FIM P2, REG8_ADDRH
    1446/     4BE : 26 1C               	FIM P3, REG8_ADDRL
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 30 - 2023/04/16 11:22:22


    1447/     4C0 : 45 DD               	JUN CODE_PUSH_REG8P2P3
    1448/     4C2 :                     ;;; 	BBL 0
    1449/     4C2 :                     
    1450/     4C2 :                     CODE_CEH:			; ACI B2
    1451/     4C2 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1452/     4C4 :                     ACI_P1:
    1453/     4C4 : 20 00               	FIM P0, REG8_A
    1454/     4C6 : 56 40               	JMS GETFLAG_C
    1455/     4C8 : 1A D3               	JCN CN, ACI_P1_NOCARRY
    1456/     4CA : 5C BF               	JMS INC_P1
    1457/     4CC : 1A D3               	JCN CN, ACI_P1_NOCARRY
    1458/     4CE : 57 9C               	JMS ADD_REG8P0_P1
    1459/     4D0 : FA                  	STC
    1460/     4D1 : 44 D5               	JUN ACI_P1_EXIT
    1461/     4D3 :                     ACI_P1_NOCARRY:	
    1462/     4D3 : 57 9C               	JMS ADD_REG8P0_P1
    1463/     4D5 :                     ACI_P1_EXIT:	
    1464/     4D5 : 56 8C               	JMS SETFLAG_C_CY
    1465/     4D7 : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1466/     4D9 :                     ;;;	BBL 0
    1467/     4D9 :                     	
    1468/     4D9 :                     CODE_CFH:			; RST 1
    1469/     4D9 : 24 00               	FIM P2, up(1<<3)
    1470/     4DB : 26 08               	FIM P3, lo(1<<3)
    1471/     4DD : 44 B6               	JUN CALL_P2P3
    1472/     4DF :                     	
    1473/     4DF :                     CODE_D0H:			; RNC
    1474/     4DF : 56 40               	JMS GETFLAG_C		;
    1475/     4E1 : 44 8C               	JUN RET_IF0		;
    1476/     4E3 :                     ;;;	BBL 0
    1477/     4E3 :                     
    1478/     4E3 :                     CODE_D1H:			; POP D
    1479/     4E3 : 24 0A               	FIM P2, REG8_D
    1480/     4E5 : 26 08               	FIM P3, REG8_E
    1481/     4E7 : 45 C6               	JUN CODE_POP_REG8P2P3
    1482/     4E9 :                     ;;;	BBL 0
    1483/     4E9 :                     
    1484/     4E9 :                     CODE_D2H:			; JNC
    1485/     4E9 : 56 40               	JMS GETFLAG_C
    1486/     4EB : 44 51               	JUN JMP_IF0
    1487/     4ED :                     ;;;	BBL 0
    1488/     4ED :                     
    1489/     4ED :                     CODE_D3H:			; OUT B2
    1490/     4ED : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1491/     4EF : 49 69               	JUN EMULATE_OUT_P1
    1492/     4F1 :                     ;;;	BBL 0
    1493/     4F1 :                     	
    1494/     4F1 :                     CODE_D4H:			; CNC
    1495/     4F1 : 56 40               	JMS GETFLAG_C
    1496/     4F3 : 44 A3               	JUN CALL_IF0
    1497/     4F5 :                     ;;;	BBL 0
    1498/     4F5 :                     
    1499/     4F5 :                     CODE_D5H:			; PUSH D
    1500/     4F5 : 24 0A               	FIM P2, REG8_D
    1501/     4F7 : 26 08               	FIM P3, REG8_E
    1502/     4F9 : 45 DD               	JUN CODE_PUSH_REG8P2P3
    1503/     4FB :                     ;;;	BBL 0
    1504/     4FB :                     
    1505/     4FB :                     CODE_D6H:			; SUI B2
    1506/     4FB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 31 - 2023/04/16 11:22:22


    1507/     4FD :                     SUI_P1:
    1508/     4FD : 20 00               	FIM P0, REG8_A
    1509/     4FF : 57 CD               	JMS SUB_REG8P0_P1
    1510/     501 : 56 8C               	JMS SETFLAG_C_CY
    1511/     503 : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1512/     505 :                     ;;;	BBL 0
    1513/     505 :                     	
    1514/     505 :                     CODE_D7H:			; RST 2
    1515/     505 : 24 00               	FIM P2, up(2<<3)
    1516/     507 : 26 10               	FIM P3, lo(2<<3)
    1517/     509 : 44 B6               	JUN CALL_P2P3
    1518/     50B :                     ;;;	BBL 0
    1519/     50B :                     	
    1520/     50B :                     CODE_D8H:			; RC
    1521/     50B : 56 40               	JMS GETFLAG_C
    1522/     50D : 44 89               	JUN RET_IF1
    1523/     50F :                     ;;;	BBL 0
    1524/     50F :                     
    1525/     50F :                     CODE_D9H:			; ...
    1526/     50F : C0                  	BBL 0
    1527/     510 :                     
    1528/     510 :                     CODE_DAH:			; JC
    1529/     510 : 56 40               	JMS GETFLAG_C
    1530/     512 : 44 58               	JUN JMP_IF1
    1531/     514 :                     ;;;	BBL 0
    1532/     514 :                     
    1533/     514 :                     CODE_DBH:			; IN
    1534/     514 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1535/     516 : 49 81               	JUN EMULATE_IN_P1
    1536/     518 :                     ;;;	BBL 0
    1537/     518 :                     
    1538/     518 :                     CODE_DCH:			; CC
    1539/     518 : 56 40               	JMS GETFLAG_C
    1540/     51A : 44 9C               	JUN CALL_IF1
    1541/     51C :                     
    1542/     51C :                     CODE_DDH:			; ...
    1543/     51C : C0                  	BBL 0
    1544/     51D :                     CODE_DEH:			; SBI B2
    1545/     51D : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1546/     51F :                     SBI_P1:
    1547/     51F : 56 40               	JMS GETFLAG_C
    1548/     521 : 14 25               	JCN Z, SBI_P1_NOCARRY
    1549/     523 : 5C BF               	JMS INC_P1
    1550/     525 :                     SBI_P1_NOCARRY:
    1551/     525 : 20 00               	FIM P0, REG8_A
    1552/     527 : 57 CD               	JMS SUB_REG8P0_P1
    1553/     529 : 56 8C               	JMS SETFLAG_C_CY
    1554/     52B : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1555/     52D :                     ;;; 	BBL 0
    1556/     52D :                     
    1557/     52D :                     CODE_DFH:			; RST 3
    1558/     52D : 24 00               	FIM P2, up(3<<3)
    1559/     52F : 26 18               	FIM P3, lo(3<<3)
    1560/     531 : 44 B6               	JUN CALL_P2P3
    1561/     533 :                     
    1562/     533 :                     CODE_E0H:			; RPO
    1563/     533 : 56 7C               	JMS GETFLAG_P
    1564/     535 : 44 8C               	JUN RET_IF0
    1565/     537 :                     	
    1566/     537 :                     CODE_E1H:			; POP H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 32 - 2023/04/16 11:22:22


    1567/     537 : 24 06               	FIM P2, REG8_H
    1568/     539 : 26 04               	FIM P3, REG8_L
    1569/     53B : 45 C6               	JUN CODE_POP_REG8P2P3
    1570/     53D :                     
    1571/     53D :                     CODE_E2H:			; JPO
    1572/     53D : 56 7C               	JMS GETFLAG_P
    1573/     53F : 44 51               	JUN JMP_IF0
    1574/     541 :                     
    1575/     541 :                     CODE_E3H:			; XTHL L<->(SP) H<->(SP+1)
    1576/     541 :                     	;; POP to ADDR
    1577/     541 : 24 1E               	FIM P2, REG8_ADDRH
    1578/     543 : 26 1C               	FIM P3, REG8_ADDRL
    1579/     545 : 20 18               	FIM P0, REG16_SP
    1580/     547 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1581/     549 : 57 F7               	JMS LD_REG8P3_P1		; REG(ADDRL)=(SP++)
    1582/     54B : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1583/     54D : 57 FD               	JMS LD_REG8P2_P1		; REG(ADDRH)=(SP++)
    1584/     54F :                     
    1585/     54F :                     	;; PUSH HL
    1586/     54F : 24 06               	FIM P2, REG8_H
    1587/     551 : 26 04               	FIM P3, REG8_L
    1588/     553 : 58 1D               	JMS LD_P1_REG8P2	; P1=REG(H)
    1589/     555 : 58 6B               	JMS DEC_REG16P0		; REG(SP)--
    1590/     557 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = H
    1591/     559 :                     
    1592/     559 : 58 23               	JMS LD_P1_REG8P3	; P1=REG(L)
    1593/     55B : 58 6B               	JMS DEC_REG16P0		; REG(SP)--
    1594/     55D : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = L
    1595/     55F :                     
    1596/     55F :                     	;; HL = ADDR
    1597/     55F : 2C 04               	FIM P6, REG16_HL
    1598/     561 : 2E 1C               	FIM P7, REG16_ADDR
    1599/     563 : 48 50               	JUN LD_REG16P6_REG16P7 ; REG(HL)=REG(ADDR)
    1600/     565 :                     	
    1601/     565 :                     CODE_E4H:			; CPO
    1602/     565 : 56 7C               	JMS GETFLAG_P
    1603/     567 : 44 A3               	JUN CALL_IF0
    1604/     569 :                     
    1605/     569 :                     CODE_E5H:			; PUSH H
    1606/     569 : 24 06               	FIM P2, REG8_H
    1607/     56B : 26 04               	FIM P3, REG8_L
    1608/     56D : 45 DD               	JUN CODE_PUSH_REG8P2P3
    1609/     56F :                     
    1610/     56F :                     CODE_E6H:			; ANI B2
    1611/     56F : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1612/     571 :                     ANI_P1:
    1613/     571 : (MACRO)              	LD_P2_P1		; P2=B2
    1613/     571 : A2                                  LD P1_HI
    1613/     572 : B4                                  XCH P2_HI
    1613/     573 : A3                                  LD P1_LO
    1613/     574 : B5                                  XCH P2_LO
    1614/     575 : 20 00               	FIM P0, REG8_A
    1615/     577 : 58 11               	JMS LD_P1_REG8P0	; P1=A
    1616/     579 : 56 B5               	JMS AND_P1_P2		; P1=A&P2
    1617/     57B : 57 F1               	JMS LD_REG8P0_P1	; A= P1
    1618/     57D : 56 8E               	JMS SETFLAG_C_0
    1619/     57F : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1620/     581 :                     	
    1621/     581 :                     CODE_E7H:			; RST 4
    1622/     581 : 24 00               	FIM P2, up(4<<3)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 33 - 2023/04/16 11:22:22


    1623/     583 : 26 20               	FIM P3, lo(4<<3)
    1624/     585 : 44 B6               	JUN CALL_P2P3
    1625/     587 :                     
    1626/     587 :                     CODE_E8H:			; RPE
    1627/     587 : 56 7C               	JMS GETFLAG_P
    1628/     589 : 44 89               	JUN RET_IF1
    1629/     58B :                     
    1630/     58B :                     CODE_E9H:			; PCHL
    1631/     58B : 22 04               	FIM P1, REG16_HL
    1632/     58D : 47 6C               	JUN LD_REG16P0_REG16P1
    1633/     58F :                     	
    1634/     58F :                     CODE_EAH:			; JPE
    1635/     58F : 56 7C               	JMS GETFLAG_P
    1636/     591 : 44 58               	JUN JMP_IF1
    1637/     593 :                     
    1638/     593 :                     CODE_EBH:			; XCHG
    1639/     593 : 20 1C               	FIM P0, REG16_ADDR
    1640/     595 : 22 04               	FIM P1, REG16_HL
    1641/     597 : 57 6C               	JMS LD_REG16P0_REG16P1	; ADDR=HL
    1642/     599 : 20 08               	FIM P0, REG16_DE
    1643/     59B : 57 76               	JMS LD_REG16P1_REG16P0	; HL=DE
    1644/     59D : 22 1C               	FIM P1, REG16_ADDR
    1645/     59F : 47 6C               	JUN LD_REG16P0_REG16P1	; DE=ADDR
    1646/     5A1 :                     	
    1647/     5A1 :                     CODE_ECH:			; CPE
    1648/     5A1 : 56 7C               	JMS GETFLAG_P
    1649/     5A3 : 44 9C               	JUN CALL_IF1
    1650/     5A5 :                     
    1651/     5A5 :                     CODE_EDH:			; ...
    1652/     5A5 : C0                  	BBL 0
    1653/     5A6 :                     
    1654/     5A6 :                     CODE_EEH:			; XRI B2
    1655/     5A6 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1656/     5A8 :                     XRI_P1:
    1657/     5A8 : (MACRO)              	LD_P2_P1		; P2=B2
    1657/     5A8 : A2                                  LD P1_HI
    1657/     5A9 : B4                                  XCH P2_HI
    1657/     5AA : A3                                  LD P1_LO
    1657/     5AB : B5                                  XCH P2_LO
    1658/     5AC : 20 00               	FIM P0, REG8_A
    1659/     5AE : 58 11               	JMS LD_P1_REG8P0	; P1=A
    1660/     5B0 : 56 C6               	JMS XOR_P1_P2
    1661/     5B2 : 57 F1               	JMS LD_REG8P0_P1	; A= A ^ P2
    1662/     5B4 : 56 8E               	JMS SETFLAG_C_0
    1663/     5B6 : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1664/     5B8 :                     	
    1665/     5B8 :                     CODE_EFH:			; RST 5
    1666/     5B8 : 24 00               	FIM P2, up(5<<3)
    1667/     5BA : 26 28               	FIM P3, lo(5<<3)
    1668/     5BC : 44 B6               	JUN CALL_P2P3
    1669/     5BE :                     
    1670/     5BE :                     CODE_F0H:			; RP
    1671/     5BE : 56 37               	JMS GETFLAG_S
    1672/     5C0 : 44 8C               	JUN RET_IF0
    1673/     5C2 :                     	
    1674/     5C2 :                     CODE_F1H:			; POP PSW
    1675/     5C2 : 24 00               	FIM P2, REG8_A
    1676/     5C4 : 26 10               	FIM P3, REG8_FLAG
    1677/     5C6 :                     CODE_POP_REG8P2P3:
    1678/     5C6 : 20 18               	FIM P0, REG16_SP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 34 - 2023/04/16 11:22:22


    1679/     5C8 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; lower byte is first
    1680/     5CA : 57 F7               	JMS LD_REG8P3_P1		; REG(P3)=(SP++)
    1681/     5CC : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    1682/     5CE : 47 FD               	JUN LD_REG8P2_P1		; REG(P2)=(SP++)
    1683/     5D0 :                     	
    1684/     5D0 :                     CODE_F2H:			; JP
    1685/     5D0 : 56 37               	JMS GETFLAG_S
    1686/     5D2 : 44 51               	JUN JMP_IF0
    1687/     5D4 :                     
    1688/     5D4 :                     CODE_F3H:			; DI
    1689/     5D4 :                     				; Interrupt is not implemented
    1690/     5D4 : C0                  	BBL 0
    1691/     5D5 :                     
    1692/     5D5 :                     CODE_F4H:			; CP
    1693/     5D5 : 56 37               	JMS GETFLAG_S
    1694/     5D7 : 44 A3               	JUN CALL_IF0
    1695/     5D9 :                     
    1696/     5D9 :                     CODE_F5H:			; PUSH PSW
    1697/     5D9 : 24 00               	FIM P2, REG8_A
    1698/     5DB : 26 10               	FIM P3, REG8_FLAG
    1699/     5DD :                     CODE_PUSH_REG8P2P3:
    1700/     5DD : 20 18               	FIM P0, REG16_SP
    1701/     5DF :                     				; higher byte is the first
    1702/     5DF : 58 1D               	JMS LD_P1_REG8P2	; P1=REG(P2)
    1703/     5E1 : 58 6B               	JMS DEC_REG16P0		; REG(SP)--
    1704/     5E3 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(SP)) = P2
    1705/     5E5 :                     
    1706/     5E5 : 58 23               	JMS LD_P1_REG8P3	; P1=REG(P3)
    1707/     5E7 : 58 6B               	JMS DEC_REG16P0		; REG(SP)--
    1708/     5E9 : 4B 81               	JUN LD_PM16REG16P0_P1	; PM(REG(SP)) = P3 and return
    1709/     5EB :                     
    1710/     5EB :                     CODE_F6H:			; ORI
    1711/     5EB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1712/     5ED :                     ORI_P1:
    1713/     5ED : (MACRO)              	LD_P2_P1		; P2=B2
    1713/     5ED : A2                                  LD P1_HI
    1713/     5EE : B4                                  XCH P2_HI
    1713/     5EF : A3                                  LD P1_LO
    1713/     5F0 : B5                                  XCH P2_LO
    1714/     5F1 : 20 00               	FIM P0, REG8_A
    1715/     5F3 : 58 11               	JMS LD_P1_REG8P0	; P1=A
    1716/     5F5 : 56 D7               	JMS OR_P1_P2
    1717/     5F7 : 57 F1               	JMS LD_REG8P0_P1	; P1= A | P2
    1718/     5F9 : 56 8E               	JMS SETFLAG_C_0
    1719/     5FB : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1720/     5FD :                     	
    1721/     5FD :                     CODE_F7H:			; RST 6
    1722/     5FD : 24 00               	FIM P2, up(6<<3)
    1723/     5FF : 26 30               	FIM P3, lo(6<<3)
    1724/     601 : 44 B6               	JUN CALL_P2P3
    1725/     603 :                     
    1726/     603 :                     CODE_F8H:			; RM
    1727/     603 : 56 37               	JMS GETFLAG_S
    1728/     605 : 44 89               	JUN RET_IF1
    1729/     607 :                     
    1730/     607 :                     CODE_F9H:			; SPHL
    1731/     607 : 2C 18               	FIM P6, REG16_SP
    1732/     609 : 2E 04               	FIM P7, REG16_HL
    1733/     60B : 48 50               	JUN LD_REG16P6_REG16P7
    1734/     60D :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 35 - 2023/04/16 11:22:22


    1735/     60D :                     CODE_FAH:			; JM
    1736/     60D : 56 37               	JMS GETFLAG_S
    1737/     60F : 44 58               	JUN JMP_IF1
    1738/     611 :                     
    1739/     611 :                     CODE_FBH:			; EI
    1740/     611 :                     				; Interrupt is not implemented
    1741/     611 : C0                  	BBL 0
    1742/     612 :                     
    1743/     612 :                     CODE_FCH:			; CM
    1744/     612 : 56 37               	JMS GETFLAG_S
    1745/     614 : 44 9C               	JUN CALL_IF1
    1746/     616 :                     
    1747/     616 :                     CODE_FDH:			; ...
    1748/     616 : C0                  	BBL 0
    1749/     617 :                     
    1750/     617 :                     CODE_FEH:			; CPI
    1751/     617 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT ; P1=PM(REG(PC)++)
    1752/     619 :                     CPI_P1:
    1753/     619 : 2C 12               	FIM P6, REG8_SRC
    1754/     61B : 2E 00               	FIM P7, REG8_A
    1755/     61D : 57 E6               	JMS LD_REG8P6_REG8P7
    1756/     61F : 20 12               	FIM P0, REG8_SRC
    1757/     621 : 57 CD               	JMS SUB_REG8P0_P1
    1758/     623 : 56 8C               	JMS SETFLAG_C_CY
    1759/     625 : 46 A0               	JUN SETFLAG_ZSP_REG8P0
    1760/     627 :                     ;;; 	BBL 0
    1761/     627 :                     CODE_FFH:			; RST 7
    1762/     627 : 24 00               	FIM P2, up(7<<3)
    1763/     629 : 26 38               	FIM P3, lo(7<<3)
    1764/     62B : 44 B6               	JUN CALL_P2P3
    1765/     62D :                     
    1766/     62D :                     ;;;---------------------------------------------------------------------------
    1767/     62D :                     ;;; FLAG routines
    1768/     62D :                     ;;;---------------------------------------------------------------------------
    1769/     62D :                     
    1770/     62D :                     ;;;---------------------------------------------------------------------------
    1771/     62D :                     ;;; GETFLAG_Z
    1772/     62D :                     ;;; ACC = FLAG_Z, CY=FLAG_Z
    1773/     62D :                     ;;;---------------------------------------------------------------------------
    1774/     62D :                     GETFLAG_Z:
    1775/     62D : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1776/     62F : 2F                  	SRC P7
    1777/     630 : E9                  	RDM
    1778/     631 : F5                  	RAL
    1779/     632 : F5                  	RAL
    1780/     633 : 12 36               	JCN C, GETFLAG_Z_EXIT1
    1781/     635 : C0                  	BBL 0
    1782/     636 :                     GETFLAG_Z_EXIT1:
    1783/     636 : C1                  	BBL 1
    1784/     637 :                     
    1785/     637 :                     ;;;---------------------------------------------------------------------------
    1786/     637 :                     ;;; GETFLAG_S
    1787/     637 :                     ;;; ACC = FLAG_S, CY=FLAG_S
    1788/     637 :                     ;;;---------------------------------------------------------------------------
    1789/     637 :                     GETFLAG_S:
    1790/     637 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1791/     639 : 2F                  	SRC P7
    1792/     63A : E9                  	RDM
    1793/     63B : F5                  	RAL
    1794/     63C : 12 3F               	JCN C, GETFLAG_S_EXIT1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 36 - 2023/04/16 11:22:22


    1795/     63E : C0                  	BBL 0
    1796/     63F :                     GETFLAG_S_EXIT1:
    1797/     63F : C1                  	BBL 1
    1798/     640 :                     
    1799/     640 :                     ;;;---------------------------------------------------------------------------
    1800/     640 :                     ;;; GETFLAG_C
    1801/     640 :                     ;;; ACC=FLAG_C, CY=FLAG_C
    1802/     640 :                     ;;;---------------------------------------------------------------------------
    1803/     640 :                     GETFLAG_C:
    1804/     640 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1805/     642 : 2F                  	SRC P7
    1806/     643 : E9                  	RDM
    1807/     644 : F6                  	RAR
    1808/     645 : 12 48               	JCN C, GETFLAG_C_1
    1809/     647 : C0                  	BBL 0
    1810/     648 :                     GETFLAG_C_1:	
    1811/     648 : C1                  	BBL 1
    1812/     649 :                     
    1813/     649 :                     ;;;---------------------------------------------------------------------------
    1814/     649 :                     ;;; SETFLAG_P_P1
    1815/     649 :                     ;;;---------------------------------------------------------------------------
    1816/     649 :                     ;;; table implementation may be faster
    1817/     649 :                     ;;;              0123456789ABCDEF
    1818/     649 :                     ;;; 4bit table =(1001011001101001)
    1819/     649 :                     ;;; 	org 09C0H
    1820/     649 :                     ;;; PARITY4TABLE:  			; (1 when EVEN)
    1821/     649 :                     ;;; 	data 1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1
    1822/     649 :                     ;;;
    1823/     649 :                     ;;;GETPARITY_R1:
    1824/     649 :                     ;;;	FIN P2
    1825/     649 :                     ;;;	LD P2_LO
    1826/     649 :                     ;;;	XCH R1
    1827/     649 :                     ;;;	BBL 0
    1828/     649 :                     ;;;
    1829/     649 :                     ;;;	FIM P0, lo(PARITY4TABLE)
    1830/     649 :                     ;;;	LD P1_HI
    1831/     649 :                     ;;;	XCH R1
    1832/     649 :                     ;;;	JMS GETPARITY_R1
    1833/     649 :                     ;;;	LD R1
    1834/     649 :                     ;;;	XCH P1_HI
    1835/     649 :                     ;;;	LD P1_LO
    1836/     649 :                     ;;;	XCH R1	
    1837/     649 :                     ;;;	JMS GETPARITY_R1
    1838/     649 :                     ;;;	LD R1
    1839/     649 :                     ;;;	ADD P1_HI
    1840/     649 :                     ;;;	RAR       ; here CY=PARITY (1 when EVEN)
    1841/     649 :                     ;;;	BBL 0	
    1842/     649 :                     
    1843/     649 : =>TRUE               	if USE_EMU_FLAG_P
    1844/     649 :                     SETFLAG_P_P1:
    1845/     649 : F0                  	CLB
    1846/     64A : BA                  	XCH CNT_I		; I=0
    1847/     64B : A2                  	LD P1_HI
    1848/     64C : F5                  	RAL
    1849/     64D : 1A 50               	JCN CN,PFLAG_CNT1
    1850/     64F : 6A                  	INC CNT_I
    1851/     650 :                     PFLAG_CNT1:
    1852/     650 : F5                  	RAL
    1853/     651 : 1A 54               	JCN CN,PFLAG_CNT2
    1854/     653 : 6A                  	INC CNT_I
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 37 - 2023/04/16 11:22:22


    1855/     654 :                     PFLAG_CNT2:
    1856/     654 : F5                  	RAL
    1857/     655 : 1A 58               	JCN CN,PFLAG_CNT3
    1858/     657 : 6A                  	INC CNT_I
    1859/     658 :                     PFLAG_CNT3:
    1860/     658 : F5                  	RAL
    1861/     659 : 1A 5C               	JCN CN,PFLAG_CNT4
    1862/     65B : 6A                  	INC CNT_I
    1863/     65C :                     PFLAG_CNT4:
    1864/     65C : A3                  	LD P1_LO
    1865/     65D : F5                  	RAL
    1866/     65E : 1A 61               	JCN CN,PFLAG_CNT5
    1867/     660 : 6A                  	INC CNT_I
    1868/     661 :                     PFLAG_CNT5:
    1869/     661 : F5                  	RAL
    1870/     662 : 1A 65               	JCN CN,PFLAG_CNT6
    1871/     664 : 6A                  	INC CNT_I
    1872/     665 :                     PFLAG_CNT6:
    1873/     665 : F5                  	RAL
    1874/     666 : 1A 69               	JCN CN,PFLAG_CNT7
    1875/     668 : 6A                  	INC CNT_I
    1876/     669 :                     PFLAG_CNT7:
    1877/     669 : F5                  	RAL
    1878/     66A : 1A 6D               	JCN CN,PFLAG_CNT8
    1879/     66C : 6A                  	INC CNT_I
    1880/     66D :                     PFLAG_CNT8:
    1881/     66D : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1882/     66F : 2F                  	SRC P7
    1883/     670 : E9                  	RDM
    1884/     671 : F5                  	RAL
    1885/     672 : F5                  	RAL
    1886/     673 : E0                  	WRM			; FLAG=xCxx (CY=P)
    1887/     674 :                     
    1888/     674 : AA                  	LD CNT_I
    1889/     675 : F6                  	RAR
    1890/     676 : F3                  	CMC			; CY=~(LSB of I) (P=1 when EVEN )
    1891/     677 :                     
    1892/     677 : E9                  	RDM
    1893/     678 : F6                  	RAR
    1894/     679 : F6                  	RAR
    1895/     67A : E0                  	WRM			; FLAG=xPxC
    1896/     67B :                     	
    1897/     67B : C0                  	BBL 0
    1898/     67C : [1843]               	endif 			; USE_EMU_FLAG_P
    1899/     67C :                     
    1900/     67C :                     ;;;---------------------------------------------------------------------------
    1901/     67C :                     ;;; GETFLAG_P
    1902/     67C :                     ;;; Flag P is loded to ACC
    1903/     67C :                     ;;; ACC=FLAG_P
    1904/     67C :                     ;;; This routine is compiled if USE_EMU_FLAG_P, 
    1905/     67C :                     ;;; otherwise FLAG_P is always 0.
    1906/     67C :                     ;;; 
    1907/     67C :                     ;;; This routine is not properly implemented,
    1908/     67C :                     ;;; because the frag is set on demand
    1909/     67C :                     ;;;---------------------------------------------------------------------------
    1910/     67C :                     GETFLAG_P:
    1911/     67C : =>TRUE               	if USE_EMU_FLAG_P
    1912/     67C :                     
    1913/     67C : 22 00               	FIM P1, REG8_A
    1914/     67E : 58 17               	JMS LD_P1_REG8P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 38 - 2023/04/16 11:22:22


    1915/     680 : 56 49               	JMS SETFLAG_P_P1
    1916/     682 :                     
    1917/     682 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1918/     684 : 2F                  	SRC P7
    1919/     685 : E9                  	RDM
    1920/     686 : F5                  	RAL
    1921/     687 : F5                  	RAL
    1922/     688 : 1A 8B               	JCN CN, GETFLAG_P_0
    1923/     68A : C1                  	BBL 1
    1924/     68B :                     GETFLAG_P_0:
    1925/     68B : [1911]               	endif 			; USE_EMU_FLAG_P
    1926/     68B : C0                  	BBL 0
    1927/     68C :                     	
    1928/     68C :                     ;;;---------------------------------------------------------------------------
    1929/     68C :                     ;;; SETFLAG_C_{CY, 0, 1}
    1930/     68C :                     ;;; 	Set FLAG_C = {CY, 0, 1}
    1931/     68C :                     ;;;---------------------------------------------------------------------------
    1932/     68C :                     SETFLAG_C_CY:
    1933/     68C : 12 97               	JCN C, SETFLAG_C_1
    1934/     68E :                     SETFLAG_C_0:
    1935/     68E : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1936/     690 : 2F                  	SRC P7
    1937/     691 : E9                  	RDM
    1938/     692 : F6                  	RAR
    1939/     693 : F1                  	CLC
    1940/     694 : F5                  	RAL
    1941/     695 : E0                  	WRM
    1942/     696 : C0                  	BBL 0
    1943/     697 :                     SETFLAG_C_1:
    1944/     697 : 2E 10               	FIM P7, REG4_FLAG_1P1C
    1945/     699 : 2F                  	SRC P7
    1946/     69A : E9                  	RDM
    1947/     69B : F6                  	RAR
    1948/     69C : FA                  	STC
    1949/     69D : F5                  	RAL
    1950/     69E : E0                  	WRM
    1951/     69F : C0                  	BBL 0
    1952/     6A0 :                     
    1953/     6A0 :                     ;;;---------------------------------------------------------------------------
    1954/     6A0 :                     ;;; SETFLAG_ZSP_{REG8P0, REG8P1, P1}
    1955/     6A0 :                     ;;; 
    1956/     6A0 :                     ;;; Set flag Z and S according to the value of {REG8P0, REG8P1, P1}.
    1957/     6A0 :                     ;;; 
    1958/     6A0 :                     ;;; P flag is compiled if USE_EMU_FLAG_P, but not implemented properly yet.
    1959/     6A0 :                     ;;; It is evaluated on demand (in the GETFLAG_P routine)
    1960/     6A0 :                     ;;;---------------------------------------------------------------------------
    1961/     6A0 :                     SETFLAG_ZSP_REG8P0:
    1962/     6A0 : 58 11               	JMS LD_P1_REG8P0
    1963/     6A2 : 46 A6               	JUN SETFLAG_ZSP_P1
    1964/     6A4 :                     
    1965/     6A4 :                     SETFLAG_ZSP_REG8P1:
    1966/     6A4 : 58 17               	JMS LD_P1_REG8P1
    1967/     6A6 :                     
    1968/     6A6 :                     SETFLAG_ZSP_P1:
    1969/     6A6 : A2                  	LD P1_HI		; ACC=Sxxx
    1970/     6A7 : F5                  	RAL			; CY=S
    1971/     6A8 : F7                  	TCC			; ACC=000S, (CY=Z), (BH=00)
    1972/     6A9 :                     	
    1973/     6A9 : BA                  	XCH CNT_I		; I=BHxS, (CY=Z to be set), (BH=00)
    1974/     6AA :                     
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 39 - 2023/04/16 11:22:22


    1975/     6AA :                     	;; set Z FLAG
    1976/     6AA : 5D 34               	JMS ISZEROORNOT_P1
    1977/     6AC : F6                  	RAR			; CY= (P1==0) ? 0 : 1
    1978/     6AD : F3                  	CMC			; CY= (P1==0) ? 1 : 0
    1979/     6AE : AA                  	LD CNT_I		; ACC=BHxS (CY=Z)
    1980/     6AF : F6                  	RAR			; ACC=ZBHx (CY=S)
    1981/     6B0 : F6                  	RAR			; ACC=SZBH (BH=00)
    1982/     6B1 :                     
    1983/     6B1 : 2E 11               	FIM P7, REG4_FLAG_SZBH
    1984/     6B3 : 2F                  	SRC P7
    1985/     6B4 : E0                  	WRM			; write back to REG16_FLAG_SZBH
    1986/     6B5 :                     
    1987/     6B5 :                     ;;;---------------------------------------------------------------------------
    1988/     6B5 :                     ;;; Logical operators
    1989/     6B5 :                     ;;; and, or, xor
    1990/     6B5 :                     ;;; destroy: P3(R6, R7)
    1991/     6B5 :                     ;;;---------------------------------------------------------------------------
    1992/     6B5 :                     
    1993/     6B5 :                     ;;;---------------------------------------------------------------------------
    1994/     6B5 :                     ;;; AND_P1_P2
    1995/     6B5 :                     ;;; P1 = P1 & P2
    1996/     6B5 :                     ;;;---------------------------------------------------------------------------
    1997/     6B5 :                     AND_P1_P2:
    1998/     6B5 : A3                  	LD P1_LO
    1999/     6B6 : B6                  	XCH R6
    2000/     6B7 : A5                  	LD P2_LO
    2001/     6B8 : B7                  	XCH R7
    2002/     6B9 : 56 E8               	JMS AND_R6_R7
    2003/     6BB : A6                  	LD R6
    2004/     6BC : B3                  	XCH P1_LO
    2005/     6BD :                     	
    2006/     6BD : A2                  	LD P1_HI
    2007/     6BE : B6                  	XCH R6
    2008/     6BF : A4                  	LD P2_HI
    2009/     6C0 : B7                  	XCH R7
    2010/     6C1 : 56 E8               	JMS AND_R6_R7
    2011/     6C3 : A6                  	LD R6
    2012/     6C4 : B2                  	XCH P1_HI
    2013/     6C5 : C0                  	BBL 0
    2014/     6C6 :                     
    2015/     6C6 :                     ;;;---------------------------------------------------------------------------
    2016/     6C6 :                     ;;; XOR_P1_P2
    2017/     6C6 :                     ;;; P1 = P1 ^ P2
    2018/     6C6 :                     ;;;---------------------------------------------------------------------------
    2019/     6C6 :                     XOR_P1_P2:
    2020/     6C6 : A3                  	LD P1_LO
    2021/     6C7 : B6                  	XCH R6
    2022/     6C8 : A5                  	LD P2_LO
    2023/     6C9 : B7                  	XCH R7
    2024/     6CA : 57 14               	JMS XOR_R6_R7
    2025/     6CC : A6                  	LD R6
    2026/     6CD : B3                  	XCH P1_LO
    2027/     6CE :                     	
    2028/     6CE : A2                  	LD P1_HI
    2029/     6CF : B6                  	XCH R6
    2030/     6D0 : A4                  	LD P2_HI
    2031/     6D1 : B7                  	XCH R7
    2032/     6D2 : 57 14               	JMS XOR_R6_R7
    2033/     6D4 : A6                  	LD R6
    2034/     6D5 : B2                  	XCH P1_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 40 - 2023/04/16 11:22:22


    2035/     6D6 : C0                  	BBL 0
    2036/     6D7 :                     
    2037/     6D7 :                     ;;;---------------------------------------------------------------------------
    2038/     6D7 :                     ;;; OR_P1_P2
    2039/     6D7 :                     ;;; P1 = P1 | P2
    2040/     6D7 :                     ;;;---------------------------------------------------------------------------
    2041/     6D7 :                     OR_P1_P2:
    2042/     6D7 : A3                  	LD P1_LO
    2043/     6D8 : B6                  	XCH R6
    2044/     6D9 : A5                  	LD P2_LO
    2045/     6DA : B7                  	XCH R7
    2046/     6DB : 57 40               	JMS OR_R6_R7
    2047/     6DD : A6                  	LD R6
    2048/     6DE : B3                  	XCH P1_LO
    2049/     6DF :                     	
    2050/     6DF : A2                  	LD P1_HI
    2051/     6E0 : B6                  	XCH R6
    2052/     6E1 : A4                  	LD P2_HI
    2053/     6E2 : B7                  	XCH R7
    2054/     6E3 : 57 40               	JMS OR_R6_R7
    2055/     6E5 : A6                  	LD R6
    2056/     6E6 : B2                  	XCH P1_HI
    2057/     6E7 : C0                  	BBL 0
    2058/     6E8 :                     
    2059/     6E8 :                     ;;;---------------------------------------------------------------------------
    2060/     6E8 :                     ;;; AND_R6_R7
    2061/     6E8 :                     ;;; R6 = R6 & R7
    2062/     6E8 :                     ;;;---------------------------------------------------------------------------
    2063/     6E8 :                     AND_R6_R7:
    2064/     6E8 : F0                  	CLB
    2065/     6E9 : A7                  	LD R7
    2066/     6EA : F6                  	RAR
    2067/     6EB : 12 F2               	JCN C, AND67_L1	; jump if R7.bit0==1
    2068/     6ED : A6                  	LD R6
    2069/     6EE : F6                  	RAR
    2070/     6EF : F1                  	CLC
    2071/     6F0 : F5                  	RAL
    2072/     6F1 : B6                  	XCH R6		; R6.bit0=0
    2073/     6F2 :                     AND67_L1:
    2074/     6F2 : A7                  	LD R7
    2075/     6F3 : F6                  	RAR
    2076/     6F4 : F6                  	RAR
    2077/     6F5 : 12 FE               	JCN C, AND67_L2	; jump if R7.bit1==1
    2078/     6F7 : A6                  	LD R6
    2079/     6F8 : F6                  	RAR
    2080/     6F9 : F6                  	RAR
    2081/     6FA : F1                  	CLC
    2082/     6FB : F5                  	RAL
    2083/     6FC : F5                  	RAL
    2084/     6FD : B6                  	XCH R6		; R6.bit1=0
    2085/     6FE :                     AND67_L2:
    2086/     6FE : A7                  	LD R7
    2087/     6FF : F5                  	RAL
    2088/     700 : F5                  	RAL
    2089/     701 : 12 0A               	JCN C, AND67_L3	; jump if R7.bit2==1
    2090/     703 : A6                  	LD R6
    2091/     704 : F5                  	RAL
    2092/     705 : F5                  	RAL
    2093/     706 : F1                  	CLC
    2094/     707 : F6                  	RAR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 41 - 2023/04/16 11:22:22


    2095/     708 : F6                  	RAR
    2096/     709 : B6                  	XCH R6		; R6.bit2=0
    2097/     70A :                     AND67_L3:
    2098/     70A : A7                  	LD R7
    2099/     70B : F5                  	RAL
    2100/     70C : 12 13               	JCN C, AND67_L4	; jump if R7.bit3==1
    2101/     70E : A6                  	LD R6
    2102/     70F : F5                  	RAL
    2103/     710 : F1                  	CLC
    2104/     711 : F6                  	RAR
    2105/     712 : B6                  	XCH R6		; R6.bit3=0
    2106/     713 :                     AND67_L4:
    2107/     713 :                     	
    2108/     713 : C0                  	BBL 0
    2109/     714 :                     
    2110/     714 :                     ;;;---------------------------------------------------------------------------
    2111/     714 :                     ;;; XOR_R6_R7
    2112/     714 :                     ;;; R6 = R6 ^ R7
    2113/     714 :                     ;;;---------------------------------------------------------------------------
    2114/     714 :                     XOR_R6_R7:
    2115/     714 : F0                  	CLB
    2116/     715 : A7                  	LD R7
    2117/     716 : F6                  	RAR
    2118/     717 : 1A 1E               	JCN CN, XOR67_L1	; jump if R7.bit0==0
    2119/     719 : A6                  	LD R6
    2120/     71A : F6                  	RAR
    2121/     71B : F3                  	CMC
    2122/     71C : F5                  	RAL
    2123/     71D : B6                  	XCH R6			; cmp R6.bit0
    2124/     71E :                     XOR67_L1:
    2125/     71E : A7                  	LD R7
    2126/     71F : F6                  	RAR
    2127/     720 : F6                  	RAR
    2128/     721 : 1A 2A               	JCN CN, XOR67_L2	; jump if R7.bit1==0
    2129/     723 : A6                  	LD R6
    2130/     724 : F6                  	RAR
    2131/     725 : F6                  	RAR
    2132/     726 : F3                  	CMC
    2133/     727 : F5                  	RAL
    2134/     728 : F5                  	RAL
    2135/     729 : B6                  	XCH R6			; cmp R6.bit1
    2136/     72A :                     XOR67_L2:
    2137/     72A : A7                  	LD R7
    2138/     72B : F5                  	RAL
    2139/     72C : F5                  	RAL
    2140/     72D : 1A 36               	JCN CN, XOR67_L3	; jump if R7.bit2==0
    2141/     72F : A6                  	LD R6
    2142/     730 : F5                  	RAL
    2143/     731 : F5                  	RAL
    2144/     732 : F3                  	CMC
    2145/     733 : F6                  	RAR
    2146/     734 : F6                  	RAR
    2147/     735 : B6                  	XCH R6			; cmp R6.bit2
    2148/     736 :                     XOR67_L3:
    2149/     736 : A7                  	LD R7
    2150/     737 : F5                  	RAL
    2151/     738 : 1A 3F               	JCN CN, XOR67_L4	; jump if R7.bit3==0
    2152/     73A : A6                  	LD R6
    2153/     73B : F5                  	RAL
    2154/     73C : F3                  	CMC
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 42 - 2023/04/16 11:22:22


    2155/     73D : F6                  	RAR
    2156/     73E : B6                  	XCH R6			; cmp R6.bit3
    2157/     73F :                     XOR67_L4:
    2158/     73F : C0                  	BBL 0
    2159/     740 :                     
    2160/     740 :                     ;;;---------------------------------------------------------------------------
    2161/     740 :                     ;;; OR_R6_R7
    2162/     740 :                     ;;; R6 = R6 | R7
    2163/     740 :                     ;;;---------------------------------------------------------------------------
    2164/     740 :                     OR_R6_R7:
    2165/     740 : F0                  	CLB
    2166/     741 : A7                  	LD R7
    2167/     742 : F6                  	RAR
    2168/     743 : 1A 4A               	JCN CN, OR67_L1	; jump if R7.bit0==0
    2169/     745 : A6                  	LD R6
    2170/     746 : F6                  	RAR
    2171/     747 : FA                  	STC
    2172/     748 : F5                  	RAL
    2173/     749 : B6                  	XCH R6			; cmp R6.bit0
    2174/     74A :                     OR67_L1:
    2175/     74A : A7                  	LD R7
    2176/     74B : F6                  	RAR
    2177/     74C : F6                  	RAR
    2178/     74D : 1A 56               	JCN CN, OR67_L2	; jump if R7.bit1==0
    2179/     74F : A6                  	LD R6
    2180/     750 : F6                  	RAR
    2181/     751 : F6                  	RAR
    2182/     752 : FA                  	STC
    2183/     753 : F5                  	RAL
    2184/     754 : F5                  	RAL
    2185/     755 : B6                  	XCH R6			; cmp R6.bit1
    2186/     756 :                     OR67_L2:
    2187/     756 : A7                  	LD R7
    2188/     757 : F5                  	RAL
    2189/     758 : F5                  	RAL
    2190/     759 : 1A 62               	JCN CN, OR67_L3	; jump if R7.bit2==0
    2191/     75B : A6                  	LD R6
    2192/     75C : F5                  	RAL
    2193/     75D : F5                  	RAL
    2194/     75E : FA                  	STC
    2195/     75F : F6                  	RAR
    2196/     760 : F6                  	RAR
    2197/     761 : B6                  	XCH R6			; cmp R6.bit2
    2198/     762 :                     OR67_L3:
    2199/     762 : A7                  	LD R7
    2200/     763 : F5                  	RAL
    2201/     764 : 1A 6B               	JCN CN, OR67_L4	; jump if R7.bit3==0
    2202/     766 : A6                  	LD R6
    2203/     767 : F5                  	RAL
    2204/     768 : FA                  	STC
    2205/     769 : F6                  	RAR
    2206/     76A : B6                  	XCH R6			; cmp R6.bit3
    2207/     76B :                     OR67_L4:
    2208/     76B : C0                  	BBL 0
    2209/     76C :                     
    2210/     76C :                     
    2211/     76C :                     ;;;	org 0900H
    2212/     76C :                     ;;;----------------------------------------------------------------------------
    2213/     76C :                     ;;; Subroutines for REG16 (16bit registars)
    2214/     76C :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 43 - 2023/04/16 11:22:22


    2215/     76C :                     	
    2216/     76C :                     	
    2217/     76C :                     ;;;----------------------------------------------------------------------------
    2218/     76C :                     ;;; LD_REG16P0_REG16P1
    2219/     76C :                     ;;; REG16(P0) = REG16(P1)
    2220/     76C :                     ;;; destroy: P6, P7
    2221/     76C :                     ;;;----------------------------------------------------------------------------
    2222/     76C :                     LD_REG16P0_REG16P1:
    2223/     76C : (MACRO)              	LD_P6_P0
    2223/     76C : A0                                  LD P0_HI
    2223/     76D : BC                                  XCH P6_HI
    2223/     76E : A1                                  LD P0_LO
    2223/     76F : BD                                  XCH P6_LO
    2224/     770 : (MACRO)              	LD_P7_P1
    2224/     770 : A2                                  LD P1_HI
    2224/     771 : BE                                  XCH P7_HI
    2224/     772 : A3                                  LD P1_LO
    2224/     773 : BF                                  XCH P7_LO
    2225/     774 : 48 50               	JUN LD_REG16P6_REG16P7
    2226/     776 :                     
    2227/     776 :                     ;;;----------------------------------------------------------------------------
    2228/     776 :                     ;;; LD_REG16P1_REG16P0
    2229/     776 :                     ;;; REG16(P1) = REG16(P0)
    2230/     776 :                     ;;; destroy: P6, P7
    2231/     776 :                     ;;;----------------------------------------------------------------------------
    2232/     776 :                     LD_REG16P1_REG16P0:
    2233/     776 : (MACRO)              	LD_P6_P1
    2233/     776 : A2                                  LD P1_HI
    2233/     777 : BC                                  XCH P6_HI
    2233/     778 : A3                                  LD P1_LO
    2233/     779 : BD                                  XCH P6_LO
    2234/     77A : (MACRO)              	LD_P7_P0
    2234/     77A : A0                                  LD P0_HI
    2234/     77B : BE                                  XCH P7_HI
    2234/     77C : A1                                  LD P0_LO
    2234/     77D : BF                                  XCH P7_LO
    2235/     77E : 48 50               	JUN LD_REG16P6_REG16P7
    2236/     780 :                     
    2237/     780 :                     ;;;----------------------------------------------------------------------------
    2238/     780 :                     ;;; LD_REG16P7_P2P3
    2239/     780 :                     ;;; REG16(P7) = P2P3(R4R5R6R7)
    2240/     780 :                     ;;; destroy P7
    2241/     780 :                     ;;;----------------------------------------------------------------------------
    2242/     780 :                     LD_REG16P7_P2P3:
    2243/     780 : 2F                  	SRC P7
    2244/     781 : A7                  	LD P3_LO
    2245/     782 : E0                  	WRM
    2246/     783 :                     
    2247/     783 : 6F                  	INC P7_LO
    2248/     784 : 2F                  	SRC P7
    2249/     785 : A6                  	LD P3_HI
    2250/     786 : E0                  	WRM
    2251/     787 :                     
    2252/     787 : 6F                  	INC P7_LO
    2253/     788 : 2F                  	SRC P7
    2254/     789 : A5                  	LD P2_LO
    2255/     78A : E0                  	WRM
    2256/     78B :                     
    2257/     78B : 6F                  	INC P7_LO
    2258/     78C : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 44 - 2023/04/16 11:22:22


    2259/     78D : A4                  	LD P2_HI
    2260/     78E : E0                  	WRM
    2261/     78F :                     
    2262/     78F : C0                  	BBL 0
    2263/     790 :                     
    2264/     790 :                     ;;;----------------------------------------------------------------------------
    2265/     790 :                     ;;; LD_REG16P1_P2P3
    2266/     790 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2267/     790 :                     ;;; destroy P7
    2268/     790 :                     ;;;----------------------------------------------------------------------------
    2269/     790 :                     LD_REG16P1_P2P3:
    2270/     790 : (MACRO)              	LD_P7_P1
    2270/     790 : A2                                  LD P1_HI
    2270/     791 : BE                                  XCH P7_HI
    2270/     792 : A3                                  LD P1_LO
    2270/     793 : BF                                  XCH P7_LO
    2271/     794 : 47 80               	JUN LD_REG16P7_P2P3
    2272/     796 :                     
    2273/     796 :                     ;;;----------------------------------------------------------------------------
    2274/     796 :                     ;;; LD_REG16P0_P2P3
    2275/     796 :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    2276/     796 :                     ;;; destroy P7
    2277/     796 :                     ;;;----------------------------------------------------------------------------
    2278/     796 :                     LD_REG16P0_P2P3:
    2279/     796 : (MACRO)              	LD_P7_P0
    2279/     796 : A0                                  LD P0_HI
    2279/     797 : BE                                  XCH P7_HI
    2279/     798 : A1                                  LD P0_LO
    2279/     799 : BF                                  XCH P7_LO
    2280/     79A : 47 80               	JUN LD_REG16P7_P2P3
    2281/     79C :                     
    2282/     79C :                     ;;;----------------------------------------------------------------------------
    2283/     79C :                     ;;; ADD_REG8P0_P1
    2284/     79C :                     ;;; REG8(P0) = REG16(P0)+P1
    2285/     79C :                     ;;; destroy: P7(R14, R15)
    2286/     79C :                     ;;;----------------------------------------------------------------------------
    2287/     79C :                     ADD_REG8P0_P1:
    2288/     79C : (MACRO)              	LD_P7_P0
    2288/     79C : A0                                  LD P0_HI
    2288/     79D : BE                                  XCH P7_HI
    2288/     79E : A1                                  LD P0_LO
    2288/     79F : BF                                  XCH P7_LO
    2289/     7A0 : 2F                  	SRC P7
    2290/     7A1 : E9                  	RDM
    2291/     7A2 : A3                  	LD P1_LO
    2292/     7A3 : F1                  	CLC
    2293/     7A4 : EB                  	ADM
    2294/     7A5 : E0                  	WRM
    2295/     7A6 : 6F                  	INC P7_LO
    2296/     7A7 : 2F                  	SRC P7
    2297/     7A8 : E9                  	RDM
    2298/     7A9 : A2                  	LD P1_HI
    2299/     7AA : EB                  	ADM
    2300/     7AB : E0                  	WRM
    2301/     7AC : C0                  	BBL 0
    2302/     7AD :                     
    2303/     7AD :                     ;;;----------------------------------------------------------------------------
    2304/     7AD :                     ;;; INC_REG8P1
    2305/     7AD :                     ;;; REG8(P1) = REG16(P1)+1
    2306/     7AD :                     ;;; CY is set if overflow
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 45 - 2023/04/16 11:22:22


    2307/     7AD :                     ;;; destroy: P7(R14, R15)
    2308/     7AD :                     ;;;----------------------------------------------------------------------------
    2309/     7AD :                     INC_REG8P1:
    2310/     7AD : (MACRO)              	LD_P7_P1
    2310/     7AD : A2                                  LD P1_HI
    2310/     7AE : BE                                  XCH P7_HI
    2310/     7AF : A3                                  LD P1_LO
    2310/     7B0 : BF                                  XCH P7_LO
    2311/     7B1 :                     	
    2312/     7B1 : 2F                  	SRC P7
    2313/     7B2 : E9                  	RDM
    2314/     7B3 : F2                  	IAC 
    2315/     7B4 : E0                  	WRM			; REG(P0).lower++
    2316/     7B5 : 1C BC               	JCN NZ, REG8_INC_EXIT
    2317/     7B7 : 6F                  	INC P7_LO
    2318/     7B8 : 2F                  	SRC P7
    2319/     7B9 : E9                  	RDM
    2320/     7BA : F2                  	IAC 
    2321/     7BB : E0                  	WRM			; REG(P0).higher++
    2322/     7BC :                     REG8_INC_EXIT:
    2323/     7BC : C0                  	BBL 0
    2324/     7BD :                     
    2325/     7BD :                     ;;;----------------------------------------------------------------------------
    2326/     7BD :                     ;;; DEC_REG8P1
    2327/     7BD :                     ;;; REG8(P1) = REG16(P1)+1
    2328/     7BD :                     ;;; destroy: P7(R14, R15)
    2329/     7BD :                     ;;;----------------------------------------------------------------------------
    2330/     7BD :                     DEC_REG8P1:
    2331/     7BD : (MACRO)              	LD_P7_P1
    2331/     7BD : A2                                  LD P1_HI
    2331/     7BE : BE                                  XCH P7_HI
    2331/     7BF : A3                                  LD P1_LO
    2331/     7C0 : BF                                  XCH P7_LO
    2332/     7C1 :                     	
    2333/     7C1 : 2F                  	SRC P7
    2334/     7C2 : E9                  	RDM
    2335/     7C3 : F8                  	DAC 
    2336/     7C4 : E0                  	WRM			; REG(P0).lower--
    2337/     7C5 : 12 CC               	JCN C, REG8_DEC_EXIT	; borrow=0 then exit
    2338/     7C7 : 6F                  	INC P7_LO
    2339/     7C8 : 2F                  	SRC P7
    2340/     7C9 : E9                  	RDM
    2341/     7CA : F8                  	DAC 
    2342/     7CB : E0                  	WRM			; REG(P0).higher--
    2343/     7CC :                     REG8_DEC_EXIT:
    2344/     7CC : C0                  	BBL 0
    2345/     7CD :                     
    2346/     7CD :                     ;;;----------------------------------------------------------------------------
    2347/     7CD :                     ;;; SUB_REG8P0_P1
    2348/     7CD :                     ;;; REG8(P0) = REG8(P0)-P1
    2349/     7CD :                     ;;; destroy: P7(R14, R15)
    2350/     7CD :                     ;;;----------------------------------------------------------------------------
    2351/     7CD :                     SUB_REG8P0_P1:
    2352/     7CD : (MACRO)              	LD_P7_P0
    2352/     7CD : A0                                  LD P0_HI
    2352/     7CE : BE                                  XCH P7_HI
    2352/     7CF : A1                                  LD P0_LO
    2352/     7D0 : BF                                  XCH P7_LO
    2353/     7D1 : 2F                  	SRC P7
    2354/     7D2 : E9                  	RDM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 46 - 2023/04/16 11:22:22


    2355/     7D3 : F1                  	CLC
    2356/     7D4 : 93                  	SUB P1_LO
    2357/     7D5 : E0                  	WRM
    2358/     7D6 : F3                  	CMC
    2359/     7D7 :                     
    2360/     7D7 : 6F                  	INC P7_LO
    2361/     7D8 : 2F                  	SRC P7
    2362/     7D9 : E9                  	RDM
    2363/     7DA : 92                  	SUB P1_HI
    2364/     7DB : E0                  	WRM
    2365/     7DC : F3                  	CMC
    2366/     7DD :                     
    2367/     7DD : C0                  	BBL 0	
    2368/     7DE :                     
    2369/     7DE :                     ;;;----------------------------------------------------------------------------
    2370/     7DE :                     ;;; LD_REG8P0_REG8P1
    2371/     7DE :                     ;;; REG8(P0)=REG8(P1)
    2372/     7DE :                     ;;; destroy: P6, P7
    2373/     7DE :                     ;;;----------------------------------------------------------------------------
    2374/     7DE :                     LD_REG8P0_REG8P1:
    2375/     7DE : (MACRO)              	LD_P6_P0
    2375/     7DE : A0                                  LD P0_HI
    2375/     7DF : BC                                  XCH P6_HI
    2375/     7E0 : A1                                  LD P0_LO
    2375/     7E1 : BD                                  XCH P6_LO
    2376/     7E2 : (MACRO)              	LD_P7_P1
    2376/     7E2 : A2                                  LD P1_HI
    2376/     7E3 : BE                                  XCH P7_HI
    2376/     7E4 : A3                                  LD P1_LO
    2376/     7E5 : BF                                  XCH P7_LO
    2377/     7E6 :                     LD_REG8P6_REG8P7:
    2378/     7E6 : 2F                  	SRC P7
    2379/     7E7 : E9                  	RDM
    2380/     7E8 : 2D                  	SRC P6
    2381/     7E9 : E0                  	WRM
    2382/     7EA : 6F                  	INC P7_LO
    2383/     7EB : 6D                  	INC P6_LO
    2384/     7EC : 2F                  	SRC P7
    2385/     7ED : E9                  	RDM
    2386/     7EE : 2D                  	SRC P6
    2387/     7EF : E0                  	WRM
    2388/     7F0 :                     
    2389/     7F0 : C0                  	BBL 0
    2390/     7F1 :                     
    2391/     7F1 :                     ;;;----------------------------------------------------------------------------
    2392/     7F1 :                     ;;; LD_REG8P0_P1
    2393/     7F1 :                     ;;; REG8(P0)=P1
    2394/     7F1 :                     ;;;----------------------------------------------------------------------------
    2395/     7F1 :                     LD_REG8P0_P1:
    2396/     7F1 : (MACRO)              	LD_P7_P0
    2396/     7F1 : A0                                  LD P0_HI
    2396/     7F2 : BE                                  XCH P7_HI
    2396/     7F3 : A1                                  LD P0_LO
    2396/     7F4 : BF                                  XCH P7_LO
    2397/     7F5 : 48 01                	JUN LD_REG8P7_P1
    2398/     7F7 :                     
    2399/     7F7 :                     ;;;----------------------------------------------------------------------------
    2400/     7F7 :                     ;;; LD_REG8P3_P1
    2401/     7F7 :                     ;;; REG8(P3)=P1
    2402/     7F7 :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 47 - 2023/04/16 11:22:22


    2403/     7F7 :                     LD_REG8P3_P1:
    2404/     7F7 : (MACRO)              	LD_P7_P3
    2404/     7F7 : A6                                  LD P3_HI
    2404/     7F8 : BE                                  XCH P7_HI
    2404/     7F9 : A7                                  LD P3_LO
    2404/     7FA : BF                                  XCH P7_LO
    2405/     7FB : 48 01                	JUN LD_REG8P7_P1
    2406/     7FD :                     
    2407/     7FD :                     ;;;----------------------------------------------------------------------------
    2408/     7FD :                     ;;; LD_REG8P2_P1
    2409/     7FD :                     ;;; REG8(P2) = P1
    2410/     7FD :                     ;;;----------------------------------------------------------------------------
    2411/     7FD :                     LD_REG8P2_P1:
    2412/     7FD : (MACRO)              	LD_P7_P2
    2412/     7FD : A4                                  LD P2_HI
    2412/     7FE : BE                                  XCH P7_HI
    2412/     7FF : A5                                  LD P2_LO
    2412/     800 : BF                                  XCH P7_LO
    2413/     801 :                     ;;; 	JUN LD_REG8P7_P1
    2414/     801 :                     ;;;----------------------------------------------------------------------------
    2415/     801 :                     ;;; LD_REG8P7_P1
    2416/     801 :                     ;;; REG8(P7)=P1
    2417/     801 :                     ;;; destroy: P7
    2418/     801 :                     ;;;----------------------------------------------------------------------------
    2419/     801 :                     LD_REG8P7_P1:
    2420/     801 : 2F                  	SRC P7
    2421/     802 : A3                  	LD P1_LO
    2422/     803 : E0                  	WRM
    2423/     804 :                     
    2424/     804 : 6F                  	INC P7_LO
    2425/     805 : 2F                  	SRC P7
    2426/     806 : A2                  	LD P1_HI
    2427/     807 : E0                  	WRM
    2428/     808 :                     
    2429/     808 : C0                  	BBL 0
    2430/     809 :                     	
    2431/     809 :                     ;;;----------------------------------------------------------------------------
    2432/     809 :                     ;;; LD_P1_REG8P7
    2433/     809 :                     ;;; P1 = REG8(P7)
    2434/     809 :                     ;;;----------------------------------------------------------------------------
    2435/     809 :                     LD_P1_REG8P7:
    2436/     809 : 2F                  	SRC P7
    2437/     80A : E9                  	RDM
    2438/     80B : B3                  	XCH P1_LO
    2439/     80C :                     
    2440/     80C : 6F                  	INC P7_LO		; P7_LO++
    2441/     80D : 2F                  	SRC P7
    2442/     80E : E9                  	RDM
    2443/     80F : B2                  	XCH P1_HI
    2444/     810 : C0                  	BBL 0
    2445/     811 :                     
    2446/     811 :                     ;;;----------------------------------------------------------------------------
    2447/     811 :                     ;;; LD_P1_REG8P0
    2448/     811 :                     ;;; P1 = REG8(P0)
    2449/     811 :                     ;;;----------------------------------------------------------------------------
    2450/     811 :                     LD_P1_REG8P0:
    2451/     811 : (MACRO)              	LD_P7_P0
    2451/     811 : A0                                  LD P0_HI
    2451/     812 : BE                                  XCH P7_HI
    2451/     813 : A1                                  LD P0_LO
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 48 - 2023/04/16 11:22:22


    2451/     814 : BF                                  XCH P7_LO
    2452/     815 : 48 09               	JUN LD_P1_REG8P7
    2453/     817 :                     
    2454/     817 :                     ;;;----------------------------------------------------------------------------
    2455/     817 :                     ;;; LD_P1_REG8P1
    2456/     817 :                     ;;; P1 = REG8(P1)
    2457/     817 :                     ;;;----------------------------------------------------------------------------
    2458/     817 :                     LD_P1_REG8P1:
    2459/     817 : (MACRO)              	LD_P7_P1
    2459/     817 : A2                                  LD P1_HI
    2459/     818 : BE                                  XCH P7_HI
    2459/     819 : A3                                  LD P1_LO
    2459/     81A : BF                                  XCH P7_LO
    2460/     81B : 48 09               	JUN LD_P1_REG8P7
    2461/     81D :                     
    2462/     81D :                     ;;;----------------------------------------------------------------------------
    2463/     81D :                     ;;; LD_P1_REG8P2
    2464/     81D :                     ;;; P1 = REG8(P2)
    2465/     81D :                     ;;;----------------------------------------------------------------------------
    2466/     81D :                     LD_P1_REG8P2:
    2467/     81D : (MACRO)              	LD_P7_P2
    2467/     81D : A4                                  LD P2_HI
    2467/     81E : BE                                  XCH P7_HI
    2467/     81F : A5                                  LD P2_LO
    2467/     820 : BF                                  XCH P7_LO
    2468/     821 : 48 09               	JUN LD_P1_REG8P7
    2469/     823 :                     
    2470/     823 :                     ;;;----------------------------------------------------------------------------
    2471/     823 :                     ;;; LD_P1_REG8P3
    2472/     823 :                     ;;; P1 = REG8(P3)
    2473/     823 :                     ;;;----------------------------------------------------------------------------
    2474/     823 :                     LD_P1_REG8P3:
    2475/     823 : (MACRO)              	LD_P7_P3
    2475/     823 : A6                                  LD P3_HI
    2475/     824 : BE                                  XCH P7_HI
    2475/     825 : A7                                  LD P3_LO
    2475/     826 : BF                                  XCH P7_LO
    2476/     827 : 48 09               	JUN LD_P1_REG8P7
    2477/     829 :                     
    2478/     829 :                     ;;;----------------------------------------------------------------------------
    2479/     829 :                     ;;; PRINTHEX_REG16P1
    2480/     829 :                     ;;; PRINT REG16(P1)
    2481/     829 :                     ;;; destroy: P6, P7
    2482/     829 :                     ;;;----------------------------------------------------------------------------
    2483/     829 :                     PRINTHEX_REG16P1:
    2484/     829 : 5B 00               	JMS PUSH_P0
    2485/     82B : (MACRO)              	LD_P0_P3
    2485/     82B : A6                                  LD P3_HI
    2485/     82C : B0                                  XCH P0_HI
    2485/     82D : A7                                  LD P3_LO
    2485/     82E : B1                                  XCH P0_LO
    2486/     82F : 5B 00               	JMS PUSH_P0
    2487/     831 : 5B 12               	JMS PUSH_P1
    2488/     833 : 5B 24               	JMS PUSH_P2
    2489/     835 :                     	
    2490/     835 : 58 B5               	JMS LD_P2P3_REG16P1
    2491/     837 : A4                  	LD R4
    2492/     838 : 5C B4               	JMS PRINT_ACC		; print bit.FEDC
    2493/     83A : A5                  	LD R5
    2494/     83B : 5C B4               	JMS PRINT_ACC		; print bit.BA98
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 49 - 2023/04/16 11:22:22


    2495/     83D : A6                  	LD R6
    2496/     83E : 5C B4               	JMS PRINT_ACC		; print bit.7654
    2497/     840 : A7                  	LD R7
    2498/     841 : 5C B4               	JMS PRINT_ACC		; print bit.3210
    2499/     843 :                     
    2500/     843 : 5B 50               	JMS POP_P2
    2501/     845 : 5B 43               	JMS POP_P1
    2502/     847 : 5B 36               	JMS POP_P0
    2503/     849 : (MACRO)              	LD_P3_P0
    2503/     849 : A0                                  LD P0_HI
    2503/     84A : B6                                  XCH P3_HI
    2503/     84B : A1                                  LD P0_LO
    2503/     84C : B7                                  XCH P3_LO
    2504/     84D : 5B 36               	JMS POP_P0
    2505/     84F : C0                  	BBL 0
    2506/     850 :                     
    2507/     850 :                     ;;;----------------------------------------------------------------------------
    2508/     850 :                     ;;; LD_REG16P6_REG16P7
    2509/     850 :                     ;;; REG16(P6) = REG16(P7)
    2510/     850 :                     ;;; destroy: P6, P7, CNT_J
    2511/     850 :                     ;;;----------------------------------------------------------------------------
    2512/     850 :                     LD_REG16P6_REG16P7:
    2513/     850 : DC                  	LDM loop(4)
    2514/     851 : BB                  	XCH CNT_J
    2515/     852 :                     LDREG16P6P7_LOOP:
    2516/     852 : 2F                  	SRC P7
    2517/     853 : E9                  	RDM
    2518/     854 : 2D                  	SRC P6
    2519/     855 : E0                  	WRM
    2520/     856 : 6F                  	INC P7_LO
    2521/     857 : 6D                  	INC P6_LO
    2522/     858 : 7B 52               	ISZ CNT_J, LDREG16P6P7_LOOP
    2523/     85A : C0                  	BBL 0
    2524/     85B :                     
    2525/     85B :                     ;;;----------------------------------------------------------------------------
    2526/     85B :                     ;;; INC_REG16P0
    2527/     85B :                     ;;; REG16(P0) = REG16(P0)+1
    2528/     85B :                     ;;; destroy: P7(R14, R15)
    2529/     85B :                     ;;;----------------------------------------------------------------------------
    2530/     85B :                     INC_REG16P0:
    2531/     85B : A1                  	LD R1
    2532/     85C : BF                  	XCH R15			; save R1 to R15
    2533/     85D :                     
    2534/     85D : DC                  	LDM loop(4)
    2535/     85E : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2536/     85F :                     REG16_INC_LOOP:
    2537/     85F : 21                  	SRC P0
    2538/     860 : E9                  	RDM
    2539/     861 : F2                  	IAC 
    2540/     862 : E0                  	WRM
    2541/     863 : 1C 68               	JCN NZ, REG16_INC_EXIT
    2542/     865 : 61                  	INC R1
    2543/     866 : 7E 5F               	ISZ R14, REG16_INC_LOOP
    2544/     868 :                     
    2545/     868 :                     REG16_INC_EXIT:
    2546/     868 : AF                  	LD R15
    2547/     869 : B1                  	XCH R1			; restore R1
    2548/     86A : C0                  	BBL 0
    2549/     86B :                     
    2550/     86B :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 50 - 2023/04/16 11:22:22


    2551/     86B :                     ;;; DEC_REG16P0
    2552/     86B :                     ;;; REG16(P0) = REG16(P0) - 1
    2553/     86B :                     ;;; destroy: P7(R14, R15)
    2554/     86B :                     ;;;----------------------------------------------------------------------------
    2555/     86B :                     DEC_REG16P0:
    2556/     86B : A1                  	LD R1
    2557/     86C : BF                  	XCH R15			; save R1 to R15
    2558/     86D :                     
    2559/     86D : DC                  	LDM loop(4)
    2560/     86E : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    2561/     86F : F1                  	CLC
    2562/     870 :                     REG16_DEC_LOOP:
    2563/     870 : 21                  	SRC P0
    2564/     871 : E9                  	RDM
    2565/     872 : F8                  	DAC
    2566/     873 : E0                  	WRM
    2567/     874 : 12 79               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    2568/     876 : 61                  	INC R1
    2569/     877 : 7E 70               	ISZ R14, REG16_DEC_LOOP
    2570/     879 :                     REG16_DEC_EXIT:
    2571/     879 : AF                  	LD R15
    2572/     87A : B1                  	XCH R1			; restore R1
    2573/     87B : C0                  	BBL 0
    2574/     87C :                     
    2575/     87C :                     ;;;----------------------------------------------------------------------------
    2576/     87C :                     ;;; CMP_REG16P0_REG16P1
    2577/     87C :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2578/     87C :                     ;;; output: ACC=1, CY=0 if REG16(P0) <	REG16(P1)
    2579/     87C :                     ;;;	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2580/     87C :                     ;;;	    ACC=1, CY=1 if REG16(P0) >	REG16(P1)
    2581/     87C :                     ;;; destroy: P6, P7, R5
    2582/     87C :                     ;;;----------------------------------------------------------------------------
    2583/     87C :                     CMP_REG16P0_REG16P1:
    2584/     87C : A1                  	LD R1
    2585/     87D : BF                  	XCH R15			; save R1 to R15
    2586/     87E : A3                  	LD R3
    2587/     87F : BD                  	XCH R13			; save R3 to R13
    2588/     880 : F0                  	CLB
    2589/     881 : BC                  	XCH R12			; R12 = 0
    2590/     882 : DC                  	LDM loop(4)
    2591/     883 : BE                  	XCH R14			; R14=12, 13, 14, 15
    2592/     884 : FA                  	STC
    2593/     885 :                     REG16_CMP_LOOP:
    2594/     885 : F3                  	CMC
    2595/     886 : 21                  	SRC P0
    2596/     887 : E9                  	RDM
    2597/     888 : 23                  	SRC P1
    2598/     889 : E8                  	SBM
    2599/     88A : 61                  	INC R1
    2600/     88B : 63                  	INC R3
    2601/     88C : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2602/     88D : AB                  	LD R11
    2603/     88E : 14 92               	JCN Z, REG16_CMP_NEXT
    2604/     890 : D1                  	LDM 1
    2605/     891 : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2606/     892 :                     REG16_CMP_NEXT:
    2607/     892 : 7E 85               	ISZ R14, REG16_CMP_LOOP
    2608/     894 : AB                  	LD R11
    2609/     895 : F5                  	RAL
    2610/     896 : F3                  	CMC			; CY=~MSB
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 51 - 2023/04/16 11:22:22


    2611/     897 :                     
    2612/     897 : AF                  	LD R15
    2613/     898 : B1                  	XCH R1			; restore R1
    2614/     899 : AD                  	LD R13
    2615/     89A : B3                  	XCH R3			; restore R3
    2616/     89B :                     
    2617/     89B : AC                  	LD R12
    2618/     89C : 14 9F               	JCN Z, REG16_CMP_EXIT0
    2619/     89E : C1                  	BBL 1
    2620/     89F :                     REG16_CMP_EXIT0:
    2621/     89F : C0                  	BBL 0
    2622/     8A0 :                     
    2623/     8A0 :                     ;;;----------------------------------------------------------------------------
    2624/     8A0 :                     ;;; ADD_REG16P0_REG16P1
    2625/     8A0 :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    2626/     8A0 :                     ;;; destroy: P6, P7
    2627/     8A0 :                     ;;;----------------------------------------------------------------------------
    2628/     8A0 :                     ADD_REG16P0_REG16P1:
    2629/     8A0 : A1                  	LD R1
    2630/     8A1 : BF                  	XCH R15			; save R1 to R15
    2631/     8A2 : A3                  	LD R3
    2632/     8A3 : BD                  	XCH R13			; save R3 to R13
    2633/     8A4 :                     
    2634/     8A4 : DC                  	LDM loop(4)
    2635/     8A5 : BE                  	XCH R14
    2636/     8A6 : F1                  	CLC
    2637/     8A7 :                     REG16_ADD_LOOP:
    2638/     8A7 : 23                  	SRC P1
    2639/     8A8 : E9                  	RDM
    2640/     8A9 : 21                  	SRC P0
    2641/     8AA : EB                  	ADM
    2642/     8AB : E0                  	WRM
    2643/     8AC : 61                  	INC R1
    2644/     8AD : 63                  	INC R3
    2645/     8AE : 7E A7               	ISZ R14, REG16_ADD_LOOP
    2646/     8B0 :                     
    2647/     8B0 : AF                  	LD R15
    2648/     8B1 : B1                  	XCH R1			; restore R1
    2649/     8B2 : AD                  	LD R13
    2650/     8B3 : B3                  	XCH R3			; restore R3
    2651/     8B4 : C0                  	BBL 0
    2652/     8B5 :                     
    2653/     8B5 :                     ;;;----------------------------------------------------------------------------
    2654/     8B5 :                     ;;; LD_P2P3_REG16P1
    2655/     8B5 :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    2656/     8B5 :                     ;;; P3(R6R7) = REG16(P1).bit76543210
    2657/     8B5 :                     ;;; destroy: P7
    2658/     8B5 :                     ;;;----------------------------------------------------------------------------
    2659/     8B5 :                     LD_P2P3_REG16P1:
    2660/     8B5 : (MACRO)              	LD_P7_P1
    2660/     8B5 : A2                                  LD P1_HI
    2660/     8B6 : BE                                  XCH P7_HI
    2660/     8B7 : A3                                  LD P1_LO
    2660/     8B8 : BF                                  XCH P7_LO
    2661/     8B9 : 2F                  	SRC P7
    2662/     8BA : E9                  	RDM
    2663/     8BB : B7                  	XCH P3_LO		; R7 = REG16(P1).bit3210
    2664/     8BC :                     
    2665/     8BC : 6F                  	INC P7_LO
    2666/     8BD : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 52 - 2023/04/16 11:22:22


    2667/     8BE : E9                  	RDM
    2668/     8BF : B6                  	XCH P3_HI		; R6 = REG16(P1).bit7654
    2669/     8C0 :                     	
    2670/     8C0 : 6F                  	INC P7_LO
    2671/     8C1 : 2F                  	SRC P7
    2672/     8C2 : E9                  	RDM
    2673/     8C3 : B5                  	XCH P2_LO		; R5 = REG16(P1).bitBA98
    2674/     8C4 :                     
    2675/     8C4 : 6F                  	INC P7_LO
    2676/     8C5 : 2F                  	SRC P7
    2677/     8C6 : E9                  	RDM
    2678/     8C7 : B4                  	XCH P2_HI		; R4 = REG16(P1).bitFEDC
    2679/     8C8 :                     
    2680/     8C8 : C0                  	BBL 0
    2681/     8C9 :                     
    2682/     8C9 :                     ;;;----------------------------------------------------------------------------
    2683/     8C9 :                     ;;; GETHEX_REG16P1_PM16REG16P0_INCREMENT
    2684/     8C9 :                     ;;; Get a hexadecimal number from the string PM16REG16P0
    2685/     8C9 :                     ;;; and increment the pointer
    2686/     8C9 :                     ;;; ACC=0 get number succeed
    2687/     8C9 :                     ;;; ACC=1 no number, P1=first chalacter
    2688/     8C9 :                     ;;; destroy: P6, P7, P2, P3
    2689/     8C9 :                     ;;;----------------------------------------------------------------------------
    2690/     8C9 :                     GETHEX_REG16P1_PM16REG16P0_INCREMENT:
    2691/     8C9 : 5B 12               	JMS PUSH_P1
    2692/     8CB : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2693/     8CD : 5C F0               	JMS ISHEX_P1
    2694/     8CF : 1C D4               	JCN ZN, GETHEX_START
    2695/     8D1 :                     	;; the first character is not a number
    2696/     8D1 : 5B 43               	JMS POP_P1
    2697/     8D3 : C1                  	BBL 1
    2698/     8D4 :                     GETHEX_START:
    2699/     8D4 : 24 00               	FIM P2, 00H
    2700/     8D6 : 26 00               	FIM P3, 00H
    2701/     8D8 :                     GETHEX_LOOP:
    2702/     8D8 : 5D 1B               	JMS CTOI_P1
    2703/     8DA : 5E 16               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2704/     8DC : A3                  	LD P1_LO
    2705/     8DD : B7                  	XCH P3_LO		; P3_LO=P1_LO
    2706/     8DE : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    2707/     8E0 : 5C F0               	JMS ISHEX_P1
    2708/     8E2 : 14 E6               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2709/     8E4 : 48 D8               	JUN GETHEX_LOOP
    2710/     8E6 :                     GETHEX_EXIT:
    2711/     8E6 : 5B 43               	JMS POP_P1
    2712/     8E8 : 47 90               	JUN LD_REG16P1_P2P3
    2713/     8EA :                     ;;;	BBL 0
    2714/     8EA :                     
    2715/     8EA :                     	
    2716/     8EA :                     ;;;----------------------------------------------------------------------------
    2717/     8EA :                     ;;; EMU_PRINT_REGISTERS
    2718/     8EA :                     ;;;----------------------------------------------------------------------------
    2719/     8EA :                     EMU_PRINT_REGISTERS:
    2720/     8EA : 20 87               	FIM P0, lo(STR_EMU_REGHEADER)
    2721/     8EC : 5E 00               	JMS PRINTSTR_P0
    2722/     8EE :                     
    2723/     8EE :                     EMU_PRINT_REGISTERS_NO_HEADER:
    2724/     8EE : 22 00               	FIM P1, REG8_A
    2725/     8F0 : 58 17               	JMS LD_P1_REG8P1
    2726/     8F2 : 5C 85               	JMS PRINTHEX_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 53 - 2023/04/16 11:22:22


    2727/     8F4 : 5C 98               	JMS PRINT_SPC
    2728/     8F6 :                     
    2729/     8F6 : 56 37               	JMS GETFLAG_S
    2730/     8F8 : 5C B4               	JMS PRINT_ACC
    2731/     8FA : 56 2D               	JMS GETFLAG_Z
    2732/     8FC : 5C B4               	JMS PRINT_ACC
    2733/     8FE : 56 40               	JMS GETFLAG_C
    2734/     900 : 5C B4               	JMS PRINT_ACC
    2735/     902 : 5C 98               	JMS PRINT_SPC
    2736/     904 :                     
    2737/     904 : 22 0C               	FIM P1, REG16_BC
    2738/     906 : 58 29               	JMS PRINTHEX_REG16P1
    2739/     908 : 5C 98               	JMS PRINT_SPC
    2740/     90A :                     
    2741/     90A : 22 08               	FIM P1, REG16_DE
    2742/     90C : 58 29               	JMS PRINTHEX_REG16P1
    2743/     90E : 5C 98               	JMS PRINT_SPC
    2744/     910 :                     
    2745/     910 : 22 04               	FIM P1, REG16_HL
    2746/     912 : 58 29               	JMS PRINTHEX_REG16P1
    2747/     914 : 5C 98               	JMS PRINT_SPC
    2748/     916 :                     
    2749/     916 : 22 18               	FIM P1, REG16_SP
    2750/     918 : 58 29               	JMS PRINTHEX_REG16P1
    2751/     91A : 5C 98               	JMS PRINT_SPC
    2752/     91C :                     
    2753/     91C : 22 14               	FIM P1, REG16_PC
    2754/     91E : 58 29               	JMS PRINTHEX_REG16P1
    2755/     920 : 5C 98               	JMS PRINT_SPC
    2756/     922 :                     
    2757/     922 : 20 1C               	FIM P0, REG16_ADDR
    2758/     924 : 22 14               	FIM P1, REG16_PC
    2759/     926 : 57 6C               	JMS LD_REG16P0_REG16P1
    2760/     928 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2761/     92A : 5C 85               	JMS PRINTHEX_P1
    2762/     92C : 5C 98               	JMS PRINT_SPC
    2763/     92E :                     
    2764/     92E : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2765/     930 : 5C 85               	JMS PRINTHEX_P1
    2766/     932 : 5C 98               	JMS PRINT_SPC
    2767/     934 :                     
    2768/     934 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2769/     936 : 5C 85               	JMS PRINTHEX_P1
    2770/     938 : 5C 98               	JMS PRINT_SPC
    2771/     93A :                     
    2772/     93A : 20 0C               	FIM P0, REG16_BC
    2773/     93C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2774/     93E : 58 6B               	JMS DEC_REG16P0
    2775/     940 : 5C 85               	JMS PRINTHEX_P1
    2776/     942 : 5C 98               	JMS PRINT_SPC
    2777/     944 :                     	
    2778/     944 : 20 08               	FIM P0, REG16_DE
    2779/     946 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2780/     948 : 58 6B               	JMS DEC_REG16P0
    2781/     94A : 5C 85               	JMS PRINTHEX_P1
    2782/     94C : 5C 98               	JMS PRINT_SPC
    2783/     94E :                     
    2784/     94E : 20 04               	FIM P0, REG16_HL
    2785/     950 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2786/     952 : 58 6B               	JMS DEC_REG16P0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 54 - 2023/04/16 11:22:22


    2787/     954 : 5C 85               	JMS PRINTHEX_P1
    2788/     956 : 5C 98               	JMS PRINT_SPC
    2789/     958 :                     
    2790/     958 : 20 18               	FIM P0, REG16_SP
    2791/     95A : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2792/     95C : 5C 85               	JMS PRINTHEX_P1
    2793/     95E : 5C 98               	JMS PRINT_SPC
    2794/     960 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    2795/     962 : 5C 85               	JMS PRINTHEX_P1
    2796/     964 :                     ;;; 	JMS PRINT_SPC
    2797/     964 :                     
    2798/     964 : 58 6B               	JMS DEC_REG16P0
    2799/     966 : 58 6B               	JMS DEC_REG16P0
    2800/     968 :                     	
    2801/     968 : C0                  	BBL 0
    2802/     969 :                     
    2803/     969 :                     	
    2804/     969 :                     ;;;----------------------------------------------------------------------------
    2805/     969 :                     ;;; EMULATE_OUT_P1
    2806/     969 :                     ;;; Emulate OUT instruction
    2807/     969 :                     ;;;----------------------------------------------------------------------------
    2808/     969 :                     EMULATE_OUT_P1:
    2809/     969 : 2E 00               	FIM P7, EMU_UARTRD
    2810/     96B : 5D 27               	JMS CMP_P1P7
    2811/     96D : 1C 71               	JCN ZN, EMU_OUT_P1_L1
    2812/     96F : 49 7A               	JUN EMU_OUT_UARTRD
    2813/     971 :                     EMU_OUT_P1_L1:
    2814/     971 : 2E 01               	FIM P7, EMU_UARTRC
    2815/     973 : 5D 27               	JMS CMP_P1P7
    2816/     975 : 1C 79               	JCN ZN, EMU_OUT_P1_L2
    2817/     977 : 49 80               	JUN EMU_OUT_UARTRC
    2818/     979 :                     EMU_OUT_P1_L2:
    2819/     979 : C0                  	BBL 0
    2820/     97A :                     
    2821/     97A :                     EMU_OUT_UARTRD:
    2822/     97A : 22 00               	FIM P1, REG8_A
    2823/     97C : 58 17               	JMS LD_P1_REG8P1
    2824/     97E : 4C 5F               	JUN PUTCHAR_P1
    2825/     980 :                     ;;;	BBL 0
    2826/     980 :                     EMU_OUT_UARTRC:			; do nothing
    2827/     980 : C0                  	BBL 0
    2828/     981 :                     	
    2829/     981 :                     ;;;----------------------------------------------------------------------------
    2830/     981 :                     ;;; EMULATE_IN_P1
    2831/     981 :                     ;;; Emulate IN instruction
    2832/     981 :                     ;;;----------------------------------------------------------------------------
    2833/     981 :                     EMULATE_IN_P1:
    2834/     981 : 2E 00               	FIM P7, EMU_UARTRD
    2835/     983 : 5D 27               	JMS CMP_P1P7
    2836/     985 : 1C 89               	JCN ZN, EMU_IN_P1_L1
    2837/     987 : 49 92               	JUN EMU_IN_UARTRD
    2838/     989 :                     EMU_IN_P1_L1:
    2839/     989 : 2E 01               	FIM P7, EMU_UARTRC
    2840/     98B : 5D 27               	JMS CMP_P1P7
    2841/     98D : 1C 91               	JCN ZN, EMU_IN_P1_L2
    2842/     98F : 49 B2               	JUN EMU_IN_UARTRC
    2843/     991 :                     EMU_IN_P1_L2:
    2844/     991 : C0                  	BBL 0
    2845/     992 :                     
    2846/     992 :                     EMU_IN_UARTRD:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 55 - 2023/04/16 11:22:22


    2847/     992 : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2848/     994 : 58 09               	JMS LD_P1_REG8P7
    2849/     996 :                     	
    2850/     996 : 5D 34               	JMS ISZEROORNOT_P1
    2851/     998 : 1C 9C               	JCN ZN, EMU_IN_UARTRD_SKIPGETCHAR
    2852/     99A : 5C 37               	JMS GETCHAR_P1
    2853/     99C :                     EMU_IN_UARTRD_SKIPGETCHAR:
    2854/     99C : 2E 1B               	FIM P7, 1BH		; ESC
    2855/     99E : 5D 27               	JMS CMP_P1P7
    2856/     9A0 : 14 AC               	JCN Z, EMU_IN_EXIT_TO_MONITOR
    2857/     9A2 :                     	
    2858/     9A2 : 20 00               	FIM P0, REG8_A
    2859/     9A4 : 57 F1               	JMS LD_REG8P0_P1
    2860/     9A6 :                     
    2861/     9A6 : 2E 20               	FIM P7, REG8_EMU_KEYBUF
    2862/     9A8 : 22 00               	FIM P1, 00H
    2863/     9AA : 48 01               	JUN LD_REG8P7_P1
    2864/     9AC :                     ;;;	BBL 0
    2865/     9AC :                     
    2866/     9AC :                     EMU_IN_EXIT_TO_MONITOR:
    2867/     9AC : 5C A0               	JMS PRINT_CRLF
    2868/     9AE : 58 EA               	JMS EMU_PRINT_REGISTERS
    2869/     9B0 : 40 2D               	JUN CMD_LOOP
    2870/     9B2 :                     
    2871/     9B2 :                     ;;; if ~test button is on then wait for the button released,
    2872/     9B2 :                     ;;; and set flag to return "STOP" code on the next "IN URTRD" 
    2873/     9B2 :                     EMU_IN_UARTRC:
    2874/     9B2 : 19 BC               	JCN TN, EMU_IN_UARTRC_EXIT ; jump if T==1(button is not pressed)
    2875/     9B4 : 11 B4               	JCN T, $		   ; wait for button released
    2876/     9B6 : 20 20               	FIM P0, REG8_EMU_KEYBUF
    2877/     9B8 : 22 03               	FIM P1, EMU_IN_STOPCODE
    2878/     9BA : 47 F1               	JUN LD_REG8P0_P1
    2879/     9BC :                     	
    2880/     9BC :                     EMU_IN_UARTRC_EXIT:
    2881/     9BC : 20 00               	FIM P0, REG8_A
    2882/     9BE : 22 FF               	FIM P1, EMU_IN_UARTRC_VALUE
    2883/     9C0 : 47 F1               	JUN LD_REG8P0_P1
    2884/     9C2 :                     ;;;	BBL 0
    2885/     9C2 :                     
    2886/     9C2 :                     ;;;---------------------------------------------------------------------------
    2887/     9C2 :                     ;;; JIN_P2_CODE_80BF
    2888/     9C2 :                     ;;; Jump table for CODE 80H to BFH
    2889/     9C2 :                     ;;; P2=0F0H + CODE.bit(543)0
    2890/     9C2 :                     ;;;---------------------------------------------------------------------------
    2891/     9EF :                     	org 09EFH
    2892/     9EF :                     JIN_P2_CODE_80BF:
    2893/     9EF : 35                  	JIN P2
    2894/     9F0 :                     	org 09F0H
    2895/     9F0 : 44 79               	JUN ADI_P1		; 9F0: 80H<=87H; ADD
    2896/     9F2 : 44 C4               	JUN ACI_P1		; 9F2: 88H<=8FH; ADC
    2897/     9F4 : 44 FD               	JUN SUI_P1		; 9F4: 90H<=97H; SUB
    2898/     9F6 : 45 1F               	JUN SBI_P1		; 9F6: 98H<=9FH; SBB
    2899/     9F8 : 45 71               	JUN ANI_P1		; 9F8: A0H<=A7H; ANA
    2900/     9FA : 45 A8               	JUN XRI_P1		; 9FA: A8H<=AFH; XRA
    2901/     9FC : 45 ED               	JUN ORI_P1		; 9FC: B0H<=B7H; ORA
    2902/     9FE : 46 19               	JUN CPI_P1		; 9FE: B8H<=BFH; CMP
    2903/     A00 :                     ;;;---------------------------------------------------------------------------
    2904/     A00 :                     ;;; Jump table for CODE 01H-3FH, C0H-FFH
    2905/     A00 :                     ;;;---------------------------------------------------------------------------
    2906/     A00 :                     	org 0A00H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 56 - 2023/04/16 11:22:22


    2907/     A00 :                     JIN_P1_CODE_013F_C0FF:
    2908/     A00 : 33                  	JIN P1
    2909/     A01 : 00                  	NOP			; do not delete this NOP
    2910/     A02 : 42 72               	JUN CODE_01H
    2911/     A04 : 42 7E               	JUN CODE_02H
    2912/     A06 : 42 86               	JUN CODE_03H
    2913/     A08 : 42 8A               	JUN CODE_04H
    2914/     A0A : 42 8E               	JUN CODE_05H
    2915/     A0C : 42 92               	JUN CODE_06H
    2916/     A0E : 42 96               	JUN CODE_07H
    2917/     A10 : 42 A6               	JUN CODE_08H
    2918/     A12 : 42 A7               	JUN CODE_09H
    2919/     A14 : 42 AF               	JUN CODE_0AH
    2920/     A16 : 42 B9               	JUN CODE_0BH
    2921/     A18 : 42 BD               	JUN CODE_0CH
    2922/     A1A : 42 C1               	JUN CODE_0DH
    2923/     A1C : 42 C5               	JUN CODE_0EH
    2924/     A1E : 42 C9               	JUN CODE_0FH
    2925/     A20 : 42 D9               	JUN CODE_10H
    2926/     A22 : 42 DA               	JUN CODE_11H
    2927/     A24 : 42 E6               	JUN CODE_12H
    2928/     A26 : 42 EE               	JUN CODE_13H
    2929/     A28 : 42 F2               	JUN CODE_14H
    2930/     A2A : 42 F6               	JUN CODE_15H
    2931/     A2C : 42 FA               	JUN CODE_16H
    2932/     A2E : 42 FE               	JUN CODE_17H
    2933/     A30 : 43 0E               	JUN CODE_18H
    2934/     A32 : 43 0F               	JUN CODE_19H
    2935/     A34 : 43 17               	JUN CODE_1AH
    2936/     A36 : 43 21               	JUN CODE_1BH
    2937/     A38 : 43 25               	JUN CODE_1CH
    2938/     A3A : 43 29               	JUN CODE_1DH
    2939/     A3C : 43 2D               	JUN CODE_1EH
    2940/     A3E : 43 31               	JUN CODE_1FH
    2941/     A40 : 43 41               	JUN CODE_20H
    2942/     A42 : 43 42               	JUN CODE_21H
    2943/     A44 : 43 4E               	JUN CODE_22H
    2944/     A46 : 43 6C               	JUN CODE_23H
    2945/     A48 : 43 70               	JUN CODE_24H
    2946/     A4A : 43 74               	JUN CODE_25H
    2947/     A4C : 43 78               	JUN CODE_26H
    2948/     A4E : 43 7C               	JUN CODE_27H
    2949/     A50 : 43 89               	JUN CODE_28H
    2950/     A52 : 43 8A               	JUN CODE_29H
    2951/     A54 : 43 92               	JUN CODE_2AH
    2952/     A56 : 43 AC               	JUN CODE_2BH
    2953/     A58 : 43 B0               	JUN CODE_2CH
    2954/     A5A : 43 B4               	JUN CODE_2DH
    2955/     A5C : 43 B8               	JUN CODE_2EH
    2956/     A5E : 43 BC               	JUN CODE_2FH
    2957/     A60 : 43 C8               	JUN CODE_30H
    2958/     A62 : 43 C9               	JUN CODE_31H
    2959/     A64 : 43 D5               	JUN CODE_32H
    2960/     A66 : 43 E9               	JUN CODE_33H
    2961/     A68 : 43 ED               	JUN CODE_34H
    2962/     A6A : 43 F9               	JUN CODE_35H
    2963/     A6C : 44 05               	JUN CODE_36H
    2964/     A6E : 44 0B               	JUN CODE_37H
    2965/     A70 : 44 0D               	JUN CODE_38H
    2966/     A72 : 44 0E               	JUN CODE_39H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 57 - 2023/04/16 11:22:22


    2967/     A74 : 44 16               	JUN CODE_3AH
    2968/     A76 : 44 2A               	JUN CODE_3BH
    2969/     A78 : 44 2E               	JUN CODE_3CH
    2970/     A7A : 44 34               	JUN CODE_3DH
    2971/     A7C : 44 3A               	JUN CODE_3EH
    2972/     A7E : 44 40               	JUN CODE_3FH
    2973/     A80 : 44 45               	JUN CODE_C0H
    2974/     A82 : 44 49               	JUN CODE_C1H
    2975/     A84 : 44 4F               	JUN CODE_C2H
    2976/     A86 : 44 5F               	JUN CODE_C3H
    2977/     A88 : 44 6D               	JUN CODE_C4H
    2978/     A8A : 44 71               	JUN CODE_C5H
    2979/     A8C : 44 77               	JUN CODE_C6H
    2980/     A8E : 44 81               	JUN CODE_C7H
    2981/     A90 : 44 87               	JUN CODE_C8H
    2982/     A92 : 44 8F               	JUN CODE_C9H
    2983/     A94 : 44 95               	JUN CODE_CAH
    2984/     A96 : 44 99               	JUN CODE_CBH
    2985/     A98 : 44 9A               	JUN CODE_CCH
    2986/     A9A : 44 AA               	JUN CODE_CDH
    2987/     A9C : 44 C2               	JUN CODE_CEH
    2988/     A9E : 44 D9               	JUN CODE_CFH
    2989/     AA0 : 44 DF               	JUN CODE_D0H
    2990/     AA2 : 44 E3               	JUN CODE_D1H
    2991/     AA4 : 44 E9               	JUN CODE_D2H
    2992/     AA6 : 44 ED               	JUN CODE_D3H
    2993/     AA8 : 44 F1               	JUN CODE_D4H
    2994/     AAA : 44 F5               	JUN CODE_D5H
    2995/     AAC : 44 FB               	JUN CODE_D6H
    2996/     AAE : 45 05               	JUN CODE_D7H
    2997/     AB0 : 45 0B               	JUN CODE_D8H
    2998/     AB2 : 45 0F               	JUN CODE_D9H
    2999/     AB4 : 45 10               	JUN CODE_DAH
    3000/     AB6 : 45 14               	JUN CODE_DBH
    3001/     AB8 : 45 18               	JUN CODE_DCH
    3002/     ABA : 45 1C               	JUN CODE_DDH
    3003/     ABC : 45 1D               	JUN CODE_DEH
    3004/     ABE : 45 2D               	JUN CODE_DFH
    3005/     AC0 : 45 33               	JUN CODE_E0H
    3006/     AC2 : 45 37               	JUN CODE_E1H
    3007/     AC4 : 45 3D               	JUN CODE_E2H
    3008/     AC6 : 45 41               	JUN CODE_E3H
    3009/     AC8 : 45 65               	JUN CODE_E4H
    3010/     ACA : 45 69               	JUN CODE_E5H
    3011/     ACC : 45 6F               	JUN CODE_E6H
    3012/     ACE : 45 81               	JUN CODE_E7H
    3013/     AD0 : 45 87               	JUN CODE_E8H
    3014/     AD2 : 45 8B               	JUN CODE_E9H
    3015/     AD4 : 45 8F               	JUN CODE_EAH
    3016/     AD6 : 45 93               	JUN CODE_EBH
    3017/     AD8 : 45 A1               	JUN CODE_ECH
    3018/     ADA : 45 A5               	JUN CODE_EDH
    3019/     ADC : 45 A6               	JUN CODE_EEH
    3020/     ADE : 45 B8               	JUN CODE_EFH
    3021/     AE0 : 45 BE               	JUN CODE_F0H
    3022/     AE2 : 45 C2               	JUN CODE_F1H
    3023/     AE4 : 45 D0               	JUN CODE_F2H
    3024/     AE6 : 45 D4               	JUN CODE_F3H
    3025/     AE8 : 45 D5               	JUN CODE_F4H
    3026/     AEA : 45 D9               	JUN CODE_F5H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 58 - 2023/04/16 11:22:22


    3027/     AEC : 45 EB               	JUN CODE_F6H
    3028/     AEE : 45 FD               	JUN CODE_F7H
    3029/     AF0 : 46 03               	JUN CODE_F8H
    3030/     AF2 : 46 07               	JUN CODE_F9H
    3031/     AF4 : 46 0D               	JUN CODE_FAH
    3032/     AF6 : 46 11               	JUN CODE_FBH
    3033/     AF8 : 46 12               	JUN CODE_FCH
    3034/     AFA : 46 16               	JUN CODE_FDH
    3035/     AFC : 46 17               	JUN CODE_FEH
    3036/     AFE : 46 27               	JUN CODE_FFH
    3037/     B00 :                     
    3038/     B00 :                     	org 0B00H
    3039/     B00 :                     ;;;----------------------------------------------------------------------------
    3040/     B00 :                     ;;; PUSH_P0, P1, P2
    3041/     B00 :                     ;;; POP_P0, P1, P2
    3042/     B00 :                     ;;; Push and Pop an 8bit register pair
    3043/     B00 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    3044/     B00 :                     ;;; Stack pointer is register SP (configured in macors.inc)
    3045/     B00 :                     ;;; destroy P7, P6
    3046/     B00 :                     ;;;----------------------------------------------------------------------------
    3047/     B00 :                     
    3048/     B00 :                     PUSHP	macro ThisR0, ThisR1
    3049/     B00 :                     	LD SP_LO
    3050/     B00 :                     	DAC
    3051/     B00 :                     	XCH SP_LO		; --sp.3210
    3052/     B00 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1
    3053/     B00 :                     	LD SP_HI
    3054/     B00 :                     	DAC
    3055/     B00 :                     	XCH SP_HI		; --sp.7654
    3056/     B00 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    3057/     B00 :                     	SRC SP
    3058/     B00 :                     	LD ThisR0
    3059/     B00 :                     	WRM			; (sp)=R0
    3060/     B00 :                     
    3061/     B00 :                     	LD SP_LO
    3062/     B00 :                     	DAC
    3063/     B00 :                     	XCH SP_LO		; --sp.3210
    3064/     B00 :                     ;;;  Borrow check is omitted because SP must be even here
    3065/     B00 :                     ;;;	JCN C, PUSH_NOBORROW2_ThisR0_ThisR1
    3066/     B00 :                     ;;;	LD SP_HI
    3067/     B00 :                     ;;;	DAC
    3068/     B00 :                     ;;;	XCH SP_HI		; --sp.7654
    3069/     B00 :                     ;;; PUSH_NOBORROW2_ThisR0_ThisR1:
    3070/     B00 :                     	SRC SP
    3071/     B00 :                     	LD ThisR1
    3072/     B00 :                     	WRM			; (sp)=R1
    3073/     B00 :                     
    3074/     B00 :                     	BBL 0
    3075/     B00 :                     	endm
    3076/     B00 :                     ;;;----------------------------------------------------------------------------
    3077/     B00 :                     POPP	macro ThisR0, ThisR1
    3078/     B00 :                     	SRC SP
    3079/     B00 :                     	RDM
    3080/     B00 :                     	XCH ThisR1		; ThisR1=(sp)
    3081/     B00 :                     	INC SP_LO		; sp.3210++
    3082/     B00 :                     ;;; Carry check is omitted because SP must be odd here
    3083/     B00 :                     	SRC SP
    3084/     B00 :                     	RDM
    3085/     B00 :                     	XCH ThisR0		; ThisR0=(sp)
    3086/     B00 :                     	INC SP_LO		; sp.3210++
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 59 - 2023/04/16 11:22:22


    3087/     B00 :                     	LD SP_LO
    3088/     B00 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    3089/     B00 :                     	INC SP_HI		; sp.7654++
    3090/     B00 :                     POP_NOCARRY_ThisR0_ThisR1:
    3091/     B00 :                     	BBL 0
    3092/     B00 :                     	endm
    3093/     B00 :                     ;;;----------------------------------------------------------------------------
    3094/     B00 :                     ;;;----------------------------------------------------------------------------
    3095/     B00 :                     ;;; Generate real codes from macros
    3096/     B00 :                     ;;;----------------------------------------------------------------------------
    3097/     B00 : (MACRO)              PUSH_P0: PUSHP	R0, R1
    3097/     B00 : A9                          LD SP_LO
    3097/     B01 : F8                          DAC
    3097/     B02 : B9                          XCH SP_LO               ; --sp.3210
    3097/     B03 : 12 08                       JCN C, PUSH_NOBORROW_R0_R1
    3097/     B05 : A8                          LD SP_HI
    3097/     B06 : F8                          DAC
    3097/     B07 : B8                          XCH SP_HI               ; --sp.7654
    3097/     B08 :                     PUSH_NOBORROW_R0_R1:
    3097/     B08 : 29                          SRC SP
    3097/     B09 : A0                          LD R0
    3097/     B0A : E0                          WRM                     ; (sp)=R0
    3097/     B0B :                     
    3097/     B0B : A9                          LD SP_LO
    3097/     B0C : F8                          DAC
    3097/     B0D : B9                          XCH SP_LO               ; --sp.3210
    3097/     B0E :                     ;;;  Borrow check is omitted because SP must be even here
    3097/     B0E :                     ;;;     JCN C, PUSH_NOBORROW2_R0_R1
    3097/     B0E :                     ;;;     LD SP_HI
    3097/     B0E :                     ;;;     DAC
    3097/     B0E :                     ;;;     XCH SP_HI               ; --sp.7654
    3097/     B0E :                     ;;; PUSH_NOBORROW2_R0_R1:
    3097/     B0E : 29                          SRC SP
    3097/     B0F : A1                          LD R1
    3097/     B10 : E0                          WRM                     ; (sp)=R1
    3097/     B11 :                     
    3097/     B11 : C0                          BBL 0
    3098/     B12 : (MACRO)              PUSH_P1: PUSHP	R2, R3
    3098/     B12 : A9                          LD SP_LO
    3098/     B13 : F8                          DAC
    3098/     B14 : B9                          XCH SP_LO               ; --sp.3210
    3098/     B15 : 12 1A                       JCN C, PUSH_NOBORROW_R2_R3
    3098/     B17 : A8                          LD SP_HI
    3098/     B18 : F8                          DAC
    3098/     B19 : B8                          XCH SP_HI               ; --sp.7654
    3098/     B1A :                     PUSH_NOBORROW_R2_R3:
    3098/     B1A : 29                          SRC SP
    3098/     B1B : A2                          LD R2
    3098/     B1C : E0                          WRM                     ; (sp)=R0
    3098/     B1D :                     
    3098/     B1D : A9                          LD SP_LO
    3098/     B1E : F8                          DAC
    3098/     B1F : B9                          XCH SP_LO               ; --sp.3210
    3098/     B20 :                     ;;;  Borrow check is omitted because SP must be even here
    3098/     B20 :                     ;;;     JCN C, PUSH_NOBORROW2_R2_R3
    3098/     B20 :                     ;;;     LD SP_HI
    3098/     B20 :                     ;;;     DAC
    3098/     B20 :                     ;;;     XCH SP_HI               ; --sp.7654
    3098/     B20 :                     ;;; PUSH_NOBORROW2_R2_R3:
    3098/     B20 : 29                          SRC SP
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 60 - 2023/04/16 11:22:22


    3098/     B21 : A3                          LD R3
    3098/     B22 : E0                          WRM                     ; (sp)=R1
    3098/     B23 :                     
    3098/     B23 : C0                          BBL 0
    3099/     B24 : (MACRO)              PUSH_P2: PUSHP	R4, R5
    3099/     B24 : A9                          LD SP_LO
    3099/     B25 : F8                          DAC
    3099/     B26 : B9                          XCH SP_LO               ; --sp.3210
    3099/     B27 : 12 2C                       JCN C, PUSH_NOBORROW_R4_R5
    3099/     B29 : A8                          LD SP_HI
    3099/     B2A : F8                          DAC
    3099/     B2B : B8                          XCH SP_HI               ; --sp.7654
    3099/     B2C :                     PUSH_NOBORROW_R4_R5:
    3099/     B2C : 29                          SRC SP
    3099/     B2D : A4                          LD R4
    3099/     B2E : E0                          WRM                     ; (sp)=R0
    3099/     B2F :                     
    3099/     B2F : A9                          LD SP_LO
    3099/     B30 : F8                          DAC
    3099/     B31 : B9                          XCH SP_LO               ; --sp.3210
    3099/     B32 :                     ;;;  Borrow check is omitted because SP must be even here
    3099/     B32 :                     ;;;     JCN C, PUSH_NOBORROW2_R4_R5
    3099/     B32 :                     ;;;     LD SP_HI
    3099/     B32 :                     ;;;     DAC
    3099/     B32 :                     ;;;     XCH SP_HI               ; --sp.7654
    3099/     B32 :                     ;;; PUSH_NOBORROW2_R4_R5:
    3099/     B32 : 29                          SRC SP
    3099/     B33 : A5                          LD R5
    3099/     B34 : E0                          WRM                     ; (sp)=R1
    3099/     B35 :                     
    3099/     B35 : C0                          BBL 0
    3100/     B36 : (MACRO)              POP_P0: POPP R0, R1
    3100/     B36 : 29                          SRC SP
    3100/     B37 : E9                          RDM
    3100/     B38 : B1                          XCH R1              ; R1=(sp)
    3100/     B39 : 69                          INC SP_LO               ; sp.3210++
    3100/     B3A :                     ;;; Carry check is omitted because SP must be odd here
    3100/     B3A : 29                          SRC SP
    3100/     B3B : E9                          RDM
    3100/     B3C : B0                          XCH R0              ; R0=(sp)
    3100/     B3D : 69                          INC SP_LO               ; sp.3210++
    3100/     B3E : A9                          LD SP_LO
    3100/     B3F : 1C 42                       JCN ZN, POP_NOCARRY_R0_R1
    3100/     B41 : 68                          INC SP_HI               ; sp.7654++
    3100/     B42 :                     POP_NOCARRY_R0_R1:
    3100/     B42 : C0                          BBL 0
    3101/     B43 : (MACRO)              POP_P1: POPP R2, R3
    3101/     B43 : 29                          SRC SP
    3101/     B44 : E9                          RDM
    3101/     B45 : B3                          XCH R3              ; R3=(sp)
    3101/     B46 : 69                          INC SP_LO               ; sp.3210++
    3101/     B47 :                     ;;; Carry check is omitted because SP must be odd here
    3101/     B47 : 29                          SRC SP
    3101/     B48 : E9                          RDM
    3101/     B49 : B2                          XCH R2              ; R2=(sp)
    3101/     B4A : 69                          INC SP_LO               ; sp.3210++
    3101/     B4B : A9                          LD SP_LO
    3101/     B4C : 1C 4F                       JCN ZN, POP_NOCARRY_R2_R3
    3101/     B4E : 68                          INC SP_HI               ; sp.7654++
    3101/     B4F :                     POP_NOCARRY_R2_R3:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 61 - 2023/04/16 11:22:22


    3101/     B4F : C0                          BBL 0
    3102/     B50 : (MACRO)              POP_P2: POPP R4, R5
    3102/     B50 : 29                          SRC SP
    3102/     B51 : E9                          RDM
    3102/     B52 : B5                          XCH R5              ; R5=(sp)
    3102/     B53 : 69                          INC SP_LO               ; sp.3210++
    3102/     B54 :                     ;;; Carry check is omitted because SP must be odd here
    3102/     B54 : 29                          SRC SP
    3102/     B55 : E9                          RDM
    3102/     B56 : B4                          XCH R4              ; R4=(sp)
    3102/     B57 : 69                          INC SP_LO               ; sp.3210++
    3102/     B58 : A9                          LD SP_LO
    3102/     B59 : 1C 5C                       JCN ZN, POP_NOCARRY_R4_R5
    3102/     B5B : 68                          INC SP_HI               ; sp.7654++
    3102/     B5C :                     POP_NOCARRY_R4_R5:
    3102/     B5C : C0                          BBL 0
    3103/     B5D :                     
    3104/     B5D :                     ;;;	org 0B00H
    3105/     B5D :                     ;;;---------------------------------------------------------------------------
    3106/     B5D :                     ;;; PM16
    3107/     B5D :                     ;;; Logical Program Memory with 16 bit address space
    3108/     B5D :                     ;;; 
    3109/     B5D :                     ;;; Phisical PM is 256byte x 16 x 16 bank memory
    3110/     B5D :                     ;;; PM16 is a logical memory space (0000H to FFFFH) mapped to Physical PM.
    3111/     B5D :                     ;;; The PM read routine PM_READ_P0_P1 occupies 2 bytes in each bank.
    3112/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0FFE-0FFF,
    3113/     B5D :                     ;;; it occupies 0FE00-0FFFF logical memory, and 0000H-0FDFFH is user's space.
    3114/     B5D :                     ;;; If the PM_READ_P0_P1 is located at 0F7E-0F7F,
    3115/     B5D :                     ;;; it occupies 07E00-07FFF logical memory,
    3116/     B5D :                     ;;; and 0000H-7DFF and 8000H-FFFFH are user's space.
    3117/     B5D :                     ;;; 
    3118/     B5D :                     ;;;    PM12(BA98.7654.3210)
    3119/     B5D :                     ;;;   -> PM(3210.BA98.7654) BANK=3210, ADD=BA98.7654
    3120/     B5D :                     ;;; 
    3121/     B5D :                     ;;;    PM16(FEDC.BA98.7654.3210)
    3122/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=7654, BANK0=3210 ADD=FEDC.BA98
    3123/     B5D :                     ;;;   (for debug with 256 x 16bank)
    3124/     B5D :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK1=FEDC, BANK0=3210 ADD=BA98.7654
    3125/     B5D :                     ;;;---------------------------------------------------------------------------
    3126/     B5D :                     ;;;---------------------------------------------------------------------------
    3127/     B5D :                     ;;; LD_P1_PM16REG16P0_INCREMENT
    3128/     B5D :                     ;;; P1 = PM16(REG(P0)++)
    3129/     B5D :                     ;;; destroy: P6, P7
    3130/     B5D :                     ;;;---------------------------------------------------------------------------
    3131/     B5D :                     LD_P1_PM16REG16P0_INCREMENT:
    3132/     B5D : (MACRO)              	LD_P6_P0		; P6 = P0
    3132/     B5D : A0                                  LD P0_HI
    3132/     B5E : BC                                  XCH P6_HI
    3132/     B5F : A1                                  LD P0_LO
    3132/     B60 : BD                                  XCH P6_LO
    3133/     B61 : 2D                  	SRC P6
    3134/     B62 : E9                  	RDM			; ACC=REG(P0).bit3210
    3135/     B63 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3136/     B65 : 2F                  	SRC P7
    3137/     B66 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3138/     B67 :                     
    3139/     B67 : 6D                  	INC P6_LO
    3140/     B68 : 2D                  	SRC P6
    3141/     B69 : E9                  	RDM			; ACC=REG(P0).bit7654
    3142/     B6A : 2E 40               	FIM P7, CHIP_PMSELECT1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 62 - 2023/04/16 11:22:22


    3143/     B6C : 2F                  	SRC P7
    3144/     B6D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3145/     B6E :                     
    3146/     B6E : 6D                  	INC P6_LO
    3147/     B6F : 2D                  	SRC P6
    3148/     B70 : E9                  	RDM			; ACC=REG(P0).bitBA98
    3149/     B71 : B1                  	XCH P0_LO		; P0_LO=REG(P0).bitBA98
    3150/     B72 :                     	
    3151/     B72 : 6D                  	INC P6_LO
    3152/     B73 : 2D                  	SRC P6
    3153/     B74 : E9                  	RDM			; ACC=REG(P0).bitFEDC
    3154/     B75 : B0                  	XCH P0_HI		; P0_HI=REG(P0).bitFEDC
    3155/     B76 :                     
    3156/     B76 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    3157/     B78 :                     
    3158/     B78 : AC                  	LD P6_HI			; restore P0
    3159/     B79 : B0                  	XCH P0_HI
    3160/     B7A : AD                  	LD P6_LO
    3161/     B7B : F8                  	DAC
    3162/     B7C : F8                  	DAC
    3163/     B7D : F8                  	DAC
    3164/     B7E : B1                  	XCH P0_LO
    3165/     B7F : 48 5B               	JUN INC_REG16P0
    3166/     B81 :                     ;;;	BBL 0
    3167/     B81 :                     
    3168/     B81 :                     ;;;---------------------------------------------------------------------------
    3169/     B81 :                     ;;; LD_PM16REG16P0_P1
    3170/     B81 :                     ;;; PM16(REG(P0)) = P1
    3171/     B81 :                     ;;; 
    3172/     B81 :                     ;;; destroy: P6, P7
    3173/     B81 :                     ;;;---------------------------------------------------------------------------
    3174/     B81 :                     LD_PM16REG16P0_P1:
    3175/     B81 : 21                  	SRC P0
    3176/     B82 : E9                  	RDM			; ACC = bit3210 of REG(P0)
    3177/     B83 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3178/     B85 : 2F                  	SRC P7			; ACC=REG(P0).bit3210
    3179/     B86 : E1                  	WMP			; set bank_low to REG(P0).bit3210
    3180/     B87 :                     
    3181/     B87 : 61                  	INC P0_LO
    3182/     B88 : 21                  	SRC P0
    3183/     B89 : E9                  	RDM			; ACC = bit7654 of REG(P0)
    3184/     B8A : 2E 40               	FIM P7, CHIP_PMSELECT1
    3185/     B8C : 2F                  	SRC P7
    3186/     B8D : E1                  	WMP			; set bank_high to REG(P0).bit7654
    3187/     B8E :                     
    3188/     B8E : 61                  	INC P0_LO
    3189/     B8F : 21                  	SRC P0
    3190/     B90 : E9                  	RDM			; ACC = bitBA98 of REG(P0)
    3191/     B91 : BD                  	XCH P6_LO		; P6_LO = REG(P0).bitBA98
    3192/     B92 :                     
    3193/     B92 : 61                  	INC P0_LO
    3194/     B93 : 21                  	SRC P0
    3195/     B94 : E9                  	RDM			; ACC = bitFEDC of REG(P0)
    3196/     B95 : BC                  	XCH P6_HI		; P6_HI = REG(P0).bitFEDC
    3197/     B96 :                     	
    3198/     B96 : 2D                  	SRC P6
    3199/     B97 : A3                  	LD P1_LO
    3200/     B98 : E3                  	WPM
    3201/     B99 : A2                  	LD P1_HI
    3202/     B9A : E3                  	WPM
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 63 - 2023/04/16 11:22:22


    3203/     B9B :                     	
    3204/     B9B : A1                  	LD R1			; restore P0
    3205/     B9C : F8                  	DAC
    3206/     B9D : F8                  	DAC
    3207/     B9E : F8                  	DAC
    3208/     B9F : B1                  	XCH R1
    3209/     BA0 : C0                  	BBL 0
    3210/     BA1 :                     
    3211/     BA1 :                     ;;;----------------------------------------------------------------------------
    3212/     BA1 :                     ;;; Subroutines for program memory operation
    3213/     BA1 :                     ;;;----------------------------------------------------------------------------
    3214/     BA1 :                     ;;;---------------------------------------------------------------------------
    3215/     BA1 :                     ;;; PM_WRITE_P0_P1
    3216/     BA1 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3217/     BA1 :                     ;;; (0F00H+P0) = P1
    3218/     BA1 :                     ;;; input: P0, P1
    3219/     BA1 :                     ;;; output: none
    3220/     BA1 :                     ;;;---------------------------------------------------------------------------
    3221/     BA1 :                     PM_WRITE_P0_P1:
    3222/     BA1 : 21                  	SRC P0
    3223/     BA2 : A3                  	LD P1_LO
    3224/     BA3 : E3                  	WPM			; write lower 4bit
    3225/     BA4 : A2                  	LD P1_HI
    3226/     BA5 : E3                  	WPM			; write higher 4bit
    3227/     BA6 : C0                  	BBL 0
    3228/     BA7 :                     
    3229/     BA7 :                     ;;;---------------------------------------------------------------------------
    3230/     BA7 :                     ;;; PM_WRITE_P6_P7
    3231/     BA7 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    3232/     BA7 :                     ;;; (0F00H+P6) = P7
    3233/     BA7 :                     ;;; input: P6, P7
    3234/     BA7 :                     ;;; output: none
    3235/     BA7 :                     ;;;---------------------------------------------------------------------------
    3236/     BA7 :                     PM_WRITE_P6_P7:
    3237/     BA7 : 2D                  	SRC P6
    3238/     BA8 : AF                  	LD P7_LO
    3239/     BA9 : E3                  	WPM			; write lower 4bit
    3240/     BAA : AE                  	LD P7_HI
    3241/     BAB : E3                  	WPM			; write higher 4bit
    3242/     BAC : C0                  	BBL 0
    3243/     BAD :                     
    3244/     BAD :                     ;;;---------------------------------------------------------------------------
    3245/     BAD :                     ;;; PM_INIT_BANK
    3246/     BAD :                     ;;; initialization for program memory (RAM)
    3247/     BAD :                     ;;; Write a subroutne code for reading memory
    3248/     BAD :                     ;;; destroy: P6, P7
    3249/     BAD :                     ;;;---------------------------------------------------------------------------
    3250/     BAD :                     PM_INIT_BANK:	
    3251/     BAD : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    3252/     BAF : 2E 32               	FIM P7, 32H		; FIN P1
    3253/     BB1 : 5B A7               	JMS PM_WRITE_P6_P7
    3254/     BB3 : 6D                  	INC P6_LO
    3255/     BB4 : 2E C0               	FIM P7, 0C0H		; BBL 0
    3256/     BB6 : 5B A7               	JMS PM_WRITE_P6_P7
    3257/     BB8 : C0                  	BBL 0
    3258/     BB9 :                     
    3259/     BB9 :                     ;;;---------------------------------------------------------------------------
    3260/     BB9 :                     ;;; PM_SELECTPMB_P1
    3261/     BB9 :                     ;;; Write ACC to RAM port (CHIP_PMSELECT0 and CHIPSELECT1)
    3262/     BB9 :                     ;;; destroy: P7
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 64 - 2023/04/16 11:22:22


    3263/     BB9 :                     ;;;---------------------------------------------------------------------------
    3264/     BB9 :                     PM_SELECTPMB_P1:
    3265/     BB9 : 2E 00               	FIM P7, CHIP_PMSELECT0
    3266/     BBB : 2F                  	SRC P7
    3267/     BBC : A3                  	LD P1_LO
    3268/     BBD : E1                  	WMP
    3269/     BBE :                     
    3270/     BBE : 2E 40               	FIM P7, CHIP_PMSELECT1
    3271/     BC0 : 2F                  	SRC P7
    3272/     BC1 : A2                  	LD P1_HI
    3273/     BC2 : E1                  	WMP
    3274/     BC3 : C0                  	BBL 0
    3275/     BC4 :                     ;;;----------------------------------------------------------------------------
    3276/     BC4 :                     ;;; GETLINE_PM16REG16P0
    3277/     BC4 :                     ;;; Get line from serial input and store to PM16(REG(P0))
    3278/     BC4 :                     ;;; The value of REG(P0) does not change
    3279/     BC4 :                     ;;;----------------------------------------------------------------------------
    3280/     BC4 :                     GETLINE_PM16REG16P0:
    3281/     BC4 : 5B 00               	JMS PUSH_P0
    3282/     BC6 : 5B 12               	JMS PUSH_P1
    3283/     BC8 :                     
    3284/     BC8 : 22 30               	FIM P1, REG16_MON_TMP
    3285/     BCA : 57 76               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    3286/     BCC :                     
    3287/     BCC :                     GETLINE_LOOP:
    3288/     BCC : 5C 37               	JMS GETCHAR_P1		; P1 = getchar()
    3289/     BCE : 1C CC               	JCN ZN, GETLINE_LOOP	; ACC!=0 (stop bit error)
    3290/     BD0 :                     	
    3291/     BD0 : 5D 3C               	JMS ISCRLF_P1
    3292/     BD2 : 14 DA               	JCN Z, GETLINE_L1
    3293/     BD4 : 5C AC               	JMS PRINT_CR
    3294/     BD6 : 5C B0               	JMS PRINT_LF
    3295/     BD8 : 4B FE               	JUN GETLINE_EXIT
    3296/     BDA :                     GETLINE_L1:
    3297/     BDA : 2E 08               	FIM P7, 08H		; backspace
    3298/     BDC : 5D 27               	JMS CMP_P1P7
    3299/     BDE : 14 E2               	JCN Z, GETLINE_BS
    3300/     BE0 : 4B F6               	JUN GETLINE_INSERTCHAR
    3301/     BE2 :                     GETLINE_BS:
    3302/     BE2 : 22 30               	FIM P1, REG16_MON_TMP
    3303/     BE4 : 58 7C               	JMS CMP_REG16P0_REG16P1
    3304/     BE6 : 1C EA               	JCN ZN, GETLINE_DO_BS	; do BS if REG(P0)!=REG(TMP)
    3305/     BE8 : 4B CC               	JUN GETLINE_LOOP	; ignore BS
    3306/     BEA :                     GETLINE_DO_BS:			; delete a character on the cursor
    3307/     BEA : 58 6B               	JMS DEC_REG16P0		; REG(P0)--
    3308/     BEC :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    3309/     BEC : 22 08               	FIM P1, 08H
    3310/     BEE : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3311/     BF0 : 5C 98               	JMS PRINT_SPC		; put ' '
    3312/     BF2 : 5C 5F               	JMS PUTCHAR_P1		; put backspace
    3313/     BF4 :                     
    3314/     BF4 : 4B CC               	JUN GETLINE_LOOP
    3315/     BF6 :                     GETLINE_INSERTCHAR:
    3316/     BF6 : 5C 5F               	JMS PUTCHAR_P1
    3317/     BF8 : 5B 81               	JMS LD_PM16REG16P0_P1	; PM(REG(P0)) = P1
    3318/     BFA : 58 5B               	JMS INC_REG16P0		; REG(P0)++
    3319/     BFC :                     	
    3320/     BFC : 4B CC               	JUN GETLINE_LOOP
    3321/     BFE :                     GETLINE_EXIT:
    3322/     BFE : 22 00               	FIM P1, 00H
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 65 - 2023/04/16 11:22:22


    3323/     C00 : 5B 81               	JMS LD_PM16REG16P0_P1	; write NULL on the end of line buffer
    3324/     C02 :                     
    3325/     C02 : 22 30               	FIM P1, REG16_MON_TMP
    3326/     C04 : 57 6C               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    3327/     C06 : 5B 43               	JMS POP_P1		; restore P1
    3328/     C08 : 4B 36               	JUN POP_P0		; restore P0
    3329/     C0A :                     ;;;	BBL 0
    3330/     C0A :                     
    3331/     C0A :                     ;;;----------------------------------------------------------------------------
    3332/     C0A :                     ;;; PRINTSTR_PM16REG16P0 (Delimiter is 0x00)
    3333/     C0A :                     ;;; Print a string 
    3334/     C0A :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    3335/     C0A :                     ;;; REG(INDEX) is incremented to
    3336/     C0A :                     ;;;	the end of the string
    3337/     C0A :                     ;;; 
    3338/     C0A :                     ;;; destroy: P6, P7
    3339/     C0A :                     ;;;----------------------------------------------------------------------------
    3340/     C0A :                     PRINTSTR_PM16REG16P0:
    3341/     C0A : 5B 12               	JMS PUSH_P1
    3342/     C0C :                     PRINTSTR_LOOP:
    3343/     C0C : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT
    3344/     C0E : 5D 34               	JMS ISZEROORNOT_P1
    3345/     C10 : 14 16               	JCN Z, PRINTSTR_EXIT
    3346/     C12 : 5C 5F               	JMS PUTCHAR_P1
    3347/     C14 : 4C 0C               	JUN PRINTSTR_LOOP
    3348/     C16 :                     PRINTSTR_EXIT:
    3349/     C16 : 4B 43               	JUN POP_P1
    3350/     C18 :                     ;;;	BBL 0
    3351/     C18 :                     
    3352/     C18 :                     ;;;----------------------------------------------------------------------------
    3353/     C18 :                     ;;; GETHEXBYTE_P1_PM16REG16P0_INCREMENT
    3354/     C18 :                     ;;; Get a hexadecimal 1 byte from the string PM16REG16P0
    3355/     C18 :                     ;;; and increment the pointer
    3356/     C18 :                     ;;; output: P1
    3357/     C18 :                     ;;; ACC=0 get number success
    3358/     C18 :                     ;;; ACC=1 no number, P1=first character
    3359/     C18 :                     ;;; destroy: P6, P7
    3360/     C18 :                     ;;;----------------------------------------------------------------------------
    3361/     C18 :                     GETHEXBYTE_P1_PM16REG16P0_INCREMENT:
    3362/     C18 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM12(REG16(P0)++)
    3363/     C1A : 5C F0               	JMS ISHEX_P1
    3364/     C1C : 1C 1F               	JCN ZN, GETHEXBYTE_L1
    3365/     C1E : C1                  	BBL 1			; no hex number and exit
    3366/     C1F :                     GETHEXBYTE_L1:	
    3367/     C1F : 5B 24               	JMS PUSH_P2
    3368/     C21 : 5D 1B               	JMS CTOI_P1
    3369/     C23 : A3                  	LD  P1_LO
    3370/     C24 : B4                  	XCH P2_HI			; save for upper digit
    3371/     C25 : 5B 5D               	JMS LD_P1_PM16REG16P0_INCREMENT	; P1 = PM(REG16(P0)++)
    3372/     C27 : 5C F0               	JMS ISHEX_P1
    3373/     C29 : 14 31               	JCN Z, GETHEXZBYTE_1DIGIT_EXIT
    3374/     C2B : 5D 1B               	JMS CTOI_P1
    3375/     C2D : A4                  	LD P2_HI
    3376/     C2E : B2                  	XCH P1_HI
    3377/     C2F : 4B 50               	JUN POP_P2
    3378/     C31 :                     ;;;	BBL 0
    3379/     C31 :                     GETHEXZBYTE_1DIGIT_EXIT:
    3380/     C31 : F0                  	CLB
    3381/     C32 : B2                  	XCH P1_HI
    3382/     C33 : A4                  	LD P2_HI
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 66 - 2023/04/16 11:22:22


    3383/     C34 : B3                  	XCH P1_LO
    3384/     C35 : 4B 50               	JUN POP_P2
    3385/     C37 :                     ;;;	BBL 0
    3386/     C37 :                     	
    3387/     C37 :                     ;;;----------------------------------------------------------------------------
    3388/     C37 :                     ;;; I/O and some basic routines located in Page 0D00H
    3389/     C37 :                     ;;;----------------------------------------------------------------------------
    3390/     C37 :                     ;;;	org 0C00H
    3391/     C37 :                     ;;;---------------------------------------------------------------------------
    3392/     C37 :                     ;;; Software UART Routine
    3393/     C37 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3394/     C37 :                     ;;; defined in separated file
    3395/     C37 :                     ;;;---------------------------------------------------------------------------
    3396/     C37 :                     ;;; supported baudrate is 9600 bps, 8 data bits, no parity, 1 stop bit
    3397/     C37 :                     
    3398/     C37 :                     	include "9600bps.inc"
(1)    1/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    2/     C37 :                     ;;; getchar and putchar functions
(1)    3/     C37 :                     ;;; baud rate = 9600bps
(1)    4/     C37 :                     ;;; 8bit, no parity, stop 1
(1)    5/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    6/     C37 :                     
(1)    7/     C37 :                     ;;;---------------------------------------------------------------------------
(1)    8/     C37 :                     ;;; GETCHAR_P1
(1)    9/     C37 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     C37 :                     ;;;
(1)   11/     C37 :                     ;;; Input: none
(1)   12/     C37 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     C37 :                     ;;; Working: P6, P7
(1)   14/     C37 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     C37 :                     ;;; 
(1)   16/     C37 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     C37 :                     ;;; 
(1)   18/     C37 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     C37 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     C37 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     C37 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     C37 :                     ;;;               |->phase delay
(1)   23/     C37 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     C37 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     C37 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     C37 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     C37 :                     ;;;---------------------------------------------------------------------------
(1)   28/     C37 :                     
(1)   29/     C37 :                     GETCHAR_P1:
(1)   30/     C37 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     C39 :                                                     ; 
(1)   32/     C39 : 19 39                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     C3B : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     C3D : 7F 3D               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     C3F :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     C3F :                     GETCHAR_L1:
(1)   37/     C3F : 19 44               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     C41 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     C42 : 4C 47                       JUN GETCHAR_L3          ;<2>
(1)   40/     C44 :                     GETCHAR_L2:
(1)   41/     C44 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     C45 : 00                          NOP                     ;[1]
(1)   43/     C46 : 00                          NOP                     ;[1]
(1)   44/     C47 :                     GETCHAR_L3:
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 67 - 2023/04/16 11:22:22


(1)   45/     C47 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     C48 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     C49 : 7D 3F                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     C4B :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     C4B : B3                  	XCH R3                  ;(1)
(1)   50/     C4C : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     C4E :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     C4E :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     C4E :                     GETCHAR_L4:
(1)   54/     C4E : 19 53               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     C50 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     C51 : 4C 56                       JUN GETCHAR_L6          ;<2>
(1)   57/     C53 :                     GETCHAR_L5:
(1)   58/     C53 : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     C54 : 00                          NOP                     ;[1]
(1)   60/     C55 : 00                          NOP                     ;[1]
(1)   61/     C56 :                     GETCHAR_L6:
(1)   62/     C56 : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     C57 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     C58 : 7D 4E                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     C5A :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     C5A : B2                  	XCH R2                  ;(1)
(1)   67/     C5B :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     C5B :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     C5B :                     	;; check stop bit
(1)   70/     C5B : 19 5E                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     C5D : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     C5E :                     GETCHAR_OK:
(1)   73/     C5E : C0                  	BBL 0
(1)   74/     C5F :                                     
(1)   75/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   76/     C5F :                     ;;; PUTCHAR_P1
(1)   77/     C5F :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     C5F :                     ;;; 
(1)   79/     C5F :                     ;;; Input: P1(R2,R3)
(1)   80/     C5F :                     ;;; Output: ACC=0
(1)   81/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   82/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   83/     C5F :                     ;;; P1 is not affected
(1)   84/     C5F :                     ;;; 
(1)   85/     C5F :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     C5F :                     ;;; 
(1)   87/     C5F :                     ;;; Input: P1(R2,R3)
(1)   88/     C5F :                     ;;; Output: ACC=0
(1)   89/     C5F :                     ;;; Working: P6(R12R13), P7
(1)   90/     C5F :                     ;;; This subroutine destroys P6, P7.
(1)   91/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   92/     C5F :                     ;;; 
(1)   93/     C5F :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     C5F :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     C5F :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     C5F :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     C5F :                     ;;;---------------------------------------------------------------------------
(1)   98/     C5F :                     
(1)   99/     C5F :                     PUTCHAR_P1:
(1)  100/     C5F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     C5F :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     C5F :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     C5F : [100]                	endif
(1)  104/     C5F :                     	
 AS V1.42 Beta [Bld 236] - Source File emu.asm(9600bps.inc) - Page 68 - 2023/04/16 11:22:22


(1)  105/     C5F : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     C61 : 2F                  	SRC P7              ; set port address
(1)  107/     C62 :                     
(1)  108/     C62 : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     C64 : A3                          LD R3
(1)  110/     C65 : F1                          CLC                 ; start bit is 0
(1)  111/     C66 : F5                          RAL
(1)  112/     C67 :                                     
(1)  113/     C67 :                     PUTCHAR_L1:
(1)  114/     C67 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     C68 : 00                          NOP                 ;(1)
(1)  116/     C69 : 00                          NOP                 ;(1)
(1)  117/     C6A : 00                          NOP                 ;(1)
(1)  118/     C6B : 00                          NOP                 ;(1)
(1)  119/     C6C : E1                          WMP                 ;(1)
(1)  120/     C6D : F6                          RAR                 ;(1)
(1)  121/     C6E : 7D 67                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     C70 :                     	
(1)  123/     C70 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     C72 : A2                          LD R2               ;(1)
(1)  125/     C73 : FA                          STC                 ;(1) stop bit is 1
(1)  126/     C74 : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     C75 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     C76 :                     PUTCHAR_L2:
(1)  129/     C76 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     C77 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     C79 : 7F 79                       ISZ R15, $          ;(4)
(1)  132/     C7B : F6                          RAR                 ;(1)
(1)  133/     C7C : 7D 76                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     C7E :                     	
(1)  135/     C7E : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     C7E :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     C7E :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     C7E : [135]                	endif
(1)  139/     C7E :                     	
(1)  140/     C7E : C0                          BBL 0
(1)  141/     C7F :                     
(1)  142/     C7F :                     
    3399/     C7F :                     
    3400/     C7F :                     ;;;---------------------------------------------------------------------------
    3401/     C7F :                     ;;; INIT_SERIAL
    3402/     C7F :                     ;;; Initialize serial port
    3403/     C7F :                     ;;;---------------------------------------------------------------------------
    3404/     C7F :                     INIT_SERIAL:
    3405/     C7F : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3406/     C7F :                     	LDM BANK_SERIAL	    ; bank of output port
    3407/     C7F :                     	DCL		    ; set port bank
    3408/     C7F : [3405]               	endif
    3409/     C7F :                     	
    3410/     C7F : 2E C0               	FIM P7, CHIP_SERIAL ; chip# of output port
    3411/     C81 : 2F                  	SRC P7		    ; set port address
    3412/     C82 : D1                  	LDM 1
    3413/     C83 : E1                  	WMP		    ; set serial port to 1 (TTL->H)
    3414/     C84 :                     
    3415/     C84 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    3416/     C84 :                     	LDM BANK_DEFAULT    
    3417/     C84 :                     	DCL		    ; restore bank to default
    3418/     C84 : [3415]               	endif
    3419/     C84 :                     	
    3420/     C84 : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 69 - 2023/04/16 11:22:22


    3421/     C85 :                     
    3422/     C85 :                     ;;;----------------------------------------------------------------------------
    3423/     C85 :                     ;;; PRINTHEX_P1
    3424/     C85 :                     ;;; Print 8bit register pair in HEX format
    3425/     C85 :                     ;;; PRINT HEX
    3426/     C85 :                     ;;; destroy: P6, P7
    3427/     C85 :                     ;;;----------------------------------------------------------------------------
    3428/     C85 :                     PRINTHEX_P1:
    3429/     C85 : 5B 00               	JMS PUSH_P0
    3430/     C87 : 5B 12               	JMS PUSH_P1
    3431/     C89 : (MACRO)              	LD_P0_P1
    3431/     C89 : A2                                  LD P1_HI
    3431/     C8A : B0                                  XCH P0_HI
    3431/     C8B : A3                                  LD P1_LO
    3431/     C8C : B1                                  XCH P0_LO
    3432/     C8D : A0                  	LD R0
    3433/     C8E : 5C B4               	JMS PRINT_ACC		; print upper 4bit
    3434/     C90 : A1                  	LD R1
    3435/     C91 : 5C B4               	JMS PRINT_ACC		; print lower 4bit
    3436/     C93 : 5B 43               	JMS POP_P1
    3437/     C95 : 5B 36               	JMS POP_P0
    3438/     C97 : C0                  	BBL 0
    3439/     C98 :                     
    3440/     C98 :                     ;;;---------------------------------------------------------------------------
    3441/     C98 :                     ;;; PRINT_SPC
    3442/     C98 :                     ;;; print " "
    3443/     C98 :                     ;;; destroy: ACC
    3444/     C98 :                     ;;; This routine consumes 2 PC stack
    3445/     C98 :                     ;;;---------------------------------------------------------------------------
    3446/     C98 :                     PRINT_SPC:
    3447/     C98 : 5B 12               	JMS PUSH_P1
    3448/     C9A : 22 20               	FIM P1, ' '
    3449/     C9C : 5C 5F               	JMS PUTCHAR_P1
    3450/     C9E : 4B 43               	JUN POP_P1
    3451/     CA0 :                     ;;;	BBL 0
    3452/     CA0 :                     
    3453/     CA0 :                     ;;;---------------------------------------------------------------------------
    3454/     CA0 :                     ;;; PRINT_CRLF
    3455/     CA0 :                     ;;; print "\r\n"
    3456/     CA0 :                     ;;; destroy: ACC
    3457/     CA0 :                     ;;; This routine consumes 2 PC stack
    3458/     CA0 :                     ;;;---------------------------------------------------------------------------
    3459/     CA0 :                     PRINT_CRLF:
    3460/     CA0 : 5B 12               	JMS PUSH_P1
    3461/     CA2 : 22 0D               	FIM P1, '\r'
    3462/     CA4 : 5C 5F               	JMS PUTCHAR_P1
    3463/     CA6 : 22 0A               	FIM P1, '\n'
    3464/     CA8 : 5C 5F               	JMS PUTCHAR_P1
    3465/     CAA : 4B 43               	JUN POP_P1
    3466/     CAC :                     ;;;	BBL 0
    3467/     CAC :                     
    3468/     CAC :                     ;;;---------------------------------------------------------------------------
    3469/     CAC :                     ;;; PRINT_CR
    3470/     CAC :                     ;;; print "\r"
    3471/     CAC :                     ;;; destroy: P1, ACC
    3472/     CAC :                     ;;; This routine consumes 1 PC stack
    3473/     CAC :                     ;;;---------------------------------------------------------------------------
    3474/     CAC :                     PRINT_CR:
    3475/     CAC : 22 0D               	FIM P1, '\r'
    3476/     CAE : 4C 5F               	JUN PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 70 - 2023/04/16 11:22:22


    3477/     CB0 :                     
    3478/     CB0 :                     ;;;---------------------------------------------------------------------------
    3479/     CB0 :                     ;;; PRINT_LF
    3480/     CB0 :                     ;;; print "\n"
    3481/     CB0 :                     ;;; destroy: P1, ACC
    3482/     CB0 :                     ;;; This routine consumes 1 PC stack
    3483/     CB0 :                     ;;;---------------------------------------------------------------------------
    3484/     CB0 :                     PRINT_LF:
    3485/     CB0 : 22 0A               	FIM P1, '\n'
    3486/     CB2 : 4C 5F               	JUN PUTCHAR_P1
    3487/     CB4 :                     
    3488/     CB4 :                     ;;;---------------------------------------------------------------------------
    3489/     CB4 :                     ;;; PRINT_ACC
    3490/     CB4 :                     ;;; print contents of ACC('0'...'F') as a character
    3491/     CB4 :                     ;;; destroy: P1, P6, P7, ACC
    3492/     CB4 :                     ;;; This routine destroys P1, instead it consumes only 1 PC stack
    3493/     CB4 :                     ;;;---------------------------------------------------------------------------
    3494/     CB4 :                     PRINT_ACC:
    3495/     CB4 : 22 30               	FIM P1, '0'
    3496/     CB6 : F1                  	CLC			; clear carry
    3497/     CB7 : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3498/     CB8 : 1A BC               	JCN CN, PRINTACC_L1
    3499/     CBA : 62                  	INC P1_HI
    3500/     CBB : F2                  	IAC
    3501/     CBC :                     PRINTACC_L1:	
    3502/     CBC : B3                  	XCH P1_LO		; P1_LO<-ACC
    3503/     CBD : 4C 5F               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3504/     CBF :                     
    3505/     CBF :                     ;;;----------------------------------------------------------------------------
    3506/     CBF :                     ;;; INC_P1
    3507/     CBF :                     ;;; P1=P1+1
    3508/     CBF :                     ;;; CY=1 if overflow otherwise CY=0
    3509/     CBF :                     ;;;----------------------------------------------------------------------------
    3510/     CBF :                     INC_P1:	
    3511/     CBF : F0                  	CLB
    3512/     CC0 : 63                  	INC P1_LO
    3513/     CC1 : A3                  	LD P1_LO
    3514/     CC2 : 1C C9               	JCN ZN, INC_P1_EXIT
    3515/     CC4 : 62                  	INC P1_HI
    3516/     CC5 : A2                  	LD P1_HI
    3517/     CC6 : 1C C9               	JCN ZN, INC_P1_EXIT
    3518/     CC8 : FA                  	STC
    3519/     CC9 :                     INC_P1_EXIT:	
    3520/     CC9 : C0                  	BBL 0
    3521/     CCA :                     
    3522/     CCA :                     ;;;----------------------------------------------------------------------------
    3523/     CCA :                     ;;; DEC_P1
    3524/     CCA :                     ;;; P1=P1-1
    3525/     CCA :                     ;;; CY=1 if noborrow, CY=0 if borrow
    3526/     CCA :                     ;;;----------------------------------------------------------------------------
    3527/     CCA :                     DEC_P1:	
    3528/     CCA : A3                  	LD P1_LO
    3529/     CCB : F8                  	DAC
    3530/     CCC : B3                  	XCH P1_LO
    3531/     CCD : 12 D2               	JCN C, DEC_P1_EXIT	; no borrow then exit
    3532/     CCF : A2                  	LD P1_HI		; decrement upper 4bit
    3533/     CD0 : F8                  	DAC
    3534/     CD1 : B2                  	XCH P1_HI
    3535/     CD2 :                     DEC_P1_EXIT:	
    3536/     CD2 : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 71 - 2023/04/16 11:22:22


    3537/     CD3 :                     	
    3538/     CD3 :                     ;;;----------------------------------------------------------------------------
    3539/     CD3 :                     ;;; ISALPHA_P1
    3540/     CD3 :                     ;;; check P1 is an alphabet as a ascii character
    3541/     CD3 :                     ;;; return: ACC=0 if P1 is not an alphabet
    3542/     CD3 :                     ;;;	    ACC=1 if P1 is an alphabet
    3543/     CD3 :                     ;;; destroy: P7
    3544/     CD3 :                     ;;;----------------------------------------------------------------------------
    3545/     CD3 :                     ISALPHA_P1:
    3546/     CD3 :                     ISALPHA_L1:
    3547/     CD3 : 2E 41               	FIM P7, 'A'
    3548/     CD5 : 5D 27               	JMS CMP_P1P7
    3549/     CD7 : 12 DA               	JCN C, ISALPHA_L10
    3550/     CD9 : C0                  	BBL 0			; P1<'A'
    3551/     CDA :                     ISALPHA_L10:
    3552/     CDA : 2E 5B               	FIM P7, 'Z'+1
    3553/     CDC : 5D 27               	JMS CMP_P1P7
    3554/     CDE : 12 E1               	JCN C,	ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3555/     CE0 : C1                  	BBL 1			; 'A'<=P1<='Z'
    3556/     CE1 :                     ISALPHA_L2:
    3557/     CE1 : 2E 61               	FIM P7, 'a'
    3558/     CE3 : 5D 27               	JMS CMP_P1P7
    3559/     CE5 : 12 E8               	JCN C, ISALPHA_L20
    3560/     CE7 : C0                  	BBL 0			; P1<'a'
    3561/     CE8 :                     ISALPHA_L20:	
    3562/     CE8 : 2E 7B               	FIM P7, 'z'+1
    3563/     CEA : 5D 27               	JMS CMP_P1P7
    3564/     CEC : 12 EF               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3565/     CEE : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3566/     CEF :                     ISALPHA_FALSE:
    3567/     CEF : C0                  	BBL 0
    3568/     CF0 :                     
    3569/     CF0 :                     ;;;----------------------------------------------------------------------------
    3570/     CF0 :                     ;;; ISHEX_P1
    3571/     CF0 :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
    3572/     CF0 :                     ;;; return: ACC=0 if P1 is not a hex digit letter
    3573/     CF0 :                     ;;;	    ACC=1 if P1 is a hex digit letter
    3574/     CF0 :                     ;;; destroy: P7
    3575/     CF0 :                     ;;;----------------------------------------------------------------------------
    3576/     CF0 :                     ISHEX_P1:
    3577/     CF0 : 2E 30               	FIM P7, '0'
    3578/     CF2 : 5D 27               	JMS CMP_P1P7
    3579/     CF4 : 12 F7               	JCN C, ISHEX_L00
    3580/     CF6 : C0                  	BBL 0			; P1<'0'
    3581/     CF7 :                     ISHEX_L00:	
    3582/     CF7 : 2E 3A               	FIM P7, '9'+1
    3583/     CF9 : 5D 27               	JMS CMP_P1P7
    3584/     CFB : 12 FE               	JCN C,	ISHEX_L1	; P1>='9'+1 then jump to next chance
    3585/     CFD : C1                  	BBL 1			; '0'<=P1<='9'
    3586/     CFE :                     ISHEX_L1:
    3587/     CFE : 2E 41               	FIM P7, 'A'
    3588/     D00 : 5D 27               	JMS CMP_P1P7
    3589/     D02 : 12 05               	JCN C, ISHEX_L10
    3590/     D04 : C0                  	BBL 0			; P1<'A'
    3591/     D05 :                     ISHEX_L10:
    3592/     D05 : 2E 47               	FIM P7, 'F'+1
    3593/     D07 : 5D 27               	JMS CMP_P1P7
    3594/     D09 : 12 0C               	JCN C,	ISHEX_L2	; P1>='F'+1 then jump to next chance
    3595/     D0B : C1                  	BBL 1			; 'A'<=P1<='F'
    3596/     D0C :                     ISHEX_L2:
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 72 - 2023/04/16 11:22:22


    3597/     D0C : 2E 61               	FIM P7, 'a'
    3598/     D0E : 5D 27               	JMS CMP_P1P7
    3599/     D10 : 12 13               	JCN C, ISHEX_L20
    3600/     D12 : C0                  	BBL 0			; P1<'a'
    3601/     D13 :                     ISHEX_L20:	
    3602/     D13 : 2E 67               	FIM P7, 'f'+1
    3603/     D15 : 5D 27               	JMS CMP_P1P7
    3604/     D17 : 12 1A               	JCN C, ISHEX_FALSE	; P1>='f'+1
    3605/     D19 : C1                  	BBL 1			; 'a'<=P1<= 'f'
    3606/     D1A :                     ISHEX_FALSE:
    3607/     D1A : C0                  	BBL 0
    3608/     D1B :                     
    3609/     D1B :                     ;;;---------------------------------------------------------------------------
    3610/     D1B :                     ;;; CTOI_P1
    3611/     D1B :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3612/     D1B :                     ;;; no error check
    3613/     D1B :                     ;;; input: P1(R2R3)
    3614/     D1B :                     ;;; output: P1_LO, (P1_HI=0)
    3615/     D1B :                     ;;;---------------------------------------------------------------------------
    3616/     D1B :                     CTOI_P1:
    3617/     D1B : F0                  	CLB
    3618/     D1C : D3                  	LDM 3
    3619/     D1D : 92                  	SUB P1_HI
    3620/     D1E : 14 24               	JCN Z, CTOI_09	; check upper 4bit
    3621/     D20 : F0                  	CLB
    3622/     D21 : D9                  	LDM 9
    3623/     D22 : 83                  	ADD P1_LO
    3624/     D23 : B3                  	XCH P1_LO		; P1_HI = P1_LO+ 9 for 'a-fA-F'
    3625/     D24 :                     CTOI_09:
    3626/     D24 : F0                  	CLB
    3627/     D25 : B2                  	XCH R2			; R2 = 0
    3628/     D26 : C0                  	BBL 0
    3629/     D27 :                     	
    3630/     D27 :                     ;;;---------------------------------------------------------------------------
    3631/     D27 :                     ;;; CMP_P1P7
    3632/     D27 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3633/     D27 :                     ;;; input: P1, P7
    3634/     D27 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3635/     D27 :                     ;;;	    ACC=0,CY=1 if P1==P7
    3636/     D27 :                     ;;;	    ACC=1,CY=1 if P1>P7
    3637/     D27 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3638/     D27 :                     ;;;---------------------------------------------------------------------------
    3639/     D27 :                     CMP_P1P7:
    3640/     D27 : F0                  	CLB
    3641/     D28 : A2                  	LD R2			
    3642/     D29 : 9E                  	SUB R14			;R2-R14
    3643/     D2A : 14 2D               	JCN Z, CMP17_L1		; jump if R2==R14
    3644/     D2C : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3645/     D2D :                     CMP17_L1:	
    3646/     D2D : F0                  	CLB
    3647/     D2E : A3                  	LD R3
    3648/     D2F : 9F                  	SUB R15			;R3-R15
    3649/     D30 : 14 33               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3650/     D32 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3651/     D33 :                     				; if P1>P7 then ACC=1, CY=1
    3652/     D33 :                     CMP17_EXIT01:
    3653/     D33 : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3654/     D34 :                     	
    3655/     D34 :                     ;;;---------------------------------------------------------------------------
    3656/     D34 :                      ;;; ISZEROORNOT_P1
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 73 - 2023/04/16 11:22:22


    3657/     D34 :                     ;;; check P1 is zero or not
    3658/     D34 :                     ;;; Return 0 if P1 is 0
    3659/     D34 :                     ;;; return: ACC=0 if P1 == 0
    3660/     D34 :                     ;;;	    ACC=1 if P1 != 0
    3661/     D34 :                     ;;;---------------------------------------------------------------------------
    3662/     D34 :                     ISZEROORNOT_P1:
    3663/     D34 : A3                  	LD P1_LO
    3664/     D35 : 1C 3B               	JCN ZN, ISZEROORNOT_EXIT1
    3665/     D37 : A2                  	LD P1_HI
    3666/     D38 : 1C 3B               	JCN ZN, ISZEROORNOT_EXIT1
    3667/     D3A : C0                  	BBL 0
    3668/     D3B :                     ISZEROORNOT_EXIT1:
    3669/     D3B : C1                  	BBL 1
    3670/     D3C :                     
    3671/     D3C :                     ;;;---------------------------------------------------------------------------
    3672/     D3C :                     ;;; ISCRLF_P1
    3673/     D3C :                     ;;; check if P1=='\r' | P1=='\n'
    3674/     D3C :                     ;;; input: P0
    3675/     D3C :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3676/     D3C :                     ;;;	    ACC=0 P1!='\r' && P1!='\n'
    3677/     D3C :                     ;;;---------------------------------------------------------------------------
    3678/     D3C :                     ISCRLF_P1:
    3679/     D3C : A2                  	LD R2
    3680/     D3D : 1C 49               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3681/     D3F : F1                  	CLC
    3682/     D40 : DD                  	LDM '\r'
    3683/     D41 : 93                  	SUB R3
    3684/     D42 : 14 4A               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3685/     D44 : F1                  	CLC
    3686/     D45 : DA                  	LDM '\n'
    3687/     D46 : 93                  	SUB R3
    3688/     D47 : 14 4A               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3689/     D49 :                     ISCRLF_EXIT0:
    3690/     D49 : C0                  	BBL 0
    3691/     D4A :                     ISCRLF_EXIT1:
    3692/     D4A : C1                  	BBL 1
    3693/     D4B :                     
    3694/     D4B :                     ;;;---------------------------------------------------------------------------
    3695/     D4B :                     ;;; TOUPPER_P1
    3696/     D4B :                     ;;; Convert 'a' to 'z'	to 'A' to 'Z'
    3697/     D4B :                     ;;;---------------------------------------------------------------------------
    3698/     D4B :                     TOUPPER_P1:
    3699/     D4B : 5C D3               	JMS ISALPHA_P1
    3700/     D4D : 14 56               	JCN Z, TOUPPER_P1_EXIT
    3701/     D4F : A2                  	LD P1_HI
    3702/     D50 : F6                  	RAR
    3703/     D51 : F6                  	RAR
    3704/     D52 : F1                  	CLC
    3705/     D53 : F5                  	RAL
    3706/     D54 : F5                  	RAL
    3707/     D55 : B2                  	XCH P1_HI
    3708/     D56 :                     TOUPPER_P1_EXIT:
    3709/     D56 : C0                  	BBL 0
    3710/     D57 :                     
    3711/     D57 :                     ;;;---------------------------------------------------------------------------
    3712/     D57 :                     ;;; PRINT_DATARAM_P0
    3713/     D57 :                     ;;; Print one DATA RAM Register (ADDR=P0)
    3714/     D57 :                     ;;;---------------------------------------------------------------------------
    3715/     D57 :                     PRINT_DATARAM_P0:
    3716/     D57 : A0                  	LD P0_HI		; PRINT ADDDR
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 74 - 2023/04/16 11:22:22


    3717/     D58 : 5C B4               	JMS PRINT_ACC
    3718/     D5A : A1                  	LD P0_LO
    3719/     D5B : 5C B4               	JMS PRINT_ACC
    3720/     D5D : 22 3A               	FIM P1, ':'
    3721/     D5F : 5C 5F               	JMS PUTCHAR_P1
    3722/     D61 :                     CMDDD_L2:
    3723/     D61 : F0                  	CLB		; PRINT data characters
    3724/     D62 : 21                  	SRC P0		; set address
    3725/     D63 : E9                  	RDM		; read data memory
    3726/     D64 : 5C B4               	JMS PRINT_ACC
    3727/     D66 : 71 61               	ISZ P0_LO, CMDDD_L2
    3728/     D68 :                     
    3729/     D68 : 22 3A               	FIM P1, ':'	; PRINT Status characters
    3730/     D6A : 5C 5F               	JMS PUTCHAR_P1
    3731/     D6C : 21                  	SRC P0		; set address
    3732/     D6D : EC                  	RD0
    3733/     D6E : B2                  	XCH P1_HI
    3734/     D6F : ED                  	RD1
    3735/     D70 : B3                  	XCH P1_LO
    3736/     D71 : 5C 85               	JMS PRINTHEX_P1
    3737/     D73 : 21                  	SRC P0		; set address
    3738/     D74 : EE                  	RD2
    3739/     D75 : B2                  	XCH P1_HI
    3740/     D76 : EF                  	RD3
    3741/     D77 : B3                  	XCH P1_LO
    3742/     D78 : 5C 85               	JMS PRINTHEX_P1
    3743/     D7A : 4C A0               	JUN PRINT_CRLF
    3744/     D7C :                     ;;;	BBL 0
    3745/     D7C :                     
    3746/     D7C :                     ;;;---------------------------------------------------------------------------
    3747/     D7C :                     ;;; Program Memory Test
    3748/     D7C :                     ;;; This command is optional
    3749/     D7C :                     ;;;---------------------------------------------------------------------------
    3750/     D7C : =>FALSE              	if USE_MON_CMD_T
    3751/     D7C :                     COMMAND_T:
    3752/     D7C :                     	LDM loop(2)
    3753/     D7C :                     	XCH CNT_I
    3754/     D7C :                     CMDT_LOOP_RW:
    3755/     D7C :                     	FIM P0, REG8_MON_TMP
    3756/     D7C :                     	FIM P1, 00H
    3757/     D7C :                     	JMS LD_REG8P0_P1
    3758/     D7C :                     	
    3759/     D7C :                     	FIM P2, loops(16, 16)
    3760/     D7C :                     CMDT_LOOPH
    3761/     D7C :                     	LD_P1_P2
    3762/     D7C :                     	FIM P0, REG8_MON_TMP
    3763/     D7C :                     	JMS ADD_REG8P0_P1
    3764/     D7C :                     	FIM P3, loops(16, 16)
    3765/     D7C :                     CMDT_LOOPL:
    3766/     D7C :                     	LD_P1_P3
    3767/     D7C :                     	FIM P0, REG8_MON_TMP
    3768/     D7C :                     	JMS ADD_REG8P0_P1
    3769/     D7C :                     	
    3770/     D7C :                     	LD_P1_P2
    3771/     D7C :                     	FIM P7, lo(PM_READ_P0_P1)
    3772/     D7C :                     	JMS CMP_P1P7
    3773/     D7C :                     	JCN Z, CMDT_NEXT	; skip for PM_READ routine
    3774/     D7C :                     	FIM P7, lo(PM_READ_P0_P1+1)
    3775/     D7C :                     	JMS CMP_P1P7
    3776/     D7C :                     	JCN Z, CMDT_NEXT	; skip for PM_READ routine
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 75 - 2023/04/16 11:22:22


    3777/     D7C :                     
    3778/     D7C :                     	FIM P0, REG16_MON_ADDR
    3779/     D7C :                     	JMS LD_REG16P0_P2P3
    3780/     D7C :                     
    3781/     D7C :                     	CLB
    3782/     D7C :                     	LDM loop(2)
    3783/     D7C :                     	SUB CNT_I
    3784/     D7C :                     	JCN Z, CMDT_WRITE
    3785/     D7C :                     CMDT_READ:
    3786/     D7C :                     	JMS LD_P1_PM16REG16P0_INCREMENT
    3787/     D7C :                     	FIM P0, REG8_MON_TMP2
    3788/     D7C :                     	JMS LD_REG8P0_P1	; REG8(TMP2)=PM(REG_ADDR)
    3789/     D7C :                     	FIM P7, REG8_MON_TMP
    3790/     D7C :                     	JMS LD_P1_REG8P7	; P1 = REG8(TMP) (correct value) 
    3791/     D7C :                     	JMS SUB_REG8P0_P1	; TMP2 = TMP2 - P1
    3792/     D7C :                     	JMS LD_P1_REG8P0	; P1 = TMP2
    3793/     D7C :                     	JMS ISZEROORNOT_P1
    3794/     D7C :                     	JCN Z, CMDT_NEXT	; check OK
    3795/     D7C :                     	JUN CMDT_ERROR
    3796/     D7C :                     CMDT_WRITE:
    3797/     D7C :                     	FIM P7, REG8_MON_TMP
    3798/     D7C :                     	JMS LD_P1_REG8P7
    3799/     D7C :                     	JMS LD_PM16REG16P0_P1
    3800/     D7C :                     CMDT_NEXT:
    3801/     D7C :                     	ISZ P3_LO, CMDT_LOOPL
    3802/     D7C :                     	ISZ P3_HI, CMDT_LOOPL
    3803/     D7C :                     	FIM P1, '\r'
    3804/     D7C :                     	JMS PUTCHAR_P1
    3805/     D7C :                     	LD_P1_P2
    3806/     D7C :                     	JMS PRINTHEX_P1
    3807/     D7C :                     	ISZ P2_LO, CMDT_LOOPH
    3808/     D7C :                     	ISZ P2_HI, CMDT_LOOPH
    3809/     D7C :                     
    3810/     D7C :                     	JMS PRINT_CRLF
    3811/     D7C :                     	ISZ CNT_I, CMDT_LOOP_RW
    3812/     D7C :                     
    3813/     D7C :                     	JMS PRINT_CRLF
    3814/     D7C :                     	JUN CMD_LOOP
    3815/     D7C :                     CMDT_ERROR:
    3816/     D7C :                     	FIM P0, lo(STR_ERROR_MEMTEST)
    3817/     D7C :                     	JMS PRINTSTR_P0
    3818/     D7C :                     	FIM P0, REG16_MON_ADDR
    3819/     D7C :                     	FIM P1, REG16_MON_ADDR
    3820/     D7C :                     	JMS DEC_REG16P0
    3821/     D7C :                     	JMS PRINTHEX_REG16P1
    3822/     D7C :                     	JMS PRINT_CRLF
    3823/     D7C :                     
    3824/     D7C :                     	JUN CMD_LOOP
    3825/     D7C : [3750]               	endif			; USE_MON_CMD_T
    3826/     D7C :                     	
    3827/     D7C :                     ;;;----------------------------------------------------------------------------
    3828/     D7C :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3829/     D7C :                     ;;; The string data sould be located in the same page as the print routine.
    3830/     D7C :                     ;;;----------------------------------------------------------------------------
    3831/     E00 :                     	org 0E00H
    3832/     E00 :                     ;;;----------------------------------------------------------------------------
    3833/     E00 :                     ;;; PRINTSTR_P0
    3834/     E00 :                     ;;; Print a string with a delimiter 00H
    3835/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3836/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 76 - 2023/04/16 11:22:22


    3837/     E00 :                     ;;;----------------------------------------------------------------------------
    3838/     E00 :                     PRINTSTR_P0:
    3839/     E00 : 5B 00               	JMS PUSH_P0
    3840/     E02 : 5B 12               	JMS PUSH_P1
    3841/     E04 :                     PRINTSTRP0_LOOP:
    3842/     E04 : 32                  	FIN P1			; P1=(P0)
    3843/     E05 : A2                  	LD P1_HI
    3844/     E06 : 1C 0B               	JCN ZN, PRINTSTRP0_PUT	; P1_HI!=0 then putchar
    3845/     E08 : A3                  	LD P1_LO
    3846/     E09 : 14 12               	JCN Z, PRINTSTRP0_EXIT	; P1_HI==0 and P1_LO==0 then exit
    3847/     E0B :                     PRINTSTRP0_PUT:
    3848/     E0B : 5C 5F               	JMS PUTCHAR_P1		; putchar(P1)
    3849/     E0D : 71 04               	ISZ P0_LO, PRINTSTRP0_LOOP   ; P0_LO++
    3850/     E0F : 60                  	INC P0_HI
    3851/     E10 : 4E 04               	JUN PRINTSTRP0_LOOP	; print remaining string
    3852/     E12 :                     PRINTSTRP0_EXIT:
    3853/     E12 : 5B 43               	JMS POP_P1
    3854/     E14 : 4B 36               	JUN POP_P0
    3855/     E16 :                     ;;;	BBL 0
    3856/     E16 :                     		
    3857/     E16 :                     	
    3858/     E16 :                     ;;;----------------------------------------------------------------------------
    3859/     E16 :                     ;;; MUL16_P2P3
    3860/     E16 :                     ;;; P2P3 = P2P3*16
    3861/     E16 :                     ;;;----------------------------------------------------------------------------
    3862/     E16 :                     MUL16_P2P3:	
    3863/     E16 : A5                  	LD R5
    3864/     E17 : B4                  	XCH R4			; 100'->1000'
    3865/     E18 : A6                  	LD R6
    3866/     E19 : B5                  	XCH R5			; 10'->100'
    3867/     E1A : A7                  	LD R7
    3868/     E1B : B6                  	XCH R6			; 1'->10'
    3869/     E1C : F0                  	CLB
    3870/     E1D : B7                  	XCH R7			; 0->1'
    3871/     E1E : C0                  	BBL 0
    3872/     E1F :                     
    3873/     E1F :                     ;;;----------------------------------------------------------------------------
    3874/     E1F :                     ;;; String data
    3875/     E1F :                     ;;;----------------------------------------------------------------------------
    3876/     E1F :                     ;;;----------------------------------------------------------------------------
    3877/     E1F :                     ;;; String data for monitor
    3878/     E1F :                     ;;;----------------------------------------------------------------------------
    3879/     E1F :                     STR_OMSG:
    3880/     E1F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004) Tiny Monitor\r\n", 0
              E25 : 20 4D 43 53 2D 34 
              E2B : 20 28 34 30 30 34 
              E31 : 29 20 54 69 6E 79 
              E37 : 20 4D 6F 6E 69 74 
              E3D : 6F 72 0D 0A 00    
    3881/     E42 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3882/     E42 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    3883/     E47 :                     
    3884/     E47 :                     STR_CMDERR:
    3885/     E47 : 3F 0D 0A 00         	data "?\r\n", 0 ;
    3886/     E4B :                     STR_ERROR_UNKNOWN_MEMSPACE:
    3887/     E4B : 3F 4D 45 4D 53 50   	data "?MEMSPACE\r\n", 0
              E51 : 41 43 45 0D 0A 00 
    3888/     E57 :                     STR_ERROR_LOADCOMMAND:
    3889/     E57 : 3F 4C 4F 41 44 20   	data "?LOAD ERROR\r\n", 0
              E5D : 45 52 52 4F 52 0D 
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 77 - 2023/04/16 11:22:22


              E63 : 0A 00             
    3890/     E65 :                     
    3891/     E65 : =>FALSE              	if USE_MON_CMD_T
    3892/     E65 :                     STR_ERROR_MEMTEST:
    3893/     E65 :                     	data "MEMERR\r\n", 0
    3894/     E65 : [3891]               	endif
    3895/     E65 :                     ;;; strings for register command of 4004 monitor
    3896/     E65 :                     ;;; STR_REG0:
    3897/     E65 :                     ;;;	data "AC	SP1111\r\n", 0
    3898/     E65 :                     ;;; STR_REG1:
    3899/     E65 :                     ;;;	data "CY01234567890123\r\n", 0
    3900/     E65 :                     ;;; STR_DATAREG:
    3901/     E65 :                     ;;;	data "0123456789ABCDEF0123\r\n", 0
    3902/     E65 :                     ;;;----------------------------------------------------------------------------
    3903/     E65 :                     ;;; String data for Emulator
    3904/     E65 :                     ;;;----------------------------------------------------------------------------
    3905/     E65 :                     STR_EMU_MESSAGE:
    3906/     E65 : 0D 0A 38 30 38 30   	data "\r\n8080 Emulator on 4004 Ver 2.0\r\n", 0
              E6B : 20 45 6D 75 6C 61 
              E71 : 74 6F 72 20 6F 6E 
              E77 : 20 34 30 30 34 20 
              E7D : 56 65 72 20 32 2E 
              E83 : 30 0D 0A 00       
    3907/     E87 :                     
    3908/     E87 :                     STR_EMU_REGHEADER:
    3909/     E87 : 41 20 20 53 5A 43   	data "A  SZC  BC   DE   HL   SP   PC (+0 +1 +2)BC)DE)HL)SP +1)\r\n", 0
              E8D : 20 20 42 43 20 20 
              E93 : 20 44 45 20 20 20 
              E99 : 48 4C 20 20 20 53 
              E9F : 50 20 20 20 50 43 
              EA5 : 20 28 2B 30 20 2B 
              EAB : 31 20 2B 32 29 42 
              EB1 : 43 29 44 45 29 48 
              EB7 : 4C 29 53 50 20 2B 
              EBD : 31 29 0D 0A 00    
    3910/     EC2 :                     STR_EMU_STOP:
    3911/     EC2 : 0D 0A 53 54 4F 50   	data "\r\nSTOP\r\n", 0
              EC8 : 0D 0A 00          
    3912/     ECB :                     STR_EMU_HLT:
    3913/     ECB : 0D 0A 48 4C 54 0D   	data "\r\nHLT\r\n", 0
              ED1 : 0A 00             
    3914/     ED3 :                     
    3915/     ED3 :                     ;;;---------------------------------------------------------------------------
    3916/     ED3 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3917/     ED3 :                     ;;;---------------------------------------------------------------------------
    3918/     ED3 :                     ;;; READPM_P0
    3919/     ED3 :                     ;;; P1 = (P0)
    3920/     ED3 :                     ;;; input: P0
    3921/     ED3 :                     ;;; output: P1
    3922/     ED3 :                     ;;;---------------------------------------------------------------------------
    3923/     ED3 :                     ;;;	org 0F7EH
    3924/     ED3 :                     ;;; PM_READ_P0_P1:
    3925/     ED3 : 32                  	FIN P1
    3926/     ED4 : C0                  	BBL 0
    3927/     ED5 :                     
    3928/     ED5 :                     	end
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 78 - 2023/04/16 11:22:22


  Symbol Table (* = unused):
  --------------------------

 ACI_P1 :                       4C4 C |  ACI_P1_EXIT :                  4D5 C |
 ACI_P1_NOCARRY :               4D3 C |  ADD_REG16P0_REG16P1 :          8A0 C |
 ADD_REG8P0_P1 :                79C C |  ADI_P1 :                       479 C |
 AND67_L1 :                     6F2 C |  AND67_L2 :                     6FE C |
 AND67_L3 :                     70A C |  AND67_L4 :                     713 C |
 AND_P1_P2 :                    6B5 C |  AND_R6_R7 :                    6E8 C |
 ANI_P1 :                       571 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT0 :                 0 - |
*BANK_PMSELECT1 :                 0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - | *BANK_RAM2 :                      0 - |
 BANK_RAM3 :                      0 - |  BANK_SERIAL :                    0 - |
 CALL_IF0 :                     4A3 C |  CALL_IF1 :                     49C C |
 CALL_P2P3 :                    4B6 C | *CASESENSITIVE :                  0 - |
 CHIP_PMSELECT0 :                 0 - |  CHIP_PMSELECT1 :                40 - |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
*CHIP_RAM2 :                     80 - |  CHIP_RAM3 :                    0C0 - |
 CHIP_SERIAL :                  0C0 - |  CMDDD_L1 :                     0D8 C |
 CMDDD_L2 :                    0D61 C |  CMDDL_L0 :                     0BA C |
 CMDDL_L1 :                     0C2 C | *CMDDL_NEXT :                   0CC C |
 CMDD_L1 :                      0A2 C | *CMDD_L2 :                      0A2 C |
 CMDD_L3 :                      0AA C |  CMDH_EXIT :                    0FB C |
 CMDH_SET :                     0F1 C |  CMDL_CONTINUE :                15B C |
 CMDL_ERROR :                   149 C |  CMDL_EXIT :                    173 C |
 CMDL_L0 :                      11B C |  CMDL_L1 :                      123 C |
 CMDL_L2 :                      141 C |  CMDL_L3 :                      163 C |
 CMDL_L5 :                      171 C |  CMDL_READLOOP :                153 C |
 CMDL_START :                   109 C |  CMDPMC_BANKLOOP :              17D C |
 CMDPMC_L1 :                    187 C |  CMD_LOOP :                      2D C |
 CMP17_EXIT01 :                0D33 C |  CMP17_L1 :                    0D2D C |
 CMP_P1P7 :                    0D27 C |  CMP_REG16P0_REG16P1 :          87C C |
 CODE_003F :                    1F5 C |  CODE_007F :                    1F0 C |
 CODE_00H :                     271 C |  CODE_01H :                     272 C |
 CODE_02H :                     27E C |  CODE_03H :                     286 C |
 CODE_04H :                     28A C |  CODE_05H :                     28E C |
 CODE_06H :                     292 C |  CODE_07H :                     296 C |
 CODE_08H :                     2A6 C |  CODE_09H :                     2A7 C |
 CODE_0AH :                     2AF C |  CODE_0BH :                     2B9 C |
 CODE_0CH :                     2BD C |  CODE_0DH :                     2C1 C |
 CODE_0EH :                     2C5 C |  CODE_0FH :                     2C9 C |
 CODE_10H :                     2D9 C |  CODE_11H :                     2DA C |
 CODE_12H :                     2E6 C |  CODE_13H :                     2EE C |
 CODE_14H :                     2F2 C |  CODE_15H :                     2F6 C |
 CODE_16H :                     2FA C |  CODE_17H :                     2FE C |
 CODE_18H :                     30E C |  CODE_19H :                     30F C |
 CODE_1AH :                     317 C |  CODE_1BH :                     321 C |
 CODE_1CH :                     325 C |  CODE_1DH :                     329 C |
 CODE_1EH :                     32D C |  CODE_1FH :                     331 C |
 CODE_20H :                     341 C |  CODE_21H :                     342 C |
 CODE_22H :                     34E C |  CODE_23H :                     36C C |
 CODE_24H :                     370 C |  CODE_25H :                     374 C |
 CODE_26H :                     378 C |  CODE_27H :                     37C C |
 CODE_28H :                     389 C |  CODE_29H :                     38A C |
 CODE_2AH :                     392 C |  CODE_2BH :                     3AC C |
 CODE_2CH :                     3B0 C |  CODE_2DH :                     3B4 C |
 CODE_2EH :                     3B8 C |  CODE_2FH :                     3BC C |
 CODE_30H :                     3C8 C |  CODE_31H :                     3C9 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 79 - 2023/04/16 11:22:22


 CODE_32H :                     3D5 C |  CODE_33H :                     3E9 C |
 CODE_34H :                     3ED C |  CODE_35H :                     3F9 C |
 CODE_36H :                     405 C |  CODE_37H :                     40B C |
 CODE_38H :                     40D C |  CODE_39H :                     40E C |
 CODE_3AH :                     416 C |  CODE_3BH :                     42A C |
 CODE_3CH :                     42E C |  CODE_3DH :                     434 C |
 CODE_3EH :                     43A C |  CODE_3FH :                     440 C |
 CODE_407F :                    20B C |  CODE_407F_MOV :                230 C |
 CODE_76H :                     267 C |  CODE_80BF :                    20B C |
 CODE_80BF_ARITH_LOGIC :        258 C |  CODE_80FF :                    206 C |
 CODE_C0FF :                    1FD C |  CODE_C0H :                     445 C |
 CODE_C1H :                     449 C |  CODE_C2H :                     44F C |
 CODE_C3H :                     45F C |  CODE_C4H :                     46D C |
 CODE_C5H :                     471 C |  CODE_C6H :                     477 C |
 CODE_C7H :                     481 C |  CODE_C8H :                     487 C |
 CODE_C9H :                     48F C |  CODE_CAH :                     495 C |
 CODE_CALL :                    4AA C |  CODE_CBH :                     499 C |
 CODE_CCH :                     49A C |  CODE_CDH :                     4AA C |
 CODE_CEH :                     4C2 C |  CODE_CFH :                     4D9 C |
 CODE_D0H :                     4DF C |  CODE_D1H :                     4E3 C |
 CODE_D2H :                     4E9 C |  CODE_D3H :                     4ED C |
 CODE_D4H :                     4F1 C |  CODE_D5H :                     4F5 C |
 CODE_D6H :                     4FB C |  CODE_D7H :                     505 C |
 CODE_D8H :                     50B C |  CODE_D9H :                     50F C |
 CODE_DAH :                     510 C |  CODE_DBH :                     514 C |
 CODE_DCH :                     518 C |  CODE_DCR :                     436 C |
 CODE_DDH :                     51C C |  CODE_DEH :                     51D C |
 CODE_DFH :                     52D C |  CODE_E0H :                     533 C |
 CODE_E1H :                     537 C |  CODE_E2H :                     53D C |
 CODE_E3H :                     541 C |  CODE_E4H :                     565 C |
 CODE_E5H :                     569 C |  CODE_E6H :                     56F C |
 CODE_E7H :                     581 C |  CODE_E8H :                     587 C |
 CODE_E9H :                     58B C |  CODE_EAH :                     58F C |
 CODE_EBH :                     593 C |  CODE_ECH :                     5A1 C |
 CODE_EDH :                     5A5 C |  CODE_EEH :                     5A6 C |
 CODE_EFH :                     5B8 C |  CODE_F0H :                     5BE C |
 CODE_F1H :                     5C2 C |  CODE_F2H :                     5D0 C |
 CODE_F3H :                     5D4 C |  CODE_F4H :                     5D5 C |
 CODE_F5H :                     5D9 C |  CODE_F6H :                     5EB C |
 CODE_F7H :                     5FD C |  CODE_F8H :                     603 C |
 CODE_F9H :                     607 C |  CODE_FAH :                     60D C |
 CODE_FBH :                     611 C |  CODE_FCH :                     612 C |
 CODE_FDH :                     616 C |  CODE_FEH :                     617 C |
 CODE_FFH :                     627 C |  CODE_INR :                     430 C |
 CODE_JMP :                     45F C |  CODE_MOV_L1 :                  238 C |
 CODE_MOV_WRITE_M_TO_PM :       254 C |  CODE_MVI :                     43C C |
 CODE_NOT_NOP :                 1FD C |  CODE_POP_REG8P2P3 :            5C6 C |
 CODE_PUSH_REG8P2P3 :           5DD C |  CODE_RET :                     48F C |
 COMMAND_C :                    17B C |  COMMAND_D :                     92 C |
 COMMAND_DD :                   0CE C |  COMMAND_DL :                   0B0 C |
 COMMAND_E :                    195 C |  COMMAND_G :                    0E7 C |
 COMMAND_H :                    0E9 C |  COMMAND_L :                    109 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CPI_P1 :                       619 C |  CTOI_09 :                     0D24 C |
 CTOI_P1 :                     0D1B C | *DATE :                "2023/04/16" - |
 DEBUG_TRACE :                    0 - |  DEC_P1 :                      0CCA C |
 DEC_P1_EXIT :                 0CD2 C |  DEC_REG16P0 :                  86B C |
 DEC_REG8P1 :                   7BD C |  EMULATE_IN_P1 :                981 C |
 EMULATE_OUT_P1 :               969 C |  EMU_DEBUG :                    1BB C |
 EMU_EXIT :                     1AB C |  EMU_EXIT_LOOP :                1AD C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 80 - 2023/04/16 11:22:22


 EMU_IN_EXIT_TO_MONITOR :       9AC C |  EMU_IN_P1_L1 :                 989 C |
 EMU_IN_P1_L2 :                 991 C |  EMU_IN_STOPCODE :                3 - |
 EMU_IN_UARTRC :                9B2 C |  EMU_IN_UARTRC_EXIT :           9BC C |
 EMU_IN_UARTRC_VALUE :          0FF - |  EMU_IN_UARTRD :                992 C |
 EMU_IN_UARTRD_SKIPGETCHAR :    99C C |  EMU_LOOP :                     1A5 C |
 EMU_OUT_P1_L1 :                971 C |  EMU_OUT_P1_L2 :                979 C |
 EMU_OUT_UARTRC :               980 C |  EMU_OUT_UARTRD :               97A C |
 EMU_PRINTREG_AND_EXIT :        26B C |  EMU_PRINT_REGISTERS :          8EA C |
 EMU_PRINT_REGISTERS_NO_HEADER :                                        8EE C |
*EMU_START :                    199 C |  EMU_STEP :                     1D4 C |
 EMU_STEP_EXIT :                1E4 C |  EMU_STEP_LOOP :                1D4 C |
 EMU_UARTRC :                     1 - |  EMU_UARTRD :                     0 - |
 EMU_VIEWREG :                  1C0 C |  EMU_VIEWREG_EXIT :             1CE C |
 EMU_VIEWREG_LOOP :             1C4 C |  EXEC_CODE :                    1E6 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                  0C3F C |  GETCHAR_L2 :                  0C44 C |
 GETCHAR_L3 :                  0C47 C |  GETCHAR_L4 :                  0C4E C |
 GETCHAR_L5 :                  0C53 C |  GETCHAR_L6 :                  0C56 C |
 GETCHAR_OK :                  0C5E C |  GETCHAR_P1 :                  0C37 C |
 GETFLAG_C :                    640 C |  GETFLAG_C_1 :                  648 C |
 GETFLAG_P :                    67C C |  GETFLAG_P_0 :                  68B C |
 GETFLAG_S :                    637 C |  GETFLAG_S_EXIT1 :              63F C |
 GETFLAG_Z :                    62D C |  GETFLAG_Z_EXIT1 :              636 C |
 GETHEXBYTE_L1 :               0C1F C |
 GETHEXBYTE_P1_PM16REG16P0_INCREMENT :                                 0C18 C |
 GETHEXZBYTE_1DIGIT_EXIT :     0C31 C |  GETHEX_EXIT :                  8E6 C |
 GETHEX_LOOP :                  8D8 C |
 GETHEX_REG16P1_PM16REG16P0_INCREMENT :                                 8C9 C |
 GETHEX_START :                 8D4 C |  GETLINE_BS :                  0BE2 C |
 GETLINE_DO_BS :               0BEA C |  GETLINE_EXIT :                0BFE C |
 GETLINE_INSERTCHAR :          0BF6 C |  GETLINE_L1 :                  0BDA C |
*GETLINE_L1_NEXT :             0BEC C |  GETLINE_LOOP :                0BCC C |
 GETLINE_PM16REG16P0 :         0BC4 C |  GETSRC_LOAD_M :                21E C |
 GETSRC_SAVE_SRCVALUE :         224 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INC_P1 :                      0CBF C |  INC_P1_EXIT :                 0CC9 C |
 INC_REG16P0 :                  85B C |  INC_REG8P1 :                   7AD C |
 INIT_SERIAL :                 0C7F C | *INSUPMODE :                      0 - |
 ISALPHA_FALSE :               0CEF C | *ISALPHA_L1 :                  0CD3 C |
 ISALPHA_L10 :                 0CDA C |  ISALPHA_L2 :                  0CE1 C |
 ISALPHA_L20 :                 0CE8 C |  ISALPHA_P1 :                  0CD3 C |
 ISCRLF_EXIT0 :                0D49 C |  ISCRLF_EXIT1 :                0D4A C |
 ISCRLF_P1 :                   0D3C C |  ISHEX_FALSE :                 0D1A C |
 ISHEX_L00 :                   0CF7 C |  ISHEX_L1 :                    0CFE C |
 ISHEX_L10 :                   0D05 C |  ISHEX_L2 :                    0D0C C |
 ISHEX_L20 :                   0D13 C |  ISHEX_P1 :                    0CF0 C |
 ISZEROORNOT_EXIT1 :           0D3B C |  ISZEROORNOT_P1 :              0D34 C |
 JIN_P1_CODE_013F_C0FF :       0A00 C |  JIN_P2_CODE_80BF :             9EF C |
 JMP_IF0 :                      451 C |  JMP_IF1 :                      458 C |
*L0 :                            3F C |  L1 :                            47 C |
*L10 :                           8C C |  L2 :                            4F C |
*L3 :                            4F C |  L4 :                            57 C |
 L5 :                            5F C |  L6 :                            67 C |
 L6_CONTINUOUS :                 83 C |  L6_SETMODE :                    86 C |
 L6_VIEWREG :                    7A C |  L7 :                            8C C |
 LDREG16P6P7_LOOP :             852 C |  LD_P1_PM16REG16P0_INCREMENT : 0B5D C |
 LD_P1_REG8P0 :                 811 C |  LD_P1_REG8P1 :                 817 C |
 LD_P1_REG8P2 :                 81D C |  LD_P1_REG8P3 :                 823 C |
 LD_P1_REG8P7 :                 809 C |  LD_P2P3_REG16P1 :              8B5 C |
 LD_PM16REG16P0_P1 :           0B81 C |  LD_REG16P0_P2P3 :              796 C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 81 - 2023/04/16 11:22:22


 LD_REG16P0_REG16P1 :           76C C |  LD_REG16P1_P2P3 :              790 C |
 LD_REG16P1_REG16P0 :           776 C |  LD_REG16P6_REG16P7 :           850 C |
 LD_REG16P7_P2P3 :              780 C |  LD_REG8P0_P1 :                 7F1 C |
*LD_REG8P0_REG8P1 :             7DE C |  LD_REG8P2_P1 :                 7FD C |
 LD_REG8P3_P1 :                 7F7 C |  LD_REG8P6_REG8P7 :             7E6 C |
 LD_REG8P7_P1 :                 801 C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                  0E16 C | *NESTMAX :                      100 - |
 OR67_L1 :                      74A C |  OR67_L2 :                      756 C |
 OR67_L3 :                      762 C |  OR67_L4 :                      76B C |
 ORI_P1 :                       5ED C |  OR_P1_P2 :                     6D7 C |
 OR_R6_R7 :                     740 C | *PADDING :                        1 - |
 PFLAG_CNT1 :                   650 C |  PFLAG_CNT2 :                   654 C |
 PFLAG_CNT3 :                   658 C |  PFLAG_CNT4 :                   65C C |
 PFLAG_CNT5 :                   661 C |  PFLAG_CNT6 :                   665 C |
 PFLAG_CNT7 :                   669 C |  PFLAG_CNT8 :                   66D C |
 PM16_LINEBUF :               0FD00 - | *PM16_MEMSTART :                  0 - |
 PM_INIT_BANK :                0BAD C |  PM_INIT_HLOOP :                  9 C |
 PM_INIT_LLOOP :                 0B C |  PM_RAM_START :                0F00 - |
 PM_READ_P0_P1 :               0FFE - |  PM_SELECTPMB_P1 :             0BB9 C |
 PM_WRITE_P0_P1 :              0BA1 C |  PM_WRITE_P6_P7 :              0BA7 C |
 POP_P0 :                      0B36 C |  POP_P1 :                      0B43 C |
 POP_P2 :                      0B50 C |  PRINTACC_L1 :                 0CBC C |
 PRINTHEX_P1 :                 0C85 C |  PRINTHEX_REG16P1 :             829 C |
 PRINTSTRP0_EXIT :             0E12 C |  PRINTSTRP0_LOOP :             0E04 C |
 PRINTSTRP0_PUT :              0E0B C |  PRINTSTR_EXIT :               0C16 C |
 PRINTSTR_LOOP :               0C0C C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM16REG16P0 :        0C0A C |  PRINT_ACC :                   0CB4 C |
 PRINT_CR :                    0CAC C |  PRINT_CRLF :                  0CA0 C |
 PRINT_DATARAM_P0 :            0D57 C |  PRINT_LF :                    0CB0 C |
 PRINT_SPC :                   0C98 C |  PUSH_P0 :                     0B00 C |
 PUSH_P1 :                     0B12 C |  PUSH_P2 :                     0B24 C |
 PUTCHAR_L1 :                  0C67 C |  PUTCHAR_L2 :                  0C76 C |
 PUTCHAR_P1 :                  0C5F C |  RAM23TYPE :               "4002-2" - |
 REG16_ADDR :                    1C - |  REG16_ADD_LOOP :               8A7 C |
 REG16_BC :                      0C - |  REG16_CMP_EXIT0 :              89F C |
 REG16_CMP_LOOP :               885 C |  REG16_CMP_NEXT :               892 C |
 REG16_DE :                       8 - |  REG16_DEC_EXIT :               879 C |
 REG16_DEC_LOOP :               870 C |  REG16_HL :                       4 - |
 REG16_INC_EXIT :               868 C |  REG16_INC_LOOP :               85F C |
 REG16_MON_ADDR :                2C - |  REG16_MON_INDEX :               28 - |
*REG16_MON_PMBANK :              34 - |  REG16_MON_TMP :                 30 - |
 REG16_PC :                      14 - |  REG16_SP :                      18 - |
*REG16_STACK_40H :               40 - | *REG16_STACK_7CH :               7C - |
 REG4_EMU_MODE :                 24 - |  REG4_FLAG_1P1C :                10 - |
 REG4_FLAG_SZBH :                11 - |  REG8_A :                         0 - |
 REG8_ADDRH :                    1E - |  REG8_ADDRL :                    1C - |
 REG8_B :                        0E - |  REG8_C :                        0C - |
 REG8_D :                        0A - |  REG8_DEC_EXIT :                7CC C |
 REG8_E :                         8 - |  REG8_EMU_KEYBUF :               20 - |
 REG8_FLAG :                     10 - |  REG8_H :                         6 - |
 REG8_INC_EXIT :                7BC C |  REG8_L :                         4 - |
 REG8_M :                         2 - |  REG8_MON_MEMSPACE :             38 - |
*REG8_MON_RESERVED :             3A - | *REG8_MON_TMP :                  30 - |
*REG8_MON_TMP2 :                 32 - |  REG8_PCH :                      16 - |
 REG8_PCL :                      14 - |  REG8_SPH :                      1A - |
 REG8_SPL :                      18 - |  REG8_SRC :                      12 - |
*RELAXED :                        0 - |  RET_IF0 :                      48C C |
 RET_IF1 :                      489 C |  SBI_P1 :                       51F C |
 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 82 - 2023/04/16 11:22:22


 SBI_P1_NOCARRY :               525 C |  SETFLAG_C_0 :                  68E C |
 SETFLAG_C_1 :                  697 C |  SETFLAG_C_CY :                 68C C |
 SETFLAG_P_P1 :                 649 C |  SETFLAG_ZSP_P1 :               6A6 C |
 SETFLAG_ZSP_REG8P0 :           6A0 C |  SETFLAG_ZSP_REG8P1 :           6A4 C |
 STACK_INIT :                    80 - |  STR_CMDERR :                  0E47 C |
 STR_EMU_HLT :                 0ECB C |  STR_EMU_MESSAGE :             0E65 C |
 STR_EMU_REGHEADER :           0E87 C |  STR_EMU_STOP :                0EC2 C |
 STR_ERROR_LOADCOMMAND :       0E57 C |  STR_ERROR_UNKNOWN_MEMSPACE :  0E4B C |
 STR_OMSG :                    0E1F C |  STR_VFD_INIT :                0E42 C |
 SUB_REG8P0_P1 :                7CD C |  SUI_P1 :                       4FD C |
*TIME :                  "11:22:22" - |  TOUPPER_P1 :                  0D4B C |
 TOUPPER_P1_EXIT :             0D56 C | *TRUE :                           1 - |
 USE_EMU_FLAG_P :                 1 - |  USE_MON_CMD_DP :                 0 - |
 USE_MON_CMD_T :                  0 - | *VERSION :                     142F - |
 XOR67_L1 :                     71E C |  XOR67_L2 :                     72A C |
 XOR67_L3 :                     736 C |  XOR67_L4 :                     73F C |
 XOR_P1_P2 :                    6C6 C |  XOR_R6_R7 :                    714 C |
 XRI_P1 :                       5A8 C |

    502 symbols
     42 unused symbols

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 83 - 2023/04/16 11:22:22


  Register Definitions (* = unused):
  ----------------------------------

 CNT --> R5P                          |  CNT_HI --> R10                      
 CNT_I --> R10                        |  CNT_J --> R11                       
 CNT_LO --> R11                       |  P0 --> R0P                          
 P0_HI --> R0                         |  P0_LO --> R1                        
 P1 --> R1P                           |  P1_HI --> R2                        
 P1_LO --> R3                         |  P2 --> R2P                          
 P2_HI --> R4                         |  P2_LO --> R5                        
 P3 --> R3P                           |  P3_HI --> R6                        
 P3_LO --> R7                         |  P4 --> R4P                          
*P4_HI --> R8                         | *P4_LO --> R9                        
 P5 --> R5P                           | *P5_HI --> R10                       
*P5_LO --> R11                        |  P6 --> R6P                          
 P6_HI --> R12                        |  P6_LO --> R13                       
 P7 --> R7P                           |  P7_HI --> R14                       
 P7_LO --> R15                        | *R10 --> R10                         
*R10R11 --> R5P                       | *R11 --> R11                         
*R12 --> R12                          | *R12R13 --> R6P                      
*R13 --> R13                          | *R14 --> R14                         
*R14R15 --> R7P                       | *R15 --> R15                         
 SP --> R4P                           |  SP_HI --> R8                        
 SP_LO --> R9                        

     41 definitions

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 84 - 2023/04/16 11:22:22


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_ACC_REG4P7                        
LD_CNT_P1                             | LD_P0_P1                             
LD_P0_P3                              | LD_P1_CNT                            
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P2_P1                             
LD_P2_P3                              | LD_P3_P0                             
LD_P3_P1                              | LD_P3_P2                             
LD_P6_P0                              | LD_P6_P1                             
LD_P6_SP                              | LD_P7_P0                             
LD_P7_P1                              | LD_P7_P2                             
LD_P7_P3                              | LD_REG4P7_ACC                        
POPP                                  | PUSHP                                

     24 macros

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 85 - 2023/04/16 11:22:22


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File emu.asm - Page 86 - 2023/04/16 11:22:22


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   4317 lines source file
   4593 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
